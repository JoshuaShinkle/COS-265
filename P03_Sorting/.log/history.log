--[ 2021.10.19.10.07.14.450.0 ]--
NewLogger: P03_Sorting
Version: 1.5
--[ 2021.10.19.10.07.14.460.0 ]--
InitTree:
/src/algs4.jar
/src/stdlib.jar
/src/Bubble.java
/src/EdgeCases.java
/src/MedianOfN.java
/src/LinkedList.java
/src/DoublingTest.java
/src/QuickSortMedian.java
/src/QuickSortMedian3.java
/src/QuickSortMedian5.java
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/uiDesigner.xml
/.cos265
/readme.html
/P03_Sorting.iml

--[ 2021.10.19.10.07.14.461.0 ]--
InitFile: /src/LinkedList.java
import java.util.Iterator;

public class LinkedList<Item extends Comparable<Item>> implements Iterable<Item> {
    private Node first = null;
    private int count = 0;

    private class Node {
        final Item item;    // cannot change item once it is set in constructor
        Node next;          // can change next, though

        public Node(Item i, Node n) {
            item = i;
            next = n;
        }
    }

    public LinkedList() { }

    public LinkedList(Item[] fromList) {
        for(Item item : fromList) insert(item);
    }

    public void insert(Item item) {
        first = new Node(item, first);
        count++;
    }

    public Item remove() {
        Item item = first.item;
        first = first.next;
        count--;
        return item;
    }

    public boolean isEmpty() { return count == 0; }

    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            Node current = first;

            @Override
            public boolean hasNext() {
                return current != null;
            }

            @Override
            public Item next() {
                Item item = current.item;
                current = current.next;
                return item;
            }
        };
    }

    /***********************************************************************
     * Rearranges the linked list in ascending order, using the natural order
     * and mergesort.
     ***********************************************************************/
    
    public void sort() {
    }

    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = {0.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
    }
}

--[ 2021.10.19.10.07.14.461.1 ]--
InitFile: /src/QuickSortMedian5.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian5 extends QuickSortMedian {

    public static class MedianOf5 extends MedianOfN {
        public MedianOf5() {
            // tell QuickSortMedian.MedianOfN we will find the median of 5 items
            super(5);
        }

        /***********************************************************
         * Determines which index in parameter indices points to
         * the median value in parameter a
         * @param a the array containing values
         * @param indices the array containing indices into a
         * @return the index of median value
         ***********************************************************/
        public int median(Comparable[] a, int[] indices) {
            // get values at specified indices
            int i0 = indices[0];
            int i1 = indices[1];
            int i2 = indices[2];
            int i3 = indices[3];
            int i4 = indices[4];
            Comparable a0 = a[i0];
            Comparable a1 = a[i1];
            Comparable a2 = a[i2];
            Comparable a3 = a[i3];
            Comparable a4 = a[i4];

            // find median in a0,a1,a2,a3,a4, and return respective index
            // if a0 is median, return i0
            // if a1 is median, return i1
            // etc.

            return i0;
        }
    }

    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/
    public static void sort(Comparable[] a) {
        MedianOf5 median = new MedianOf5();
        QuickSortMedian.sort(a, median);
    }


    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = {0.0};
        QuickSortMedian5.sort(a);
    }
}

--[ 2021.10.19.10.07.14.462.0 ]--
InitFile: /src/Bubble.java
public class Bubble {

    public static void sort(Comparable[] a) {
        boolean sorted = false;
        while(!sorted) {
            sorted = true;
            for(int i = 0; i < a.length - 1; i++)
                if(less(a[i + 1], a[i])) {
                    sorted = false;
                    exch(a, i, i + 1);
                }
        }
    }

    /***********************************************************************
     *  Helper sorting functions
     ***********************************************************************/

    // is v < w ?
    private static boolean less(Comparable v, Comparable w) {
        return (v.compareTo(w) < 0);
    }

    // exchange a[i] and a[j]
    private static void exch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }

    /***********************************************************************
     *  main() function is used to experimentally verify bubble sort works
     *  - generate a Double array
     *  - fill array with random values
     *  - sort
     *  - assert that each value is smaller than or equal to next value
     ***********************************************************************/

    public static void main(String[] args) {
        int N = 1000;
        Double[] a = new Double[N];
        for(int i = 0; i < N; i++) a[i] = StdRandom.uniform();
        Bubble.sort(a);
        for(int i = 0; i < N-1; i++) assert a[i] <= a[i+1];
    }
}

--[ 2021.10.19.10.07.14.463.0 ]--
InitFile: /.cos265


--[ 2021.10.19.10.07.14.463.1 ]--
InitFile: /src/QuickSortMedian3.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian3 extends QuickSortMedian {

    public static class MedianOf3 extends MedianOfN {
        public MedianOf3() {
            // tell QuickSortMedian.MedianOfN we will find the median of 3 items
            super(3);
        }

        /***********************************************************
         * Determines which index in parameter indices points to
         * the median value in parameter a
         * @param a the array containing values
         * @param indices the array containing indices into a
         * @return the index of median value
         ***********************************************************/
        public int median(Comparable[] a, int[] indices) {
            // get values at specified indices
            int i0 = indices[0];
            int i1 = indices[1];
            int i2 = indices[2];
            Comparable a0 = a[i0];
            Comparable a1 = a[i1];
            Comparable a2 = a[i2];

            // find median in a0,a1,a2, and return respective index
            // if a0 is median, return i0
            // if a1 is median, return i1
            // if a2 is median, return i2

            return i0;
        }
    }


    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/
    public static void sort(Comparable[] a) {
        MedianOf3 median = new MedianOf3();
        sort(a, median);
    }

    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = {0.0};
        QuickSortMedian3.sort(a);
    }
}

--[ 2021.10.19.10.07.14.464.0 ]--
InitFile: /src/QuickSortMedian.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian {

    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/

    public static void sort(Comparable[] a, MedianOfN median) {
        sort(a, median, 0, a.length - 1);
    }

    // quicksort the subarray from a[lo] to a[hi]
    private static void sort(Comparable[] a, MedianOfN median, int lo, int hi) {
        if(hi <= lo) return;
        int j = partition(a, median, lo, hi);   // partition data into parts, returning pivot index
        sort(a, median, lo, j-1);   // recursively sort lower part
        sort(a, median, j+1, hi);   // recursively sort higher part
    }

    // partition the subarray a[lo..hi] so that a[lo..j-1] <= a[j] <= a[j+1..hi]
    // and return the index j.  note: v = a[j]
    private static int partition(Comparable[] a, MedianOfN median, int lo, int hi) {
        int i = lo;
        int j = hi + 1;

        int k = median.median(a, lo, hi);   // determine position of a pivot
        exch(a, lo, k);                     // move pivot to lo position
        Comparable v = a[lo];               // v is pivot value

        while(true) {

            // find item on lo to swap
            while(less(a[++i], v))
                if(i == hi) break;

            // find item on hi to swap
            while(less(v, a[--j]))
                if(j == lo) break;      // redundant since a[lo] acts as sentinel

            // check if pointers cross
            if(i >= j) break;

            exch(a, i, j);
        }

        // put partitioning item v at a[j]
        exch(a, lo, j);

        // now, a[lo .. j-1] <= a[j] <= a[j+1 .. hi]
        return j;
    }


    /***********************************************************************
     *  Helper sorting functions
     ***********************************************************************/

    // is v < w ?
    private static boolean less(Comparable v, Comparable w) {
        return (v.compareTo(w) < 0);
    }

    // exchange a[i] and a[j]
    private static void exch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }


    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {

    }
}

--[ 2021.10.19.10.07.14.465.0 ]--
InitFile: /P03_Sorting.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.19.10.07.14.465.1 ]--
InitFile: /src/EdgeCases.java
public class EdgeCases {
    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = { 0.0 };

        Bubble.sort(a);     // bubble sort
        Selection.sort(a);  // selection sort
        Insertion.sort(a);  // insertion sort
        Shell.sort(a);      // Shellsort
        Quick.sort(a);      // quicksort
    }
}

--[ 2021.10.19.10.07.14.466.0 ]--
InitFile: /src/DoublingTest.java
public class DoublingTest {
    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = { 0.0 };

        Selection.sort(a);  // selection sort
        Insertion.sort(a);  // insertion sort
        Shell.sort(a);      // Shellsort
    }
}

--[ 2021.10.19.10.07.14.466.1 ]--
InitFile: /src/MedianOfN.java
public abstract class MedianOfN {
    private int N;
    private int[] indices;

    public MedianOfN(int N) {
        this.N = N;
        indices = new int[N];
    }

    public abstract int median(Comparable[] a, int[] indices);

    public int median(Comparable[] a, int lo, int hi) {
        // if hi and lo are "close enough", simply return lo
        if(hi - lo + 1 < N) return lo;
        // choose N random indices in [lo, hi]
        for(int i = 0; i < N; i++) indices[i] = StdRandom.uniform(lo, hi + 1);
        return median(a, indices);
    }
}

--[ 2021.10.19.10.07.15.761.0 ]--
UpdateTree (AD): 1 0
+ /.log/history.log

--[ 2021.10.19.10.07.28.031.0 ]--
UpdateTree (AD): 1 0
+ /.idea/runConfigurations.xml

--[ 2021.10.24.20.11.55.861.0 ]--
NewLogger: P03_Sorting
Version: 1.5
--[ 2021.10.24.20.11.55.958.0 ]--
InitTree:
/out/production/P03_Sorting/algs4.jar
/out/production/P03_Sorting/stdlib.jar
/out/production/P03_Sorting/Bubble.class
/out/production/P03_Sorting/EdgeCases.class
/out/production/P03_Sorting/MedianOfN.class
/out/production/P03_Sorting/LinkedList.class
/out/production/P03_Sorting/DoublingTest.class
/out/production/P03_Sorting/LinkedList$1.class
/out/production/P03_Sorting/LinkedList$Node.class
/out/production/P03_Sorting/QuickSortMedian.class
/out/production/P03_Sorting/QuickSortMedian3.class
/out/production/P03_Sorting/QuickSortMedian5.class
/out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
/out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
/src/algs4.jar
/src/stdlib.jar
/src/Bubble.java
/src/EdgeCases.java
/src/MedianOfN.java
/src/LinkedList.java
/src/DoublingTest.java
/src/QuickSortMedian.java
/src/QuickSortMedian3.java
/src/QuickSortMedian5.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/runConfigurations.xml
/.cos265
/readme.html
/P03_Sorting.iml

--[ 2021.10.24.20.11.55.958.1 ]--
InitFile: /src/LinkedList.java
import java.util.Iterator;

public class LinkedList<Item extends Comparable<Item>> implements Iterable<Item> {
    private Node first = null;
    private int count = 0;

    private class Node {
        final Item item;    // cannot change item once it is set in constructor
        Node next;          // can change next, though

        public Node(Item i, Node n) {
            item = i;
            next = n;
        }
    }

    public LinkedList() { }

    public LinkedList(Item[] fromList) {
        for(Item item : fromList) insert(item);
    }

    public void insert(Item item) {
        first = new Node(item, first);
        count++;
    }

    public Item remove() {
        Item item = first.item;
        first = first.next;
        count--;
        return item;
    }

    public boolean isEmpty() { return count == 0; }

    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            Node current = first;

            @Override
            public boolean hasNext() {
                return current != null;
            }

            @Override
            public Item next() {
                Item item = current.item;
                current = current.next;
                return item;
            }
        };
    }

    /***********************************************************************
     * Rearranges the linked list in ascending order, using the natural order
     * and mergesort.
     ***********************************************************************/
    
    public void sort() {
        first = sort(first, count);
    }

    private Node sort(Node head, int len) {
        if (len <= 1) return head;
        Node mid = head;
        for (int i=0; i<len/2-1; i++) {
            mid = mid.next;
        }
        Node tmp = mid;
        mid = mid.next;
        tmp.next = null;
        head = sort(head, len/2);
        mid = sort(mid, len-len/2);
        return merge(head, mid);
    }

    private Node merge(Node low, Node high) {
        Node head = null;
        Node last = null;
        while (low != null && high != null) {
            if (low.item.compareTo(high.item) < 0) {
                if (head == null) {
                    head = low;
                } else {
                    last.next = low;
                }
                last = low;
                low = low.next;
            } else {
                if (head == null) {
                    head = high;
                } else {
                    last.next = high;
                }
                last = high;
                high = high.next;
            }
        }
        if (low == null) {
            last.next = high;
        } else {
            last.next = low;
        }
        return head;
    }

    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void evenList() {
        Double[] a = {5.0, 1.0, 7.0, 3.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void oddList() {
        Double[] a = {5.0, 1.0, 7.0, 3.0, 0.5};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void alreadySorted() {
        Double[] a = {1.0, 2.0, 3.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void lowRunsOut() {
        Double[] a = {1.0, 2.0, 3.0, 7.0, 8.0, 9.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void highRunsOut() {
        Double[] a = {7.0, 8.0, 9.0, 1.0, 2.0, 3.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void lowHighEqual() {
        Double[] a = {4.0, 3.0, 2.0, 4.0, 3.0, 2.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void main(String[] args) {
        evenList();
        StdOut.println();
        oddList();
        StdOut.println();
        alreadySorted();
        StdOut.println();
        highRunsOut();
        StdOut.println();
        lowRunsOut();
        StdOut.println();
        lowHighEqual();
    }
}

--[ 2021.10.24.20.11.55.959.0 ]--
InitFile: /src/QuickSortMedian5.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian5 extends QuickSortMedian {

    public static class MedianOf5 extends MedianOfN {
        public MedianOf5() {
            // tell QuickSortMedian.MedianOfN we will find the median of 5 items
            super(5);
        }

        /***********************************************************
         * Determines which index in parameter indices points to
         * the median value in parameter a
         * @param a the array containing values
         * @param indices the array containing indices into a
         * @return the index of median value
         ***********************************************************/
        public int median(Comparable[] a, int[] indices) {
            // get values at specified indices
            int i0 = indices[0];
            int i1 = indices[1];
            int i2 = indices[2];
            int i3 = indices[3];
            int i4 = indices[4];
            Comparable a0 = a[i0];
            Comparable a1 = a[i1];
            Comparable a2 = a[i2];
            Comparable a3 = a[i3];
            Comparable a4 = a[i4];

            // find median in a0,a1,a2,a3,a4, and return respective index
            // if a0 is median, return i0
            // if a1 is median, return i1
            // etc.

            return i0;
        }
    }

    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/
    public static void sort(Comparable[] a) {
        MedianOf5 median = new MedianOf5();
        QuickSortMedian.sort(a, median);
    }


    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = {0.0};
        QuickSortMedian5.sort(a);
    }
}

--[ 2021.10.24.20.11.55.960.0 ]--
InitFile: /.cos265


--[ 2021.10.24.20.11.55.960.1 ]--
InitFile: /src/QuickSortMedian3.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian3 extends QuickSortMedian {

    public static class MedianOf3 extends MedianOfN {
        public MedianOf3() {
            // tell QuickSortMedian.MedianOfN we will find the median of 3 items
            super(3);
        }

        /***********************************************************
         * Determines which index in parameter indices points to
         * the median value in parameter a
         * @param a the array containing values
         * @param indices the array containing indices into a
         * @return the index of median value
         ***********************************************************/
        public int median(Comparable[] a, int[] indices) {
            // get values at specified indices
            int i0 = indices[0];
            int i1 = indices[1];
            int i2 = indices[2];
            Comparable a0 = a[i0];
            Comparable a1 = a[i1];
            Comparable a2 = a[i2];

            // find median in a0,a1,a2, and return respective index
            // if a0 is median, return i0
            // if a1 is median, return i1
            // if a2 is median, return i2

            return i0;
        }
    }


    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/
    public static void sort(Comparable[] a) {
        MedianOf3 median = new MedianOf3();
        sort(a, median);
    }

    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = {0.0};
        QuickSortMedian3.sort(a);
    }
}

--[ 2021.10.24.20.11.55.961.0 ]--
InitFile: /src/EdgeCases.java
public class EdgeCases {
    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = { 0.0 };

        Bubble.sort(a);     // bubble sort
        Selection.sort(a);  // selection sort
        Insertion.sort(a);  // insertion sort
        Shell.sort(a);      // Shellsort
        Quick.sort(a);      // quicksort
    }
}

--[ 2021.10.24.20.11.55.961.1 ]--
InitFile: /src/DoublingTest.java
public class DoublingTest {
    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = { 0.0 };

        Selection.sort(a);  // selection sort
        Insertion.sort(a);  // insertion sort
        Shell.sort(a);      // Shellsort
    }
}

--[ 2021.10.24.20.11.55.961.2 ]--
InitFile: /src/Bubble.java
public class Bubble {

    public static void sort(Comparable[] a) {
        boolean sorted = false;
        while(!sorted) {
            sorted = true;
            for(int i = 0; i < a.length - 1; i++)
                if(less(a[i + 1], a[i])) {
                    sorted = false;
                    exch(a, i, i + 1);
                }
        }
    }

    /***********************************************************************
     *  Helper sorting functions
     ***********************************************************************/

    // is v < w ?
    private static boolean less(Comparable v, Comparable w) {
        return (v.compareTo(w) < 0);
    }

    // exchange a[i] and a[j]
    private static void exch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }

    /***********************************************************************
     *  main() function is used to experimentally verify bubble sort works
     *  - generate a Double array
     *  - fill array with random values
     *  - sort
     *  - assert that each value is smaller than or equal to next value
     ***********************************************************************/

    public static void main(String[] args) {
        int N = 1000;
        Double[] a = new Double[N];
        for(int i = 0; i < N; i++) a[i] = StdRandom.uniform();
        Bubble.sort(a);
        for(int i = 0; i < N-1; i++) assert a[i] <= a[i+1];
    }
}

--[ 2021.10.24.20.11.55.962.0 ]--
InitFile: /src/QuickSortMedian.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian {

    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/

    public static void sort(Comparable[] a, MedianOfN median) {
        sort(a, median, 0, a.length - 1);
    }

    // quicksort the subarray from a[lo] to a[hi]
    private static void sort(Comparable[] a, MedianOfN median, int lo, int hi) {
        if(hi <= lo) return;
        int j = partition(a, median, lo, hi);   // partition data into parts, returning pivot index
        sort(a, median, lo, j-1);   // recursively sort lower part
        sort(a, median, j+1, hi);   // recursively sort higher part
    }

    // partition the subarray a[lo..hi] so that a[lo..j-1] <= a[j] <= a[j+1..hi]
    // and return the index j.  note: v = a[j]
    private static int partition(Comparable[] a, MedianOfN median, int lo, int hi) {
        int i = lo;
        int j = hi + 1;

        int k = median.median(a, lo, hi);   // determine position of a pivot
        exch(a, lo, k);                     // move pivot to lo position
        Comparable v = a[lo];               // v is pivot value

        while(true) {

            // find item on lo to swap
            while(less(a[++i], v))
                if(i == hi) break;

            // find item on hi to swap
            while(less(v, a[--j]))
                if(j == lo) break;      // redundant since a[lo] acts as sentinel

            // check if pointers cross
            if(i >= j) break;

            exch(a, i, j);
        }

        // put partitioning item v at a[j]
        exch(a, lo, j);

        // now, a[lo .. j-1] <= a[j] <= a[j+1 .. hi]
        return j;
    }


    /***********************************************************************
     *  Helper sorting functions
     ***********************************************************************/

    // is v < w ?
    private static boolean less(Comparable v, Comparable w) {
        return (v.compareTo(w) < 0);
    }

    // exchange a[i] and a[j]
    private static void exch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }


    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {

    }
}

--[ 2021.10.24.20.11.55.962.1 ]--
InitFile: /P03_Sorting.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.24.20.11.55.962.2 ]--
InitFile: /src/MedianOfN.java
public abstract class MedianOfN {
    private int N;
    private int[] indices;

    public MedianOfN(int N) {
        this.N = N;
        indices = new int[N];
    }

    public abstract int median(Comparable[] a, int[] indices);

    public int median(Comparable[] a, int lo, int hi) {
        // if hi and lo are "close enough", simply return lo
        if(hi - lo + 1 < N) return lo;
        // choose N random indices in [lo, hi]
        for(int i = 0; i < N; i++) indices[i] = StdRandom.uniform(lo, hi + 1);
        return median(a, indices);
    }
}

--[ 2021.10.24.20.12.38.766.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.20.18.15.962.0 ]--
:/src/DoublingTest.java
+ 14         
--[ 2021.10.24.20.18.16.063.0 ]--
+ 14         
--[ 2021.10.24.20.18.20.264.0 ]--
r 15         f
--[ 2021.10.24.20.18.20.293.0 ]--
r 15         fo
--[ 2021.10.24.20.18.20.383.0 ]--
r 15         for
--[ 2021.10.24.20.18.20.480.0 ]--
r 15         for 
--[ 2021.10.24.20.18.21.310.0 ]--
r 15         for ()
--[ 2021.10.24.20.18.22.714.0 ]--
r 14 
--[ 2021.10.24.20.18.27.520.0 ]--
r 15         for (i)
--[ 2021.10.24.20.18.27.765.0 ]--
r 15         for (int)
--[ 2021.10.24.20.18.28.031.0 ]--
r 15         for (int )
--[ 2021.10.24.20.18.29.294.0 ]--
r 15         for (int n)
--[ 2021.10.24.20.18.30.092.0 ]--
r 15         for (int n=)
--[ 2021.10.24.20.18.31.219.0 ]--
r 15         for (int n=1)
--[ 2021.10.24.20.18.31.352.0 ]--
r 15         for (int n=10)
--[ 2021.10.24.20.18.31.506.0 ]--
r 15         for (int n=100)
--[ 2021.10.24.20.18.31.800.0 ]--
r 15         for (int n=1000)
--[ 2021.10.24.20.18.34.615.0 ]--
r 15         for (int n=1000;)
--[ 2021.10.24.20.18.34.785.0 ]--
r 15         for (int n=1000; )
--[ 2021.10.24.20.18.35.299.0 ]--
r 15         for (int n=1000; i)
--[ 2021.10.24.20.18.36.143.0 ]--
r 15         for (int n=1000; i<)
--[ 2021.10.24.20.23.01.840.0 ]--
r 15         for (int n=1000; i)
--[ 2021.10.24.20.23.02.094.0 ]--
r 15         for (int n=1000; )
--[ 2021.10.24.20.23.03.065.0 ]--
r 15         for (int n=1000; t)
--[ 2021.10.24.20.23.03.279.0 ]--
r 15         for (int n=1000; tr)
--[ 2021.10.24.20.23.03.314.0 ]--
r 15         for (int n=1000; tru)
--[ 2021.10.24.20.23.04.112.0 ]--
r 15         for (int n=1000; true)
--[ 2021.10.24.20.23.04.345.0 ]--
r 15         for (int n=1000; true;)
--[ 2021.10.24.20.23.04.591.0 ]--
r 15         for (int n=1000; true; )
--[ 2021.10.24.20.23.05.495.0 ]--
r 15         for (int n=1000; true; n)
--[ 2021.10.24.20.23.07.766.0 ]--
r 15         for (int n=1000; true; n*)
--[ 2021.10.24.20.23.08.237.0 ]--
r 15         for (int n=1000; true; n*-)
--[ 2021.10.24.20.23.08.631.0 ]--
r 15         for (int n=1000; true; n*)
--[ 2021.10.24.20.23.08.874.0 ]--
r 15         for (int n=1000; true; n*=)
--[ 2021.10.24.20.23.08.995.0 ]--
r 15         for (int n=1000; true; n*=2)
--[ 2021.10.24.20.23.10.799.0 ]--
r 15         for (int n=1000; true; n*=2) 
--[ 2021.10.24.20.23.11.117.0 ]--
r 15         for (int n=1000; true; n*=2) {
--[ 2021.10.24.20.23.11.406.0 ]--
+ 16 
+ 17 }
--[ 2021.10.24.20.23.11.422.0 ]--
r 17         }
--[ 2021.10.24.20.23.11.445.0 ]--
r 16             
--[ 2021.10.24.20.24.05.544.0 ]--
r 16             d
--[ 2021.10.24.20.24.05.704.0 ]--
r 16             do
--[ 2021.10.24.20.24.05.751.0 ]--
r 16             dou
--[ 2021.10.24.20.24.05.791.0 ]--
r 16             doub
--[ 2021.10.24.20.24.05.905.0 ]--
r 16             doubl
--[ 2021.10.24.20.24.05.998.0 ]--
r 16             double
--[ 2021.10.24.20.24.06.231.0 ]--
r 16             double 
--[ 2021.10.24.20.24.06.315.0 ]--
r 16             double t
--[ 2021.10.24.20.24.06.392.0 ]--
r 16             double ti
--[ 2021.10.24.20.24.06.450.0 ]--
r 16             double tim
--[ 2021.10.24.20.24.06.520.0 ]--
r 16             double time
--[ 2021.10.24.20.24.07.183.0 ]--
r 16             double time 
--[ 2021.10.24.20.24.08.405.0 ]--
r 16             double time =
--[ 2021.10.24.20.24.08.588.0 ]--
r 16             double time = 
--[ 2021.10.24.20.24.08.855.0 ]--
r 16             double time = t
--[ 2021.10.24.20.24.08.937.0 ]--
r 16             double time = ti
--[ 2021.10.24.20.24.09.019.0 ]--
r 16             double time = tie
--[ 2021.10.24.20.24.09.575.0 ]--
r 16             double time = ti
--[ 2021.10.24.20.24.09.719.0 ]--
r 16             double time = tim
--[ 2021.10.24.20.24.09.799.0 ]--
r 16             double time = time
--[ 2021.10.24.20.24.10.218.0 ]--
r 16             double time = timeT
--[ 2021.10.24.20.24.10.376.0 ]--
r 16             double time = timeTr
--[ 2021.10.24.20.24.10.483.0 ]--
r 16             double time = timeTri
--[ 2021.10.24.20.24.10.767.0 ]--
r 16             double time = timeTria
--[ 2021.10.24.20.24.11.028.0 ]--
r 16             double time = timeTrial
--[ 2021.10.24.20.24.12.350.0 ]--
r 16             double time = timeTrial()
--[ 2021.10.24.20.24.12.677.0 ]--
r 16             double time = timeTrial(n)
--[ 2021.10.24.20.24.14.132.0 ]--
r 16             double time = timeTrial(n);
--[ 2021.10.24.20.24.14.401.0 ]--
+ 17             
--[ 2021.10.24.20.24.16.249.0 ]--
r 17             S
--[ 2021.10.24.20.24.16.682.0 ]--
r 17             St
--[ 2021.10.24.20.24.16.888.0 ]--
r 17             Std
--[ 2021.10.24.20.24.17.439.0 ]--
r 17             StdOut
--[ 2021.10.24.20.24.17.645.0 ]--
r 17             StdOut.
--[ 2021.10.24.20.24.18.243.0 ]--
r 17             StdOut.p
--[ 2021.10.24.20.24.18.890.0 ]--
r 17             StdOut.println
--[ 2021.10.24.20.24.18.908.0 ]--
r 17             StdOut.println()
--[ 2021.10.24.20.24.18.913.0 ]--
r 17             StdOut.println();
--[ 2021.10.24.20.24.21.246.0 ]--
r 17             StdOut.println("");
--[ 2021.10.24.20.24.22.202.0 ]--
r 17             StdOut.println("7");
--[ 2021.10.24.20.24.24.003.0 ]--
r 17             StdOut.println("7d");
--[ 2021.10.24.20.24.26.034.0 ]--
r 17             StdOut.println("%7d");
--[ 2021.10.24.20.24.28.011.0 ]--
r 17             StdOut.println("%7d ");
--[ 2021.10.24.20.24.29.044.0 ]--
r 17             StdOut.println("%7d %");
--[ 2021.10.24.20.24.30.641.0 ]--
r 17             StdOut.println("%7d %7");
--[ 2021.10.24.20.24.31.049.0 ]--
r 17             StdOut.println("%7d %7.");
--[ 2021.10.24.20.24.31.439.0 ]--
r 17             StdOut.println("%7d %7.1");
--[ 2021.10.24.20.24.32.018.0 ]--
r 17             StdOut.println("%7d %7.1f");
--[ 2021.10.24.20.24.33.613.0 ]--
r 17             StdOut.println("%7d %7.1f\");
--[ 2021.10.24.20.24.35.141.0 ]--
r 17             StdOut.println("%7d %7.1f\n");
--[ 2021.10.24.20.24.36.514.0 ]--
r 17             StdOut.println("%7d %7.1f\n",);
--[ 2021.10.24.20.24.36.726.0 ]--
r 17             StdOut.println("%7d %7.1f\n", );
--[ 2021.10.24.20.24.37.087.0 ]--
r 17             StdOut.println("%7d %7.1f\n", n);
--[ 2021.10.24.20.24.37.598.0 ]--
r 17             StdOut.println("%7d %7.1f\n", n,);
--[ 2021.10.24.20.24.37.754.0 ]--
r 17             StdOut.println("%7d %7.1f\n", n, );
--[ 2021.10.24.20.24.38.044.0 ]--
r 17             StdOut.println("%7d %7.1f\n", n, t);
--[ 2021.10.24.20.24.38.180.0 ]--
r 17             StdOut.println("%7d %7.1f\n", n, ti);
--[ 2021.10.24.20.24.38.205.0 ]--
r 17             StdOut.println("%7d %7.1f\n", n, tim);
--[ 2021.10.24.20.24.38.285.0 ]--
r 17             StdOut.println("%7d %7.1f\n", n, time);
--[ 2021.10.24.20.24.42.403.0 ]--
+ 8     
--[ 2021.10.24.20.24.42.925.0 ]--
+ 8     
--[ 2021.10.24.20.24.43.393.0 ]--
- 8
--[ 2021.10.24.20.24.43.507.0 ]--
- 7
--[ 2021.10.24.20.24.45.440.0 ]--
+ 2     
--[ 2021.10.24.20.24.45.580.0 ]--
+ 2     
--[ 2021.10.24.20.24.45.734.0 ]--
+ 2     
--[ 2021.10.24.20.24.49.727.0 ]--
- 2
--[ 2021.10.24.20.24.51.969.0 ]--
r 2     p
--[ 2021.10.24.20.24.52.019.0 ]--
r 2     pu
--[ 2021.10.24.20.24.52.968.0 ]--
r 2     public
--[ 2021.10.24.20.24.52.990.0 ]--
r 2     public 
--[ 2021.10.24.20.24.53.406.0 ]--
r 2     public s
--[ 2021.10.24.20.24.54.053.0 ]--
r 2     public static
--[ 2021.10.24.20.24.54.076.0 ]--
r 2     public static 
--[ 2021.10.24.20.24.55.367.0 ]--
r 2     public static d
--[ 2021.10.24.20.24.55.998.0 ]--
r 2     public static double
--[ 2021.10.24.20.24.56.757.0 ]--
r 2     public static double 
--[ 2021.10.24.20.24.56.971.0 ]--
r 2     public static double t
--[ 2021.10.24.20.24.57.094.0 ]--
r 2     public static double ti
--[ 2021.10.24.20.24.57.146.0 ]--
r 2     public static double tim
--[ 2021.10.24.20.24.57.213.0 ]--
r 2     public static double time
--[ 2021.10.24.20.24.57.831.0 ]--
r 2     public static double timeTrial
--[ 2021.10.24.20.24.58.760.0 ]--
r 2     public static double timeTrial()
--[ 2021.10.24.20.24.59.486.0 ]--
r 2     public static double timeTrial(i)
--[ 2021.10.24.20.24.59.612.0 ]--
r 2     public static double timeTrial(in)
--[ 2021.10.24.20.25.00.082.0 ]--
r 2     public static double timeTrial(int)
--[ 2021.10.24.20.25.00.372.0 ]--
r 2     public static double timeTrial(intn)
--[ 2021.10.24.20.25.00.691.0 ]--
r 2     public static double timeTrial(int)
--[ 2021.10.24.20.25.00.873.0 ]--
r 2     public static double timeTrial(int )
--[ 2021.10.24.20.25.01.014.0 ]--
r 2     public static double timeTrial(int n)
--[ 2021.10.24.20.25.02.768.0 ]--
r 2     public static double timeTrial(int n) 
--[ 2021.10.24.20.25.03.240.0 ]--
r 2     public static double timeTrial(int n) {}
--[ 2021.10.24.20.25.03.481.0 ]--
+ 2     public static double timeTrial(int n) {
r 3     }
--[ 2021.10.24.20.25.03.504.0 ]--
+ 3         
--[ 2021.10.24.20.25.13.157.0 ]--
r 3         i
--[ 2021.10.24.20.25.13.215.0 ]--
r 3         in
--[ 2021.10.24.20.25.13.278.0 ]--
r 3         int
--[ 2021.10.24.20.25.13.415.0 ]--
r 3         int 
--[ 2021.10.24.20.25.13.810.0 ]--
r 3         int M
--[ 2021.10.24.20.25.13.941.0 ]--
r 3         int Ma
--[ 2021.10.24.20.25.14.313.0 ]--
r 3         int Maz
--[ 2021.10.24.20.25.14.639.0 ]--
r 3         int Ma
--[ 2021.10.24.20.25.14.772.0 ]--
r 3         int M
--[ 2021.10.24.20.25.15.531.0 ]--
r 3         int MA
--[ 2021.10.24.20.25.15.845.0 ]--
r 3         int MAX
--[ 2021.10.24.20.25.16.276.0 ]--
r 3         int MAX 
--[ 2021.10.24.20.25.17.340.0 ]--
r 3         int MAX =
--[ 2021.10.24.20.25.17.527.0 ]--
r 3         int MAX = 
--[ 2021.10.24.20.25.22.022.0 ]--
r 3         int MAX = 1
--[ 2021.10.24.20.25.22.453.0 ]--
r 3         int MAX = 10
--[ 2021.10.24.20.25.22.596.0 ]--
r 3         int MAX = 100
--[ 2021.10.24.20.25.22.757.0 ]--
r 3         int MAX = 1000
--[ 2021.10.24.20.25.49.001.0 ]--
r 5 
r 11 
--[ 2021.10.24.20.26.06.785.0 ]--
r 3         int MAX = 10000
--[ 2021.10.24.20.26.06.911.0 ]--
r 3         int MAX = 100000
--[ 2021.10.24.20.26.07.066.0 ]--
r 3         int MAX = 1000000
--[ 2021.10.24.20.26.07.441.0 ]--
r 3         int MAX = 1000000;
--[ 2021.10.24.20.26.08.338.0 ]--
+ 4         
--[ 2021.10.24.20.26.08.768.0 ]--
r 4         i
--[ 2021.10.24.20.26.08.825.0 ]--
r 4         in
--[ 2021.10.24.20.26.08.892.0 ]--
r 4         int
--[ 2021.10.24.20.26.09.497.0 ]--
r 4         int[]
--[ 2021.10.24.20.26.11.105.0 ]--
r 4         int[] 
--[ 2021.10.24.20.26.11.390.0 ]--
r 4         int[]  
--[ 2021.10.24.20.26.12.039.0 ]--
r 4         int[] 
--[ 2021.10.24.20.26.12.190.0 ]--
r 4         int[] a
--[ 2021.10.24.20.26.12.774.0 ]--
r 4         int[] a 
--[ 2021.10.24.20.26.13.114.0 ]--
r 4         int[] a =
--[ 2021.10.24.20.26.13.259.0 ]--
r 4         int[] a = 
--[ 2021.10.24.20.26.13.988.0 ]--
r 4         int[] a = n
--[ 2021.10.24.20.26.14.039.0 ]--
r 4         int[] a = ne
--[ 2021.10.24.20.26.14.216.0 ]--
r 4         int[] a = new
--[ 2021.10.24.20.26.14.391.0 ]--
r 4         int[] a = new 
--[ 2021.10.24.20.26.14.706.0 ]--
r 4         int[] a = new i
--[ 2021.10.24.20.26.14.766.0 ]--
r 4         int[] a = new in
--[ 2021.10.24.20.26.14.810.0 ]--
r 4         int[] a = new int
--[ 2021.10.24.20.26.15.441.0 ]--
r 4         int[] a = new int[]
--[ 2021.10.24.20.26.15.950.0 ]--
r 4         int[] a = new int[n]
--[ 2021.10.24.20.26.17.622.0 ]--
r 4         int[] a = new int[n];
--[ 2021.10.24.20.26.19.381.0 ]--
+ 5         
--[ 2021.10.24.20.26.19.511.0 ]--
r 5         f
--[ 2021.10.24.20.26.19.683.0 ]--
r 5         for
--[ 2021.10.24.20.26.19.866.0 ]--
r 5         for 
--[ 2021.10.24.20.27.31.529.0 ]--
r 5         for ()
--[ 2021.10.24.20.27.32.034.0 ]--
r 5         for (i)
--[ 2021.10.24.20.27.32.100.0 ]--
r 5         for (in)
--[ 2021.10.24.20.27.32.277.0 ]--
r 5         for (int)
--[ 2021.10.24.20.27.33.749.0 ]--
r 5         for (int )
--[ 2021.10.24.20.27.34.099.0 ]--
r 5         for (int i)
--[ 2021.10.24.20.27.34.222.0 ]--
r 5         for (int i )
--[ 2021.10.24.20.27.34.574.0 ]--
r 5         for (int i)
--[ 2021.10.24.20.27.34.996.0 ]--
r 5         for (int i=)
--[ 2021.10.24.20.27.35.241.0 ]--
r 5         for (int i=-)
--[ 2021.10.24.20.27.35.707.0 ]--
r 5         for (int i=)
--[ 2021.10.24.20.27.36.604.0 ]--
r 5         for (int i=0)
--[ 2021.10.24.20.27.37.797.0 ]--
r 5         for (int i=0;)
--[ 2021.10.24.20.27.37.908.0 ]--
r 5         for (int i=0; )
--[ 2021.10.24.20.27.38.024.0 ]--
r 5         for (int i=0; i)
--[ 2021.10.24.20.27.38.833.0 ]--
r 5         for (int i=0; i<)
--[ 2021.10.24.20.27.39.583.0 ]--
r 5         for (int i=0; i<n)
--[ 2021.10.24.20.27.40.716.0 ]--
r 5         for (int i=0; i<n;)
--[ 2021.10.24.20.27.40.928.0 ]--
r 5         for (int i=0; i<n; )
--[ 2021.10.24.20.27.41.113.0 ]--
r 5         for (int i=0; i<n; i)
--[ 2021.10.24.20.27.41.850.0 ]--
r 5         for (int i=0; i<n; i+)
--[ 2021.10.24.20.27.41.937.0 ]--
r 5         for (int i=0; i<n; i++)
--[ 2021.10.24.20.29.42.223.0 ]--
r 5         for (int i=0; i<n; i++) 
--[ 2021.10.24.20.29.45.224.0 ]--
r 5         for (int i=0; i<n; i++) {
--[ 2021.10.24.20.29.45.576.0 ]--
+ 6 
+ 7 }
--[ 2021.10.24.20.29.45.585.0 ]--
r 7         }
--[ 2021.10.24.20.29.45.604.0 ]--
r 6             
--[ 2021.10.24.20.29.49.491.0 ]--
r 6             a
--[ 2021.10.24.20.29.51.139.0 ]--
r 6             a[]
--[ 2021.10.24.20.29.51.529.0 ]--
r 6             a[i]
--[ 2021.10.24.20.29.52.360.0 ]--
r 6             a[i] 
--[ 2021.10.24.20.29.53.015.0 ]--
r 6             a[i] =
--[ 2021.10.24.20.29.53.102.0 ]--
r 6             a[i] = 
--[ 2021.10.24.20.29.54.306.0 ]--
r 6             a[i] = S
--[ 2021.10.24.20.29.54.611.0 ]--
r 6             a[i] = St
--[ 2021.10.24.20.29.55.057.0 ]--
r 6             a[i] = Std
--[ 2021.10.24.20.29.57.358.0 ]--
r 6             a[i] = StdRandom
--[ 2021.10.24.20.29.58.800.0 ]--
r 6             a[i] = StdRandom.
--[ 2021.10.24.20.29.59.108.0 ]--
r 6             a[i] = StdRandom.u
--[ 2021.10.24.20.29.59.317.0 ]--
r 6             a[i] = StdRandom.un
--[ 2021.10.24.20.29.59.609.0 ]--
r 6             a[i] = StdRandom.uniform
--[ 2021.10.24.20.29.59.615.0 ]--
r 6             a[i] = StdRandom.uniform()
--[ 2021.10.24.20.30.01.463.0 ]--
r 6             a[i] = StdRandom.uniform(-)
--[ 2021.10.24.20.30.01.892.0 ]--
r 6             a[i] = StdRandom.uniform(-M)
--[ 2021.10.24.20.30.02.557.0 ]--
r 6             a[i] = StdRandom.uniform(-MAX)
--[ 2021.10.24.20.30.02.875.0 ]--
r 6             a[i] = StdRandom.uniform(-MAX,)
--[ 2021.10.24.20.30.03.185.0 ]--
r 6             a[i] = StdRandom.uniform(-MAX, )
--[ 2021.10.24.20.30.03.573.0 ]--
r 6             a[i] = StdRandom.uniform(-MAX, M)
--[ 2021.10.24.20.30.04.224.0 ]--
r 6             a[i] = StdRandom.uniform(-MAX, MAX)
--[ 2021.10.24.20.30.04.911.0 ]--
r 6             a[i] = StdRandom.uniform(-MAX, MAX)''
--[ 2021.10.24.20.30.05.403.0 ]--
r 6             a[i] = StdRandom.uniform(-MAX, MAX)
--[ 2021.10.24.20.30.05.618.0 ]--
r 6             a[i] = StdRandom.uniform(-MAX, MAX);
--[ 2021.10.24.20.30.05.946.0 ]--
+ 7             
--[ 2021.10.24.20.30.07.992.0 ]--
r 7             S
--[ 2021.10.24.20.30.08.237.0 ]--
r 7             St
--[ 2021.10.24.20.30.08.781.0 ]--
r 7             Sto
--[ 2021.10.24.20.30.08.914.0 ]--
r 7             Stop
--[ 2021.10.24.20.30.10.894.0 ]--
r 7             Stopwatch
--[ 2021.10.24.20.30.11.729.0 ]--
r 7             Stopwatch 
--[ 2021.10.24.20.30.12.364.0 ]--
r 7             Stopwatch t
--[ 2021.10.24.20.30.12.473.0 ]--
r 7             Stopwatch ti
--[ 2021.10.24.20.30.12.527.0 ]--
r 7             Stopwatch tim
--[ 2021.10.24.20.30.12.594.0 ]--
r 7             Stopwatch time
--[ 2021.10.24.20.30.12.818.0 ]--
r 7             Stopwatch timee
--[ 2021.10.24.20.30.12.854.0 ]--
r 7             Stopwatch timeer
--[ 2021.10.24.20.30.12.998.0 ]--
r 7             Stopwatch timeer 
--[ 2021.10.24.20.30.13.732.0 ]--
r 7             Stopwatch timeer =
--[ 2021.10.24.20.30.13.890.0 ]--
r 7             Stopwatch timeer = 
--[ 2021.10.24.20.30.14.291.0 ]--
r 7             Stopwatch timeer =
--[ 2021.10.24.20.30.14.407.0 ]--
r 7             Stopwatch timeer 
--[ 2021.10.24.20.30.14.540.0 ]--
r 7             Stopwatch timeer
--[ 2021.10.24.20.30.14.706.0 ]--
r 7             Stopwatch timee
--[ 2021.10.24.20.30.14.818.0 ]--
r 7             Stopwatch time
--[ 2021.10.24.20.30.14.949.0 ]--
r 7             Stopwatch timer
--[ 2021.10.24.20.30.15.057.0 ]--
r 7             Stopwatch timer 
--[ 2021.10.24.20.30.15.825.0 ]--
r 7             Stopwatch timer =
--[ 2021.10.24.20.30.15.991.0 ]--
r 7             Stopwatch timer = 
--[ 2021.10.24.20.30.16.388.0 ]--
r 7             Stopwatch timer = n
--[ 2021.10.24.20.30.16.472.0 ]--
r 7             Stopwatch timer = ne
--[ 2021.10.24.20.30.16.711.0 ]--
r 7             Stopwatch timer = new
--[ 2021.10.24.20.30.16.829.0 ]--
r 7             Stopwatch timer = new 
--[ 2021.10.24.20.30.17.109.0 ]--
r 7             Stopwatch timer = new S
--[ 2021.10.24.20.30.17.365.0 ]--
r 7             Stopwatch timer = new St
--[ 2021.10.24.20.30.17.670.0 ]--
r 7             Stopwatch timer = new Stopwatch
--[ 2021.10.24.20.30.17.682.0 ]--
r 7             Stopwatch timer = new Stopwatch()
--[ 2021.10.24.20.30.19.086.0 ]--
r 7             Stopwatch timer = new Stopwatch();
--[ 2021.10.24.20.30.19.448.0 ]--
+ 8             
--[ 2021.10.24.20.30.20.076.0 ]--
r 8             i
--[ 2021.10.24.20.30.20.143.0 ]--
r 8             in
--[ 2021.10.24.20.30.20.280.0 ]--
r 8             int
--[ 2021.10.24.20.30.20.334.0 ]--
r 8             int 
--[ 2021.10.24.20.30.20.472.0 ]--
r 8             int c
--[ 2021.10.24.20.30.20.536.0 ]--
r 8             int co
--[ 2021.10.24.20.30.20.604.0 ]--
r 8             int cou
--[ 2021.10.24.20.30.20.761.0 ]--
r 8             int coun
--[ 2021.10.24.20.30.20.831.0 ]--
r 8             int count
--[ 2021.10.24.20.30.20.963.0 ]--
r 8             int count 
--[ 2021.10.24.20.30.21.430.0 ]--
r 8             int count -
--[ 2021.10.24.20.30.21.656.0 ]--
r 8             int count - 
--[ 2021.10.24.20.30.22.127.0 ]--
r 8             int count -
--[ 2021.10.24.20.30.22.253.0 ]--
r 8             int count 
--[ 2021.10.24.20.30.22.733.0 ]--
r 8             int count =
--[ 2021.10.24.20.30.23.307.0 ]--
r 8             int count = 
--[ 2021.10.24.20.30.29.076.0 ]--
r 8             int count = S
--[ 2021.10.24.20.30.29.332.0 ]--
r 8             int count = SE
--[ 2021.10.24.20.30.29.509.0 ]--
r 8             int count = SEl
--[ 2021.10.24.20.30.30.625.0 ]--
r 8             int count = SE
--[ 2021.10.24.20.30.30.739.0 ]--
r 8             int count = S
--[ 2021.10.24.20.30.30.833.0 ]--
r 8             int count = Se
--[ 2021.10.24.20.30.31.108.0 ]--
r 8             int count = Sel
--[ 2021.10.24.20.30.31.670.0 ]--
r 8             int count = Selection
--[ 2021.10.24.20.30.31.888.0 ]--
r 8             int count = Selection.
--[ 2021.10.24.20.30.34.207.0 ]--
r 8             int count = Selection.s
--[ 2021.10.24.20.30.35.119.0 ]--
r 8             int count = Selection.sort
--[ 2021.10.24.20.30.35.125.0 ]--
r 8             int count = Selection.sort()
--[ 2021.10.24.20.30.35.129.0 ]--
r 8             int count = Selection.sort();
--[ 2021.10.24.20.30.35.965.0 ]--
r 8             int count = Selection.sort(a);
--[ 2021.10.24.20.30.37.347.0 ]--
+ 9             
--[ 2021.10.24.20.30.39.621.0 ]--
r 9             r
--[ 2021.10.24.20.30.39.738.0 ]--
r 9             re
--[ 2021.10.24.20.30.39.875.0 ]--
r 9             ret
--[ 2021.10.24.20.30.40.803.0 ]--
r 9             return
--[ 2021.10.24.20.30.40.819.0 ]--
r 9             return 
--[ 2021.10.24.20.30.41.946.0 ]--
r 9             return t
--[ 2021.10.24.20.30.42.050.0 ]--
r 9             return ti
--[ 2021.10.24.20.30.42.117.0 ]--
r 9             return tim
--[ 2021.10.24.20.30.42.444.0 ]--
r 9             return tim.
--[ 2021.10.24.20.30.43.317.0 ]--
r 9             return timer.elapsedTime
--[ 2021.10.24.20.30.43.325.0 ]--
r 9             return timer;
--[ 2021.10.24.20.30.43.332.0 ]--
r 9             return timer.elapsedTime
--[ 2021.10.24.20.30.43.337.0 ]--
r 9             return timer.elapsedTime()
--[ 2021.10.24.20.30.45.120.0 ]--
r 9             return timer.elapsedTime();
--[ 2021.10.24.20.30.57.482.0 ]--
r 2     public static double timeTrialS(int n) {
--[ 2021.10.24.20.30.57.700.0 ]--
r 2     public static double timeTrialSe(int n) {
--[ 2021.10.24.20.30.58.360.0 ]--
r 2     public static double timeTrialS(int n) {
--[ 2021.10.24.20.30.58.584.0 ]--
r 2     public static double timeTrial(int n) {
--[ 2021.10.24.20.30.59.743.0 ]--
r 2     public static double timeTrialS(int n) {
--[ 2021.10.24.20.30.59.945.0 ]--
r 2     public static double timeTrialSe(int n) {
--[ 2021.10.24.20.31.00.099.0 ]--
r 2     public static double timeTrialSel(int n) {
--[ 2021.10.24.20.31.00.457.0 ]--
r 2     public static double timeTrialSele(int n) {
--[ 2021.10.24.20.31.01.446.0 ]--
r 2     public static double timeTrialSelec(int n) {
--[ 2021.10.24.20.31.01.581.0 ]--
r 2     public static double timeTrialSelect(int n) {
--[ 2021.10.24.20.31.01.674.0 ]--
r 2     public static double timeTrialSelecti(int n) {
--[ 2021.10.24.20.31.01.713.0 ]--
r 2     public static double timeTrialSelectio(int n) {
--[ 2021.10.24.20.31.01.818.0 ]--
r 2     public static double timeTrialSelection(int n) {
--[ 2021.10.24.20.31.13.308.0 ]--
r 2     public static double timeTrial(int n) {
--[ 2021.10.24.21.07.33.384.0 ]--
r 2     public static double timeTrial(int n ) {
--[ 2021.10.24.21.07.36.139.0 ]--
r 2     public static double timeTrial(int n) {
--[ 2021.10.24.21.07.51.342.0 ]--
r 4         d[] a = new int[n];
--[ 2021.10.24.21.07.52.123.0 ]--
r 4         double[] a = new int[n];
--[ 2021.10.24.21.08.02.971.0 ]--
r 4         double[] a = new d[n];
--[ 2021.10.24.21.08.03.602.0 ]--
r 4         double[] a = new d'[n];
--[ 2021.10.24.21.08.04.427.0 ]--
r 4         double[] a = new d[n];
--[ 2021.10.24.21.08.05.623.0 ]--
r 4         double[] a = new do[n];
--[ 2021.10.24.21.08.06.137.0 ]--
r 4         double[] a = new double[n];
--[ 2021.10.24.21.08.06.169.0 ]--
r 4         double[] a = new double[][n];
--[ 2021.10.24.21.08.09.903.0 ]--
r 2     public static double timeTrial(d n) {
--[ 2021.10.24.21.08.10.545.0 ]--
r 2     public static double timeTrial(d] n) {
--[ 2021.10.24.21.08.11.373.0 ]--
r 2     public static double timeTrial(d n) {
--[ 2021.10.24.21.08.12.079.0 ]--
r 2     public static double timeTrial(do n) {
--[ 2021.10.24.21.08.12.568.0 ]--
r 2     public static double timeTrial(double n) {
--[ 2021.10.24.21.08.19.377.0 ]--
r 26         for (d n=1000; true; n*=2) {
--[ 2021.10.24.21.08.20.530.0 ]--
r 26         for (double n=1000; true; n*=2) {
--[ 2021.10.24.21.08.20.555.0 ]--
r 26         for (double\ n=1000; true; n*=2) {
--[ 2021.10.24.21.08.21.321.0 ]--
r 26         for (double n=1000; true; n*=2) {
--[ 2021.10.24.21.08.51.726.0 ]--
r 4         double[] a = new double[[n];
--[ 2021.10.24.21.08.51.843.0 ]--
r 4         double[] a = new double[n];
--[ 2021.10.24.21.12.04.547.0 ]--
r 4         double[] a = new double[][n];
--[ 2021.10.24.21.12.04.710.0 ]--
r 26         for (double\ n=1000; true; n*=2) {
--[ 2021.10.24.21.12.04.796.0 ]--
r 26         for (double n=1000; true; n*=2) {
--[ 2021.10.24.21.12.04.870.0 ]--
r 26         for (d n=1000; true; n*=2) {
--[ 2021.10.24.21.12.04.962.0 ]--
r 26         for (int n=1000; true; n*=2) {
--[ 2021.10.24.21.12.05.120.0 ]--
r 2     public static double timeTrial(do n) {
--[ 2021.10.24.21.12.05.203.0 ]--
r 2     public static double timeTrial(d n) {
--[ 2021.10.24.21.12.05.303.0 ]--
r 2     public static double timeTrial(d] n) {
--[ 2021.10.24.21.12.05.573.0 ]--
r 2     public static double timeTrial(int n) {
--[ 2021.10.24.21.12.05.931.0 ]--
r 4         double[] a = new do[n];
--[ 2021.10.24.21.12.06.111.0 ]--
r 4         double[] a = new d[n];
--[ 2021.10.24.21.12.06.257.0 ]--
r 4         double[] a = new d'[n];
--[ 2021.10.24.21.12.06.462.0 ]--
r 4         double[] a = new int[n];
--[ 2021.10.24.21.12.07.101.0 ]--
r 4         d[] a = new int[n];
--[ 2021.10.24.21.12.07.182.0 ]--
r 4         int[] a = new int[n];
--[ 2021.10.24.21.12.07.350.0 ]--
r 2     public static double timeTrial(int n ) {
--[ 2021.10.24.21.12.07.430.0 ]--
r 2     public static double timeTrial(int n) {
--[ 2021.10.24.21.12.08.068.0 ]--
r 2     public static double timeTrialSe(int n) {
--[ 2021.10.24.21.12.08.333.0 ]--
r 2     public static double timeTrial(int n) {
--[ 2021.10.24.21.12.09.193.0 ]--
r 9             return timer.elapsedTime()
--[ 2021.10.24.21.12.09.565.0 ]--
r 9             return tim.
--[ 2021.10.24.21.12.10.483.0 ]--
r 9             return 
--[ 2021.10.24.21.12.11.132.0 ]--
r 9             return tim.
--[ 2021.10.24.21.12.11.424.0 ]--
r 9             return timer.elapsedTime()
--[ 2021.10.24.21.12.12.560.0 ]--
r 9             return timer.elapsedTime();
--[ 2021.10.24.21.12.58.904.0 ]--
r 10         
--[ 2021.10.24.21.12.59.212.0 ]--
- 10
--[ 2021.10.24.21.13.01.542.0 ]--
- 5
r 5 
--[ 2021.10.24.21.13.02.016.0 ]--
- 5
--[ 2021.10.24.21.13.04.371.0 ]--
r 5         Stopwatch timer = new Stopwatch();
r 6         int count = Selection.sort(a);
r 7         return timer.elapsedTime();
--[ 2021.10.24.21.13.14.298.0 ]--
r 4         D[] a = new int[n];
--[ 2021.10.24.21.13.14.766.0 ]--
r 4         Do[] a = new int[n];
--[ 2021.10.24.21.13.14.906.0 ]--
r 4         Dou[] a = new int[n];
--[ 2021.10.24.21.13.15.300.0 ]--
r 4         Double[] a = new int[n];
--[ 2021.10.24.21.13.19.991.0 ]--
r 4         Double[] a = new in[n];
--[ 2021.10.24.21.13.20.171.0 ]--
r 4         Double[] a = new i[n];
--[ 2021.10.24.21.13.20.466.0 ]--
r 4         Double[] a = new [n];
--[ 2021.10.24.21.13.20.621.0 ]--
r 4         Double[] a = new d[n];
--[ 2021.10.24.21.13.21.670.0 ]--
r 4         Double[] a = new do[n];
--[ 2021.10.24.21.13.21.739.0 ]--
r 4         Double[] a = new dou[n];
--[ 2021.10.24.21.13.21.827.0 ]--
r 4         Double[] a = new doub[n];
--[ 2021.10.24.21.13.21.917.0 ]--
r 4         Double[] a = new doubl[n];
--[ 2021.10.24.21.13.22.040.0 ]--
r 4         Double[] a = new double[n];
--[ 2021.10.24.21.13.29.130.0 ]--
r 4         Double[] a = new ouble[n];
--[ 2021.10.24.21.13.29.502.0 ]--
r 4         Double[] a = new Double[n];
--[ 2021.10.24.21.13.33.816.0 ]--
- 3
--[ 2021.10.24.21.13.44.641.0 ]--
r 3         Double[] a = (new Double[n]);
--[ 2021.10.24.21.13.45.722.0 ]--
r 3         Double[] a = ();
--[ 2021.10.24.21.13.46.967.0 ]--
r 3         Double[] a = ;
--[ 2021.10.24.21.13.47.878.0 ]--
r 3         Double[] a = {};
--[ 2021.10.24.21.13.59.130.0 ]--
r 3         Double[] a = {9};
--[ 2021.10.24.21.13.59.651.0 ]--
r 3         Double[] a = {9,};
--[ 2021.10.24.21.14.00.099.0 ]--
r 3         Double[] a = {9,=};
--[ 2021.10.24.21.14.00.518.0 ]--
r 3         Double[] a = {9,};
--[ 2021.10.24.21.14.00.680.0 ]--
r 3         Double[] a = {9};
--[ 2021.10.24.21.14.01.695.0 ]--
r 3         Double[] a = {9.};
--[ 2021.10.24.21.14.01.936.0 ]--
r 3         Double[] a = {9.0};
--[ 2021.10.24.21.14.02.244.0 ]--
r 3         Double[] a = {9.0,};
--[ 2021.10.24.21.14.02.420.0 ]--
r 3         Double[] a = {9.0, };
--[ 2021.10.24.21.14.03.314.0 ]--
r 3         Double[] a = {9.0, 1};
--[ 2021.10.24.21.14.03.901.0 ]--
r 3         Double[] a = {9.0, 1.};
--[ 2021.10.24.21.14.04.552.0 ]--
r 3         Double[] a = {9.0, 1.0};
--[ 2021.10.24.21.14.05.083.0 ]--
r 3         Double[] a = {9.0, 1.0,};
--[ 2021.10.24.21.14.05.441.0 ]--
r 3         Double[] a = {9.0, 1.0, };
--[ 2021.10.24.21.14.06.778.0 ]--
r 3         Double[] a = {9.0, 1.0, 5};
--[ 2021.10.24.21.14.07.009.0 ]--
r 3         Double[] a = {9.0, 1.0, 5.};
--[ 2021.10.24.21.14.07.312.0 ]--
r 3         Double[] a = {9.0, 1.0, 5.0};
--[ 2021.10.24.21.14.08.087.0 ]--
r 3         Double[] a = {9.0, 1.0, 5.0,};
--[ 2021.10.24.21.14.08.387.0 ]--
r 3         Double[] a = {9.0, 1.0, 5.0, };
--[ 2021.10.24.21.14.09.320.0 ]--
r 3         Double[] a = {9.0, 1.0, 5.0, 3};
--[ 2021.10.24.21.14.09.887.0 ]--
r 3         Double[] a = {9.0, 1.0, 5.0, 3.};
--[ 2021.10.24.21.14.10.784.0 ]--
r 3         Double[] a = {9.0, 1.0, 5.0, 3.0};
--[ 2021.10.24.21.14.11.173.0 ]--
r 3         Double[] a = {9.0, 1.0, 5.0, 3.0,};
--[ 2021.10.24.21.14.11.698.0 ]--
r 3         Double[] a = {9.0, 1.0, 5.0, 3.0, };
--[ 2021.10.24.21.14.12.856.0 ]--
r 3         Double[] a = {9.0, 1.0, 5.0, 3.0, 7};
--[ 2021.10.24.21.14.13.125.0 ]--
r 3         Double[] a = {9.0, 1.0, 5.0, 3.0, 7.};
--[ 2021.10.24.21.14.13.438.0 ]--
r 3         Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
--[ 2021.10.24.21.14.38.370.0 ]--
r 5         Selection.sort(a);
--[ 2021.10.24.21.16.45.409.0 ]--
+ 9     
--[ 2021.10.24.21.16.45.583.0 ]--
+ 9     
--[ 2021.10.24.21.16.46.436.0 ]--
+ 9     public static double timeTrial(int n) {
+ 10         Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
+ 11         Stopwatch timer = new Stopwatch();
+ 12         Selection.sort(a);
+ 13         return timer.elapsedTime();
r 14     }
--[ 2021.10.24.21.16.47.155.0 ]--
+ 15     
--[ 2021.10.24.21.16.47.303.0 ]--
+ 15     
--[ 2021.10.24.21.16.47.525.0 ]--
+ 16     public static double timeTrial(int n) {
+ 17         Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
+ 18         Stopwatch timer = new Stopwatch();
+ 19         Selection.sort(a);
+ 20         return timer.elapsedTime();
r 21     }
--[ 2021.10.24.21.16.47.540.0 ]--
r 15 
--[ 2021.10.24.21.16.53.118.0 ]--
- 15
- 15
- 15
- 15
- 15
r 15     
r 16     
--[ 2021.10.24.21.16.53.298.0 ]--
- 15
--[ 2021.10.24.21.16.53.623.0 ]--
- 15
--[ 2021.10.24.21.16.53.846.0 ]--
- 9
- 9
- 9
- 9
- 9
r 9     
--[ 2021.10.24.21.16.54.300.0 ]--
- 9
--[ 2021.10.24.21.16.54.589.0 ]--
- 9
--[ 2021.10.24.21.16.55.552.0 ]--
r 5         int count = Selection.sort(a);
--[ 2021.10.24.21.16.56.407.0 ]--
r 5         Selection.sort(a);
--[ 2021.10.24.21.16.58.270.0 ]--
+ 9     
--[ 2021.10.24.21.16.58.795.0 ]--
+ 9     
--[ 2021.10.24.21.16.58.979.0 ]--
- 9
--[ 2021.10.24.21.16.59.351.0 ]--
- 9
--[ 2021.10.24.21.17.19.568.0 ]--
r 16         Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
--[ 2021.10.24.21.17.25.617.0 ]--
+ 17 Stopwatch timer = new Stopwatch();
+ 18         Selection.sort(a);
r 19         return timer.elapsedTime();
--[ 2021.10.24.21.17.25.632.0 ]--
r 17         Stopwatch timer = new Stopwatch();
--[ 2021.10.24.21.17.28.345.0 ]--
r 20         
--[ 2021.10.24.21.17.29.418.0 ]--
- 18
r 18 Selection.sort(a);  // selection sort        return timer.elapsedTime();
--[ 2021.10.24.21.17.29.434.0 ]--
r 18         Selection.sort(a);  // selection sort        return timer.elapsedTime();
--[ 2021.10.24.21.17.31.026.0 ]--
+ 18         Selection.sort(a);  // selection sort
r 19         //        return timer.elapsedTime();
--[ 2021.10.24.21.17.33.129.0 ]--
r 19                 return timer.elapsedTime();
--[ 2021.10.24.21.17.34.767.0 ]--
r 19         \        return timer.elapsedTime();
--[ 2021.10.24.21.17.34.787.0 ]--
r 19                 return timer.elapsedTime();
--[ 2021.10.24.21.17.35.083.0 ]--
r 19         return timer.elapsedTime();
--[ 2021.10.24.21.17.35.385.0 ]--
- 18
r 18         Selection.sort(a);  // selection sortreturn timer.elapsedTime();
--[ 2021.10.24.21.17.36.303.0 ]--
+ 18         Selection.sort(a);  // selection sort
r 19         // return timer.elapsedTime();
--[ 2021.10.24.21.17.38.150.0 ]--
r 19          return timer.elapsedTime();
--[ 2021.10.24.21.17.39.923.0 ]--
r 19         return timer.elapsedTime();
--[ 2021.10.24.21.17.44.229.0 ]--
r 19         timer.elapsedTime();
--[ 2021.10.24.21.17.45.444.0 ]--
r 19         ptimer.elapsedTime();
--[ 2021.10.24.21.17.45.515.0 ]--
r 19         prtimer.elapsedTime();
--[ 2021.10.24.21.17.46.055.0 ]--
r 19         pritimer.elapsedTime();
--[ 2021.10.24.21.17.46.410.0 ]--
r 19         prtimer.elapsedTime();
--[ 2021.10.24.21.17.46.519.0 ]--
r 19         ptimer.elapsedTime();
--[ 2021.10.24.21.17.46.661.0 ]--
r 19         timer.elapsedTime();
--[ 2021.10.24.21.17.46.859.0 ]--
r 19         Stimer.elapsedTime();
--[ 2021.10.24.21.17.47.580.0 ]--
r 19         Sttimer.elapsedTime();
--[ 2021.10.24.21.17.48.257.0 ]--
r 19         Stdtimer.elapsedTime();
--[ 2021.10.24.21.17.48.875.0 ]--
r 19         StdOuttimer.elapsedTime();
--[ 2021.10.24.21.17.48.885.0 ]--
r 19         StdOut timer.elapsedTime();
--[ 2021.10.24.21.17.48.893.0 ]--
r 19         StdOuttimer.elapsedTime();
--[ 2021.10.24.21.17.49.066.0 ]--
r 19         StdOut.timer.elapsedTime();
--[ 2021.10.24.21.17.49.540.0 ]--
r 19         StdOut.ptimer.elapsedTime();
--[ 2021.10.24.21.17.49.857.0 ]--
r 19         StdOut.printlntimer.elapsedTime();
--[ 2021.10.24.21.17.49.863.0 ]--
r 19         StdOut.println()timer.elapsedTime();
--[ 2021.10.24.21.17.49.866.0 ]--
r 19         StdOut.println();timer.elapsedTime();
--[ 2021.10.24.21.17.52.683.0 ]--
r 19         StdOut.println();
--[ 2021.10.24.21.17.53.585.0 ]--
r 19         StdOut.println(timer.elapsedTime(););
--[ 2021.10.24.21.17.54.722.0 ]--
r 19         StdOut.println(timer.elapsedTime());
--[ 2021.10.24.21.18.10.710.0 ]--
- 2
- 2
- 2
- 2
- 2
r 2 
--[ 2021.10.24.21.18.10.846.0 ]--
- 2
--[ 2021.10.24.21.18.14.349.0 ]--
- 19
--[ 2021.10.24.21.18.21.855.0 ]--
- 11
- 11
r 11         
--[ 2021.10.24.21.18.24.603.0 ]--
+ 17             Stopwatch timer = new Stopwatch();
+ 18         Selection.sort(a);  // selection sort
r 19         StdOut.println(timer.elapsedTime());
--[ 2021.10.24.21.18.24.619.0 ]--
r 18             Selection.sort(a);  // selection sort
r 19             StdOut.println(timer.elapsedTime());
--[ 2021.10.24.21.18.29.350.0 ]--
+ 21         
--[ 2021.10.24.21.18.29.456.0 ]--
+ 21         
--[ 2021.10.24.21.18.29.611.0 ]--
+ 22         for (int n=1000; true; n*=2) {
+ 23             Stopwatch timer = new Stopwatch();
+ 24             Selection.sort(a);  // selection sort
+ 25             StdOut.println(timer.elapsedTime());
r 26         }
--[ 2021.10.24.21.18.29.620.0 ]--
r 21 
--[ 2021.10.24.21.18.30.073.0 ]--
+ 27         
--[ 2021.10.24.21.18.30.210.0 ]--
+ 27         
--[ 2021.10.24.21.18.30.350.0 ]--
+ 28         for (int n=1000; true; n*=2) {
+ 29             Stopwatch timer = new Stopwatch();
+ 30             Selection.sort(a);  // selection sort
+ 31             StdOut.println(timer.elapsedTime());
r 32         }
--[ 2021.10.24.21.18.30.364.0 ]--
r 27 
--[ 2021.10.24.21.18.33.520.0 ]--
r 13         
--[ 2021.10.24.21.18.36.727.0 ]--
r 24             Insertion.sort(a);  // insertion sort
--[ 2021.10.24.21.18.40.423.0 ]--
r 14         
--[ 2021.10.24.21.18.42.422.0 ]--
r 30             Shell.sort(a);      // Shellsort
--[ 2021.10.24.21.18.55.460.0 ]--
r 17             Stopwatch timer1 = new Stopwatch();
--[ 2021.10.24.21.18.56.572.0 ]--
r 23             Stopwatch timer2 = new Stopwatch();
--[ 2021.10.24.21.18.57.787.0 ]--
r 29             Stopwatch timer3 = new Stopwatch();
--[ 2021.10.24.21.18.59.177.0 ]--
r 25             StdOut.println(timer2.elapsedTime());
--[ 2021.10.24.21.19.00.266.0 ]--
r 31             StdOut.println(timer3.elapsedTime());
--[ 2021.10.24.21.19.01.360.0 ]--
r 19             StdOut.println(timer1.elapsedTime());
--[ 2021.10.24.21.19.04.970.0 ]--
r 19             StdOut.println(timer.elapsedTime());
--[ 2021.10.24.21.19.05.476.0 ]--
r 31             StdOut.println(timer.elapsedTime());
--[ 2021.10.24.21.19.06.207.0 ]--
r 25             StdOut.println(timer.elapsedTime());
--[ 2021.10.24.21.19.06.817.0 ]--
r 29             Stopwatch timer = new Stopwatch();
--[ 2021.10.24.21.19.07.175.0 ]--
r 23             Stopwatch timer = new Stopwatch();
--[ 2021.10.24.21.19.07.510.0 ]--
r 17             Stopwatch timer = new Stopwatch();
--[ 2021.10.24.21.19.23.592.0 ]--
r 11 
r 12 
r 13 
r 14 
--[ 2021.10.24.21.21.34.195.0 ]--
r 19             StdOut.println("timer.elapsedTime());
--[ 2021.10.24.21.21.34.932.0 ]--
r 19             StdOut.println(":timer.elapsedTime());
--[ 2021.10.24.21.21.34.948.0 ]--
r 19             StdOut.println(":"timer.elapsedTime());
--[ 2021.10.24.21.21.36.330.0 ]--
r 19             StdOut.println(":",timer.elapsedTime());
--[ 2021.10.24.21.21.36.860.0 ]--
r 19             StdOut.println(":", timer.elapsedTime());
--[ 2021.10.24.21.21.37.750.0 ]--
r 19             StdOut.println("", timer.elapsedTime());
--[ 2021.10.24.21.21.38.610.0 ]--
r 19             StdOut.println("]", timer.elapsedTime());
--[ 2021.10.24.21.21.38.906.0 ]--
r 19             StdOut.println("", timer.elapsedTime());
--[ 2021.10.24.21.21.39.163.0 ]--
r 19             StdOut.println("\", timer.elapsedTime());
--[ 2021.10.24.21.21.39.473.0 ]--
r 19             StdOut.println("\n", timer.elapsedTime());
--[ 2021.10.24.21.21.42.051.0 ]--
r 19             StdOut.println("%\n", timer.elapsedTime());
--[ 2021.10.24.21.21.44.276.0 ]--
r 19             StdOut.println("%d\n", timer.elapsedTime());
--[ 2021.10.24.21.21.46.260.0 ]--
r 19             StdOut.println("N%d\n", timer.elapsedTime());
--[ 2021.10.24.21.21.46.978.0 ]--
r 19             StdOut.println("N %d\n", timer.elapsedTime());
--[ 2021.10.24.21.21.47.153.0 ]--
r 19             StdOut.println("N =%d\n", timer.elapsedTime());
--[ 2021.10.24.21.21.47.256.0 ]--
r 19             StdOut.println("N = %d\n", timer.elapsedTime());
--[ 2021.10.24.21.21.51.286.0 ]--
r 19             StdOut.println("N = %d \n", timer.elapsedTime());
--[ 2021.10.24.21.21.53.198.0 ]--
r 19             StdOut.println("N = %d .\n", timer.elapsedTime());
--[ 2021.10.24.21.21.53.420.0 ]--
r 19             StdOut.println("N = %d ..\n", timer.elapsedTime());
--[ 2021.10.24.21.21.54.255.0 ]--
r 19             StdOut.println("N = %d .\n", timer.elapsedTime());
--[ 2021.10.24.21.21.54.529.0 ]--
r 19             StdOut.println("N = %d \n", timer.elapsedTime());
--[ 2021.10.24.21.21.58.147.0 ]--
r 19             StdOut.println("N = %d |\n", timer.elapsedTime());
--[ 2021.10.24.21.21.58.419.0 ]--
r 19             StdOut.println("N = %d ||\n", timer.elapsedTime());
--[ 2021.10.24.21.21.59.006.0 ]--
r 19             StdOut.println("N = %d || \n", timer.elapsedTime());
--[ 2021.10.24.21.22.01.015.0 ]--
r 19             StdOut.println("N = %d || T\n", timer.elapsedTime());
--[ 2021.10.24.21.22.01.187.0 ]--
r 19             StdOut.println("N = %d || Ti\n", timer.elapsedTime());
--[ 2021.10.24.21.22.01.289.0 ]--
r 19             StdOut.println("N = %d || Tim\n", timer.elapsedTime());
--[ 2021.10.24.21.22.01.386.0 ]--
r 19             StdOut.println("N = %d || Time\n", timer.elapsedTime());
--[ 2021.10.24.21.22.01.509.0 ]--
r 19             StdOut.println("N = %d || Time \n", timer.elapsedTime());
--[ 2021.10.24.21.22.02.368.0 ]--
r 19             StdOut.println("N = %d || Time =\n", timer.elapsedTime());
--[ 2021.10.24.21.22.02.896.0 ]--
r 19             StdOut.println("N = %d || Time = \n", timer.elapsedTime());
--[ 2021.10.24.21.22.04.368.0 ]--
r 19             StdOut.println("N = %d || Time = %\n", timer.elapsedTime());
--[ 2021.10.24.21.22.06.740.0 ]--
r 19             StdOut.println("N = %d || Time = %d\n", timer.elapsedTime());
--[ 2021.10.24.21.22.07.670.0 ]--
r 19             StdOut.println("N = %d || Time = %\n", timer.elapsedTime());
--[ 2021.10.24.21.22.07.997.0 ]--
r 19             StdOut.println("N = %d || Time = %f\n", timer.elapsedTime());
--[ 2021.10.24.21.22.11.796.0 ]--
r 19             StdOut.println("N = %d || Time = %f \n", timer.elapsedTime());
--[ 2021.10.24.21.22.12.447.0 ]--
r 19             StdOut.println("N = %d || Time = %f |\n", timer.elapsedTime());
--[ 2021.10.24.21.22.12.628.0 ]--
r 19             StdOut.println("N = %d || Time = %f ||\n", timer.elapsedTime());
--[ 2021.10.24.21.22.13.315.0 ]--
r 19             StdOut.println("N = %d || Time = %f || \n", timer.elapsedTime());
--[ 2021.10.24.21.22.24.881.0 ]--
r 19             StdOut.println("N = %d || Time = %f || \n",  timer.elapsedTime());
--[ 2021.10.24.21.22.25.085.0 ]--
r 19             StdOut.println("N = %d || Time = %f || \n", n timer.elapsedTime());
--[ 2021.10.24.21.22.25.446.0 ]--
r 19             StdOut.println("N = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.24.43.240.0 ]--
UpdateTree (AD): 0 1
- /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.21.24.43.240.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@2f69537e
--[ 2021.10.24.21.24.46.355.0 ]--
- 11
r 12         
--[ 2021.10.24.21.24.46.357.0 ]--
UpdateTree (AD): 1 1
- /out/production/P03_Sorting/DoublingTest.class
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.21.24.46.380.0 ]--
UpdateTree (AD): 1 1
- /out/production/P03_Sorting/DoublingTest.class
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.21.24.46.678.0 ]--
- 11
--[ 2021.10.24.21.24.46.679.0 ]--
UpdateTree (AD): 1 1
- /out/production/P03_Sorting/DoublingTest.class
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.21.24.46.680.0 ]--
UpdateTree (AD): 1 1
- /out/production/P03_Sorting/DoublingTest.class
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.21.24.46.936.0 ]--
- 11
--[ 2021.10.24.21.24.46.937.0 ]--
UpdateTree (AD): 1 1
- /out/production/P03_Sorting/DoublingTest.class
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.21.24.46.939.0 ]--
UpdateTree (AD): 1 1
- /out/production/P03_Sorting/DoublingTest.class
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.21.24.48.590.0 ]--
- 11
--[ 2021.10.24.21.24.48.590.1 ]--
UpdateTree (AD): 1 1
- /out/production/P03_Sorting/DoublingTest.class
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.21.24.48.591.0 ]--
UpdateTree (AD): 1 1
- /out/production/P03_Sorting/DoublingTest.class
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.21.24.54.395.0 ]--
DisposeComponent
--[ 2021.10.24.21.25.01.621.0 ]--
NewLogger: P03_Sorting
Version: 1.5
--[ 2021.10.24.21.25.01.694.0 ]--
InitTree:
/out/production/P03_Sorting/algs4.jar
/out/production/P03_Sorting/stdlib.jar
/out/production/P03_Sorting/Bubble.class
/out/production/P03_Sorting/EdgeCases.class
/out/production/P03_Sorting/MedianOfN.class
/out/production/P03_Sorting/LinkedList.class
/out/production/P03_Sorting/DoublingTest.class
/out/production/P03_Sorting/LinkedList$1.class
/out/production/P03_Sorting/LinkedList$Node.class
/out/production/P03_Sorting/QuickSortMedian.class
/out/production/P03_Sorting/QuickSortMedian3.class
/out/production/P03_Sorting/QuickSortMedian5.class
/out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
/out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
/src/algs4.jar
/src/stdlib.jar
/src/Bubble.java
/src/EdgeCases.java
/src/MedianOfN.java
/src/LinkedList.java
/src/DoublingTest.java
/src/QuickSortMedian.java
/src/QuickSortMedian3.java
/src/QuickSortMedian5.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/runConfigurations.xml
/.cos265
/readme.html
/P03_Sorting.iml

--[ 2021.10.24.21.25.01.694.1 ]--
InitFile: /src/LinkedList.java
import java.util.Iterator;

public class LinkedList<Item extends Comparable<Item>> implements Iterable<Item> {
    private Node first = null;
    private int count = 0;

    private class Node {
        final Item item;    // cannot change item once it is set in constructor
        Node next;          // can change next, though

        public Node(Item i, Node n) {
            item = i;
            next = n;
        }
    }

    public LinkedList() { }

    public LinkedList(Item[] fromList) {
        for(Item item : fromList) insert(item);
    }

    public void insert(Item item) {
        first = new Node(item, first);
        count++;
    }

    public Item remove() {
        Item item = first.item;
        first = first.next;
        count--;
        return item;
    }

    public boolean isEmpty() { return count == 0; }

    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            Node current = first;

            @Override
            public boolean hasNext() {
                return current != null;
            }

            @Override
            public Item next() {
                Item item = current.item;
                current = current.next;
                return item;
            }
        };
    }

    /***********************************************************************
     * Rearranges the linked list in ascending order, using the natural order
     * and mergesort.
     ***********************************************************************/
    
    public void sort() {
        first = sort(first, count);
    }

    private Node sort(Node head, int len) {
        if (len <= 1) return head;
        Node mid = head;
        for (int i=0; i<len/2-1; i++) {
            mid = mid.next;
        }
        Node tmp = mid;
        mid = mid.next;
        tmp.next = null;
        head = sort(head, len/2);
        mid = sort(mid, len-len/2);
        return merge(head, mid);
    }

    private Node merge(Node low, Node high) {
        Node head = null;
        Node last = null;
        while (low != null && high != null) {
            if (low.item.compareTo(high.item) < 0) {
                if (head == null) {
                    head = low;
                } else {
                    last.next = low;
                }
                last = low;
                low = low.next;
            } else {
                if (head == null) {
                    head = high;
                } else {
                    last.next = high;
                }
                last = high;
                high = high.next;
            }
        }
        if (low == null) {
            last.next = high;
        } else {
            last.next = low;
        }
        return head;
    }

    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void evenList() {
        Double[] a = {5.0, 1.0, 7.0, 3.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void oddList() {
        Double[] a = {5.0, 1.0, 7.0, 3.0, 0.5};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void alreadySorted() {
        Double[] a = {1.0, 2.0, 3.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void lowRunsOut() {
        Double[] a = {1.0, 2.0, 3.0, 7.0, 8.0, 9.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void highRunsOut() {
        Double[] a = {7.0, 8.0, 9.0, 1.0, 2.0, 3.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void lowHighEqual() {
        Double[] a = {4.0, 3.0, 2.0, 4.0, 3.0, 2.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void main(String[] args) {
        evenList();
        StdOut.println();
        oddList();
        StdOut.println();
        alreadySorted();
        StdOut.println();
        highRunsOut();
        StdOut.println();
        lowRunsOut();
        StdOut.println();
        lowHighEqual();
    }
}

--[ 2021.10.24.21.25.01.695.0 ]--
InitFile: /src/QuickSortMedian5.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian5 extends QuickSortMedian {

    public static class MedianOf5 extends MedianOfN {
        public MedianOf5() {
            // tell QuickSortMedian.MedianOfN we will find the median of 5 items
            super(5);
        }

        /***********************************************************
         * Determines which index in parameter indices points to
         * the median value in parameter a
         * @param a the array containing values
         * @param indices the array containing indices into a
         * @return the index of median value
         ***********************************************************/
        public int median(Comparable[] a, int[] indices) {
            // get values at specified indices
            int i0 = indices[0];
            int i1 = indices[1];
            int i2 = indices[2];
            int i3 = indices[3];
            int i4 = indices[4];
            Comparable a0 = a[i0];
            Comparable a1 = a[i1];
            Comparable a2 = a[i2];
            Comparable a3 = a[i3];
            Comparable a4 = a[i4];

            // find median in a0,a1,a2,a3,a4, and return respective index
            // if a0 is median, return i0
            // if a1 is median, return i1
            // etc.

            return i0;
        }
    }

    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/
    public static void sort(Comparable[] a) {
        MedianOf5 median = new MedianOf5();
        QuickSortMedian.sort(a, median);
    }


    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = {0.0};
        QuickSortMedian5.sort(a);
    }
}

--[ 2021.10.24.21.25.01.695.1 ]--
InitFile: /.cos265


--[ 2021.10.24.21.25.01.695.2 ]--
InitFile: /src/QuickSortMedian3.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian3 extends QuickSortMedian {

    public static class MedianOf3 extends MedianOfN {
        public MedianOf3() {
            // tell QuickSortMedian.MedianOfN we will find the median of 3 items
            super(3);
        }

        /***********************************************************
         * Determines which index in parameter indices points to
         * the median value in parameter a
         * @param a the array containing values
         * @param indices the array containing indices into a
         * @return the index of median value
         ***********************************************************/
        public int median(Comparable[] a, int[] indices) {
            // get values at specified indices
            int i0 = indices[0];
            int i1 = indices[1];
            int i2 = indices[2];
            Comparable a0 = a[i0];
            Comparable a1 = a[i1];
            Comparable a2 = a[i2];

            // find median in a0,a1,a2, and return respective index
            // if a0 is median, return i0
            // if a1 is median, return i1
            // if a2 is median, return i2

            return i0;
        }
    }


    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/
    public static void sort(Comparable[] a) {
        MedianOf3 median = new MedianOf3();
        sort(a, median);
    }

    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = {0.0};
        QuickSortMedian3.sort(a);
    }
}

--[ 2021.10.24.21.25.01.696.0 ]--
InitFile: /src/EdgeCases.java
public class EdgeCases {
    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = { 0.0 };

        Bubble.sort(a);     // bubble sort
        Selection.sort(a);  // selection sort
        Insertion.sort(a);  // insertion sort
        Shell.sort(a);      // Shellsort
        Quick.sort(a);      // quicksort
    }
}

--[ 2021.10.24.21.25.01.696.1 ]--
InitFile: /src/DoublingTest.java
public class DoublingTest {

    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};

        for (int n=1000; true; n*=2) {
            Stopwatch timer = new Stopwatch();
            Selection.sort(a);  // selection sort
            StdOut.println("N = %d || Time = %f || \n", n, timer.elapsedTime());
        }

        for (int n=1000; true; n*=2) {
            Stopwatch timer = new Stopwatch();
            Insertion.sort(a);  // insertion sort
            StdOut.println(timer.elapsedTime());
        }

        for (int n=1000; true; n*=2) {
            Stopwatch timer = new Stopwatch();
            Shell.sort(a);      // Shellsort
            StdOut.println(timer.elapsedTime());
        }
    }
}

--[ 2021.10.24.21.25.01.696.2 ]--
InitFile: /src/Bubble.java
public class Bubble {

    public static void sort(Comparable[] a) {
        boolean sorted = false;
        while(!sorted) {
            sorted = true;
            for(int i = 0; i < a.length - 1; i++)
                if(less(a[i + 1], a[i])) {
                    sorted = false;
                    exch(a, i, i + 1);
                }
        }
    }

    /***********************************************************************
     *  Helper sorting functions
     ***********************************************************************/

    // is v < w ?
    private static boolean less(Comparable v, Comparable w) {
        return (v.compareTo(w) < 0);
    }

    // exchange a[i] and a[j]
    private static void exch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }

    /***********************************************************************
     *  main() function is used to experimentally verify bubble sort works
     *  - generate a Double array
     *  - fill array with random values
     *  - sort
     *  - assert that each value is smaller than or equal to next value
     ***********************************************************************/

    public static void main(String[] args) {
        int N = 1000;
        Double[] a = new Double[N];
        for(int i = 0; i < N; i++) a[i] = StdRandom.uniform();
        Bubble.sort(a);
        for(int i = 0; i < N-1; i++) assert a[i] <= a[i+1];
    }
}

--[ 2021.10.24.21.25.01.697.0 ]--
InitFile: /src/QuickSortMedian.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian {

    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/

    public static void sort(Comparable[] a, MedianOfN median) {
        sort(a, median, 0, a.length - 1);
    }

    // quicksort the subarray from a[lo] to a[hi]
    private static void sort(Comparable[] a, MedianOfN median, int lo, int hi) {
        if(hi <= lo) return;
        int j = partition(a, median, lo, hi);   // partition data into parts, returning pivot index
        sort(a, median, lo, j-1);   // recursively sort lower part
        sort(a, median, j+1, hi);   // recursively sort higher part
    }

    // partition the subarray a[lo..hi] so that a[lo..j-1] <= a[j] <= a[j+1..hi]
    // and return the index j.  note: v = a[j]
    private static int partition(Comparable[] a, MedianOfN median, int lo, int hi) {
        int i = lo;
        int j = hi + 1;

        int k = median.median(a, lo, hi);   // determine position of a pivot
        exch(a, lo, k);                     // move pivot to lo position
        Comparable v = a[lo];               // v is pivot value

        while(true) {

            // find item on lo to swap
            while(less(a[++i], v))
                if(i == hi) break;

            // find item on hi to swap
            while(less(v, a[--j]))
                if(j == lo) break;      // redundant since a[lo] acts as sentinel

            // check if pointers cross
            if(i >= j) break;

            exch(a, i, j);
        }

        // put partitioning item v at a[j]
        exch(a, lo, j);

        // now, a[lo .. j-1] <= a[j] <= a[j+1 .. hi]
        return j;
    }


    /***********************************************************************
     *  Helper sorting functions
     ***********************************************************************/

    // is v < w ?
    private static boolean less(Comparable v, Comparable w) {
        return (v.compareTo(w) < 0);
    }

    // exchange a[i] and a[j]
    private static void exch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }


    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {

    }
}

--[ 2021.10.24.21.25.01.697.1 ]--
InitFile: /P03_Sorting.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.24.21.25.01.697.2 ]--
InitFile: /src/MedianOfN.java
public abstract class MedianOfN {
    private int N;
    private int[] indices;

    public MedianOfN(int N) {
        this.N = N;
        indices = new int[N];
    }

    public abstract int median(Comparable[] a, int[] indices);

    public int median(Comparable[] a, int lo, int hi) {
        // if hi and lo are "close enough", simply return lo
        if(hi - lo + 1 < N) return lo;
        // choose N random indices in [lo, hi]
        for(int i = 0; i < N; i++) indices[i] = StdRandom.uniform(lo, hi + 1);
        return median(a, indices);
    }
}

--[ 2021.10.24.21.25.27.116.0 ]--
:/src/DoublingTest.java
r 15             StdOut.println("N = %d || Time = %f || \n",  timer.elapsedTime());
--[ 2021.10.24.21.25.27.117.0 ]--
UpdateTree (AD): 0 1
- /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.21.25.27.463.0 ]--
r 15             StdOut.println("N = %d || Time = %f || \n", timer.elapsedTime());
--[ 2021.10.24.21.25.31.098.0 ]--
r 15             StdOut.println("N = % || Time = %f || \n", timer.elapsedTime());
--[ 2021.10.24.21.25.31.248.0 ]--
r 15             StdOut.println("N =  || Time = %f || \n", timer.elapsedTime());
--[ 2021.10.24.21.25.35.112.0 ]--
r 15             StdOut.println("N = %d || Time = %f || \n", timer.elapsedTime());
--[ 2021.10.24.21.25.35.914.0 ]--
r 15             StdOut.println("N = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.27.49.659.0 ]--
r 15             StdOut.println("N = %d || Time = %f || \n", n timer.elapsedTime());
--[ 2021.10.24.21.27.50.249.0 ]--
r 15             StdOut.println("N = %d || Time = %f || \n", n  timer.elapsedTime());
--[ 2021.10.24.21.27.51.632.0 ]--
r 15             StdOut.println("N = %d || Time = %f || \n", n + timer.elapsedTime());
--[ 2021.10.24.21.27.52.913.0 ]--
r 15             StdOut.println("N = %d || Time = %f || \n", n  timer.elapsedTime());
--[ 2021.10.24.21.27.53.068.0 ]--
r 15             StdOut.println("N = %d || Time = %f || \n", n timer.elapsedTime());
--[ 2021.10.24.21.28.00.344.0 ]--
r 15             StdOut.println("N = "%d || Time = %f || \n", n timer.elapsedTime()");
--[ 2021.10.24.21.28.01.271.0 ]--
r 15             StdOut.println("N = "");
--[ 2021.10.24.21.28.02.306.0 ]--
r 15             StdOut.println("N = ");
--[ 2021.10.24.21.28.05.492.0 ]--
r 15             StdOut.println("N = %");
--[ 2021.10.24.21.28.06.697.0 ]--
r 15             StdOut.println("N = %d");
--[ 2021.10.24.21.28.08.619.0 ]--
r 15             StdOut.println("N = %d",);
--[ 2021.10.24.21.28.09.061.0 ]--
r 15             StdOut.println("N = %d", );
--[ 2021.10.24.21.28.09.445.0 ]--
r 15             StdOut.println("N = %d", n);
--[ 2021.10.24.21.28.39.788.0 ]--
r 15             StdOut.printl("N = %d", n);
--[ 2021.10.24.21.28.39.927.0 ]--
r 15             StdOut.print("N = %d", n);
--[ 2021.10.24.21.28.40.072.0 ]--
r 15             StdOut.printf("N = %d", n);
--[ 2021.10.24.21.28.43.916.0 ]--
r 15             StdOut.print("N = %d", n);
--[ 2021.10.24.21.28.43.999.0 ]--
r 15             StdOut.println("N = %d", n);
--[ 2021.10.24.21.28.44.509.0 ]--
r 15             StdOut.println("N = %d");
--[ 2021.10.24.21.28.44.924.0 ]--
r 15             StdOut.println("N = ");
--[ 2021.10.24.21.28.45.113.0 ]--
r 15             StdOut.println("N = "%d || Time = %f || \n", n timer.elapsedTime()");
--[ 2021.10.24.21.28.45.280.0 ]--
r 15             StdOut.println("N = %d || Time = %f || \n", n timer.elapsedTime());
--[ 2021.10.24.21.28.46.446.0 ]--
r 15             StdOut.println("N = "%d || Time = %f || \n", n timer.elapsedTime()");
--[ 2021.10.24.21.28.47.423.0 ]--
r 15             StdOut.println("N = ");
--[ 2021.10.24.21.28.47.947.0 ]--
r 15             StdOut.println("N = "%d || Time = %f || \n", n timer.elapsedTime()");
--[ 2021.10.24.21.28.48.169.0 ]--
r 15             StdOut.println("N = %d || Time = %f || \n", n timer.elapsedTime());
--[ 2021.10.24.21.28.49.101.0 ]--
r 15             StdOut.println("N = %d || Time = %f || \n", n + timer.elapsedTime());
--[ 2021.10.24.21.28.49.676.0 ]--
r 15             StdOut.println("N = %d || Time = %f || \n", n timer.elapsedTime());
--[ 2021.10.24.21.28.50.027.0 ]--
r 15             StdOut.println("N = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.28.52.111.0 ]--
r 15             StdOut.printl("N = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.28.52.215.0 ]--
r 15             StdOut.print("N = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.28.52.329.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.29.02.211.0 ]--
r 21             StdOut.printf("N = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.29.04.928.0 ]--
r 27             StdOut.printf("N = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.29.15.431.0 ]--
r 12         for (int n=1000; n; n*=2) {
--[ 2021.10.24.21.29.16.564.0 ]--
r 12         for (int n=1000; n<; n*=2) {
--[ 2021.10.24.21.29.18.504.0 ]--
r 12         for (int n=1000; n<1; n*=2) {
--[ 2021.10.24.21.29.18.741.0 ]--
r 12         for (int n=1000; n<10; n*=2) {
--[ 2021.10.24.21.29.18.864.0 ]--
r 12         for (int n=1000; n<100; n*=2) {
--[ 2021.10.24.21.29.19.006.0 ]--
r 12         for (int n=1000; n<1000; n*=2) {
--[ 2021.10.24.21.29.22.156.0 ]--
r 12         for (int n=1000; n<1000*; n*=2) {
--[ 2021.10.24.21.29.23.603.0 ]--
r 12         for (int n=1000; n<1000*5; n*=2) {
--[ 2021.10.24.21.29.24.655.0 ]--
r 12         for (int n=1000; n<1000*; n*=2) {
--[ 2021.10.24.21.29.26.681.0 ]--
r 12         for (int n=1000; n<1000*2; n*=2) {
--[ 2021.10.24.21.29.29.492.0 ]--
r 12         for (int n=1000; n<1000*2); n*=2) {
--[ 2021.10.24.21.29.32.030.0 ]--
r 12         for (int n=1000; n<51000*2); n*=2) {
--[ 2021.10.24.21.29.32.732.0 ]--
r 12         for (int n=1000; n<5*1000*2); n*=2) {
--[ 2021.10.24.21.29.33.166.0 ]--
r 12         for (int n=1000; n<5*(1000*2); n*=2) {
--[ 2021.10.24.21.29.50.784.0 ]--
r 18         for (int n=1000; trn<5*(1000*2)ue; n*=2) {
--[ 2021.10.24.21.29.51.691.0 ]--
r 18         for (int n=1000; true; n*=2) {
--[ 2021.10.24.21.29.53.263.0 ]--
r 18         for (int n=1000; n<5*(1000*2); n*=2) {
--[ 2021.10.24.21.29.54.669.0 ]--
r 24         for (int n=1000; n<5*(1000*2); n*=2) {
--[ 2021.10.24.21.29.59.385.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.21.30.08.597.0 ]--
r 17     
--[ 2021.10.24.21.30.08.599.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.21.30.08.911.0 ]--
r 17         
--[ 2021.10.24.21.30.09.818.0 ]--
r 17         S
--[ 2021.10.24.21.30.10.043.0 ]--
r 17         ST
--[ 2021.10.24.21.30.10.776.0 ]--
r 17         S
--[ 2021.10.24.21.30.10.835.0 ]--
r 17         ST
--[ 2021.10.24.21.30.11.601.0 ]--
r 17         S
--[ 2021.10.24.21.30.11.747.0 ]--
r 17         ST
--[ 2021.10.24.21.30.12.137.0 ]--
r 17         S
--[ 2021.10.24.21.30.12.524.0 ]--
r 17         St
--[ 2021.10.24.21.30.12.810.0 ]--
r 17         Std
--[ 2021.10.24.21.30.13.400.0 ]--
r 17         StdOut
--[ 2021.10.24.21.30.13.593.0 ]--
r 17         StdOut.
--[ 2021.10.24.21.30.14.248.0 ]--
r 17         StdOut.println
--[ 2021.10.24.21.30.14.264.0 ]--
r 17         StdOut.println()
--[ 2021.10.24.21.30.14.269.0 ]--
r 17         StdOut.println();
--[ 2021.10.24.21.30.19.637.0 ]--
r 23 StdOut.println();
--[ 2021.10.24.21.30.19.655.0 ]--
r 23         StdOut.println();
--[ 2021.10.24.21.30.23.991.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.21.30.48.641.0 ]--
r 12         for (int n=1000; n<*(1000*2); n*=2) {
--[ 2021.10.24.21.30.49.151.0 ]--
r 12         for (int n=1000; n<1*(1000*2); n*=2) {
--[ 2021.10.24.21.30.49.257.0 ]--
r 12         for (int n=1000; n<10*(1000*2); n*=2) {
--[ 2021.10.24.21.30.53.973.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.21.30.57.340.0 ]--
r 12         for (int n=1000; n<100*(1000*2); n*=2) {
--[ 2021.10.24.21.30.57.557.0 ]--
r 12         for (int n=1000; n<1000*(1000*2); n*=2) {
--[ 2021.10.24.21.30.57.824.0 ]--
r 12         for (int n=1000; n<10000*(1000*2); n*=2) {
--[ 2021.10.24.21.31.01.288.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.21.31.10.182.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.21.31.28.364.0 ]--
r 12         for (int n=1000; n<10*(1000*2); n*=2) {
--[ 2021.10.24.21.31.28.509.0 ]--
r 12         for (int n=1000; n<*(1000*2); n*=2) {
--[ 2021.10.24.21.31.28.675.0 ]--
r 12         for (int n=1000; n<5*(1000*2); n*=2) {
--[ 2021.10.24.21.31.29.346.0 ]--
r 23 
--[ 2021.10.24.21.31.29.508.0 ]--
r 17         StdOut.
--[ 2021.10.24.21.31.29.622.0 ]--
r 17         StdOut
--[ 2021.10.24.21.31.29.809.0 ]--
r 17         Std
--[ 2021.10.24.21.31.29.961.0 ]--
r 17         S
--[ 2021.10.24.21.31.30.138.0 ]--
r 17         ST
--[ 2021.10.24.21.31.30.336.0 ]--
r 17         S
--[ 2021.10.24.21.31.30.500.0 ]--
r 17         ST
--[ 2021.10.24.21.31.30.680.0 ]--
r 17         S
--[ 2021.10.24.21.31.30.871.0 ]--
r 17         ST
--[ 2021.10.24.21.31.31.049.0 ]--
r 17         
--[ 2021.10.24.21.31.31.252.0 ]--
r 17 
--[ 2021.10.24.21.31.31.680.0 ]--
r 24         for (int n=1000; true; n*=2) {
--[ 2021.10.24.21.31.32.093.0 ]--
r 18         for (int n=1000; true; n*=2) {
--[ 2021.10.24.21.31.32.492.0 ]--
r 12         for (int n=1000; n<1000*2); n*=2) {
--[ 2021.10.24.21.31.33.306.0 ]--
r 12         for (int n=1000; n<1000*2; n*=2) {
--[ 2021.10.24.21.31.33.745.0 ]--
r 12         for (int n=1000; n<1000*; n*=2) {
--[ 2021.10.24.21.31.34.067.0 ]--
r 12         for (int n=1000; n<1000*5; n*=2) {
--[ 2021.10.24.21.31.34.419.0 ]--
r 12         for (int n=1000; true; n*=2) {
--[ 2021.10.24.21.31.39.669.0 ]--
UpdateTree (AD): 0 1
- /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.21.31.39.670.0 ]--
CompilationStatus (AEW): 0 2 0
[Ljava.lang.String;@280228c6
--[ 2021.10.24.21.31.47.709.0 ]--
r 12         for (int n=1000; n; n*=2) {
--[ 2021.10.24.21.31.48.773.0 ]--
r 12         for (int n=1000; n<; n*=2) {
--[ 2021.10.24.21.31.49.297.0 ]--
r 12         for (int n=1000; n<1; n*=2) {
--[ 2021.10.24.21.31.49.926.0 ]--
r 12         for (int n=1000; n<10; n*=2) {
--[ 2021.10.24.21.31.50.094.0 ]--
r 12         for (int n=1000; n<100; n*=2) {
--[ 2021.10.24.21.31.50.295.0 ]--
r 12         for (int n=1000; n<1000; n*=2) {
--[ 2021.10.24.21.31.50.508.0 ]--
r 12         for (int n=1000; n<10000; n*=2) {
--[ 2021.10.24.21.31.50.716.0 ]--
r 12         for (int n=1000; n<100000; n*=2) {
--[ 2021.10.24.21.31.50.933.0 ]--
r 12         for (int n=1000; n<1000000; n*=2) {
--[ 2021.10.24.21.32.01.391.0 ]--
r 18         for (int n=1000; n<1000000; n*=2) {
--[ 2021.10.24.21.32.02.535.0 ]--
r 24         for (int n=1000; n<1000000; n*=2) {
--[ 2021.10.24.21.32.05.275.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.21.32.16.758.0 ]--
r 17     
--[ 2021.10.24.21.32.16.760.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.21.32.17.378.0 ]--
r 17         
--[ 2021.10.24.21.32.17.841.0 ]--
r 17         S
--[ 2021.10.24.21.32.18.837.0 ]--
r 17         StdOut
--[ 2021.10.24.21.32.18.972.0 ]--
r 17         StdOut.
--[ 2021.10.24.21.32.19.655.0 ]--
r 17         StdOut.println
--[ 2021.10.24.21.32.19.662.0 ]--
r 17         StdOut.println()
--[ 2021.10.24.21.32.19.667.0 ]--
r 17         StdOut.println();
--[ 2021.10.24.21.32.22.875.0 ]--
r 23 StdOut.println();
--[ 2021.10.24.21.32.22.892.0 ]--
r 23         StdOut.println();
--[ 2021.10.24.21.32.26.437.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.21.33.12.109.0 ]--
r 24         for (int n=1000; n<10000000; n*=2) {
--[ 2021.10.24.21.33.13.045.0 ]--
r 24         for (int n=1000; n<100000000; n*=2) {
--[ 2021.10.24.21.33.13.228.0 ]--
r 24         for (int n=1000; n<1000000000; n*=2) {
--[ 2021.10.24.21.33.13.349.0 ]--
r 24         for (int n=1000; n<10000000000; n*=2) {
--[ 2021.10.24.21.33.13.472.0 ]--
r 24         for (int n=1000; n<100000000000; n*=2) {
--[ 2021.10.24.21.33.13.650.0 ]--
r 24         for (int n=1000; n<1000000000000; n*=2) {
--[ 2021.10.24.21.33.13.823.0 ]--
r 24         for (int n=1000; n<10000000000000; n*=2) {
--[ 2021.10.24.21.33.13.987.0 ]--
r 24         for (int n=1000; n<100000000000000; n*=2) {
--[ 2021.10.24.21.33.14.131.0 ]--
r 24         for (int n=1000; n<1000000000000000; n*=2) {
--[ 2021.10.24.21.33.14.299.0 ]--
r 24         for (int n=1000; n<10000000000000000; n*=2) {
--[ 2021.10.24.21.33.14.449.0 ]--
r 24         for (int n=1000; n<100000000000000000; n*=2) {
--[ 2021.10.24.21.33.14.598.0 ]--
r 24         for (int n=1000; n<1000000000000000000; n*=2) {
--[ 2021.10.24.21.33.14.726.0 ]--
r 24         for (int n=1000; n<10000000000000000000; n*=2) {
--[ 2021.10.24.21.33.14.893.0 ]--
r 24         for (int n=1000; n<100000000000000000000; n*=2) {
--[ 2021.10.24.21.33.19.412.0 ]--
r 24         for (int n=1000; n<10000000000000000000; n*=2) {
--[ 2021.10.24.21.33.19.527.0 ]--
r 24         for (int n=1000; n<1000000000000000000; n*=2) {
--[ 2021.10.24.21.33.19.674.0 ]--
r 24         for (int n=1000; n<100000000000000000; n*=2) {
--[ 2021.10.24.21.33.19.824.0 ]--
r 24         for (int n=1000; n<10000000000000000; n*=2) {
--[ 2021.10.24.21.33.19.930.0 ]--
r 24         for (int n=1000; n<1000000000000000; n*=2) {
--[ 2021.10.24.21.33.23.934.0 ]--
r 24         for (int n=1000; n<100000000000000; n*=2) {
--[ 2021.10.24.21.33.24.094.0 ]--
r 24         for (int n=1000; n<10000000000000; n*=2) {
--[ 2021.10.24.21.33.24.223.0 ]--
r 24         for (int n=1000; n<1000000000000; n*=2) {
--[ 2021.10.24.21.33.24.400.0 ]--
r 24         for (int n=1000; n<100000000000; n*=2) {
--[ 2021.10.24.21.33.24.539.0 ]--
r 24         for (int n=1000; n<10000000000; n*=2) {
--[ 2021.10.24.21.33.24.678.0 ]--
r 24         for (int n=1000; n<1000000000; n*=2) {
--[ 2021.10.24.21.33.24.844.0 ]--
r 24         for (int n=1000; n<100000000; n*=2) {
--[ 2021.10.24.21.33.26.799.0 ]--
r 24         for (int n=1000; n<100000000-0; n*=2) {
--[ 2021.10.24.21.33.27.617.0 ]--
r 24         for (int n=1000; n<100000000-; n*=2) {
--[ 2021.10.24.21.33.27.869.0 ]--
r 24         for (int n=1000; n<100000000; n*=2) {
--[ 2021.10.24.21.33.28.567.0 ]--
r 24         for (int n=1000; n<1000000000; n*=2) {
--[ 2021.10.24.21.33.28.655.0 ]--
r 24         for (int n=1000; n<10000000000; n*=2) {
--[ 2021.10.24.21.33.29.667.0 ]--
r 24         for (int n=1000; n<1000000000; n*=2) {
--[ 2021.10.24.21.33.33.471.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.21.33.47.349.0 ]--
r 10         
--[ 2021.10.24.21.33.48.706.0 ]--
+ 13             
--[ 2021.10.24.21.33.49.039.0 ]--
r 13             Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
--[ 2021.10.24.21.33.51.349.0 ]--
+ 20             
--[ 2021.10.24.21.33.51.463.0 ]--
r 20             Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
--[ 2021.10.24.21.34.05.939.0 ]--
+ 27             
--[ 2021.10.24.21.34.06.024.0 ]--
r 27             Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
--[ 2021.10.24.21.34.08.588.0 ]--
- 10
--[ 2021.10.24.21.34.08.702.0 ]--
r 9     public static void main(String[] args) 
--[ 2021.10.24.21.34.10.187.0 ]--
r 9     public static void main(String[] args) {
--[ 2021.10.24.21.34.13.856.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.21.35.08.238.0 ]--
- 15
- 15
- 15
- 15
- 15
- 15
- 15
- 17
- 17
- 17
- 17
- 17
r 17 
--[ 2021.10.24.21.35.08.612.0 ]--
- 17
--[ 2021.10.24.21.35.11.138.0 ]--
r 18     
--[ 2021.10.24.21.35.13.032.0 ]--
r 18     }
--[ 2021.10.24.21.35.14.875.0 ]--
r 16         
--[ 2021.10.24.21.35.17.550.0 ]--
r 16             
--[ 2021.10.24.21.35.22.727.0 ]--
+ 16             
--[ 2021.10.24.21.35.23.322.0 ]--
+ 17             Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
+ 18             Stopwatch timer = new Stopwatch();
+ 19             Selection.sort(a);  // selection sort
r 20             StdOut.printf("N = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.23.346.0 ]--
r 16 
--[ 2021.10.24.21.35.28.856.0 ]--
r 15             StdOut.printf("SN = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.29.065.0 ]--
r 15             StdOut.printf("SeN = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.29.155.0 ]--
r 15             StdOut.printf("SelN = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.29.255.0 ]--
r 15             StdOut.printf("SeleN = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.29.386.0 ]--
r 15             StdOut.printf("SelecN = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.29.633.0 ]--
r 15             StdOut.printf("SelectN = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.29.814.0 ]--
r 15             StdOut.printf("SelectiN = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.29.842.0 ]--
r 15             StdOut.printf("SelectioN = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.29.891.0 ]--
r 15             StdOut.printf("SelectionN = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.29.952.0 ]--
r 15             StdOut.printf("SelectiongN = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.30.665.0 ]--
r 15             StdOut.printf("SelectionN = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.30.748.0 ]--
r 15             StdOut.printf("Selection N = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.34.649.0 ]--
r 15             StdOut.printf("SelectionN = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.35.113.0 ]--
r 15             StdOut.printf("SelectiongN = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.35.313.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.35.666.0 ]--
- 16
- 16
- 16
r 16             
r 17             
--[ 2021.10.24.21.35.35.848.0 ]--
- 16
--[ 2021.10.24.21.35.36.118.0 ]--
r 16         
--[ 2021.10.24.21.35.36.330.0 ]--
r 16         }
--[ 2021.10.24.21.35.36.608.0 ]--
+ 17 
--[ 2021.10.24.21.35.36.894.0 ]--
+ 15             StdOut.printf("N = %d || Time = %f || \n", n, timer.elapsedTime());
+ 16         }
+ 17         StdOut.println();
+ 18         for (int n=1000; n<1000000; n*=2) {
+ 19             Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
+ 20             Stopwatch timer = new Stopwatch();
+ 21             Insertion.sort(a);  // insertion sort
+ 24         StdOut.println();
+ 25         for (int n=1000; n<1000000000; n*=2) {
+ 26             Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
+ 27             Stopwatch timer = new Stopwatch();
+ 28             Shell.sort(a);      // Shellsort
r 29             StdOut.printf("N = %d || Time = %f || \n", n, timer.elapsedTime());
--[ 2021.10.24.21.35.43.308.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.23.01.17.904.0 ]--
r 21             
--[ 2021.10.24.23.01.18.987.0 ]--
+ 15             
--[ 2021.10.24.23.01.19.191.0 ]--
r 15             Insertion.sort(a);  // insertion sort
--[ 2021.10.24.23.01.21.366.0 ]--
r 29             
--[ 2021.10.24.23.01.22.409.0 ]--
+ 16             
--[ 2021.10.24.23.01.22.643.0 ]--
r 16             Shell.sort(a);      // Shellsort
--[ 2021.10.24.23.01.24.731.0 ]--
- 17
- 17
- 17
- 17
- 17
- 17
- 17
- 19
- 19
- 19
- 19
- 19
r 19 
--[ 2021.10.24.23.01.25.122.0 ]--
- 19
--[ 2021.10.24.23.01.25.876.0 ]--
r 18         
--[ 2021.10.24.23.01.26.197.0 ]--
- 18
--[ 2021.10.24.23.01.47.127.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || R\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.47.238.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ra\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.47.477.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Rai\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.47.552.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Rait\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.47.720.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Rai\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.47.841.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Rait\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.47.960.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Rai\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.48.295.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ra\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.48.387.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Rat\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.48.473.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Rati\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.48.495.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.48.543.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ration\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.48.944.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.49.134.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio \n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.49.636.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio =\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.49.764.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = \n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.50.931.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.51.786.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime());
--[ 2021.10.24.23.01.55.107.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(),);
--[ 2021.10.24.23.01.55.239.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), );
--[ 2021.10.24.23.01.55.680.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n);
--[ 2021.10.24.23.01.58.260.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/);
--[ 2021.10.24.23.01.59.609.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/t);
--[ 2021.10.24.23.02.01.503.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/);
--[ 2021.10.24.23.02.01.597.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n);
--[ 2021.10.24.23.02.01.909.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), );
--[ 2021.10.24.23.02.49.717.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n);
--[ 2021.10.24.23.02.50.412.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/);
--[ 2021.10.24.23.02.51.333.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/t);
--[ 2021.10.24.23.02.52.663.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/timer.elapsedTime);
--[ 2021.10.24.23.02.52.678.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/timer;);
--[ 2021.10.24.23.02.52.686.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/timer.elapsedTime);
--[ 2021.10.24.23.02.52.694.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/timer.elapsedTime());
--[ 2021.10.24.23.02.52.713.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/ timer.elapsedTime());
--[ 2021.10.24.23.02.55.037.0 ]--
r 17             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/timer.elapsedTime());
--[ 2021.10.24.23.03.48.632.0 ]--
- 15
r 15             
--[ 2021.10.24.23.03.49.520.0 ]--
- 15
--[ 2021.10.24.23.03.50.819.0 ]--
+ 16             
--[ 2021.10.24.23.03.53.124.0 ]--
- 16
--[ 2021.10.24.23.03.55.742.0 ]--
+ 17         
--[ 2021.10.24.23.03.55.931.0 ]--
+ 17         Insertion.sort(a);  // insertion sort
r 18             Shell.sort(a);      // Shellsort
--[ 2021.10.24.23.03.55.945.0 ]--
r 18         Shell.sort(a);      // Shellsort
--[ 2021.10.24.23.04.02.550.0 ]--
+ 17         
--[ 2021.10.24.23.04.02.866.0 ]--
+ 17         
--[ 2021.10.24.23.04.03.153.0 ]--
+ 18         for (int n=1000; n<1000000; n*=2) {
+ 19             Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
+ 20             Stopwatch timer = new Stopwatch();
+ 21             Selection.sort(a);  // selection sort
+ 22             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/timer.elapsedTime());
r 23         }
--[ 2021.10.24.23.04.03.167.0 ]--
r 17 
--[ 2021.10.24.23.04.03.838.0 ]--
+ 24         
--[ 2021.10.24.23.04.03.960.0 ]--
+ 24         
--[ 2021.10.24.23.04.04.189.0 ]--
+ 25         for (int n=1000; n<1000000; n*=2) {
+ 26             Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
+ 27             Stopwatch timer = new Stopwatch();
+ 28             Selection.sort(a);  // selection sort
+ 29             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/timer.elapsedTime());
r 30         }
--[ 2021.10.24.23.04.04.205.0 ]--
r 24 
--[ 2021.10.24.23.04.07.687.0 ]--
r 31         
--[ 2021.10.24.23.04.10.915.0 ]--
- 21
r 21 Insertion.sort(a);  // insertion sort            StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/timer.elapsedTime());
--[ 2021.10.24.23.04.10.929.0 ]--
r 21             Insertion.sort(a);  // insertion sort            StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/timer.elapsedTime());
--[ 2021.10.24.23.04.12.043.0 ]--
+ 21             Selection.sort(a);  // selection sort
r 22             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/timer.elapsedTime());
--[ 2021.10.24.23.04.15.007.0 ]--
r 21  Insertion.sort(a);  // insertion sort
--[ 2021.10.24.23.04.15.019.0 ]--
r 21             Insertion.sort(a);  // insertion sort
--[ 2021.10.24.23.04.19.045.0 ]--
r 32         
--[ 2021.10.24.23.04.21.451.0 ]--
r 28    Shell.sort(a);      // Shellsort
--[ 2021.10.24.23.04.21.465.0 ]--
r 28             Shell.sort(a);      // Shellsort
--[ 2021.10.24.23.04.22.939.0 ]--
- 31
--[ 2021.10.24.23.04.23.053.0 ]--
- 31
--[ 2021.10.24.23.04.28.081.0 ]--
r 18 //        for (int n=1000; n<1000000; n*=2) {
r 19 //            Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
r 20 //            Stopwatch timer = new Stopwatch();
r 21 //            Insertion.sort(a);  // insertion sort
r 22 //            StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/timer.elapsedTime());
r 23 //        }
r 24 //
r 25 //        for (int n=1000; n<1000000; n*=2) {
r 26 //            Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
r 27 //            Stopwatch timer = new Stopwatch();
r 28 //            Shell.sort(a);      // Shellsort
r 29 //            StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/timer.elapsedTime());
--[ 2021.10.24.23.04.31.412.0 ]--
UpdateTree (AD): 0 1
- /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.23.04.31.413.0 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@60c8f925
--[ 2021.10.24.23.04.37.293.0 ]--
r 30 //        }
--[ 2021.10.24.23.04.37.294.0 ]--
UpdateTree (AD): 1 1
- /out/production/P03_Sorting/DoublingTest.class
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.23.04.37.322.0 ]--
UpdateTree (AD): 1 1
- /out/production/P03_Sorting/DoublingTest.class
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.23.04.37.324.0 ]--
UpdateTree (AD): 1 1
- /out/production/P03_Sorting/DoublingTest.class
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.23.04.37.326.0 ]--
UpdateTree (AD): 1 1
- /out/production/P03_Sorting/DoublingTest.class
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.23.04.40.710.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P03_Sorting/DoublingTest.class

--[ 2021.10.24.23.04.40.710.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.23.05.07.643.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/(timer.elapsedTime()));
--[ 2021.10.24.23.05.10.576.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/(timer.elapsedTime()*));
--[ 2021.10.24.23.05.12.813.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/(timer.elapsedTime()*1));
--[ 2021.10.24.23.05.13.028.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/(timer.elapsedTime()*10));
--[ 2021.10.24.23.05.13.145.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/(timer.elapsedTime()*100));
--[ 2021.10.24.23.05.13.315.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/(timer.elapsedTime()*1000));
--[ 2021.10.24.23.05.18.058.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/(timer.elapsedTime()));
--[ 2021.10.24.23.05.20.120.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), n/timer.elapsedTime());
--[ 2021.10.24.23.05.34.378.0 ]--
r 11         for (int n=1000; n<100000; n*=2) {
--[ 2021.10.24.23.05.34.529.0 ]--
r 11         for (int n=1000; n<10000; n*=2) {
--[ 2021.10.24.23.05.34.669.0 ]--
r 11         for (int n=1000; n<1000; n*=2) {
--[ 2021.10.24.23.05.34.828.0 ]--
r 11         for (int n=1000; n<100; n*=2) {
--[ 2021.10.24.23.05.35.093.0 ]--
r 11         for (int n=1000; n<10; n*=2) {
--[ 2021.10.24.23.05.35.344.0 ]--
r 11         for (int n=1000; n<1; n*=2) {
--[ 2021.10.24.23.05.35.603.0 ]--
r 11         for (int n=1000; n<; n*=2) {
--[ 2021.10.24.23.05.42.671.0 ]--
r 11         for (int n=1000; n; n*=2) {
--[ 2021.10.24.23.05.42.781.0 ]--
r 11         for (int n=1000; ; n*=2) {
--[ 2021.10.24.23.05.43.220.0 ]--
r 11         for (int n=1000; c; n*=2) {
--[ 2021.10.24.23.05.43.413.0 ]--
r 11         for (int n=1000; co; n*=2) {
--[ 2021.10.24.23.05.43.490.0 ]--
r 11         for (int n=1000; cou; n*=2) {
--[ 2021.10.24.23.05.43.650.0 ]--
r 11         for (int n=1000; cout; n*=2) {
--[ 2021.10.24.23.05.43.665.0 ]--
r 11         for (int n=1000; coutn; n*=2) {
--[ 2021.10.24.23.05.44.256.0 ]--
r 11         for (int n=1000; cout; n*=2) {
--[ 2021.10.24.23.05.44.395.0 ]--
r 11         for (int n=1000; cou; n*=2) {
--[ 2021.10.24.23.05.44.537.0 ]--
r 11         for (int n=1000; coun; n*=2) {
--[ 2021.10.24.23.05.44.626.0 ]--
r 11         for (int n=1000; count; n*=2) {
--[ 2021.10.24.23.05.45.542.0 ]--
r 11         for (int n=1000; count ; n*=2) {
--[ 2021.10.24.23.05.45.727.0 ]--
r 11         for (int n=1000; count <; n*=2) {
--[ 2021.10.24.23.05.45.811.0 ]--
r 11         for (int n=1000; count < ; n*=2) {
--[ 2021.10.24.23.05.46.247.0 ]--
r 11         for (int n=1000; count < 5; n*=2) {
--[ 2021.10.24.23.05.48.498.0 ]--
r 10     
--[ 2021.10.24.23.05.49.070.0 ]--
r 10         
--[ 2021.10.24.23.05.52.208.0 ]--
r 10         i
--[ 2021.10.24.23.05.52.243.0 ]--
r 10         in
--[ 2021.10.24.23.05.52.371.0 ]--
r 10         int
--[ 2021.10.24.23.05.52.438.0 ]--
r 10         int 
--[ 2021.10.24.23.05.52.563.0 ]--
r 10         int c
--[ 2021.10.24.23.05.52.657.0 ]--
r 10         int co
--[ 2021.10.24.23.05.52.709.0 ]--
r 10         int cou
--[ 2021.10.24.23.05.52.870.0 ]--
r 10         int coun
--[ 2021.10.24.23.05.52.972.0 ]--
r 10         int count
--[ 2021.10.24.23.05.53.036.0 ]--
r 10         int count 
--[ 2021.10.24.23.05.53.648.0 ]--
r 10         int count =
--[ 2021.10.24.23.05.53.792.0 ]--
r 10         int count = 
--[ 2021.10.24.23.05.54.445.0 ]--
r 10         int count = 0
--[ 2021.10.24.23.05.54.762.0 ]--
r 10         int count = 0;
--[ 2021.10.24.23.05.59.755.0 ]--
r 10         int count = ;
--[ 2021.10.24.23.05.59.969.0 ]--
r 10         int count = 1;
--[ 2021.10.24.23.06.04.728.0 ]--
r 11         for (int n=1000; count < 5; n*=2,) {
--[ 2021.10.24.23.06.04.872.0 ]--
r 11         for (int n=1000; count < 5; n*=2, ) {
--[ 2021.10.24.23.06.06.844.0 ]--
r 11         for (int n=1000; count < 5; n*=2, c) {
--[ 2021.10.24.23.06.07.456.0 ]--
r 11         for (int n=1000; count < 5; n*=2, count) {
--[ 2021.10.24.23.06.08.152.0 ]--
r 11         for (int n=1000; count < 5; n*=2, count+) {
--[ 2021.10.24.23.06.08.270.0 ]--
r 11         for (int n=1000; count < 5; n*=2, count++) {
--[ 2021.10.24.23.06.08.715.0 ]--
r 11         for (int n=1000; count < 5; n*=2, count++;) {
--[ 2021.10.24.23.06.09.208.0 ]--
r 11         for (int n=1000; count < 5; n*=2, count++) {
--[ 2021.10.24.23.06.34.536.0 ]--
r 10         int count = ;
--[ 2021.10.24.23.06.34.767.0 ]--
r 10         int count = 0;
--[ 2021.10.24.23.06.37.870.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.23.06.46.580.0 ]--
r 11         for (int n=1000; count < ; n*=2, count++) {
--[ 2021.10.24.23.06.46.748.0 ]--
r 11         for (int n=1000; count < 4; n*=2, count++) {
--[ 2021.10.24.23.06.49.726.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.24.23.06.51.410.0 ]--
r 11         for (int n=1000; count < ; n*=2, count++) {
--[ 2021.10.24.23.06.52.253.0 ]--
r 11         for (int n=1000; count < 5; n*=2, count++) {
--[ 2021.10.25.08.01.27.041.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.03.54.557.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), ntimer.elapsedTime());
--[ 2021.10.25.08.03.54.687.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), timer.elapsedTime());
--[ 2021.10.25.08.03.56.489.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), timer.elapsedTime()/);
--[ 2021.10.25.08.03.57.148.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), timer.elapsedTime()/n);
--[ 2021.10.25.08.04.01.142.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.05.14.617.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime()*, timer.elapsedTime()/n);
--[ 2021.10.25.08.05.17.826.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime()*1, timer.elapsedTime()/n);
--[ 2021.10.25.08.05.18.028.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime()*10, timer.elapsedTime()/n);
--[ 2021.10.25.08.05.18.199.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime()*100, timer.elapsedTime()/n);
--[ 2021.10.25.08.05.18.357.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime()*1000, timer.elapsedTime()/n);
--[ 2021.10.25.08.05.21.376.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.05.36.801.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime()*10000, timer.elapsedTime()/n);
--[ 2021.10.25.08.05.36.939.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime()*100000, timer.elapsedTime()/n);
--[ 2021.10.25.08.05.37.124.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime()*1000000, timer.elapsedTime()/n);
--[ 2021.10.25.08.05.38.057.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime()*10000000, timer.elapsedTime()/n);
--[ 2021.10.25.08.05.41.201.0 ]--
r 15             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime()*1000000, timer.elapsedTime()/n);
--[ 2021.10.25.08.05.44.451.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.07.06.758.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.08.35.668.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.09.43.002.0 ]--
r 11         for (int n=1000; count < ; n*=2, count++) {
--[ 2021.10.25.08.09.43.460.0 ]--
r 11         for (int n=1000; count < 2; n*=2, count++) {
--[ 2021.10.25.08.09.43.887.0 ]--
r 11         for (int n=1000; count < 20; n*=2, count++) {
--[ 2021.10.25.08.09.46.768.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.10.00.564.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.10.20.888.0 ]--
+ 16             
--[ 2021.10.25.08.10.21.675.0 ]--
r 16             S
--[ 2021.10.25.08.10.21.985.0 ]--
r 16             St
--[ 2021.10.25.08.10.22.589.0 ]--
r 16             Std
--[ 2021.10.25.08.10.23.042.0 ]--
r 16             StdOut
--[ 2021.10.25.08.10.23.275.0 ]--
r 16             StdOut.
--[ 2021.10.25.08.10.24.149.0 ]--
r 16             StdOut.println
--[ 2021.10.25.08.10.24.155.0 ]--
r 16             StdOut.println()
--[ 2021.10.25.08.10.24.158.0 ]--
r 16             StdOut.println();
--[ 2021.10.25.08.10.28.904.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.10.56.189.0 ]--
+ 15             
--[ 2021.10.25.08.10.57.675.0 ]--
r 15             r
--[ 2021.10.25.08.10.57.841.0 ]--
r 15             ru
--[ 2021.10.25.08.10.58.110.0 ]--
r 15             run
--[ 2021.10.25.08.10.58.350.0 ]--
r 15             ru
--[ 2021.10.25.08.10.58.477.0 ]--
r 15             r
--[ 2021.10.25.08.10.58.605.0 ]--
r 15             
--[ 2021.10.25.08.10.59.001.0 ]--
r 15             d
--[ 2021.10.25.08.10.59.129.0 ]--
r 15             do
--[ 2021.10.25.08.10.59.207.0 ]--
r 15             dou
--[ 2021.10.25.08.10.59.267.0 ]--
r 15             doub
--[ 2021.10.25.08.10.59.376.0 ]--
r 15             doubl
--[ 2021.10.25.08.10.59.501.0 ]--
r 15             double
--[ 2021.10.25.08.10.59.563.0 ]--
r 15             double 
--[ 2021.10.25.08.10.59.972.0 ]--
r 15             double r
--[ 2021.10.25.08.11.00.151.0 ]--
r 15             double ru
--[ 2021.10.25.08.11.00.283.0 ]--
r 15             double run
--[ 2021.10.25.08.11.00.446.0 ]--
r 15             double runi
--[ 2021.10.25.08.11.00.717.0 ]--
r 15             double run
--[ 2021.10.25.08.11.00.768.0 ]--
r 15             double runt
--[ 2021.10.25.08.11.00.903.0 ]--
r 15             double runti
--[ 2021.10.25.08.11.00.996.0 ]--
r 15             double runtim
--[ 2021.10.25.08.11.01.042.0 ]--
r 15             double runtime
--[ 2021.10.25.08.11.01.416.0 ]--
r 15             double runtime 
--[ 2021.10.25.08.11.01.582.0 ]--
r 15             double runtime =
--[ 2021.10.25.08.11.01.693.0 ]--
r 15             double runtime = 
--[ 2021.10.25.08.11.02.768.0 ]--
r 15             double runtime = t
--[ 2021.10.25.08.11.02.871.0 ]--
r 15             double runtime = ti
--[ 2021.10.25.08.11.02.979.0 ]--
r 15             double runtime = tim
--[ 2021.10.25.08.11.03.420.0 ]--
r 15             double runtime = timer
--[ 2021.10.25.08.11.04.038.0 ]--
r 15             double runtime = timer.
--[ 2021.10.25.08.11.04.196.0 ]--
r 15             double runtime = timer.e
--[ 2021.10.25.08.11.04.639.0 ]--
r 15             double runtime = timer.elapsedTime
--[ 2021.10.25.08.11.04.645.0 ]--
r 15             double runtime = timer.elapsedTime()
--[ 2021.10.25.08.11.05.997.0 ]--
r 15             double runtime = timer.elapsedTime();
--[ 2021.10.25.08.11.07.533.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime()*, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.08.030.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(), timer.elapsedTime()/n);
--[ 2021.10.25.08.11.08.101.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime(, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.08.181.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTime, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.08.264.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTim, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.08.352.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedTi, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.08.426.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsedT, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.08.517.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapsed, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.08.611.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elapse, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.08.684.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elaps, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.08.763.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.elap, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.08.845.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.ela, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.08.930.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.el, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.09.020.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer.e, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.09.096.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer., timer.elapsedTime()/n);
--[ 2021.10.25.08.11.09.240.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, timer, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.09.381.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, time, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.09.548.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, tim, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.09.677.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, ti, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.09.830.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, t, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.09.973.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, , timer.elapsedTime()/n);
--[ 2021.10.25.08.11.10.087.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, r, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.10.197.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, ru, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.10.339.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, run, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.10.407.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, runt, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.10.506.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, runti, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.10.592.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, runtim, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.10.677.0 ]--
r 16             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, runtime, timer.elapsedTime()/n);
--[ 2021.10.25.08.11.26.558.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.16.44.434.0 ]--
- 17
--[ 2021.10.25.08.17.01.620.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.17.08.838.0 ]--
r 11         for (int n=1000; count < 200; n*=2, count++) {
--[ 2021.10.25.08.17.18.163.0 ]--
+ 16             
--[ 2021.10.25.08.17.18.636.0 ]--
r 16             i
--[ 2021.10.25.08.17.18.809.0 ]--
r 16             if
--[ 2021.10.25.08.17.18.840.0 ]--
r 16             if 
--[ 2021.10.25.08.17.19.958.0 ]--
r 16             if ()
--[ 2021.10.25.08.17.22.051.0 ]--
r 16             if (c)
--[ 2021.10.25.08.17.22.185.0 ]--
r 16             if (co)
--[ 2021.10.25.08.17.22.701.0 ]--
r 16             if (count)
--[ 2021.10.25.08.17.23.310.0 ]--
r 16             if (count )
--[ 2021.10.25.08.17.23.494.0 ]--
r 16             if (count =)
--[ 2021.10.25.08.17.23.634.0 ]--
r 16             if (count ==)
--[ 2021.10.25.08.17.23.935.0 ]--
r 16             if (count ==1)
--[ 2021.10.25.08.17.25.179.0 ]--
r 16             if (count == 1)
--[ 2021.10.25.08.17.26.180.0 ]--
r 16             if (count == 19)
--[ 2021.10.25.08.17.26.295.0 ]--
r 16             if (count == 199)
--[ 2021.10.25.08.17.28.076.0 ]--
r 16             if (count == 199) 
--[ 2021.10.25.08.17.28.315.0 ]--
r 16             if (count == 199) {
--[ 2021.10.25.08.17.29.257.0 ]--
+ 17 
+ 18 }
--[ 2021.10.25.08.17.29.264.0 ]--
r 18             }
--[ 2021.10.25.08.17.29.281.0 ]--
r 17                 
--[ 2021.10.25.08.17.31.104.0 ]--
r 17                 S
--[ 2021.10.25.08.17.31.368.0 ]--
r 17                 St
--[ 2021.10.25.08.17.32.032.0 ]--
r 17                 Std
--[ 2021.10.25.08.17.32.732.0 ]--
r 17                 StdOut
--[ 2021.10.25.08.17.32.953.0 ]--
r 17                 StdOut.
--[ 2021.10.25.08.17.33.649.0 ]--
r 17                 StdOut.println
--[ 2021.10.25.08.17.33.656.0 ]--
r 17                 StdOut.println()
--[ 2021.10.25.08.17.33.661.0 ]--
r 17                 StdOut.println();
--[ 2021.10.25.08.17.39.590.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.18.10.991.0 ]--
r 12             Double[] a = {9.04, 1.0, 5.0, 3.0, 7.0};
--[ 2021.10.25.08.18.13.017.0 ]--
r 12             Double[] a = {9.0, 1.0, 5.0, 3.0, 7.0};
--[ 2021.10.25.08.18.15.434.0 ]--
r 11         for (int n=1000; count < 20; n*=2, count++) {
--[ 2021.10.25.08.18.15.611.0 ]--
r 11         for (int n=1000; count < 0; n*=2, count++) {
--[ 2021.10.25.08.18.16.203.0 ]--
r 11         for (int n=1000; count < 40; n*=2, count++) {
--[ 2021.10.25.08.18.17.826.0 ]--
r 16             if (count == 19) {
--[ 2021.10.25.08.18.17.980.0 ]--
r 16             if (count == 9) {
--[ 2021.10.25.08.18.18.357.0 ]--
r 16             if (count == 39) {
--[ 2021.10.25.08.18.22.536.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.18.31.209.0 ]--
r 16             if (count == 9) {
--[ 2021.10.25.08.18.31.817.0 ]--
r 16             if (count == 29) {
--[ 2021.10.25.08.18.36.199.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.18.50.544.0 ]--
r 16             if (count == 2) {
--[ 2021.10.25.08.18.50.670.0 ]--
r 16             if (count == 22) {
--[ 2021.10.25.08.18.52.479.0 ]--
r 16             if (count == 2) {
--[ 2021.10.25.08.18.53.064.0 ]--
r 16             if (count == 21) {
--[ 2021.10.25.08.18.54.078.0 ]--
r 11         for (int n=1000; count < 2; n*=2, count++) {
--[ 2021.10.25.08.18.54.511.0 ]--
r 11         for (int n=1000; count < 22; n*=2, count++) {
--[ 2021.10.25.08.18.58.539.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.13.59.03.536.0 ]--
NewLogger: P03_Sorting
Version: 1.5
--[ 2021.10.25.13.59.03.593.0 ]--
InitTree:
/out/production/P03_Sorting/algs4.jar
/out/production/P03_Sorting/stdlib.jar
/out/production/P03_Sorting/Bubble.class
/out/production/P03_Sorting/EdgeCases.class
/out/production/P03_Sorting/MedianOfN.class
/out/production/P03_Sorting/LinkedList.class
/out/production/P03_Sorting/DoublingTest.class
/out/production/P03_Sorting/LinkedList$1.class
/out/production/P03_Sorting/LinkedList$Node.class
/out/production/P03_Sorting/QuickSortMedian.class
/out/production/P03_Sorting/QuickSortMedian3.class
/out/production/P03_Sorting/QuickSortMedian5.class
/out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
/out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
/src/algs4.jar
/src/stdlib.jar
/src/Bubble.java
/src/EdgeCases.java
/src/MedianOfN.java
/src/LinkedList.java
/src/DoublingTest.java
/src/QuickSortMedian.java
/src/QuickSortMedian3.java
/src/QuickSortMedian5.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/runConfigurations.xml
/.cos265
/readme.html
/P03_Sorting.iml

--[ 2021.10.25.13.59.03.593.1 ]--
InitFile: /src/LinkedList.java
import java.util.Iterator;

public class LinkedList<Item extends Comparable<Item>> implements Iterable<Item> {
    private Node first = null;
    private int count = 0;

    private class Node {
        final Item item;    // cannot change item once it is set in constructor
        Node next;          // can change next, though

        public Node(Item i, Node n) {
            item = i;
            next = n;
        }
    }

    public LinkedList() { }

    public LinkedList(Item[] fromList) {
        for(Item item : fromList) insert(item);
    }

    public void insert(Item item) {
        first = new Node(item, first);
        count++;
    }

    public Item remove() {
        Item item = first.item;
        first = first.next;
        count--;
        return item;
    }

    public boolean isEmpty() { return count == 0; }

    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            Node current = first;

            @Override
            public boolean hasNext() {
                return current != null;
            }

            @Override
            public Item next() {
                Item item = current.item;
                current = current.next;
                return item;
            }
        };
    }

    /***********************************************************************
     * Rearranges the linked list in ascending order, using the natural order
     * and mergesort.
     ***********************************************************************/
    
    public void sort() {
        first = sort(first, count);
    }

    private Node sort(Node head, int len) {
        if (len <= 1) return head;
        Node mid = head;
        for (int i=0; i<len/2-1; i++) {
            mid = mid.next;
        }
        Node tmp = mid;
        mid = mid.next;
        tmp.next = null;
        head = sort(head, len/2);
        mid = sort(mid, len-len/2);
        return merge(head, mid);
    }

    private Node merge(Node low, Node high) {
        Node head = null;
        Node last = null;
        while (low != null && high != null) {
            if (low.item.compareTo(high.item) < 0) {
                if (head == null) {
                    head = low;
                } else {
                    last.next = low;
                }
                last = low;
                low = low.next;
            } else {
                if (head == null) {
                    head = high;
                } else {
                    last.next = high;
                }
                last = high;
                high = high.next;
            }
        }
        if (low == null) {
            last.next = high;
        } else {
            last.next = low;
        }
        return head;
    }

    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void evenList() {
        Double[] a = {5.0, 1.0, 7.0, 3.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void oddList() {
        Double[] a = {5.0, 1.0, 7.0, 3.0, 0.5};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void alreadySorted() {
        Double[] a = {1.0, 2.0, 3.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void lowRunsOut() {
        Double[] a = {1.0, 2.0, 3.0, 7.0, 8.0, 9.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void highRunsOut() {
        Double[] a = {7.0, 8.0, 9.0, 1.0, 2.0, 3.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void lowHighEqual() {
        Double[] a = {4.0, 3.0, 2.0, 4.0, 3.0, 2.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
        Iterator<Double> linkedListIterator = linkedlist.iterator();
        for (int i=0; i< linkedlist.count; i++){
            StdOut.println(linkedListIterator.next());
        }
    }

    public static void main(String[] args) {
        evenList();
        StdOut.println();
        oddList();
        StdOut.println();
        alreadySorted();
        StdOut.println();
        highRunsOut();
        StdOut.println();
        lowRunsOut();
        StdOut.println();
        lowHighEqual();
    }
}

--[ 2021.10.25.13.59.03.594.0 ]--
InitFile: /src/QuickSortMedian5.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian5 extends QuickSortMedian {

    public static class MedianOf5 extends MedianOfN {
        public MedianOf5() {
            // tell QuickSortMedian.MedianOfN we will find the median of 5 items
            super(5);
        }

        /***********************************************************
         * Determines which index in parameter indices points to
         * the median value in parameter a
         * @param a the array containing values
         * @param indices the array containing indices into a
         * @return the index of median value
         ***********************************************************/
        public int median(Comparable[] a, int[] indices) {
            // get values at specified indices
            int i0 = indices[0];
            int i1 = indices[1];
            int i2 = indices[2];
            int i3 = indices[3];
            int i4 = indices[4];
            Comparable a0 = a[i0];
            Comparable a1 = a[i1];
            Comparable a2 = a[i2];
            Comparable a3 = a[i3];
            Comparable a4 = a[i4];

            // find median in a0,a1,a2,a3,a4, and return respective index
            // if a0 is median, return i0
            // if a1 is median, return i1
            // etc.

            return i0;
        }
    }

    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/
    public static void sort(Comparable[] a) {
        MedianOf5 median = new MedianOf5();
        QuickSortMedian.sort(a, median);
    }


    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = {0.0};
        QuickSortMedian5.sort(a);
    }
}

--[ 2021.10.25.13.59.03.594.1 ]--
InitFile: /.cos265


--[ 2021.10.25.13.59.03.597.0 ]--
InitFile: /src/QuickSortMedian3.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian3 extends QuickSortMedian {

    public static class MedianOf3 extends MedianOfN {
        public MedianOf3() {
            // tell QuickSortMedian.MedianOfN we will find the median of 3 items
            super(3);
        }

        /***********************************************************
         * Determines which index in parameter indices points to
         * the median value in parameter a
         * @param a the array containing values
         * @param indices the array containing indices into a
         * @return the index of median value
         ***********************************************************/
        public int median(Comparable[] a, int[] indices) {
            // get values at specified indices
            int i0 = indices[0];
            int i1 = indices[1];
            int i2 = indices[2];
            Comparable a0 = a[i0];
            Comparable a1 = a[i1];
            Comparable a2 = a[i2];

            // find median in a0,a1,a2, and return respective index
            // if a0 is median, return i0
            // if a1 is median, return i1
            // if a2 is median, return i2

            return i0;
        }
    }


    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/
    public static void sort(Comparable[] a) {
        MedianOf3 median = new MedianOf3();
        sort(a, median);
    }

    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = {0.0};
        QuickSortMedian3.sort(a);
    }
}

--[ 2021.10.25.13.59.03.597.1 ]--
InitFile: /src/EdgeCases.java
public class EdgeCases {
    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = { 0.0 };

        Bubble.sort(a);     // bubble sort
        Selection.sort(a);  // selection sort
        Insertion.sort(a);  // insertion sort
        Shell.sort(a);      // Shellsort
        Quick.sort(a);      // quicksort
    }
}

--[ 2021.10.25.13.59.03.598.0 ]--
InitFile: /src/DoublingTest.java
public class DoublingTest {

    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        double MAX = 1000000;
        for (int n=1000, count=0; count < 5; n*=2, count++) {
            double average = 0;
            for (int j=0; j<5; j++) {
                Double[] a = new Double[n];
                for (int i=0; i<n; i++) {
                    a[i] = StdRandom.uniform(-MAX, MAX);
                }
                Stopwatch timer = new Stopwatch();
                Selection.sort(a);  // selection sort
                average += timer.elapsedTime();
            }
            average /= 5;
            StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
        }
        StdOut.println();
        for (int n=1000, count=0; count < 5; n*=2, count++) {
            double average = 0;
            for (int j=0; j<5; j++) {
                Double[] a = new Double[n];
                for (int i=0; i<n; i++) {
                    a[i] = StdRandom.uniform(-MAX, MAX);
                }
                Stopwatch timer = new Stopwatch();
                Insertion.sort(a);  // selection sort
                average += timer.elapsedTime();
            }
            average /= 5;
            StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
        }
        StdOut.println();
        for (int n=1000, count=0; count < 5; n*=2, count++) {
            double average = 0;
            for (int j=0; j<5; j++) {
                Double[] a = new Double[n];
                for (int i=0; i<n; i++) {
                    a[i] = StdRandom.uniform(-MAX, MAX);
                }
                Stopwatch timer = new Stopwatch();
                Shell.sort(a);  // selection sort
                average += timer.elapsedTime();
            }
            average /= 5;
            StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
        }
    }
}

--[ 2021.10.25.13.59.03.598.1 ]--
InitFile: /src/Bubble.java
public class Bubble {

    public static void sort(Comparable[] a) {
        boolean sorted = false;
        while(!sorted) {
            sorted = true;
            for(int i = 0; i < a.length - 1; i++)
                if(less(a[i + 1], a[i])) {
                    sorted = false;
                    exch(a, i, i + 1);
                }
        }
    }

    /***********************************************************************
     *  Helper sorting functions
     ***********************************************************************/

    // is v < w ?
    private static boolean less(Comparable v, Comparable w) {
        return (v.compareTo(w) < 0);
    }

    // exchange a[i] and a[j]
    private static void exch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }

    /***********************************************************************
     *  main() function is used to experimentally verify bubble sort works
     *  - generate a Double array
     *  - fill array with random values
     *  - sort
     *  - assert that each value is smaller than or equal to next value
     ***********************************************************************/

    public static void main(String[] args) {
        int N = 1000;
        Double[] a = new Double[N];
        for(int i = 0; i < N; i++) a[i] = StdRandom.uniform();
        Bubble.sort(a);
        for(int i = 0; i < N-1; i++) assert a[i] <= a[i+1];
    }
}

--[ 2021.10.25.13.59.03.598.2 ]--
InitFile: /src/QuickSortMedian.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian {

    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/

    public static void sort(Comparable[] a, MedianOfN median) {
        sort(a, median, 0, a.length - 1);
    }

    // quicksort the subarray from a[lo] to a[hi]
    private static void sort(Comparable[] a, MedianOfN median, int lo, int hi) {
        if(hi <= lo) return;
        int j = partition(a, median, lo, hi);   // partition data into parts, returning pivot index
        sort(a, median, lo, j-1);   // recursively sort lower part
        sort(a, median, j+1, hi);   // recursively sort higher part
    }

    // partition the subarray a[lo..hi] so that a[lo..j-1] <= a[j] <= a[j+1..hi]
    // and return the index j.  note: v = a[j]
    private static int partition(Comparable[] a, MedianOfN median, int lo, int hi) {
        int i = lo;
        int j = hi + 1;

        int k = median.median(a, lo, hi);   // determine position of a pivot
        exch(a, lo, k);                     // move pivot to lo position
        Comparable v = a[lo];               // v is pivot value

        while(true) {

            // find item on lo to swap
            while(less(a[++i], v))
                if(i == hi) break;

            // find item on hi to swap
            while(less(v, a[--j]))
                if(j == lo) break;      // redundant since a[lo] acts as sentinel

            // check if pointers cross
            if(i >= j) break;

            exch(a, i, j);
        }

        // put partitioning item v at a[j]
        exch(a, lo, j);

        // now, a[lo .. j-1] <= a[j] <= a[j+1 .. hi]
        return j;
    }


    /***********************************************************************
     *  Helper sorting functions
     ***********************************************************************/

    // is v < w ?
    private static boolean less(Comparable v, Comparable w) {
        return (v.compareTo(w) < 0);
    }

    // exchange a[i] and a[j]
    private static void exch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }


    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {

    }
}

--[ 2021.10.25.13.59.03.599.0 ]--
InitFile: /P03_Sorting.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.25.13.59.03.599.1 ]--
InitFile: /src/MedianOfN.java
public abstract class MedianOfN {
    private int N;
    private int[] indices;

    public MedianOfN(int N) {
        this.N = N;
        indices = new int[N];
    }

    public abstract int median(Comparable[] a, int[] indices);

    public int median(Comparable[] a, int lo, int hi) {
        // if hi and lo are "close enough", simply return lo
        if(hi - lo + 1 < N) return lo;
        // choose N random indices in [lo, hi]
        for(int i = 0; i < N; i++) indices[i] = StdRandom.uniform(lo, hi + 1);
        return median(a, indices);
    }
}

--[ 2021.10.25.14.16.38.551.0 ]--
:/src/QuickSortMedian5.java
+ 10             
--[ 2021.10.25.14.16.39.978.0 ]--
r 10             m
--[ 2021.10.25.14.16.40.316.0 ]--
r 10             me
--[ 2021.10.25.14.16.40.448.0 ]--
r 10             med
--[ 2021.10.25.14.16.41.423.0 ]--
r 10             me
--[ 2021.10.25.14.16.41.655.0 ]--
r 10             m
--[ 2021.10.25.14.16.41.827.0 ]--
r 10             
--[ 2021.10.25.14.16.42.024.0 ]--
- 10
--[ 2021.10.25.14.16.42.490.0 ]--
r 9             // tell QuickSortMedian.MedianOfN we will find the median of 5 item
--[ 2021.10.25.14.16.42.922.0 ]--
r 9             // tell QuickSortMedian.MedianOfN we will find the median of 5 ite
--[ 2021.10.25.14.16.43.799.0 ]--
+ 9             // tell QuickSortMedian.MedianOfN we will find the median of 5 items
r 10             med
--[ 2021.10.25.14.16.44.515.0 ]--
r 10             me
--[ 2021.10.25.14.16.44.712.0 ]--
r 10             m
--[ 2021.10.25.14.16.44.855.0 ]--
r 10             
--[ 2021.10.25.14.16.45.214.0 ]--
- 10
--[ 2021.10.25.14.17.49.666.0 ]--
:/src/QuickSortMedian3.java
+ 31             
--[ 2021.10.25.14.17.50.625.0 ]--
r 31             i
--[ 2021.10.25.14.17.50.693.0 ]--
r 31             if
--[ 2021.10.25.14.17.51.062.0 ]--
r 31             if 
--[ 2021.10.25.14.17.51.492.0 ]--
r 31             if ()
--[ 2021.10.25.14.17.52.432.0 ]--
r 31             if (a)
--[ 2021.10.25.14.17.53.536.0 ]--
r 31             if (a0)
--[ 2021.10.25.14.17.54.077.0 ]--
r 31             if (a0 )
--[ 2021.10.25.14.17.54.479.0 ]--
r 31             if (a0 >)
--[ 2021.10.25.14.17.54.929.0 ]--
r 31             if (a0 > )
--[ 2021.10.25.14.17.55.843.0 ]--
r 31             if (a0 > a)
--[ 2021.10.25.14.23.17.332.0 ]--
r 31             if (a0 > a1)
--[ 2021.10.25.14.23.17.837.0 ]--
r 31             if (a0 > a1 )
--[ 2021.10.25.14.23.19.496.0 ]--
r 31             if (a0 > a1 &)
--[ 2021.10.25.14.23.19.672.0 ]--
r 31             if (a0 > a1 &&)
--[ 2021.10.25.14.23.19.970.0 ]--
r 31             if (a0 > a1 && )
--[ 2021.10.25.14.23.20.717.0 ]--
r 31             if (a0 > a1 && a)
--[ 2021.10.25.14.23.23.603.0 ]--
r 31             if (a0 > a1 && )
--[ 2021.10.25.14.23.24.065.0 ]--
r 31             if (a0 > a1 &&)
--[ 2021.10.25.14.23.24.149.0 ]--
r 31             if (a0 > a1 &)
--[ 2021.10.25.14.23.24.233.0 ]--
r 31             if (a0 > a1 )
--[ 2021.10.25.14.23.24.317.0 ]--
r 31             if (a0 > a1)
--[ 2021.10.25.14.23.24.400.0 ]--
r 31             if (a0 > a)
--[ 2021.10.25.14.23.24.486.0 ]--
r 31             if (a0 > )
--[ 2021.10.25.14.23.24.641.0 ]--
r 31             if (a0 >)
--[ 2021.10.25.14.23.24.826.0 ]--
r 31             if (a0 )
--[ 2021.10.25.14.23.25.009.0 ]--
r 31             if (a0)
--[ 2021.10.25.14.23.25.163.0 ]--
r 31             if (a)
--[ 2021.10.25.14.23.25.308.0 ]--
r 31             if ()
--[ 2021.10.25.14.23.27.679.0 ]--
r 31             if (a)
--[ 2021.10.25.14.23.28.590.0 ]--
r 31             if (a0)
--[ 2021.10.25.14.23.28.813.0 ]--
r 31             if (a0.)
--[ 2021.10.25.14.23.30.176.0 ]--
r 31             if (a0.compareTo)
--[ 2021.10.25.14.23.30.201.0 ]--
r 31             if (a0.compareTo())
--[ 2021.10.25.14.23.31.444.0 ]--
r 31             if (a0.compareTo(a))
--[ 2021.10.25.14.23.34.239.0 ]--
r 31             if (a0.compareTo(a1))
--[ 2021.10.25.14.23.35.409.0 ]--
r 31             if (a0.compareTo(a1) )
--[ 2021.10.25.14.23.38.093.0 ]--
r 31             if (a0.compareTo(a1) &)
--[ 2021.10.25.14.23.38.257.0 ]--
r 31             if (a0.compareTo(a1) &&)
--[ 2021.10.25.14.23.38.716.0 ]--
r 31             if (a0.compareTo(a1) && )
--[ 2021.10.25.14.23.39.098.0 ]--
r 31             if (a0.compareTo(a1) && a)
--[ 2021.10.25.14.23.40.802.0 ]--
r 31             if (a0.compareTo(a1) && a0)
--[ 2021.10.25.14.23.41.029.0 ]--
r 31             if (a0.compareTo(a1) && a0c)
--[ 2021.10.25.14.23.41.992.0 ]--
r 31             if (a0.compareTo(a1) && a0)
--[ 2021.10.25.14.23.42.199.0 ]--
r 31             if (a0.compareTo(a1) && a0.)
--[ 2021.10.25.14.23.43.054.0 ]--
r 31             if (a0.compareTo(a1) && a0.compareTo)
--[ 2021.10.25.14.23.43.061.0 ]--
r 31             if (a0.compareTo(a1) && a0.compareTo())
--[ 2021.10.25.14.23.45.130.0 ]--
r 31             if (a0.compareTo(a1) && a0.compareTo(a))
--[ 2021.10.25.14.23.46.188.0 ]--
r 31             if (a0.compareTo(a1) && a0.compareTo(a2))
--[ 2021.10.25.14.23.51.434.0 ]--
r 31             if (a0.compareTo(a1) && a0.compareTo(a2) )
--[ 2021.10.25.14.23.51.827.0 ]--
r 31             if (a0.compareTo(a1) && a0.compareTo(a2) =)
--[ 2021.10.25.14.23.51.986.0 ]--
r 31             if (a0.compareTo(a1) && a0.compareTo(a2) ==)
--[ 2021.10.25.14.23.52.091.0 ]--
r 31             if (a0.compareTo(a1) && a0.compareTo(a2) == )
--[ 2021.10.25.14.23.53.267.0 ]--
r 31             if (a0.compareTo(a1) && a0.compareTo(a2) == 1)
--[ 2021.10.25.14.23.55.296.0 ]--
r 31             if (a0.compareTo(a1)  && a0.compareTo(a2) == 1)
--[ 2021.10.25.14.23.55.565.0 ]--
r 31             if (a0.compareTo(a1) = && a0.compareTo(a2) == 1)
--[ 2021.10.25.14.23.55.688.0 ]--
r 31             if (a0.compareTo(a1) == && a0.compareTo(a2) == 1)
--[ 2021.10.25.14.23.55.792.0 ]--
r 31             if (a0.compareTo(a1) ==1 && a0.compareTo(a2) == 1)
--[ 2021.10.25.14.23.56.911.0 ]--
r 31             if (a0.compareTo(a1) == 1 && a0.compareTo(a2) == 1)
--[ 2021.10.25.14.23.57.831.0 ]--
r 31             if (a0.compareTo(a1) == 1 && a0.compareTo(a2) == 1) 
--[ 2021.10.25.14.23.58.154.0 ]--
r 31             if (a0.compareTo(a1) == 1 && a0.compareTo(a2) == 1) {
--[ 2021.10.25.14.23.58.378.0 ]--
+ 32 
+ 33 }
--[ 2021.10.25.14.23.58.397.0 ]--
r 33             }
--[ 2021.10.25.14.23.58.426.0 ]--
r 32                 
--[ 2021.10.25.14.23.59.783.0 ]--
r 32                 r
--[ 2021.10.25.14.23.59.928.0 ]--
r 32                 re
--[ 2021.10.25.14.24.00.059.0 ]--
r 32                 reut
--[ 2021.10.25.14.24.00.235.0 ]--
r 32                 reutr
--[ 2021.10.25.14.24.00.269.0 ]--
r 32                 reutrn
--[ 2021.10.25.14.24.00.402.0 ]--
r 32                 reutrn 
--[ 2021.10.25.14.24.00.819.0 ]--
r 32                 reutrn
--[ 2021.10.25.14.24.00.941.0 ]--
r 32                 reutr
--[ 2021.10.25.14.24.01.095.0 ]--
r 32                 reut
--[ 2021.10.25.14.24.01.224.0 ]--
r 32                 reu
--[ 2021.10.25.14.24.01.350.0 ]--
r 32                 reut
--[ 2021.10.25.14.24.01.465.0 ]--
r 32                 reutu
--[ 2021.10.25.14.24.01.533.0 ]--
r 32                 reutur
--[ 2021.10.25.14.24.01.754.0 ]--
r 32                 reutu
--[ 2021.10.25.14.24.01.876.0 ]--
r 32                 reut
--[ 2021.10.25.14.24.02.022.0 ]--
r 32                 reu
--[ 2021.10.25.14.24.02.159.0 ]--
r 32                 re
--[ 2021.10.25.14.24.02.274.0 ]--
r 32                 ret
--[ 2021.10.25.14.24.02.328.0 ]--
r 32                 retu
--[ 2021.10.25.14.24.02.433.0 ]--
r 32                 retur
--[ 2021.10.25.14.24.02.539.0 ]--
r 32                 return
--[ 2021.10.25.14.24.02.598.0 ]--
r 32                 return 
--[ 2021.10.25.14.24.02.984.0 ]--
r 32                 return a
--[ 2021.10.25.14.24.04.671.0 ]--
r 32                 return a0
--[ 2021.10.25.14.24.05.407.0 ]--
r 32                 return a0;
--[ 2021.10.25.14.26.34.055.0 ]--
r 31             if (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1) {
--[ 2021.10.25.14.26.56.514.0 ]--
r 31             if (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1 ) {
--[ 2021.10.25.14.26.57.102.0 ]--
r 31             if (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1 |) {
--[ 2021.10.25.14.26.57.246.0 ]--
r 31             if (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1 ||) {
--[ 2021.10.25.14.26.57.433.0 ]--
r 31             if (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1 || ) {
--[ 2021.10.25.14.26.59.141.0 ]--
r 31             if (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1) || ) {
--[ 2021.10.25.14.27.01.800.0 ]--
r 31             if ((a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1) || ) {
--[ 2021.10.25.14.27.33.255.0 ]--
r 31             if ((a0.compareTo(a1) == -1 && a0.compareTo(a2) == -1) || ) {
--[ 2021.10.25.14.27.33.349.0 ]--
r 31             if ((a0.compareTo(a1) == -11 && a0.compareTo(a2) == -1) || ) {
--[ 2021.10.25.14.27.34.120.0 ]--
r 31             if ((a0.compareTo(a1) == -1 && a0.compareTo(a2) == -1) || ) {
--[ 2021.10.25.14.27.35.791.0 ]--
r 31             if ((a0.compareTo(a1) == -1 && a0.compareTo(a2) == 1) || ) {
--[ 2021.10.25.14.27.41.885.0 ]--
r 31             if ((a0.compareTo(a1) == -1 && a0.compareTo(a2) == 1) || (a0.compareTo(a1) == -1 && a0.compareTo(a2) == 1)) {
--[ 2021.10.25.14.27.43.841.0 ]--
r 31             if ((a0.compareTo(a1) == -1 && a0.compareTo(a2) == 1) || (a0.compareTo(a1) == -1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.27.46.070.0 ]--
r 31             if ((a0.compareTo(a1) == -1 && a0.compareTo(a2) == 1) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.07.473.0 ]--
r 32                 return 0;
--[ 2021.10.25.14.28.07.743.0 ]--
r 32                 return o0;
--[ 2021.10.25.14.28.08.134.0 ]--
r 32                 return 0;
--[ 2021.10.25.14.28.08.277.0 ]--
r 32                 return i0;
--[ 2021.10.25.14.28.29.026.0 ]--
r 31             if ((a0.compareTo(a1) <==> -1 && a0.compareTo(a2) == 1) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.30.444.0 ]--
r 31             if ((a0.compareTo(a1) <=> -1 && a0.compareTo(a2) == 1) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.30.569.0 ]--
r 31             if ((a0.compareTo(a1) <> -1 && a0.compareTo(a2) == 1) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.31.261.0 ]--
r 31             if ((a0.compareTo(a1) < -1 && a0.compareTo(a2) == 1) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.32.259.0 ]--
r 31             if ((a0.compareTo(a1) < - && a0.compareTo(a2) == 1) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.32.377.0 ]--
r 31             if ((a0.compareTo(a1) <  && a0.compareTo(a2) == 1) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.33.021.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) == 1) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.34.173.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) == ) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.34.307.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) ==) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.34.461.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) =) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.34.643.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) ) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.35.403.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) >) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.35.719.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > ) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.35.855.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.35.947.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0 ) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.36.461.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) == 1 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.38.979.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) ==  && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.39.107.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) == && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.39.263.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) = && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.39.409.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1)  && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.39.920.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.40.394.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) >  && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.40.529.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) == -1)) {
--[ 2021.10.25.14.28.42.110.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) == -)) {
--[ 2021.10.25.14.28.42.257.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) == )) {
--[ 2021.10.25.14.28.42.380.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) ==)) {
--[ 2021.10.25.14.28.42.538.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) =)) {
--[ 2021.10.25.14.28.42.702.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) )) {
--[ 2021.10.25.14.28.43.312.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) <)) {
--[ 2021.10.25.14.28.43.444.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < )) {
--[ 2021.10.25.14.28.43.580.0 ]--
r 31             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.14.28.58.500.0 ]--
+ 35             
--[ 2021.10.25.14.28.58.641.0 ]--
+ 35             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
+ 36                 return i0;
r 37             }
--[ 2021.10.25.14.28.59.623.0 ]--
+ 39             
--[ 2021.10.25.14.28.59.771.0 ]--
+ 39             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
+ 40                 return i0;
r 41             }
--[ 2021.10.25.14.29.04.118.0 ]--
r 35             if ((a1.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.14.29.05.297.0 ]--
r 35             if ((a1.compareTo(a1) < 0 && a1.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.14.29.06.557.0 ]--
r 35             if ((a1.compareTo(a1) < 0 && a1.compareTo(a2) > 0) || (a1.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.14.29.07.754.0 ]--
r 35             if ((a1.compareTo(a1) < 0 && a1.compareTo(a2) > 0) || (a1.compareTo(a1) > 0 && a1.compareTo(a2) < 0)) {
--[ 2021.10.25.14.29.10.996.0 ]--
r 35             if ((a1.compareTo(a0) < 0 && a1.compareTo(a2) > 0) || (a1.compareTo(a1) > 0 && a1.compareTo(a2) < 0)) {
--[ 2021.10.25.14.29.12.203.0 ]--
r 35             if ((a1.compareTo(a0) < 0 && a1.compareTo(a2) > 0) || (a1.compareTo(a0) > 0 && a1.compareTo(a2) < 0)) {
--[ 2021.10.25.14.29.49.820.0 ]--
r 39             if ((a0.compareTo(a1) < 0 && a0.compareTo(a0) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.14.29.51.282.0 ]--
r 39             if ((a0.compareTo(a1) < 0 && a0.compareTo(a0) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a0) < 0)) {
--[ 2021.10.25.14.29.54.298.0 ]--
r 39             if ((a2.compareTo(a1) < 0 && a0.compareTo(a0) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a0) < 0)) {
--[ 2021.10.25.14.29.55.417.0 ]--
r 39             if ((a2.compareTo(a1) < 0 && a2.compareTo(a0) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a0) < 0)) {
--[ 2021.10.25.14.29.56.530.0 ]--
r 39             if ((a2.compareTo(a1) < 0 && a2.compareTo(a0) > 0) || (a2.compareTo(a1) > 0 && a0.compareTo(a0) < 0)) {
--[ 2021.10.25.14.29.57.640.0 ]--
r 39             if ((a2.compareTo(a1) < 0 && a2.compareTo(a0) > 0) || (a2.compareTo(a1) > 0 && a2.compareTo(a0) < 0)) {
--[ 2021.10.25.14.30.04.010.0 ]--
r 40                 return i;
--[ 2021.10.25.14.30.04.233.0 ]--
r 40                 return i2;
--[ 2021.10.25.14.30.05.457.0 ]--
r 36                 return i;
--[ 2021.10.25.14.30.05.545.0 ]--
r 36                 return i1;
--[ 2021.10.25.14.30.08.463.0 ]--
r 43             return i0
--[ 2021.10.25.14.30.08.599.0 ]--
r 43             return i
--[ 2021.10.25.14.30.08.762.0 ]--
r 43             return 
--[ 2021.10.25.14.30.09.878.0 ]--
r 43             
--[ 2021.10.25.14.30.10.040.0 ]--
- 42
--[ 2021.10.25.14.30.10.594.0 ]--
- 42
--[ 2021.10.25.14.30.26.028.0 ]--
r 39 //            if ((a2.compareTo(a1) < 0 && a2.compareTo(a0) > 0) || (a2.compareTo(a1) > 0 && a2.compareTo(a0) < 0)) {
r 40 //                return i2;
r 41 //            }
--[ 2021.10.25.14.30.28.186.0 ]--
+ 42 
--[ 2021.10.25.14.30.28.216.0 ]--
r 42             
--[ 2021.10.25.14.30.28.471.0 ]--
r 42             r
--[ 2021.10.25.14.30.28.593.0 ]--
r 42             re
--[ 2021.10.25.14.30.28.684.0 ]--
r 42             ret
--[ 2021.10.25.14.30.28.756.0 ]--
r 42             retu
--[ 2021.10.25.14.30.29.243.0 ]--
r 42             return
--[ 2021.10.25.14.30.29.254.0 ]--
r 42             return 
--[ 2021.10.25.14.30.29.919.0 ]--
r 42             return i
--[ 2021.10.25.14.30.30.399.0 ]--
r 42             return i2
--[ 2021.10.25.14.30.30.609.0 ]--
r 42             return i2;
--[ 2021.10.25.14.31.39.637.0 ]--
:/src/DoublingTest.java
+ 55         
--[ 2021.10.25.14.31.39.923.0 ]--
+ 55         StdOut.println();
+ 56         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 57             double average = 0;
+ 58             for (int j=0; j<5; j++) {
+ 59                 Double[] a = new Double[n];
+ 60                 for (int i=0; i<n; i++) {
+ 61                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 62                 }
+ 63                 Stopwatch timer = new Stopwatch();
+ 64                 Shell.sort(a);  // selection sort
+ 65                 average += timer.elapsedTime();
+ 66             }
+ 67             average /= 5;
+ 68             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
r 69         }
--[ 2021.10.25.14.31.43.598.0 ]--
r 64                 Q.sort(a);  // selection sort
--[ 2021.10.25.14.31.45.008.0 ]--
r 64                 QuickSortMedian3.sort(a);  // selection sort
--[ 2021.10.25.14.31.52.508.0 ]--
+ 70         
--[ 2021.10.25.14.31.52.635.0 ]--
+ 70         StdOut.println();
+ 71         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 72             double average = 0;
+ 73             for (int j=0; j<5; j++) {
+ 74                 Double[] a = new Double[n];
+ 75                 for (int i=0; i<n; i++) {
+ 76                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 77                 }
+ 78                 Stopwatch timer = new Stopwatch();
+ 79                 QuickSortMedian3.sort(a);  // selection sort
+ 80                 average += timer.elapsedTime();
+ 81             }
+ 82             average /= 5;
+ 83             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
r 84         }
--[ 2021.10.25.14.31.55.545.0 ]--
r 79                 QuickSortMedian.sort(a);  // selection sort
--[ 2021.10.25.14.31.56.583.0 ]--
r 79                 QuickSortMedia.sort(a);  // selection sort
--[ 2021.10.25.14.31.56.852.0 ]--
r 79                 QuickSortMedian.sort(a);  // selection sort
--[ 2021.10.25.14.31.58.671.0 ]--
r 79                 QuickSortMedian5.sort(a);  // selection sort
--[ 2021.10.25.14.34.56.864.0 ]--
:/src/QuickSortMedian5.java
+ 34             
--[ 2021.10.25.14.34.57.004.0 ]--
r 34             a
--[ 2021.10.25.14.34.58.017.0 ]--
r 34             a.
--[ 2021.10.25.14.34.59.674.0 ]--
r 34             a.m
--[ 2021.10.25.14.35.00.103.0 ]--
r 34             a.ma
--[ 2021.10.25.14.35.00.601.0 ]--
r 34             a.max
--[ 2021.10.25.14.35.03.248.0 ]--
r 34             java.util.Arrays.stream(a).max
--[ 2021.10.25.14.35.03.332.0 ]--
r 1 import java.util.Arrays;/**
--[ 2021.10.25.14.35.03.338.0 ]--
r 1 import java.util.Arrays; /**
--[ 2021.10.25.14.35.03.348.0 ]--
r 34             Arrays.stream(a).max
--[ 2021.10.25.14.35.03.372.0 ]--
+ 1 import java.util.Arrays;
+ 2 
r 3 /**
--[ 2021.10.25.14.35.03.378.0 ]--
r 36             Arrays.stream(a).max()
--[ 2021.10.25.14.35.06.721.0 ]--
r 36             Arrays.stream(a).max()l
--[ 2021.10.25.14.35.07.269.0 ]--
r 36             Arrays.stream(a).max()
--[ 2021.10.25.14.35.07.495.0 ]--
r 36             Arrays.stream(a).max();
--[ 2021.10.25.14.35.09.708.0 ]--
r 36             
--[ 2021.10.25.14.35.10.162.0 ]--
- 36
--[ 2021.10.25.14.36.01.129.0 ]--
:/src/DoublingTest.java
+ 55         
--[ 2021.10.25.14.36.01.324.0 ]--
+ 55         StdOut.println();
+ 56         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 57             double average = 0;
+ 58             for (int j=0; j<5; j++) {
+ 59                 Double[] a = new Double[n];
+ 60                 for (int i=0; i<n; i++) {
+ 61                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 62                 }
+ 63                 Stopwatch timer = new Stopwatch();
+ 64                 QuickSortMedian5.sort(a);  // selection sort
+ 65                 average += timer.elapsedTime();
+ 66             }
+ 67             average /= 5;
+ 68             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
r 69         }
--[ 2021.10.25.14.36.07.426.0 ]--
r 64                 s.sort(a);  // selection sort
--[ 2021.10.25.14.36.07.990.0 ]--
r 64                 .sort(a);  // selection sort
--[ 2021.10.25.14.36.08.786.0 ]--
r 64                 Q.sort(a);  // selection sort
--[ 2021.10.25.14.36.12.578.0 ]--
r 64                 Quick.sort(a);  // selection sort
--[ 2021.10.25.14.36.21.176.0 ]--
r 23             StdOut.printf("SN = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.22.136.0 ]--
r 23             StdOut.printf("N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.25.150.0 ]--
r 23             StdOut.printf("SelectionN = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.25.491.0 ]--
r 23             StdOut.printf("Selection N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.31.652.0 ]--
r 23             StdOut.printf("Selection: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.35.240.0 ]--
r 38             StdOut.printf("InsertionN = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.35.557.0 ]--
r 38             StdOut.printf("Insertion:N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.35.769.0 ]--
r 38             StdOut.printf("Insertion: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.39.718.0 ]--
r 53             StdOut.printf("ShellN = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.40.287.0 ]--
r 53             StdOut.printf("Shell:N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.40.424.0 ]--
r 53             StdOut.printf("Shell: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.43.809.0 ]--
r 68             StdOut.printf("QuickN = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.44.609.0 ]--
r 68             StdOut.printf("Quick:N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.44.741.0 ]--
r 68             StdOut.printf("Quick: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.48.430.0 ]--
r 83             StdOut.printf("QuickSortMedian3N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.48.758.0 ]--
r 83             StdOut.printf("QuickSortMedian3:N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.48.886.0 ]--
r 83             StdOut.printf("QuickSortMedian3: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.51.807.0 ]--
r 98             StdOut.printf("QuickSortMedian5N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.52.268.0 ]--
r 98             StdOut.printf("QuickSortMedian5:N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.36.52.411.0 ]--
r 98             StdOut.printf("QuickSortMedian5: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.14.37.44.905.0 ]--
:/src/QuickSortMedian5.java
+ 36             
--[ 2021.10.25.14.37.48.400.0 ]--
r 36             S
--[ 2021.10.25.14.37.48.595.0 ]--
r 36             St
--[ 2021.10.25.14.37.48.785.0 ]--
r 36             Std
--[ 2021.10.25.14.37.49.311.0 ]--
r 36             StdOut
--[ 2021.10.25.14.37.49.485.0 ]--
r 36             StdOut.
--[ 2021.10.25.14.37.50.285.0 ]--
r 36             StdOut.println
--[ 2021.10.25.14.37.50.291.0 ]--
r 36             StdOut.println()
--[ 2021.10.25.14.37.50.295.0 ]--
r 36             StdOut.println();
--[ 2021.10.25.14.37.56.663.0 ]--
r 36             StdOut.println(C);
--[ 2021.10.25.14.37.56.890.0 ]--
r 36             StdOut.println(Co);
--[ 2021.10.25.14.37.57.138.0 ]--
r 36             StdOut.println(Col);
--[ 2021.10.25.14.37.57.232.0 ]--
r 36             StdOut.println(Coll);
--[ 2021.10.25.14.37.57.720.0 ]--
r 36             StdOut.println(Colle);
--[ 2021.10.25.14.37.57.869.0 ]--
r 36             StdOut.println(Collec);
--[ 2021.10.25.14.37.58.051.0 ]--
r 36             StdOut.println(Collect);
--[ 2021.10.25.14.37.58.225.0 ]--
r 36             StdOut.println(Collecti);
--[ 2021.10.25.14.37.58.354.0 ]--
r 36             StdOut.println(Collectio);
--[ 2021.10.25.14.37.58.371.0 ]--
r 36             StdOut.println(Collection);
--[ 2021.10.25.14.37.58.398.0 ]--
r 36             StdOut.println(Collections);
--[ 2021.10.25.14.37.59.049.0 ]--
r 36             StdOut.println(Collections.);
--[ 2021.10.25.14.38.00.498.0 ]--
r 36             StdOut.println(Collections.max);
--[ 2021.10.25.14.38.00.506.0 ]--
r 36             StdOut.println(Collections;);
--[ 2021.10.25.14.38.00.515.0 ]--
r 36             StdOut.println(java.util.Collections;);
--[ 2021.10.25.14.38.00.526.0 ]--
r 1 import java.util.Arrays;import java.util.Collections;
--[ 2021.10.25.14.38.00.535.0 ]--
r 36             StdOut.println(Collections;);
--[ 2021.10.25.14.38.00.564.0 ]--
+ 1 import java.util.Arrays;
r 2 import java.util.Collections;
--[ 2021.10.25.14.38.00.578.0 ]--
r 37             StdOut.println(Collections.max);
--[ 2021.10.25.14.38.00.585.0 ]--
r 37             StdOut.println(Collections.max());
--[ 2021.10.25.14.38.01.987.0 ]--
r 37             StdOut.println(Collections.max(a));
--[ 2021.10.25.14.40.28.623.0 ]--
r 37             
--[ 2021.10.25.14.41.44.826.0 ]--
r 37             StdOut.println(Collections.max(a));
--[ 2021.10.25.14.41.51.083.0 ]--
r 37             StdOut.println(Collections.max(Aa));
--[ 2021.10.25.14.41.53.478.0 ]--
r 37             StdOut.println(Collections.max(Arraysa));
--[ 2021.10.25.14.41.53.497.0 ]--
r 37             StdOut.println(Collections.max(Arrays a));
--[ 2021.10.25.14.41.53.511.0 ]--
r 37             StdOut.println(Collections.max(Arraysa));
--[ 2021.10.25.14.41.54.505.0 ]--
r 37             StdOut.println(Collections.max(Arrays.a));
--[ 2021.10.25.14.41.55.119.0 ]--
r 37             StdOut.println(Collections.max(Arrays.aa));
--[ 2021.10.25.14.41.55.589.0 ]--
r 37             StdOut.println(Collections.max(Arrays.asLista));
--[ 2021.10.25.14.41.55.595.0 ]--
r 37             StdOut.println(Collections.max(Arrays.asList()a));
--[ 2021.10.25.14.41.56.557.0 ]--
r 37             StdOut.println(Collections.max(Arrays.asList(a)a));
--[ 2021.10.25.14.41.57.497.0 ]--
r 37             StdOut.println(Collections.max(Arrays.asList(a)));
--[ 2021.10.25.14.42.05.215.0 ]--
+ 37             
--[ 2021.10.25.14.42.05.935.0 ]--
r 37             f
--[ 2021.10.25.14.42.06.074.0 ]--
r 37             fo
--[ 2021.10.25.14.42.06.134.0 ]--
r 37             for
--[ 2021.10.25.14.42.06.212.0 ]--
r 37             for 
--[ 2021.10.25.14.42.06.742.0 ]--
r 37             for ()
--[ 2021.10.25.14.42.09.763.0 ]--
r 37             for (i)
--[ 2021.10.25.14.42.10.269.0 ]--
r 37             for (i=)
--[ 2021.10.25.14.42.10.626.0 ]--
r 37             for (i=0)
--[ 2021.10.25.14.42.11.610.0 ]--
r 37             for (i=0;)
--[ 2021.10.25.14.42.11.789.0 ]--
r 37             for (i=0; )
--[ 2021.10.25.14.42.11.969.0 ]--
r 37             for (i=0; i)
--[ 2021.10.25.14.42.12.199.0 ]--
r 37             for (i=0; ib)
--[ 2021.10.25.14.42.12.541.0 ]--
r 37             for (i=0; i)
--[ 2021.10.25.14.42.13.327.0 ]--
r 37             for (i=0; i<)
--[ 2021.10.25.14.42.13.851.0 ]--
r 37             for (i=0; i<5)
--[ 2021.10.25.14.42.14.654.0 ]--
r 37             for (i=0; i<5;)
--[ 2021.10.25.14.42.15.041.0 ]--
r 37             for (i=0; i<5; )
--[ 2021.10.25.14.42.15.245.0 ]--
r 37             for (i=0; i<5; i)
--[ 2021.10.25.14.42.15.833.0 ]--
r 37             for (i=0; i<5; i+)
--[ 2021.10.25.14.42.15.951.0 ]--
r 37             for (i=0; i<5; i++)
--[ 2021.10.25.14.42.20.260.0 ]--
r 37             for (i=0; i<5; i++) 
--[ 2021.10.25.14.42.20.515.0 ]--
r 37             for (i=0; i<5; i++) {
--[ 2021.10.25.14.42.20.700.0 ]--
+ 38 
+ 39 }
--[ 2021.10.25.14.42.20.711.0 ]--
r 39             }
--[ 2021.10.25.14.42.20.730.0 ]--
r 38                 
--[ 2021.10.25.14.42.23.351.0 ]--
r 37             for (ii=0; i<5; i++) {
--[ 2021.10.25.14.42.23.512.0 ]--
r 37             for (inti=0; i<5; i++) {
--[ 2021.10.25.14.42.23.621.0 ]--
r 37             for (int i=0; i<5; i++) {
--[ 2021.10.25.14.42.24.679.0 ]--
r 38                 p
--[ 2021.10.25.14.42.24.972.0 ]--
r 38                 
--[ 2021.10.25.14.42.25.252.0 ]--
r 38                 S
--[ 2021.10.25.14.42.25.502.0 ]--
r 38                 St
--[ 2021.10.25.14.42.25.609.0 ]--
r 38                 Std
--[ 2021.10.25.14.42.26.051.0 ]--
r 38                 StdOut
--[ 2021.10.25.14.42.26.211.0 ]--
r 38                 StdOut.
--[ 2021.10.25.14.42.26.651.0 ]--
r 38                 StdOut.p
--[ 2021.10.25.14.42.26.936.0 ]--
r 38                 StdOut.println
--[ 2021.10.25.14.42.26.942.0 ]--
r 38                 StdOut.println()
--[ 2021.10.25.14.42.26.946.0 ]--
r 38                 StdOut.println();
--[ 2021.10.25.14.42.32.108.0 ]--
r 38                 StdOut.println(a);
--[ 2021.10.25.14.42.32.905.0 ]--
r 38                 StdOut.println(a[]);
--[ 2021.10.25.14.42.33.580.0 ]--
r 38                 StdOut.println(a[i]);
--[ 2021.10.25.14.42.45.052.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.14.43.00.211.0 ]--
r 66         Double[] a = {0.};
--[ 2021.10.25.14.43.00.334.0 ]--
r 66         Double[] a = {0};
--[ 2021.10.25.14.43.00.484.0 ]--
r 66         Double[] a = {};
--[ 2021.10.25.14.43.06.913.0 ]--
r 66         Double[] a = {0};
--[ 2021.10.25.14.43.07.481.0 ]--
r 66         Double[] a = {};
--[ 2021.10.25.14.43.07.734.0 ]--
r 66         Double[] a = {9};
--[ 2021.10.25.14.43.08.097.0 ]--
r 66         Double[] a = {9.};
--[ 2021.10.25.14.43.08.338.0 ]--
r 66         Double[] a = {9.0};
--[ 2021.10.25.14.43.08.595.0 ]--
r 66         Double[] a = {9.0,};
--[ 2021.10.25.14.43.08.858.0 ]--
r 66         Double[] a = {9.0, };
--[ 2021.10.25.14.43.09.624.0 ]--
r 66         Double[] a = {9.0, 5};
--[ 2021.10.25.14.43.09.917.0 ]--
r 66         Double[] a = {9.0, 5.};
--[ 2021.10.25.14.43.10.163.0 ]--
r 66         Double[] a = {9.0, 5.0};
--[ 2021.10.25.14.43.10.547.0 ]--
r 66         Double[] a = {9.0, 5.0,};
--[ 2021.10.25.14.43.10.958.0 ]--
r 66         Double[] a = {9.0, 5.0, };
--[ 2021.10.25.14.43.11.691.0 ]--
r 66         Double[] a = {9.0, 5.0, 7};
--[ 2021.10.25.14.43.11.975.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.};
--[ 2021.10.25.14.43.12.248.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.0};
--[ 2021.10.25.14.43.12.553.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.0,};
--[ 2021.10.25.14.43.12.926.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.0, };
--[ 2021.10.25.14.43.13.199.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.0, 4};
--[ 2021.10.25.14.43.13.462.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.0, 4.};
--[ 2021.10.25.14.43.13.715.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.0, 4.0};
--[ 2021.10.25.14.43.14.111.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.0, 4.0 };
--[ 2021.10.25.14.43.14.461.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.0, 4.0};
--[ 2021.10.25.14.43.14.783.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.0, 4.0,};
--[ 2021.10.25.14.43.14.870.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.0, 4.0, };
--[ 2021.10.25.14.43.15.358.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.0, 4.0, 0};
--[ 2021.10.25.14.43.15.567.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.0, 4.0, 0.};
--[ 2021.10.25.14.43.15.769.0 ]--
r 66         Double[] a = {9.0, 5.0, 7.0, 4.0, 0.0};
--[ 2021.10.25.14.43.41.566.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.14.43.51.356.0 ]--
+ 40             
--[ 2021.10.25.14.43.51.827.0 ]--
r 40             S
--[ 2021.10.25.14.43.52.064.0 ]--
r 40             St
--[ 2021.10.25.14.43.53.837.0 ]--
r 40             Std
--[ 2021.10.25.14.43.54.429.0 ]--
r 40             StdOut
--[ 2021.10.25.14.43.54.631.0 ]--
r 40             StdOut.
--[ 2021.10.25.14.43.54.931.0 ]--
r 40             StdOut.p
--[ 2021.10.25.14.43.55.216.0 ]--
r 40             StdOut.println
--[ 2021.10.25.14.43.55.222.0 ]--
r 40             StdOut.println()
--[ 2021.10.25.14.43.55.226.0 ]--
r 40             StdOut.println();
--[ 2021.10.25.14.43.58.368.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.14.44.03.555.0 ]--
+ 42             
--[ 2021.10.25.14.44.03.808.0 ]--
r 42             StdOut.println(Collections.max(Arrays.asList(a)));
--[ 2021.10.25.14.44.06.785.0 ]--
r 42             StdOut.println(Collections.ma(Arrays.asList(a)));
--[ 2021.10.25.14.44.06.908.0 ]--
r 42             StdOut.println(Collections.m(Arrays.asList(a)));
--[ 2021.10.25.14.44.07.277.0 ]--
r 42             StdOut.println(Collections.mi(Arrays.asList(a)));
--[ 2021.10.25.14.44.07.941.0 ]--
r 42             StdOut.println(Collections.min(Arrays.asList(a)));
--[ 2021.10.25.14.44.11.563.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.14.45.19.559.0 ]--
+ 44             
--[ 2021.10.25.14.45.20.691.0 ]--
r 44             Q
--[ 2021.10.25.14.45.20.889.0 ]--
r 44             Qu
--[ 2021.10.25.14.45.21.662.0 ]--
r 44             QuickSortMedian3
--[ 2021.10.25.14.45.22.578.0 ]--
r 44             QuickSortMedian3.
--[ 2021.10.25.14.45.23.354.0 ]--
r 44             QuickSortMedian3.sort
--[ 2021.10.25.14.45.23.361.0 ]--
r 44             QuickSortMedian3.sort()
--[ 2021.10.25.14.45.23.365.0 ]--
r 44             QuickSortMedian3.sort();
--[ 2021.10.25.14.45.28.658.0 ]--
r 44             QuickSortMedian3.sort(a);
--[ 2021.10.25.14.46.03.969.0 ]--
- 37
- 37
- 37
r 37            
--[ 2021.10.25.14.46.04.104.0 ]--
- 37
--[ 2021.10.25.14.46.10.028.0 ]--
r 40             
--[ 2021.10.25.14.46.10.617.0 ]--
+ 39             
--[ 2021.10.25.14.46.11.340.0 ]--
r 39             QuickSortMedian3.sort(a);
--[ 2021.10.25.14.46.25.637.0 ]--
:/src/QuickSortMedian3.java
r 63         Double[] a = {0.};
--[ 2021.10.25.14.46.25.759.0 ]--
r 63         Double[] a = {0};
--[ 2021.10.25.14.46.26.160.0 ]--
r 63         Double[] a = {};
--[ 2021.10.25.14.46.32.689.0 ]--
r 63         Double[] a = {9.0, 5.0, 7.0, 4.0, 0.0};
--[ 2021.10.25.14.46.37.758.0 ]--
:/src/QuickSortMedian5.java
r 41 
--[ 2021.10.25.14.46.39.637.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.14.46.44.208.0 ]--
:/src/QuickSortMedian3.java
+ 65         
--[ 2021.10.25.14.46.44.690.0 ]--
r 65         s
--[ 2021.10.25.14.46.45.868.0 ]--
r 65         
--[ 2021.10.25.14.46.46.044.0 ]--
r 65         S
--[ 2021.10.25.14.46.46.740.0 ]--
r 65         St
--[ 2021.10.25.14.46.46.934.0 ]--
r 65         Std
--[ 2021.10.25.14.46.47.402.0 ]--
r 65         StdOut
--[ 2021.10.25.14.46.47.615.0 ]--
r 65         StdOut.
--[ 2021.10.25.14.46.48.169.0 ]--
r 65         StdOut.println
--[ 2021.10.25.14.46.48.174.0 ]--
r 65         StdOut.println()
--[ 2021.10.25.14.46.48.177.0 ]--
r 65         StdOut.println();
--[ 2021.10.25.14.46.50.118.0 ]--
r 65         StdOut.println(a);
--[ 2021.10.25.14.46.53.883.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.14.46.56.457.0 ]--
+ 65         
--[ 2021.10.25.14.46.56.789.0 ]--
r 65         f
--[ 2021.10.25.14.46.56.883.0 ]--
r 65         fo
--[ 2021.10.25.14.46.56.983.0 ]--
r 65         for
--[ 2021.10.25.14.46.57.089.0 ]--
r 65         for 
--[ 2021.10.25.14.46.57.879.0 ]--
r 65         for ()
--[ 2021.10.25.14.46.58.483.0 ]--
r 65         for (i)
--[ 2021.10.25.14.46.58.770.0 ]--
r 65         for (in)
--[ 2021.10.25.14.46.58.879.0 ]--
r 65         for (int)
--[ 2021.10.25.14.46.59.122.0 ]--
r 65         for (int )
--[ 2021.10.25.14.46.59.532.0 ]--
r 65         for (int i)
--[ 2021.10.25.14.46.59.833.0 ]--
r 65         for (int i=)
--[ 2021.10.25.14.47.00.227.0 ]--
r 65         for (int i=0)
--[ 2021.10.25.14.47.01.075.0 ]--
r 65         for (int i=0;)
--[ 2021.10.25.14.47.01.270.0 ]--
r 65         for (int i=0; )
--[ 2021.10.25.14.47.01.565.0 ]--
r 65         for (int i=0; i)
--[ 2021.10.25.14.47.02.070.0 ]--
r 65         for (int i=0; i<)
--[ 2021.10.25.14.47.02.715.0 ]--
r 65         for (int i=0; i<5)
--[ 2021.10.25.14.47.03.245.0 ]--
r 65         for (int i=0; i<5;)
--[ 2021.10.25.14.47.03.474.0 ]--
r 65         for (int i=0; i<5; )
--[ 2021.10.25.14.47.03.656.0 ]--
r 65         for (int i=0; i<5; i)
--[ 2021.10.25.14.47.04.033.0 ]--
r 65         for (int i=0; i<5; i_)
--[ 2021.10.25.14.47.04.168.0 ]--
r 65         for (int i=0; i<5; i__)
--[ 2021.10.25.14.47.04.679.0 ]--
r 65         for (int i=0; i<5; i_)
--[ 2021.10.25.14.47.05.036.0 ]--
r 65         for (int i=0; i<5; i)
--[ 2021.10.25.14.47.05.386.0 ]--
r 65         for (int i=0; i<5; i+)
--[ 2021.10.25.14.47.05.727.0 ]--
r 65         for (int i=0; i<5; i++)
--[ 2021.10.25.14.47.06.914.0 ]--
r 65         for (int i=0; i<5; i++) 
--[ 2021.10.25.14.47.07.129.0 ]--
r 65         for (int i=0; i<5; i++) {
--[ 2021.10.25.14.47.08.922.0 ]--
+ 67         
--[ 2021.10.25.14.47.09.465.0 ]--
r 67         }
--[ 2021.10.25.14.47.09.473.0 ]--
r 66             StdOut.println(a);
--[ 2021.10.25.14.47.12.856.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.14.47.14.646.0 ]--
r 66             StdOut.println(a[]);
--[ 2021.10.25.14.47.15.874.0 ]--
r 66             StdOut.println(a[i]);
--[ 2021.10.25.14.47.18.940.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.14.48.07.144.0 ]--
:/src/QuickSortMedian5.java
+ 68         
--[ 2021.10.25.14.48.07.347.0 ]--
+ 68         for (int i=0; i<5; i++) {
+ 69             StdOut.println(a[i]);
r 70         }
--[ 2021.10.25.14.48.11.374.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.14.48.16.721.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.14.51.11.387.0 ]--
:/src/EdgeCases.java
+ 8     
--[ 2021.10.25.14.51.11.493.0 ]--
+ 8     
--[ 2021.10.25.14.51.12.155.0 ]--
- 8
--[ 2021.10.25.14.51.12.311.0 ]--
- 7
--[ 2021.10.25.14.51.15.430.0 ]--
+ 9         
--[ 2021.10.25.14.51.15.588.0 ]--
+ 9         
--[ 2021.10.25.14.51.15.947.0 ]--
+ 9         
--[ 2021.10.25.14.51.17.986.0 ]--
+ 10         Write a client that runs sort() on difficult or pathological cases that might turn up in practical applications. Examples include arrays that are already in order, arrays in reverse order, arrays where all keys are the same, arrays consisting of only two distinct values, and arrays of size 0 or 1. Use standard bubble sort, selection sort, insertion sort, shellsort, quicksort.
+ 11 
r 12 Hint: you may want to write functions that take a size  and generate a pathological arrays.
--[ 2021.10.25.14.51.17.994.0 ]--
r 9 
r 12                 Hint: you may want to write functions that take a size  and generate a pathological arrays.
--[ 2021.10.25.14.51.27.528.0 ]--
+ 10         Write a client that runs sort() on difficult or pathological cases that might turn up in practical applications. 
r 11         Examples include arrays that are already in order, arrays in reverse order, arrays where all keys are the same, arrays consisting of only two distinct values, and arrays of size 0 or 1. Use standard bubble sort, selection sort, insertion sort, shellsort, quicksort.
--[ 2021.10.25.14.51.30.791.0 ]--
+ 11         Examples include arrays that are already in order, arrays in reverse order, arrays where all keys are the same, 
r 12         arrays consisting of only two distinct values, and arrays of size 0 or 1. Use standard bubble sort, selection sort, insertion sort, shellsort, quicksort.
--[ 2021.10.25.14.51.32.204.0 ]--
+ 12         arrays consisting of only two distinct values, and arrays of size 0 or 1. Use standard bubble sort, selection sort, 
r 13         insertion sort, shellsort, quicksort.
--[ 2021.10.25.14.51.32.237.0 ]--
r 13                 insertion sort, shellsort, quicksort.
--[ 2021.10.25.14.51.35.222.0 ]--
- 14
--[ 2021.10.25.14.51.36.243.0 ]--
- 13
r 13                 insertion sort, shellsort, quicksort.Hint: you may want to write functions that take a size  and generate a pathological arrays.
--[ 2021.10.25.14.51.37.002.0 ]--
+ 13                 insertion sort, shellsort, quicksort.
r 14                 Hint: you may want to write functions that take a size  and generate a pathological arrays.
--[ 2021.10.25.14.51.41.511.0 ]--
r 10 //        Write a client that runs sort() on difficult or pathological cases that might turn up in practical applications. 
r 11 //        Examples include arrays that are already in order, arrays in reverse order, arrays where all keys are the same, 
r 12 //        arrays consisting of only two distinct values, and arrays of size 0 or 1. Use standard bubble sort, selection sort, 
r 13 //                insertion sort, shellsort, quicksort.
r 14 //                Hint: you may want to write functions that take a size  and generate a pathological arrays.
--[ 2021.10.25.14.52.10.046.0 ]--
r 7 
r 10 //        Write a client that runs sort() on difficult or pathological cases that might turn up in practical applications.
r 11 //        Examples include arrays that are already in order, arrays in reverse order, arrays where all keys are the same,
r 12 //        arrays consisting of only two distinct values, and arrays of size 0 or 1. Use standard bubble sort, selection sort,
r 15 
--[ 2021.10.25.14.52.11.475.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.14.52.43.451.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.14.53.22.082.0 ]--
:/src/QuickSortMedian5.java
r 37 //            StdOut.println(Collections.max(Arrays.asList(a)));
r 38 //            StdOut.println(Collections.min(Arrays.asList(a)));
r 39 //            QuickSortMedian3.sort(a);
--[ 2021.10.25.14.53.26.160.0 ]--
- 39
--[ 2021.10.25.14.53.30.151.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.06.23.764.0 ]--
+ 40             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
+ 41                 return i0;
r 42             }
+ 44             if ((a1.compareTo(a0) < 0 && a1.compareTo(a2) > 0) || (a1.compareTo(a0) > 0 && a1.compareTo(a2) < 0)) {
+ 45                 return i1;
+ 46             }
+ 47             // if a2 is median, return i2
+ 48 //            if ((a2.compareTo(a1) < 0 && a2.compareTo(a0) > 0) || (a2.compareTo(a1) > 0 && a2.compareTo(a0) < 0)) {
+ 49 //                return i2;
r 50 //            }
--[ 2021.10.25.15.06.26.671.0 ]--
r 48             if ((a2.compareTo(a1) < 0 && a2.compareTo(a0) > 0) || (a2.compareTo(a1) > 0 && a2.compareTo(a0) < 0)) {
r 49                 return i2;
r 50             }
--[ 2021.10.25.15.06.29.850.0 ]--
+ 51             
--[ 2021.10.25.15.06.30.028.0 ]--
+ 51             // if a2 is median, return i2
+ 52             if ((a2.compareTo(a1) < 0 && a2.compareTo(a0) > 0) || (a2.compareTo(a1) > 0 && a2.compareTo(a0) < 0)) {
+ 53                 return i2;
r 54             }
--[ 2021.10.25.15.06.30.520.0 ]--
+ 55             
--[ 2021.10.25.15.06.30.641.0 ]--
+ 55             // if a2 is median, return i2
+ 56             if ((a2.compareTo(a1) < 0 && a2.compareTo(a0) > 0) || (a2.compareTo(a1) > 0 && a2.compareTo(a0) < 0)) {
+ 57                 return i2;
r 58             }
--[ 2021.10.25.15.06.34.614.0 ]--
r 55             // if a is median, return i2
--[ 2021.10.25.15.06.34.734.0 ]--
r 55             // if a4 is median, return i2
--[ 2021.10.25.15.06.35.891.0 ]--
r 55             // if a4 is median, return i
--[ 2021.10.25.15.06.36.417.0 ]--
r 55             // if a4 is median, return i4
--[ 2021.10.25.15.06.37.199.0 ]--
r 51             // if a2 is median, return i
--[ 2021.10.25.15.06.37.265.0 ]--
r 51             // if a2 is median, return i3
--[ 2021.10.25.15.06.39.071.0 ]--
r 51             // if a is median, return i3
--[ 2021.10.25.15.06.39.099.0 ]--
r 51             // if a3 is median, return i3
--[ 2021.10.25.15.06.41.681.0 ]--
r 53                 return i;
--[ 2021.10.25.15.06.41.750.0 ]--
r 53                 return i3;
--[ 2021.10.25.15.06.42.941.0 ]--
r 57                 return i;
--[ 2021.10.25.15.06.43.296.0 ]--
r 57                 return i4;
--[ 2021.10.25.15.06.44.818.0 ]--
r 60             return i;
--[ 2021.10.25.15.06.45.039.0 ]--
r 60             return i5;
--[ 2021.10.25.15.06.48.035.0 ]--
r 60             return i;
--[ 2021.10.25.15.06.48.330.0 ]--
r 60             return i4;
--[ 2021.10.25.15.06.50.759.0 ]--
- 56
- 56
r 56             
--[ 2021.10.25.15.06.51.176.0 ]--
- 56
--[ 2021.10.25.15.06.52.603.0 ]--
- 56
--[ 2021.10.25.15.08.32.373.0 ]--
+ 56 
--[ 2021.10.25.15.08.32.514.0 ]--
+ 56             if ((a2.compareTo(a1) < 0 && a2.compareTo(a0) > 0) || (a2.compareTo(a1) > 0 && a2.compareTo(a0) < 0)) {
+ 57                 return i4;
+ 58             }
--[ 2021.10.25.15.08.32.675.0 ]--
r 60             return i;
--[ 2021.10.25.15.08.32.755.0 ]--
r 60             return i5;
--[ 2021.10.25.15.08.32.855.0 ]--
r 60             return i;
--[ 2021.10.25.15.08.32.924.0 ]--
r 60             return i0;
--[ 2021.10.25.15.08.33.090.0 ]--
r 57                 return i;
--[ 2021.10.25.15.08.33.179.0 ]--
r 57                 return i2;
--[ 2021.10.25.15.08.33.365.0 ]--
r 53                 return i;
--[ 2021.10.25.15.08.33.426.0 ]--
r 53                 return i2;
--[ 2021.10.25.15.08.33.597.0 ]--
r 51             // if a is median, return i3
--[ 2021.10.25.15.08.33.676.0 ]--
r 51             // if a2 is median, return i3
--[ 2021.10.25.15.08.33.861.0 ]--
r 51             // if a2 is median, return i
--[ 2021.10.25.15.08.33.929.0 ]--
r 51             // if a2 is median, return i2
--[ 2021.10.25.15.08.34.095.0 ]--
r 55             // if a4 is median, return i
--[ 2021.10.25.15.08.34.177.0 ]--
r 55             // if a4 is median, return i2
--[ 2021.10.25.15.08.34.359.0 ]--
r 55             // if a is median, return i2
--[ 2021.10.25.15.08.34.429.0 ]--
r 55             // if a2 is median, return i2
--[ 2021.10.25.15.08.34.626.0 ]--
- 55
- 55
- 55
r 55             
--[ 2021.10.25.15.08.34.698.0 ]--
- 55
--[ 2021.10.25.15.08.34.784.0 ]--
- 51
- 51
- 51
r 51             
--[ 2021.10.25.15.08.34.888.0 ]--
- 51
--[ 2021.10.25.15.08.35.041.0 ]--
r 48 //            if ((a2.compareTo(a1) < 0 && a2.compareTo(a0) > 0) || (a2.compareTo(a1) > 0 && a2.compareTo(a0) < 0)) {
r 49 //                return i2;
r 50 //            }
--[ 2021.10.25.15.08.35.192.0 ]--
- 40
- 40
r 40 
- 42
- 42
- 42
- 42
- 42
- 42
r 42             // etc.
--[ 2021.10.25.15.08.35.384.0 ]--
+ 39 //            QuickSortMedian3.sort(a);
--[ 2021.10.25.15.08.36.515.0 ]--
- 39
--[ 2021.10.25.15.08.42.056.0 ]--
r 37             StdOut.println(Collections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.47.319.0 ]--
r 37             dCollections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.47.764.0 ]--
r 37             Collections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.48.538.0 ]--
r 37             DCollections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.49.303.0 ]--
r 37             DoubleCollections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.49.333.0 ]--
r 37             Double Collections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.49.344.0 ]--
r 37             DoubleCollections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.49.713.0 ]--
r 37             Double Collections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.49.781.0 ]--
r 37             Double mCollections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.49.831.0 ]--
r 37             Double maCollections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.49.985.0 ]--
r 37             Double macCollections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.50.272.0 ]--
r 37             Double mac Collections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.50.505.0 ]--
r 37             Double macCollections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.50.623.0 ]--
r 37             Double maCollections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.50.698.0 ]--
r 37             Double maxCollections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.50.791.0 ]--
r 37             Double max Collections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.51.468.0 ]--
r 37             Double max  Collections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.51.589.0 ]--
r 37             Double max  =Collections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.51.846.0 ]--
r 37             Double max  Collections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.51.987.0 ]--
r 37             Double max Collections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.52.319.0 ]--
r 37             Double max -Collections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.52.434.0 ]--
r 37             Double max - Collections.max(Arrays.asList(a)));
--[ 2021.10.25.15.08.53.793.0 ]--
r 37             Double max - Collections.max(Arrays.asList(a));
--[ 2021.10.25.15.08.56.839.0 ]--
r 37             Double max  Collections.max(Arrays.asList(a));
--[ 2021.10.25.15.08.57.299.0 ]--
r 37             Double max = Collections.max(Arrays.asList(a));
--[ 2021.10.25.15.09.01.883.0 ]--
r 38     //            StdOut.println(Collections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.02.539.0 ]--
r 38     Collections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.03.213.0 ]--
r 38         Collections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.03.550.0 ]--
r 38             Collections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.04.127.0 ]--
r 38             dCollections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.04.250.0 ]--
r 38             doCollections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.04.407.0 ]--
r 38             dobCollections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.04.735.0 ]--
r 38             doCollections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.04.852.0 ]--
r 38             dCollections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.04.993.0 ]--
r 38             Collections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.05.212.0 ]--
r 38             DCollections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.05.419.0 ]--
r 38             DoCollections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.05.488.0 ]--
r 38             DouCollections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.05.985.0 ]--
r 38             DoubleCollections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.05.997.0 ]--
r 38             Double Collections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.06.008.0 ]--
r 38             DoubleCollections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.06.303.0 ]--
r 38             Double Collections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.06.472.0 ]--
r 38             Double mCollections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.06.578.0 ]--
r 38             Double miCollections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.06.665.0 ]--
r 38             Double minCollections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.07.024.0 ]--
r 38             Double min Collections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.07.918.0 ]--
r 38             Double min =Collections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.08.257.0 ]--
r 38             Double min = Collections.min(Arrays.asList(a)));
--[ 2021.10.25.15.09.10.275.0 ]--
r 38             Double min = Collections.min(Arrays.asList(a));
--[ 2021.10.25.15.09.11.767.0 ]--
+ 39             
--[ 2021.10.25.15.09.12.035.0 ]--
r 39             f
--[ 2021.10.25.15.09.12.063.0 ]--
r 39             fo
--[ 2021.10.25.15.09.12.208.0 ]--
r 39             fo r
--[ 2021.10.25.15.09.12.726.0 ]--
r 39             fo 
--[ 2021.10.25.15.09.12.842.0 ]--
r 39             fo
--[ 2021.10.25.15.09.12.929.0 ]--
r 39             for
--[ 2021.10.25.15.09.12.974.0 ]--
r 39             for 
--[ 2021.10.25.15.09.13.426.0 ]--
r 39             for ()
--[ 2021.10.25.15.09.19.398.0 ]--
+ 39 for (int i=0; i<5; i++) {
r 40             StdOut.println(a[i]);
r 41         }            // if a0 is median, return i0
--[ 2021.10.25.15.09.19.417.0 ]--
r 39             for (int i=0; i<5; i++) {
r 40                 StdOut.println(a[i]);
r 41             }            // if a0 is median, return i0
--[ 2021.10.25.15.09.21.937.0 ]--
r 40                
--[ 2021.10.25.15.09.23.091.0 ]--
r 40                i
--[ 2021.10.25.15.09.23.223.0 ]--
r 40                if
--[ 2021.10.25.15.09.23.260.0 ]--
r 40                if 
--[ 2021.10.25.15.09.26.832.0 ]--
r 40                if ()
--[ 2021.10.25.15.09.27.106.0 ]--
r 40                if (a)
--[ 2021.10.25.15.09.28.650.0 ]--
r 40                if (a[])
--[ 2021.10.25.15.09.29.082.0 ]--
r 40                if (a[i])
--[ 2021.10.25.15.09.29.756.0 ]--
r 40                if (a[i] )
--[ 2021.10.25.15.09.30.047.0 ]--
r 40                if (a[i] =)
--[ 2021.10.25.15.09.30.143.0 ]--
r 40                if (a[i] ==)
--[ 2021.10.25.15.09.30.208.0 ]--
r 40                if (a[i] == )
--[ 2021.10.25.15.09.31.384.0 ]--
r 40                if (a[i] == m)
--[ 2021.10.25.15.09.31.430.0 ]--
r 40                if (a[i] == ma)
--[ 2021.10.25.15.09.31.998.0 ]--
r 40                if (a[i] == max)
--[ 2021.10.25.15.09.32.529.0 ]--
r 40                if (a[i] == max) 
--[ 2021.10.25.15.09.32.867.0 ]--
r 40                if (a[i] == max) {
--[ 2021.10.25.15.09.33.032.0 ]--
+ 41 
+ 42 }
--[ 2021.10.25.15.09.33.044.0 ]--
r 42                }
--[ 2021.10.25.15.09.33.065.0 ]--
r 41                    
--[ 2021.10.25.15.09.35.799.0 ]--
r 41                    m
--[ 2021.10.25.15.09.35.845.0 ]--
r 41                    ma
--[ 2021.10.25.15.09.36.585.0 ]--
r 41                    max
--[ 2021.10.25.15.09.36.666.0 ]--
r 41                    max 
--[ 2021.10.25.15.09.37.763.0 ]--
r 41                    max
--[ 2021.10.25.15.09.37.877.0 ]--
r 41                    ma
--[ 2021.10.25.15.09.38.028.0 ]--
r 41                    m
--[ 2021.10.25.15.09.38.165.0 ]--
r 41                    
--[ 2021.10.25.15.09.41.217.0 ]--
r 37             Double maxN = Collections.max(Arrays.asList(a));
--[ 2021.10.25.15.09.41.420.0 ]--
r 37             Double maxNu = Collections.max(Arrays.asList(a));
--[ 2021.10.25.15.09.41.593.0 ]--
r 37             Double maxNuj = Collections.max(Arrays.asList(a));
--[ 2021.10.25.15.09.42.021.0 ]--
r 37             Double maxNu = Collections.max(Arrays.asList(a));
--[ 2021.10.25.15.09.42.148.0 ]--
r 37             Double maxNum = Collections.max(Arrays.asList(a));
--[ 2021.10.25.15.09.43.949.0 ]--
r 38             Double minN = Collections.min(Arrays.asList(a));
--[ 2021.10.25.15.09.44.245.0 ]--
r 38             Double minNu = Collections.min(Arrays.asList(a));
--[ 2021.10.25.15.09.44.430.0 ]--
r 38             Double minNum = Collections.min(Arrays.asList(a));
--[ 2021.10.25.15.09.47.668.0 ]--
+ 39             
--[ 2021.10.25.15.09.48.285.0 ]--
r 39             M
--[ 2021.10.25.15.09.48.517.0 ]--
r 39             Ma
--[ 2021.10.25.15.09.48.909.0 ]--
r 39             Max
--[ 2021.10.25.15.09.49.882.0 ]--
r 39             Ma
--[ 2021.10.25.15.09.50.000.0 ]--
r 39             M
--[ 2021.10.25.15.09.50.161.0 ]--
r 39             
--[ 2021.10.25.15.09.50.669.0 ]--
r 39             i
--[ 2021.10.25.15.09.50.806.0 ]--
r 39             in
--[ 2021.10.25.15.09.50.854.0 ]--
r 39             int
--[ 2021.10.25.15.09.50.874.0 ]--
r 39             int 
--[ 2021.10.25.15.09.51.793.0 ]--
r 39             int m
--[ 2021.10.25.15.09.51.867.0 ]--
r 39             int ma
--[ 2021.10.25.15.09.52.183.0 ]--
r 39             int max
--[ 2021.10.25.15.09.52.535.0 ]--
r 39             int maxI
--[ 2021.10.25.15.09.52.670.0 ]--
r 39             int maxIn
--[ 2021.10.25.15.09.52.751.0 ]--
r 39             int maxInd
--[ 2021.10.25.15.09.52.954.0 ]--
r 39             int maxInde
--[ 2021.10.25.15.09.53.138.0 ]--
r 39             int maxIndex
--[ 2021.10.25.15.09.53.567.0 ]--
r 39             int maxIndex 
--[ 2021.10.25.15.09.53.918.0 ]--
r 39             int maxIndex =
--[ 2021.10.25.15.09.54.035.0 ]--
r 39             int maxIndex = 
--[ 2021.10.25.15.09.55.266.0 ]--
r 39             int maxIndex =
--[ 2021.10.25.15.09.55.404.0 ]--
r 39             int maxIndex 
--[ 2021.10.25.15.09.55.512.0 ]--
r 39             int maxIndex
--[ 2021.10.25.15.09.56.228.0 ]--
r 39             int maxIndex 
--[ 2021.10.25.15.09.56.772.0 ]--
r 39             int maxIndex
--[ 2021.10.25.15.09.57.359.0 ]--
r 39             int maxIndex;
--[ 2021.10.25.15.10.00.352.0 ]--
r 39             int maxIndex
--[ 2021.10.25.15.10.00.584.0 ]--
r 39             int maxIndex 
--[ 2021.10.25.15.10.00.712.0 ]--
r 39             int maxIndex =
--[ 2021.10.25.15.10.00.823.0 ]--
r 39             int maxIndex = 
--[ 2021.10.25.15.10.00.962.0 ]--
r 39             int maxIndex = 0
--[ 2021.10.25.15.10.01.236.0 ]--
r 39             int maxIndex = 0l
--[ 2021.10.25.15.10.01.835.0 ]--
r 39             int maxIndex = 0
--[ 2021.10.25.15.10.02.255.0 ]--
r 39             int maxIndex = 0;
--[ 2021.10.25.15.10.03.818.0 ]--
r 41                if (a[i] == maxI) {
--[ 2021.10.25.15.10.04.416.0 ]--
r 41                if (a[i] == maxIndex) {
--[ 2021.10.25.15.10.06.490.0 ]--
r 41                if (a[i] == maxInde) {
--[ 2021.10.25.15.10.06.626.0 ]--
r 41                if (a[i] == maxInd) {
--[ 2021.10.25.15.10.06.752.0 ]--
r 41                if (a[i] == maxIn) {
--[ 2021.10.25.15.10.06.889.0 ]--
r 41                if (a[i] == maxI) {
--[ 2021.10.25.15.10.07.033.0 ]--
r 41                if (a[i] == max) {
--[ 2021.10.25.15.10.07.588.0 ]--
r 41                if (a[i] == maxN) {
--[ 2021.10.25.15.10.08.095.0 ]--
r 41                if (a[i] == maxNum) {
--[ 2021.10.25.15.10.10.121.0 ]--
r 42                    m
--[ 2021.10.25.15.10.10.232.0 ]--
r 42                    ma
--[ 2021.10.25.15.10.10.684.0 ]--
r 42                    maxIndex
--[ 2021.10.25.15.10.10.985.0 ]--
r 42                    maxIndex 
--[ 2021.10.25.15.10.11.342.0 ]--
r 42                    maxIndex =
--[ 2021.10.25.15.10.11.438.0 ]--
r 42                    maxIndex = 
--[ 2021.10.25.15.10.12.210.0 ]--
r 42                    maxIndex = i
--[ 2021.10.25.15.10.12.465.0 ]--
r 42                    maxIndex = i;
--[ 2021.10.25.15.10.28.079.0 ]--
+ 44             }      
r 45             // if a0 is median, return i0
--[ 2021.10.25.15.10.29.167.0 ]--
r 44             }      ''
--[ 2021.10.25.15.10.29.654.0 ]--
r 44             }      '\'
--[ 2021.10.25.15.10.29.963.0 ]--
r 44             }      ''
--[ 2021.10.25.15.10.30.186.0 ]--
r 44             }      
--[ 2021.10.25.15.10.30.649.0 ]--
+ 45             
--[ 2021.10.25.15.10.31.217.0 ]--
r 45             Double minNum = Collections.min(Arrays.asList(a));
--[ 2021.10.25.15.10.31.226.0 ]--
r 44             }
--[ 2021.10.25.15.10.31.924.0 ]--
+ 46             
--[ 2021.10.25.15.10.36.095.0 ]--
- 38
--[ 2021.10.25.15.10.37.107.0 ]--
r 45             int maxIndex = 0;
--[ 2021.10.25.15.10.38.713.0 ]--
r 45             int maIndex = 0;
--[ 2021.10.25.15.10.38.835.0 ]--
r 45             int mIndex = 0;
--[ 2021.10.25.15.10.39.021.0 ]--
r 45             int miIndex = 0;
--[ 2021.10.25.15.10.39.310.0 ]--
r 45             int minIndex = 0;
--[ 2021.10.25.15.10.40.365.0 ]--
+ 46             
--[ 2021.10.25.15.10.43.630.0 ]--
+ 46             for (int i=0; i<5; i++) {
+ 47                if (a[i] == maxNum) {
+ 48                    maxIndex = i;
+ 49                }
r 50             }
--[ 2021.10.25.15.10.43.641.0 ]--
r 47                 if (a[i] == maxNum) {
r 48                     maxIndex = i;
r 49                 }
--[ 2021.10.25.15.10.45.249.0 ]--
r 47                 if (a[i] == maNum) {
--[ 2021.10.25.15.10.45.396.0 ]--
r 47                 if (a[i] == mNum) {
--[ 2021.10.25.15.10.45.570.0 ]--
r 47                 if (a[i] == miNum) {
--[ 2021.10.25.15.10.45.772.0 ]--
r 47                 if (a[i] == minNum) {
--[ 2021.10.25.15.10.47.894.0 ]--
r 48                     maIndex = i;
--[ 2021.10.25.15.10.48.011.0 ]--
r 48                     mIndex = i;
--[ 2021.10.25.15.10.48.199.0 ]--
r 48                     miIndex = i;
--[ 2021.10.25.15.10.48.215.0 ]--
r 48                     minIndex = i;
--[ 2021.10.25.15.11.17.420.0 ]--
+ 51             
--[ 2021.10.25.15.11.19.830.0 ]--
r 51             o
--[ 2021.10.25.15.11.19.964.0 ]--
r 51             of
--[ 2021.10.25.15.11.20.446.0 ]--
r 51             o
--[ 2021.10.25.15.11.20.533.0 ]--
r 51             
--[ 2021.10.25.15.11.20.612.0 ]--
r 51             f
--[ 2021.10.25.15.11.20.716.0 ]--
r 51             fo
--[ 2021.10.25.15.11.20.792.0 ]--
r 51             for
--[ 2021.10.25.15.11.20.878.0 ]--
r 51             for 
--[ 2021.10.25.15.11.22.907.0 ]--
r 51             for ()
--[ 2021.10.25.15.11.25.699.0 ]--
r 51             for (i)
--[ 2021.10.25.15.11.25.811.0 ]--
r 51             for (in)
--[ 2021.10.25.15.11.25.847.0 ]--
r 51             for (int)
--[ 2021.10.25.15.11.26.432.0 ]--
r 51             for (int )
--[ 2021.10.25.15.11.26.722.0 ]--
r 51             for (int i)
--[ 2021.10.25.15.11.27.161.0 ]--
r 51             for (int i-)
--[ 2021.10.25.15.11.27.396.0 ]--
r 51             for (int i-0)
--[ 2021.10.25.15.11.28.058.0 ]--
r 51             for (int i-)
--[ 2021.10.25.15.11.28.159.0 ]--
r 51             for (int i)
--[ 2021.10.25.15.11.28.329.0 ]--
r 51             for (int )
--[ 2021.10.25.15.11.28.855.0 ]--
r 51             for (int)
--[ 2021.10.25.15.11.28.982.0 ]--
r 51             for (in)
--[ 2021.10.25.15.11.29.695.0 ]--
r 51             for (i)
--[ 2021.10.25.15.11.29.815.0 ]--
r 51             for ()
--[ 2021.10.25.15.11.29.958.0 ]--
r 51             for 
--[ 2021.10.25.15.11.30.098.0 ]--
r 51             for
--[ 2021.10.25.15.11.30.251.0 ]--
r 51             fo
--[ 2021.10.25.15.11.30.392.0 ]--
r 51             f
--[ 2021.10.25.15.11.30.548.0 ]--
r 51             
--[ 2021.10.25.15.11.33.585.0 ]--
r 51             for (int i=0; i<5; i++) {
--[ 2021.10.25.15.11.33.933.0 ]--
+ 52 
+ 53 }
--[ 2021.10.25.15.11.33.941.0 ]--
r 53             }
--[ 2021.10.25.15.11.33.968.0 ]--
r 52                 
--[ 2021.10.25.15.11.35.945.0 ]--
r 52                 i
--[ 2021.10.25.15.11.36.085.0 ]--
r 52                 if
--[ 2021.10.25.15.11.36.131.0 ]--
r 52                 if 
--[ 2021.10.25.15.11.37.287.0 ]--
r 52                 if ()
--[ 2021.10.25.15.11.37.754.0 ]--
r 52                 if (i)
--[ 2021.10.25.15.11.37.994.0 ]--
r 52                 if (i )
--[ 2021.10.25.15.11.38.444.0 ]--
r 52                 if (i)
--[ 2021.10.25.15.11.38.586.0 ]--
r 52                 if ()
--[ 2021.10.25.15.11.39.894.0 ]--
r 52                 if (!)
--[ 2021.10.25.15.11.40.256.0 ]--
r 52                 if ()
--[ 2021.10.25.15.11.40.545.0 ]--
r 52                 if (i)
--[ 2021.10.25.15.11.41.069.0 ]--
r 52                 if (i )
--[ 2021.10.25.15.11.41.406.0 ]--
r 52                 if (i !)
--[ 2021.10.25.15.11.41.748.0 ]--
r 52                 if (i !=)
--[ 2021.10.25.15.11.42.322.0 ]--
r 52                 if (i != )
--[ 2021.10.25.15.11.44.033.0 ]--
r 52                 if (i != m)
--[ 2021.10.25.15.11.44.873.0 ]--
r 52                 if (i != maxIndex)
--[ 2021.10.25.15.11.45.336.0 ]--
r 52                 if (i != maxIndex )
--[ 2021.10.25.15.11.46.333.0 ]--
r 52                 if (i != maxIndex &)
--[ 2021.10.25.15.11.46.469.0 ]--
r 52                 if (i != maxIndex &&)
--[ 2021.10.25.15.11.46.727.0 ]--
r 52                 if (i != maxIndex && )
--[ 2021.10.25.15.11.47.350.0 ]--
r 52                 if (i != maxIndex && i)
--[ 2021.10.25.15.11.47.673.0 ]--
r 52                 if (i != maxIndex && i )
--[ 2021.10.25.15.11.48.020.0 ]--
r 52                 if (i != maxIndex && i !)
--[ 2021.10.25.15.11.48.591.0 ]--
r 52                 if (i != maxIndex && i !=)
--[ 2021.10.25.15.11.48.811.0 ]--
r 52                 if (i != maxIndex && i != )
--[ 2021.10.25.15.11.49.314.0 ]--
r 52                 if (i != maxIndex && i != m)
--[ 2021.10.25.15.11.49.471.0 ]--
r 52                 if (i != maxIndex && i != ma)
--[ 2021.10.25.15.11.50.216.0 ]--
r 52                 if (i != maxIndex && i != m)
--[ 2021.10.25.15.11.50.336.0 ]--
r 52                 if (i != maxIndex && i != )
--[ 2021.10.25.15.11.50.506.0 ]--
r 52                 if (i != maxIndex && i != i)
--[ 2021.10.25.15.11.50.559.0 ]--
r 52                 if (i != maxIndex && i != in)
--[ 2021.10.25.15.11.51.003.0 ]--
r 52                 if (i != maxIndex && i != i)
--[ 2021.10.25.15.11.51.139.0 ]--
r 52                 if (i != maxIndex && i != )
--[ 2021.10.25.15.11.51.245.0 ]--
r 52                 if (i != maxIndex && i != m)
--[ 2021.10.25.15.11.51.374.0 ]--
r 52                 if (i != maxIndex && i != mi)
--[ 2021.10.25.15.11.51.432.0 ]--
r 52                 if (i != maxIndex && i != min)
--[ 2021.10.25.15.11.51.991.0 ]--
r 52                 if (i != maxIndex && i != minIndex)
--[ 2021.10.25.15.11.53.381.0 ]--
r 52                 if (i != maxIndex && i != minIndex) 
--[ 2021.10.25.15.11.53.575.0 ]--
r 52                 if (i != maxIndex && i != minIndex) {
--[ 2021.10.25.15.11.53.735.0 ]--
+ 53 
+ 54 }
--[ 2021.10.25.15.11.53.745.0 ]--
r 54                 }
--[ 2021.10.25.15.11.53.766.0 ]--
r 53                     
--[ 2021.10.25.15.12.52.768.0 ]--
+ 51             
--[ 2021.10.25.15.12.53.868.0 ]--
+ 44             
--[ 2021.10.25.15.12.55.336.0 ]--
+ 52             
--[ 2021.10.25.15.12.58.457.0 ]--
r 53             n
--[ 2021.10.25.15.12.58.732.0 ]--
r 53             new
--[ 2021.10.25.15.12.59.251.0 ]--
r 53             newA
--[ 2021.10.25.15.12.59.416.0 ]--
r 53             newAr
--[ 2021.10.25.15.12.59.580.0 ]--
r 53             newArr
--[ 2021.10.25.15.12.59.923.0 ]--
r 53             newArry
--[ 2021.10.25.15.13.00.595.0 ]--
r 53             newArr
--[ 2021.10.25.15.13.00.688.0 ]--
r 53             newArra
--[ 2021.10.25.15.13.00.804.0 ]--
r 53             newArray
--[ 2021.10.25.15.13.01.716.0 ]--
r 53             newArray 
--[ 2021.10.25.15.13.02.026.0 ]--
r 53             newArray =
--[ 2021.10.25.15.13.02.095.0 ]--
r 53             newArray = 
--[ 2021.10.25.15.13.03.081.0 ]--
r 53             DnewArray = 
--[ 2021.10.25.15.13.03.305.0 ]--
r 53             DonewArray = 
--[ 2021.10.25.15.13.03.390.0 ]--
r 53             DounewArray = 
--[ 2021.10.25.15.13.03.494.0 ]--
r 53             DoubnewArray = 
--[ 2021.10.25.15.13.03.612.0 ]--
r 53             DoublnewArray = 
--[ 2021.10.25.15.13.03.717.0 ]--
r 53             DoublenewArray = 
--[ 2021.10.25.15.13.03.870.0 ]--
r 53             Double newArray = 
--[ 2021.10.25.15.13.11.910.0 ]--
r 53            Comparable[] a
--[ 2021.10.25.15.13.11.924.0 ]--
r 52 
r 53             Comparable[] a
--[ 2021.10.25.15.13.13.754.0 ]--
r 53             Comparable[] n
--[ 2021.10.25.15.13.14.092.0 ]--
r 53             Comparable[] ne
--[ 2021.10.25.15.13.14.287.0 ]--
r 53             Comparable[] new
--[ 2021.10.25.15.13.14.531.0 ]--
r 53             Comparable[] ne
--[ 2021.10.25.15.13.14.647.0 ]--
r 53             Comparable[] n
--[ 2021.10.25.15.13.14.774.0 ]--
r 53             Comparable[] 
--[ 2021.10.25.15.13.16.133.0 ]--
r 53             Comparable[] a
--[ 2021.10.25.15.13.16.287.0 ]--
r 53             Comparable[] ar
--[ 2021.10.25.15.13.16.495.0 ]--
r 53             Comparable[] arr
--[ 2021.10.25.15.13.16.583.0 ]--
r 53             Comparable[] arra
--[ 2021.10.25.15.13.16.708.0 ]--
r 53             Comparable[] array
--[ 2021.10.25.15.13.17.752.0 ]--
r 53             Comparable[] arrayo
--[ 2021.10.25.15.13.17.809.0 ]--
r 53             Comparable[] arrayof
--[ 2021.10.25.15.13.18.268.0 ]--
r 53             Comparable[] arrayo
--[ 2021.10.25.15.13.18.392.0 ]--
r 53             Comparable[] array
--[ 2021.10.25.15.13.18.548.0 ]--
r 53             Comparable[] arra
--[ 2021.10.25.15.13.18.689.0 ]--
r 53             Comparable[] arr
--[ 2021.10.25.15.13.18.844.0 ]--
r 53             Comparable[] ar
--[ 2021.10.25.15.13.19.006.0 ]--
r 53             Comparable[] a
--[ 2021.10.25.15.13.19.438.0 ]--
r 53             Comparable[] 
--[ 2021.10.25.15.13.20.051.0 ]--
r 53             Comparable[] a
--[ 2021.10.25.15.13.20.282.0 ]--
r 53             Comparable[] ar
--[ 2021.10.25.15.13.20.427.0 ]--
r 53             Comparable[] arr
--[ 2021.10.25.15.13.20.539.0 ]--
r 53             Comparable[] arra
--[ 2021.10.25.15.13.20.646.0 ]--
r 53             Comparable[] array
--[ 2021.10.25.15.13.20.721.0 ]--
r 53             Comparable[] array 
--[ 2021.10.25.15.13.20.898.0 ]--
r 53             Comparable[] array o
--[ 2021.10.25.15.13.21.140.0 ]--
r 53             Comparable[] array 
--[ 2021.10.25.15.13.21.234.0 ]--
r 53             Comparable[] array
--[ 2021.10.25.15.13.21.742.0 ]--
r 53             Comparable[] arrayO
--[ 2021.10.25.15.13.21.854.0 ]--
r 53             Comparable[] arrayOf
--[ 2021.10.25.15.13.22.546.0 ]--
r 53             Comparable[] arrayOf3
--[ 2021.10.25.15.13.25.195.0 ]--
r 53             Comparable[] arrayOf3;
--[ 2021.10.25.15.13.37.179.0 ]--
r 56                     a
--[ 2021.10.25.15.13.37.956.0 ]--
r 56                     ar
--[ 2021.10.25.15.13.38.542.0 ]--
r 56                     arrayOf3
--[ 2021.10.25.15.13.39.465.0 ]--
r 56                     arrayOf3[]
--[ 2021.10.25.15.13.40.360.0 ]--
r 56                     arrayOf3[i]
--[ 2021.10.25.15.13.42.204.0 ]--
r 56                     arrayOf3[]
--[ 2021.10.25.15.13.51.260.0 ]--
r 56                     arrayOf3[c]
--[ 2021.10.25.15.13.51.369.0 ]--
r 56                     arrayOf3[co]
--[ 2021.10.25.15.13.51.395.0 ]--
r 56                     arrayOf3[cou]
--[ 2021.10.25.15.13.51.542.0 ]--
r 56                     arrayOf3[coun]
--[ 2021.10.25.15.13.51.588.0 ]--
r 56                     arrayOf3[count]
--[ 2021.10.25.15.13.54.545.0 ]--
+ 54             
--[ 2021.10.25.15.13.55.033.0 ]--
r 54             i
--[ 2021.10.25.15.13.55.150.0 ]--
r 54             in
--[ 2021.10.25.15.13.55.197.0 ]--
r 54             int
--[ 2021.10.25.15.13.55.236.0 ]--
r 54             int 
--[ 2021.10.25.15.13.55.430.0 ]--
r 54             int c
--[ 2021.10.25.15.13.55.513.0 ]--
r 54             int co
--[ 2021.10.25.15.13.55.555.0 ]--
r 54             int cou
--[ 2021.10.25.15.13.55.684.0 ]--
r 54             int coun
--[ 2021.10.25.15.13.55.838.0 ]--
r 54             int count
--[ 2021.10.25.15.13.55.896.0 ]--
r 54             int count 
--[ 2021.10.25.15.13.56.414.0 ]--
r 54             int count =
--[ 2021.10.25.15.13.56.539.0 ]--
r 54             int count = 
--[ 2021.10.25.15.13.56.658.0 ]--
r 54             int count = 0
--[ 2021.10.25.15.13.56.917.0 ]--
r 54             int count = 0l
--[ 2021.10.25.15.13.57.253.0 ]--
r 54             int count = 0
--[ 2021.10.25.15.13.57.393.0 ]--
r 54             int count = 0;
--[ 2021.10.25.15.14.00.036.0 ]--
+ 58                     
--[ 2021.10.25.15.14.00.070.0 ]--
r 58                             
--[ 2021.10.25.15.14.00.237.0 ]--
r 58                             c
--[ 2021.10.25.15.14.00.324.0 ]--
r 58                             co
--[ 2021.10.25.15.14.00.705.0 ]--
r 58                             c
--[ 2021.10.25.15.14.00.839.0 ]--
r 58                             
--[ 2021.10.25.15.14.01.022.0 ]--
- 58
--[ 2021.10.25.15.14.01.617.0 ]--
r 57                     arrayOf3[count];
--[ 2021.10.25.15.14.01.973.0 ]--
+ 58                     
--[ 2021.10.25.15.14.02.233.0 ]--
r 58                     c
--[ 2021.10.25.15.14.02.282.0 ]--
r 58                     co
--[ 2021.10.25.15.14.02.361.0 ]--
r 58                     cou
--[ 2021.10.25.15.14.02.834.0 ]--
r 58                     count
--[ 2021.10.25.15.14.03.254.0 ]--
r 58                     count+
--[ 2021.10.25.15.14.03.381.0 ]--
r 58                     count++
--[ 2021.10.25.15.14.03.915.0 ]--
r 58                     count++;
--[ 2021.10.25.15.14.07.907.0 ]--
r 57                     arrayOf3[count] ;
--[ 2021.10.25.15.14.07.984.0 ]--
r 57                     arrayOf3[count] =;
--[ 2021.10.25.15.14.08.088.0 ]--
r 57                     arrayOf3[count] = ;
--[ 2021.10.25.15.14.10.157.0 ]--
r 57                     arrayOf3[count] = a;
--[ 2021.10.25.15.14.11.324.0 ]--
r 57                     arrayOf3[count] = a[];
--[ 2021.10.25.15.14.12.568.0 ]--
r 57                     arrayOf3[count] = a[i];
--[ 2021.10.25.15.14.18.917.0 ]--
r 53             Comparable[] arrayOf3 ;
--[ 2021.10.25.15.14.19.160.0 ]--
r 53             Comparable[] arrayOf3 =;
--[ 2021.10.25.15.14.19.256.0 ]--
r 53             Comparable[] arrayOf3 = ;
--[ 2021.10.25.15.14.21.166.0 ]--
r 53             Comparable[] arrayOf3 =;
--[ 2021.10.25.15.14.22.551.0 ]--
r 53             Comparable[] arrayOf3 = ;
--[ 2021.10.25.15.14.22.952.0 ]--
r 53             Comparable[] arrayOf3 = n;
--[ 2021.10.25.15.14.23.019.0 ]--
r 53             Comparable[] arrayOf3 = ne;
--[ 2021.10.25.15.14.23.764.0 ]--
r 53             Comparable[] arrayOf3 = new;
--[ 2021.10.25.15.14.23.772.0 ]--
r 53             Comparable[] arrayOf3 = new ;
--[ 2021.10.25.15.14.24.985.0 ]--
r 53             Comparable[] arrayOf3 = new D;
--[ 2021.10.25.15.14.25.762.0 ]--
r 53             Comparable[] arrayOf3 = new Double;
--[ 2021.10.25.15.14.26.468.0 ]--
r 53             Comparable[] arrayOf3 = new Double[];
--[ 2021.10.25.15.14.28.181.0 ]--
r 53             Comparable[] arrayOf3 = new Double[3];
--[ 2021.10.25.15.14.31.174.0 ]--
r 44 
--[ 2021.10.25.15.14.33.575.0 ]--
+ 61             
--[ 2021.10.25.15.14.36.027.0 ]--
r 45             Double minNuQm = Collections.min(Arrays.asList(a));
--[ 2021.10.25.15.14.36.825.0 ]--
r 45             Double minNum = Collections.min(Arrays.asList(a));
--[ 2021.10.25.15.14.52.168.0 ]--
r 61             Q
--[ 2021.10.25.15.14.52.379.0 ]--
r 61             Qu
--[ 2021.10.25.15.14.53.132.0 ]--
r 61             QuickSortMedian3
--[ 2021.10.25.15.14.53.329.0 ]--
r 61             QuickSortMedian3.
--[ 2021.10.25.15.14.55.585.0 ]--
r 61             QuickSortMedian3.MedianOf3
--[ 2021.10.25.15.14.56.568.0 ]--
r 61             QuickSortMedian3.MedianOf3()
--[ 2021.10.25.15.14.57.704.0 ]--
r 61             QuickSortMedian3.MedianOf3();
--[ 2021.10.25.15.15.00.265.0 ]--
r 61             rQuickSortMedian3.MedianOf3();
--[ 2021.10.25.15.15.00.382.0 ]--
r 61             reQuickSortMedian3.MedianOf3();
--[ 2021.10.25.15.15.00.495.0 ]--
r 61             retQuickSortMedian3.MedianOf3();
--[ 2021.10.25.15.15.00.598.0 ]--
r 61             retuQuickSortMedian3.MedianOf3();
--[ 2021.10.25.15.15.00.647.0 ]--
r 61             returQuickSortMedian3.MedianOf3();
--[ 2021.10.25.15.15.00.844.0 ]--
r 61             returnQuickSortMedian3.MedianOf3();
--[ 2021.10.25.15.15.01.001.0 ]--
r 61             return QuickSortMedian3.MedianOf3();
--[ 2021.10.25.15.15.03.107.0 ]--
- 67
--[ 2021.10.25.15.15.04.914.0 ]--
- 62
- 62
- 62
- 62
r 62   
--[ 2021.10.25.15.15.05.258.0 ]--
- 62
--[ 2021.10.25.15.15.15.980.0 ]--
r 61             return QuickSortMedian3.MedianOf3(;
--[ 2021.10.25.15.15.16.099.0 ]--
r 61             return QuickSortMedian3.MedianOf3;
--[ 2021.10.25.15.15.16.475.0 ]--
r 61             return QuickSortMedian3.MedianOf3.;
--[ 2021.10.25.15.15.17.436.0 ]--
r 61             return QuickSortMedian3.MedianOf3.m;
--[ 2021.10.25.15.15.18.182.0 ]--
r 61             return QuickSortMedian3.MedianOf3.;
--[ 2021.10.25.15.15.18.412.0 ]--
r 61             return QuickSortMedian3.MedianOf3;
--[ 2021.10.25.15.15.18.615.0 ]--
r 61             return QuickSortMedian3.MedianOf;
--[ 2021.10.25.15.15.18.868.0 ]--
r 61             return QuickSortMedian3.MedianO;
--[ 2021.10.25.15.15.19.014.0 ]--
r 61             return QuickSortMedian3.Median;
--[ 2021.10.25.15.15.19.176.0 ]--
r 61             return QuickSortMedian3.Media;
--[ 2021.10.25.15.15.19.288.0 ]--
r 61             return QuickSortMedian3.Medi;
--[ 2021.10.25.15.15.19.423.0 ]--
r 61             return QuickSortMedian3.Med;
--[ 2021.10.25.15.15.19.577.0 ]--
r 61             return QuickSortMedian3.Me;
--[ 2021.10.25.15.15.19.718.0 ]--
r 61             return QuickSortMedian3.M;
--[ 2021.10.25.15.15.19.851.0 ]--
r 61             return QuickSortMedian3.;
--[ 2021.10.25.15.15.20.009.0 ]--
r 61             return QuickSortMedian3.m;
--[ 2021.10.25.15.15.20.126.0 ]--
r 61             return QuickSortMedian3.me;
--[ 2021.10.25.15.15.20.433.0 ]--
r 61             return QuickSortMedian3.med;
--[ 2021.10.25.15.15.20.950.0 ]--
r 61             return QuickSortMedian3.me;
--[ 2021.10.25.15.15.21.070.0 ]--
r 61             return QuickSortMedian3.m;
--[ 2021.10.25.15.15.21.446.0 ]--
r 61             return QuickSortMedian3.;
--[ 2021.10.25.15.15.22.210.0 ]--
r 61             return QuickSortMedian3;
--[ 2021.10.25.15.15.22.412.0 ]--
r 61             return QuickSortMedian3.;
--[ 2021.10.25.15.15.24.686.0 ]--
r 61             return QuickSortMedian3.MedianOf3;
--[ 2021.10.25.15.15.25.273.0 ]--
r 61             return QuickSortMedian3.MedianOf3m;
--[ 2021.10.25.15.15.25.601.0 ]--
r 61             return QuickSortMedian3.MedianOf3;
--[ 2021.10.25.15.15.25.792.0 ]--
r 61             return QuickSortMedian3.MedianOf3.;
--[ 2021.10.25.15.15.27.189.0 ]--
r 61             return QuickSortMedian3.MedianOf3.class;
--[ 2021.10.25.15.15.27.480.0 ]--
r 61             return QuickSortMedian3.MedianOf3.class.;
--[ 2021.10.25.15.15.28.610.0 ]--
r 61             return QuickSortMedian3.MedianOf3.class;
--[ 2021.10.25.15.15.29.055.0 ]--
r 61             return QuickSortMedian3.MedianOf3.clas;
--[ 2021.10.25.15.15.29.137.0 ]--
r 61             return QuickSortMedian3.MedianOf3.cla;
--[ 2021.10.25.15.15.29.231.0 ]--
r 61             return QuickSortMedian3.MedianOf3.cl;
--[ 2021.10.25.15.15.29.539.0 ]--
r 61             return QuickSortMedian3.MedianOf3.c;
--[ 2021.10.25.15.15.29.755.0 ]--
r 61             return QuickSortMedian3.MedianOf3.;
--[ 2021.10.25.15.15.29.946.0 ]--
r 61             return QuickSortMedian3.MedianOf3;
--[ 2021.10.25.15.15.48.111.0 ]--
r 61             return QuickSortMedian3.MedianOf3();
--[ 2021.10.25.15.15.55.184.0 ]--
r 61             return QuickSortMedian3.MedianOf3(a);
--[ 2021.10.25.15.15.56.040.0 ]--
r 61             return QuickSortMedian3.MedianOf3(ar);
--[ 2021.10.25.15.15.56.556.0 ]--
r 61             return QuickSortMedian3.MedianOf3(arrayOf3);
--[ 2021.10.25.15.16.00.684.0 ]--
r 61             return QuickSortMedian3.MedianOf3(ar);
--[ 2021.10.25.15.16.00.928.0 ]--
r 61             return QuickSortMedian3.MedianOf3;
--[ 2021.10.25.15.16.01.225.0 ]--
r 61             return QuickSortMedian3.MedianOf3.class.;
--[ 2021.10.25.15.16.01.452.0 ]--
r 61             return QuickSortMedian3.MedianOf3.class;
--[ 2021.10.25.15.16.01.707.0 ]--
r 61             return QuickSortMedian3.MedianOf3.;
--[ 2021.10.25.15.16.01.925.0 ]--
r 61             return QuickSortMedian3.MedianOf3;
--[ 2021.10.25.15.16.02.187.0 ]--
r 61             return QuickSortMedian3.MedianOf3m;
--[ 2021.10.25.15.16.02.432.0 ]--
r 61             return QuickSortMedian3.MedianOf3;
--[ 2021.10.25.15.16.02.642.0 ]--
r 61             return QuickSortMedian3.;
--[ 2021.10.25.15.16.02.848.0 ]--
r 61             return QuickSortMedian3;
--[ 2021.10.25.15.16.03.030.0 ]--
r 61             return QuickSortMedian3.med;
--[ 2021.10.25.15.16.03.275.0 ]--
r 61             return QuickSortMedian3.;
--[ 2021.10.25.15.16.03.531.0 ]--
r 61             return QuickSortMedian3.MedianOf3.m;
--[ 2021.10.25.15.16.03.813.0 ]--
r 61             return QuickSortMedian3.MedianOf3;
--[ 2021.10.25.15.16.04.049.0 ]--
r 61             return QuickSortMedian3.MedianOf3();
--[ 2021.10.25.15.16.06.867.0 ]--
r 61             return ;
--[ 2021.10.25.15.16.34.364.0 ]--
r 61             return MedianOf3 median = new MedianOf3();;
--[ 2021.10.25.15.16.34.377.0 ]--
r 61             return QuickSortMedian3.MedianOf3 median = new MedianOf3();;
--[ 2021.10.25.15.16.34.392.0 ]--
r 61             return QuickSortMedian3.MedianOf3 median = new QuickSortMedian3.MedianOf3();;
--[ 2021.10.25.15.16.43.211.0 ]--
r 61             return QuickSortMedian3.MedianOf3();;
--[ 2021.10.25.15.16.44.959.0 ]--
r 61             return QuickSortMedian3.MedianOf3 median = new QuickSortMedian3.MedianOf3();;
--[ 2021.10.25.15.16.50.613.0 ]--
r 60             }QuickSortMedian3.MedianOf3();;
--[ 2021.10.25.15.16.51.679.0 ]--
r 60             }QuickSortMedian3.MedianOf3();
--[ 2021.10.25.15.16.52.532.0 ]--
r 60             }QuickSortMedian3.MedianOf3();;
--[ 2021.10.25.15.16.52.884.0 ]--
r 60             }
--[ 2021.10.25.15.16.54.630.0 ]--
r 61             return QuickSortMedian3.MedianOf3 median = new QuickSortMedian3.MedianOf3();
--[ 2021.10.25.15.17.00.628.0 ]--
+ 61             
--[ 2021.10.25.15.17.00.731.0 ]--
r 61             QuickSortMedian3.MedianOf3 median = new QuickSortMedian3.MedianOf3();
--[ 2021.10.25.15.17.03.859.0 ]--
r 62             return m;
--[ 2021.10.25.15.17.03.953.0 ]--
r 62             return me;
--[ 2021.10.25.15.17.04.108.0 ]--
r 62             return med;
--[ 2021.10.25.15.17.04.134.0 ]--
r 62             return medi;
--[ 2021.10.25.15.17.04.368.0 ]--
r 62             return media;
--[ 2021.10.25.15.17.04.485.0 ]--
r 62             return median;
--[ 2021.10.25.15.17.12.627.0 ]--
- 61
--[ 2021.10.25.15.17.13.792.0 ]--
r 61             return ;
--[ 2021.10.25.15.17.21.986.0 ]--
r 61             return median;
--[ 2021.10.25.15.17.24.095.0 ]--
r 61             return media;
--[ 2021.10.25.15.17.24.244.0 ]--
r 61             return medi;
--[ 2021.10.25.15.17.24.392.0 ]--
r 61             return med;
--[ 2021.10.25.15.17.24.538.0 ]--
r 61             return me;
--[ 2021.10.25.15.17.24.706.0 ]--
r 61             return m;
--[ 2021.10.25.15.17.25.122.0 ]--
r 61             return ;
--[ 2021.10.25.15.21.06.228.0 ]--
r 61             return Q;
--[ 2021.10.25.15.21.07.170.0 ]--
r 61             return QuickSortMedian3;
--[ 2021.10.25.15.21.07.390.0 ]--
r 61             return QuickSortMedian3.;
--[ 2021.10.25.15.21.08.277.0 ]--
r 61             return QuickSortMedian3.MedianOf3;
--[ 2021.10.25.15.21.08.462.0 ]--
r 61             return QuickSortMedian3.MedianOf3.;
--[ 2021.10.25.15.21.08.853.0 ]--
r 61             return QuickSortMedian3.MedianOf3.m;
--[ 2021.10.25.15.21.08.893.0 ]--
r 61             return QuickSortMedian3.MedianOf3.me;
--[ 2021.10.25.15.21.09.395.0 ]--
r 61             return QuickSortMedian3.MedianOf3.med;
--[ 2021.10.25.15.21.09.506.0 ]--
r 61             return QuickSortMedian3.MedianOf3.medi;
--[ 2021.10.25.15.21.09.601.0 ]--
r 61             return QuickSortMedian3.MedianOf3.media;
--[ 2021.10.25.15.21.09.709.0 ]--
r 61             return QuickSortMedian3.MedianOf3.median;
--[ 2021.10.25.15.21.10.223.0 ]--
r 61             return QuickSortMedian3.MedianOf3.median();
--[ 2021.10.25.15.21.11.162.0 ]--
r 61             return QuickSortMedian3.MedianOf3.median(a);
--[ 2021.10.25.15.21.11.381.0 ]--
r 61             return QuickSortMedian3.MedianOf3.median(ar);
--[ 2021.10.25.15.21.11.870.0 ]--
r 61             return QuickSortMedian3.MedianOf3.median(arrayOf3);
--[ 2021.10.25.15.23.51.409.0 ]--
:/src/QuickSortMedian3.java
- 39
- 39
r 39 
--[ 2021.10.25.15.23.51.810.0 ]--
- 39
--[ 2021.10.25.15.27.05.305.0 ]--
:/src/QuickSortMedian5.java
+ 61             
--[ 2021.10.25.15.27.06.062.0 ]--
+ 61             
--[ 2021.10.25.15.27.32.819.0 ]--
- 47
- 47
- 47
- 47
- 47
- 47
- 47
- 47
- 47
- 47
- 47
- 47
- 47
r 47             
--[ 2021.10.25.15.27.33.091.0 ]--
- 47
--[ 2021.10.25.15.27.33.384.0 ]--
r 46             int minIndex = 0
--[ 2021.10.25.15.27.34.106.0 ]--
r 46             int minIndex = 0;
--[ 2021.10.25.15.27.35.386.0 ]--
r 47 
--[ 2021.10.25.15.27.35.951.0 ]--
- 47
--[ 2021.10.25.15.27.39.463.0 ]--
- 45
r 45             
--[ 2021.10.25.15.27.40.379.0 ]--
+ 39             
--[ 2021.10.25.15.27.40.541.0 ]--
+ 39             Double minNum = Collections.min(Arrays.asList(a));
r 40             int minIndex = 0;
--[ 2021.10.25.15.27.42.211.0 ]--
- 47
- 47
--[ 2021.10.25.15.27.50.420.0 ]--
+ 45                
--[ 2021.10.25.15.27.50.561.0 ]--
+ 45                if (a[i] == maxNum) {
+ 46                    maxIndex = i;
r 47                }
--[ 2021.10.25.15.27.50.571.0 ]--
r 45                 if (a[i] == maxNum) {
r 46                     maxIndex = i;
r 47                 }
--[ 2021.10.25.15.27.52.365.0 ]--
r 45                 if (a[i] == maNum) {
--[ 2021.10.25.15.27.52.541.0 ]--
r 45                 if (a[i] == mNum) {
--[ 2021.10.25.15.27.52.993.0 ]--
r 45                 if (a[i] == miNum) {
--[ 2021.10.25.15.27.53.072.0 ]--
r 45                 if (a[i] == minNum) {
--[ 2021.10.25.15.27.55.017.0 ]--
r 46                     maIndex = i;
--[ 2021.10.25.15.27.55.622.0 ]--
r 46                     mIndex = i;
--[ 2021.10.25.15.27.55.838.0 ]--
r 46                     miIndex = i;
--[ 2021.10.25.15.27.55.934.0 ]--
r 46                     minIndex = i;
--[ 2021.10.25.15.27.57.497.0 ]--
r 45                 f (a[i] == minNum) {
--[ 2021.10.25.15.27.57.611.0 ]--
r 45                f (a[i] == minNum) {
--[ 2021.10.25.15.27.57.778.0 ]--
- 44
r 44                }f (a[i] == minNum) {
--[ 2021.10.25.15.27.57.899.0 ]--
r 44                f (a[i] == minNum) {
--[ 2021.10.25.15.27.59.259.0 ]--
r 44                }f (a[i] == minNum) {
--[ 2021.10.25.15.27.59.771.0 ]--
r 44                } f (a[i] == minNum) {
--[ 2021.10.25.15.27.59.865.0 ]--
r 44                } ef (a[i] == minNum) {
--[ 2021.10.25.15.28.00.009.0 ]--
r 44                } elf (a[i] == minNum) {
--[ 2021.10.25.15.28.00.085.0 ]--
r 44                } elsf (a[i] == minNum) {
--[ 2021.10.25.15.28.00.299.0 ]--
r 44                } elsef (a[i] == minNum) {
--[ 2021.10.25.15.28.00.488.0 ]--
r 44                } else f (a[i] == minNum) {
--[ 2021.10.25.15.28.00.605.0 ]--
r 44                } else if (a[i] == minNum) {
--[ 2021.10.25.15.28.00.698.0 ]--
r 44                } else iff (a[i] == minNum) {
--[ 2021.10.25.15.28.01.526.0 ]--
r 44                } else if (a[i] == minNum) {
--[ 2021.10.25.15.28.03.982.0 ]--
r 46                }
--[ 2021.10.25.15.28.26.401.0 ]--
+ 48             
--[ 2021.10.25.15.28.32.342.0 ]--
+ 48             
--[ 2021.10.25.15.29.16.848.0 ]--
r 45                    minIndex = i;
--[ 2021.10.25.15.29.17.362.0 ]--
- 44
r 44                } else if (a[i] == minNum) {minIndex = i;
--[ 2021.10.25.15.29.17.630.0 ]--
r 44                } else if (a[i] == minNum) minIndex = i;
--[ 2021.10.25.15.29.19.532.0 ]--
r 44                } else if (a[i] == minNum) {minIndex = i;
--[ 2021.10.25.15.29.19.830.0 ]--
+ 44                } else if (a[i] == minNum) {
r 45                    minIndex = i;
--[ 2021.10.25.15.30.27.754.0 ]--
+ 49             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
+ 50                 return i0;
+ 51             }
+ 52             // if a1 is median, return i1
+ 53             if ((a1.compareTo(a0) < 0 && a1.compareTo(a2) > 0) || (a1.compareTo(a0) > 0 && a1.compareTo(a2) < 0)) {
+ 54                 return i1;
+ 55             }
+ 56             // if a2 is median, return i2
r 57             return i2;
--[ 2021.10.25.15.30.27.769.0 ]--
r 48 
--[ 2021.10.25.15.30.36.815.0 ]--
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
r 49             
--[ 2021.10.25.15.32.16.808.0 ]--
r 51             return i;
--[ 2021.10.25.15.32.17.500.0 ]--
r 51             return i0;
--[ 2021.10.25.15.32.30.785.0 ]--
r 49             D
--[ 2021.10.25.15.32.30.901.0 ]--
r 49             Do
--[ 2021.10.25.15.32.30.965.0 ]--
r 49             Dou
--[ 2021.10.25.15.32.31.130.0 ]--
r 49             Doub
--[ 2021.10.25.15.32.31.185.0 ]--
r 49             Doubl
--[ 2021.10.25.15.32.31.293.0 ]--
r 49             Double
--[ 2021.10.25.15.32.31.399.0 ]--
r 49             Double 
--[ 2021.10.25.15.32.32.194.0 ]--
r 49             Double
--[ 2021.10.25.15.32.32.309.0 ]--
r 49             Doubl
--[ 2021.10.25.15.32.32.447.0 ]--
r 49             Doub
--[ 2021.10.25.15.32.32.582.0 ]--
r 49             Dou
--[ 2021.10.25.15.32.32.725.0 ]--
r 49             Do
--[ 2021.10.25.15.32.32.881.0 ]--
r 49             D
--[ 2021.10.25.15.32.33.158.0 ]--
r 49             DC
--[ 2021.10.25.15.32.33.409.0 ]--
r 49             D
--[ 2021.10.25.15.32.33.593.0 ]--
r 49             
--[ 2021.10.25.15.32.33.775.0 ]--
r 49             C
--[ 2021.10.25.15.32.34.004.0 ]--
r 49             Co
--[ 2021.10.25.15.32.34.049.0 ]--
r 49             Com
--[ 2021.10.25.15.32.34.220.0 ]--
r 49             Comp
--[ 2021.10.25.15.32.34.588.0 ]--
r 49             Comparable
--[ 2021.10.25.15.32.35.964.0 ]--
r 49             Comparable 
--[ 2021.10.25.15.32.36.511.0 ]--
r 49             Comparable
--[ 2021.10.25.15.32.36.870.0 ]--
r 49             Comparable[]
--[ 2021.10.25.15.32.37.102.0 ]--
r 49             Comparable[ ]
--[ 2021.10.25.15.32.37.641.0 ]--
r 49             Comparable[]
--[ 2021.10.25.15.32.38.222.0 ]--
r 49             Comparable[] 
--[ 2021.10.25.15.32.39.807.0 ]--
r 49             Comparable[] a
--[ 2021.10.25.15.32.39.990.0 ]--
r 49             Comparable[] ar
--[ 2021.10.25.15.32.40.163.0 ]--
r 49             Comparable[] arr
--[ 2021.10.25.15.32.40.218.0 ]--
r 49             Comparable[] arra
--[ 2021.10.25.15.32.40.380.0 ]--
r 49             Comparable[] array
--[ 2021.10.25.15.32.40.582.0 ]--
r 49             Comparable[] arrayo
--[ 2021.10.25.15.32.40.703.0 ]--
r 49             Comparable[] arrayof
--[ 2021.10.25.15.32.40.957.0 ]--
r 49             Comparable[] arrayo
--[ 2021.10.25.15.32.41.069.0 ]--
r 49             Comparable[] array
--[ 2021.10.25.15.32.41.296.0 ]--
r 49             Comparable[] arrayO
--[ 2021.10.25.15.32.41.513.0 ]--
r 49             Comparable[] arrayOf
--[ 2021.10.25.15.32.42.064.0 ]--
r 49             Comparable[] arrayOf3
--[ 2021.10.25.15.32.42.274.0 ]--
r 49             Comparable[] arrayOf3 
--[ 2021.10.25.15.32.42.795.0 ]--
r 49             Comparable[] arrayOf3 =
--[ 2021.10.25.15.32.42.919.0 ]--
r 49             Comparable[] arrayOf3 = 
--[ 2021.10.25.15.32.43.257.0 ]--
r 49             Comparable[] arrayOf3 = n
--[ 2021.10.25.15.32.43.412.0 ]--
r 49             Comparable[] arrayOf3 = ne
--[ 2021.10.25.15.32.43.725.0 ]--
r 49             Comparable[] arrayOf3 = new
--[ 2021.10.25.15.32.44.204.0 ]--
r 49             Comparable[] arrayOf3 = new 
--[ 2021.10.25.15.32.46.638.0 ]--
r 49             Comparable[] arrayOf3 = new D
--[ 2021.10.25.15.32.47.305.0 ]--
r 49             Comparable[] arrayOf3 = new Double
--[ 2021.10.25.15.32.47.939.0 ]--
r 49             Comparable[] arrayOf3 = new Double[]
--[ 2021.10.25.15.32.49.249.0 ]--
r 49             Comparable[] arrayOf3 = new Double[3]
--[ 2021.10.25.15.32.50.252.0 ]--
r 49             Comparable[] arrayOf3 = new Double[3];
--[ 2021.10.25.15.32.50.722.0 ]--
+ 50             
--[ 2021.10.25.15.32.52.951.0 ]--
r 50             f
--[ 2021.10.25.15.32.53.064.0 ]--
r 50             fo
--[ 2021.10.25.15.32.53.327.0 ]--
r 50             for
--[ 2021.10.25.15.32.53.477.0 ]--
r 50             for 
--[ 2021.10.25.15.32.59.021.0 ]--
+ 47                
--[ 2021.10.25.15.32.59.132.0 ]--
r 47                e
--[ 2021.10.25.15.32.59.827.0 ]--
r 47                
--[ 2021.10.25.15.32.59.937.0 ]--
- 47
--[ 2021.10.25.15.33.00.089.0 ]--
r 46                
--[ 2021.10.25.15.33.01.072.0 ]--
r 46                }
--[ 2021.10.25.15.33.01.501.0 ]--
r 46                } 
--[ 2021.10.25.15.33.01.604.0 ]--
r 46                } e
--[ 2021.10.25.15.33.02.212.0 ]--
r 46                } else
--[ 2021.10.25.15.33.02.226.0 ]--
r 46                } else 
--[ 2021.10.25.15.33.02.528.0 ]--
r 46                } else  
--[ 2021.10.25.15.33.02.930.0 ]--
r 46                } else 
--[ 2021.10.25.15.33.03.537.0 ]--
r 46                } else {
--[ 2021.10.25.15.33.03.733.0 ]--
+ 47 
+ 48 }
--[ 2021.10.25.15.33.03.744.0 ]--
r 48                }
--[ 2021.10.25.15.33.03.765.0 ]--
r 47                    
--[ 2021.10.25.15.33.08.081.0 ]--
r 40             int minIndex = 0;Comparable[] arrayOf3 = new Double[3];
--[ 2021.10.25.15.33.10.151.0 ]--
+ 40             int minIndex = 0;
r 41             Comparable[] arrayOf3 = new Double[3];
--[ 2021.10.25.15.33.12.320.0 ]--
r 48                    C
--[ 2021.10.25.15.33.13.206.0 ]--
r 48                    
--[ 2021.10.25.15.33.13.829.0 ]--
r 48                    a
--[ 2021.10.25.15.33.14.530.0 ]--
r 48                    ar
--[ 2021.10.25.15.33.15.015.0 ]--
r 48                    arrayOf3
--[ 2021.10.25.15.33.18.231.0 ]--
r 48                    arrayOf3[]
--[ 2021.10.25.15.33.19.754.0 ]--
r 48                    arrayOf3[i]
--[ 2021.10.25.15.33.21.901.0 ]--
r 48                    arrayOf3[i] 
--[ 2021.10.25.15.33.23.713.0 ]--
r 48                    arrayOf3[] 
--[ 2021.10.25.15.33.24.024.0 ]--
r 48                    arrayOf3[c] 
--[ 2021.10.25.15.33.24.114.0 ]--
r 48                    arrayOf3[co] 
--[ 2021.10.25.15.33.24.187.0 ]--
r 48                    arrayOf3[cou] 
--[ 2021.10.25.15.33.24.351.0 ]--
r 48                    arrayOf3[coun] 
--[ 2021.10.25.15.33.24.444.0 ]--
r 48                    arrayOf3[count] 
--[ 2021.10.25.15.33.25.776.0 ]--
r 48                    arrayOf3[count]  
--[ 2021.10.25.15.33.26.027.0 ]--
r 48                    arrayOf3[count] = 
--[ 2021.10.25.15.33.26.142.0 ]--
r 48                    arrayOf3[count] =  
--[ 2021.10.25.15.33.27.583.0 ]--
r 48                    arrayOf3[count] = a 
--[ 2021.10.25.15.33.28.498.0 ]--
r 48                    arrayOf3[count] = a[] 
--[ 2021.10.25.15.33.28.821.0 ]--
r 48                    arrayOf3[count] = a[i] 
--[ 2021.10.25.15.33.29.721.0 ]--
r 48                    arrayOf3[count] = a[i]; 
--[ 2021.10.25.15.33.30.188.0 ]--
+ 48                    arrayOf3[count] = a[i];
r 49                    
--[ 2021.10.25.15.33.30.718.0 ]--
r 49                    c
--[ 2021.10.25.15.33.30.843.0 ]--
r 49                    co
--[ 2021.10.25.15.33.30.931.0 ]--
r 49                    cou
--[ 2021.10.25.15.33.31.092.0 ]--
r 49                    count
--[ 2021.10.25.15.33.32.004.0 ]--
r 49                    count+
--[ 2021.10.25.15.33.32.161.0 ]--
r 49                    count++
--[ 2021.10.25.15.33.33.548.0 ]--
+ 42             
--[ 2021.10.25.15.33.33.883.0 ]--
r 42             i
--[ 2021.10.25.15.33.34.028.0 ]--
r 42             int
--[ 2021.10.25.15.33.34.787.0 ]--
r 42             int 
--[ 2021.10.25.15.33.34.891.0 ]--
r 42             int c
--[ 2021.10.25.15.33.34.967.0 ]--
r 42             int co
--[ 2021.10.25.15.33.35.040.0 ]--
r 42             int cou
--[ 2021.10.25.15.33.35.224.0 ]--
r 42             int coutn
--[ 2021.10.25.15.33.35.738.0 ]--
r 42             int cout
--[ 2021.10.25.15.33.35.866.0 ]--
r 42             int cou
--[ 2021.10.25.15.33.36.025.0 ]--
r 42             int coun
--[ 2021.10.25.15.33.36.133.0 ]--
r 42             int count
--[ 2021.10.25.15.33.36.574.0 ]--
r 42             int count 
--[ 2021.10.25.15.33.37.265.0 ]--
r 42             int count =
--[ 2021.10.25.15.33.37.445.0 ]--
r 42             int count =0
--[ 2021.10.25.15.33.37.735.0 ]--
r 42             int count =0;
--[ 2021.10.25.15.33.39.328.0 ]--
r 42             int count = 0;
--[ 2021.10.25.15.33.40.815.0 ]--
r 50                    count++;
--[ 2021.10.25.15.33.42.859.0 ]--
- 54
- 54
--[ 2021.10.25.15.33.43.326.0 ]--
- 53
--[ 2021.10.25.15.33.45.607.0 ]--
+ 53             
--[ 2021.10.25.15.33.46.227.0 ]--
+ 53             
--[ 2021.10.25.15.33.50.613.0 ]--
r 54             for (int i=0; i<5; i++) {
--[ 2021.10.25.15.33.50.625.0 ]--
r 53 
--[ 2021.10.25.15.33.52.043.0 ]--
r 54             for (int i=0; i<5=; i++) {
--[ 2021.10.25.15.33.52.516.0 ]--
r 54             for (int i=0; i<5; i++) {
--[ 2021.10.25.15.33.52.651.0 ]--
r 54             for (int i=0; i<53; i++) {
--[ 2021.10.25.15.33.53.195.0 ]--
r 54             for (int i=0; i<5; i++) {
--[ 2021.10.25.15.33.53.325.0 ]--
r 54             for (int i=0; i<; i++) {
--[ 2021.10.25.15.33.53.412.0 ]--
r 54             for (int i=0; i<3; i++) {
--[ 2021.10.25.15.33.55.486.0 ]--
r 55 }
--[ 2021.10.25.15.33.55.497.0 ]--
r 55             }
--[ 2021.10.25.15.33.56.369.0 ]--
+ 55             
--[ 2021.10.25.15.33.56.799.0 ]--
r 55                 
--[ 2021.10.25.15.33.57.677.0 ]--
r 55                 p
--[ 2021.10.25.15.33.57.757.0 ]--
r 55                 pr
--[ 2021.10.25.15.33.58.162.0 ]--
r 55                 p
--[ 2021.10.25.15.33.58.246.0 ]--
r 55                 
--[ 2021.10.25.15.33.58.435.0 ]--
r 55                 S
--[ 2021.10.25.15.33.58.658.0 ]--
r 55                 St
--[ 2021.10.25.15.33.58.812.0 ]--
r 55                 Std
--[ 2021.10.25.15.33.59.164.0 ]--
r 55                 StdOut
--[ 2021.10.25.15.33.59.530.0 ]--
r 55                 StdOut.
--[ 2021.10.25.15.33.59.802.0 ]--
r 55                 StdOut.p
--[ 2021.10.25.15.34.00.074.0 ]--
r 55                 StdOut.pr
--[ 2021.10.25.15.34.00.314.0 ]--
r 55                 StdOut.println
--[ 2021.10.25.15.34.00.321.0 ]--
r 55                 StdOut.println()
--[ 2021.10.25.15.34.00.325.0 ]--
r 55                 StdOut.println();
--[ 2021.10.25.15.34.01.880.0 ]--
r 55                 StdOut.println(a);
--[ 2021.10.25.15.34.02.117.0 ]--
r 55                 StdOut.println(ar);
--[ 2021.10.25.15.34.03.131.0 ]--
r 55                 StdOut.println(arrayOf3);
--[ 2021.10.25.15.34.04.117.0 ]--
r 55                 StdOut.println(arrayOf3[]);
--[ 2021.10.25.15.34.04.339.0 ]--
r 55                 StdOut.println(arrayOf3[i]);
--[ 2021.10.25.15.34.13.319.0 ]--
UpdateTree (AD): 0 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class

--[ 2021.10.25.15.34.13.319.1 ]--
CompilationStatus (AEW): 0 2 0
[Ljava.lang.String;@116c9feb
--[ 2021.10.25.15.34.29.734.0 ]--
r 37             C maxNum = Collections.max(Arrays.asList(a));
--[ 2021.10.25.15.34.29.735.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.29.751.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.29.992.0 ]--
r 37             Ci maxNum = Collections.max(Arrays.asList(a));
--[ 2021.10.25.15.34.29.993.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.29.994.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.30.558.0 ]--
r 37             C maxNum = Collections.max(Arrays.asList(a));
--[ 2021.10.25.15.34.30.560.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.30.561.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.30.720.0 ]--
r 37             Co maxNum = Collections.max(Arrays.asList(a));
--[ 2021.10.25.15.34.30.720.1 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.30.723.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.31.232.0 ]--
r 37             Comparable maxNum = Collections.max(Arrays.asList(a));
--[ 2021.10.25.15.34.31.233.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.31.237.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.32.866.0 ]--
r 39             C minNum = Collections.min(Arrays.asList(a));
--[ 2021.10.25.15.34.32.867.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.32.868.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.33.071.0 ]--
r 39             Co minNum = Collections.min(Arrays.asList(a));
--[ 2021.10.25.15.34.33.072.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.33.073.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.33.091.0 ]--
r 39             Com minNum = Collections.min(Arrays.asList(a));
--[ 2021.10.25.15.34.33.092.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.33.094.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.33.487.0 ]--
r 39             Comparable minNum = Collections.min(Arrays.asList(a));
--[ 2021.10.25.15.34.33.488.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.33.490.0 ]--
UpdateTree (AD): 4 4
- /out/production/P03_Sorting/QuickSortMedian5.class
- /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class
- /out/production/P03_Sorting/QuickSortMedian3.class
- /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.36.241.0 ]--
UpdateTree (AD): 4 0
+ /out/production/P03_Sorting/QuickSortMedian3.class
+ /out/production/P03_Sorting/QuickSortMedian5.class
+ /out/production/P03_Sorting/QuickSortMedian3$MedianOf3.class
+ /out/production/P03_Sorting/QuickSortMedian5$MedianOf5.class

--[ 2021.10.25.15.34.36.241.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.35.05.625.0 ]--
r 78         Double[] a = {.0, 5.0, 7.0, 4.0, 0.0};
--[ 2021.10.25.15.35.06.085.0 ]--
r 78         Double[] a = {6.0, 5.0, 7.0, 4.0, 0.0};
--[ 2021.10.25.15.35.09.794.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.35.57.658.0 ]--
+ 54             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
+ 55                 return i0;
+ 56             }
+ 57             // if a1 is median, return i1
r 58             if ((a1.compareTo(a0) < 0 && a1.compareTo(a2) > 0) || (a1.compareTo(a0) > 0 && a1.compareTo(a2) < 0)) {
r 59                 return i1;
+ 61             // if a2 is median, return i2
+ 62             return i2;
--[ 2021.10.25.15.35.59.942.0 ]--
- 63
--[ 2021.10.25.15.36.03.048.0 ]--
r 54             if ((a.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.36.03.224.0 ]--
r 54             if ((.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.36.05.719.0 ]--
r 54             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.36.08.934.0 ]--
r 54             if ((a.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.36.09.079.0 ]--
r 54             if ((.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.36.10.216.0 ]--
r 54             if ((a.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.36.12.719.0 ]--
r 54             if ((.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.36.16.005.0 ]--
r 54             if ((a0.compareTo(a1) < 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.36.22.110.0 ]--
+ 53             
--[ 2021.10.25.15.36.22.548.0 ]--
+ 53             
--[ 2021.10.25.15.36.22.740.0 ]--
+ 54             Comparable a0 = a[i0];
+ 55             Comparable a1 = a[i1];
r 56             Comparable a2 = a[i2];
--[ 2021.10.25.15.36.22.759.0 ]--
r 53 
--[ 2021.10.25.15.36.24.671.0 ]--
r 54              a0 = a[i0];
--[ 2021.10.25.15.36.25.796.0 ]--
r 54             Comparable a0 = a[i0];
--[ 2021.10.25.15.36.28.465.0 ]--
r 54             a0 = a[i0];
--[ 2021.10.25.15.36.32.353.0 ]--
r 55             a1 = a[i1];
--[ 2021.10.25.15.36.35.313.0 ]--
r 56             a2 = a[i2];
--[ 2021.10.25.15.36.47.620.0 ]--
r 54             a0 = a[a];
--[ 2021.10.25.15.36.50.415.0 ]--
r 54             a0 = a[arrayOf3];
--[ 2021.10.25.15.36.51.475.0 ]--
r 54             a0 = a[arrayOf3[]];
--[ 2021.10.25.15.36.52.213.0 ]--
r 54             a0 = a[arrayOf3[0]];
--[ 2021.10.25.15.36.53.073.0 ]--
r 54             a0 = a[arrayOf3[0];
--[ 2021.10.25.15.36.55.424.0 ]--
r 54             a0 = aarrayOf3[0];
--[ 2021.10.25.15.36.55.535.0 ]--
r 54             a0 = arrayOf3[0];
--[ 2021.10.25.15.36.58.302.0 ]--
r 55             a1 = ;
--[ 2021.10.25.15.37.00.759.0 ]--
r 56             a2 = ;
--[ 2021.10.25.15.37.01.661.0 ]--
r 55             a1 = a;
--[ 2021.10.25.15.37.03.835.0 ]--
r 55             a1 = arrayOf3;
--[ 2021.10.25.15.37.04.697.0 ]--
r 55             a1 = arrayOf3[];
--[ 2021.10.25.15.37.04.889.0 ]--
r 55             a1 = arrayOf3[1];
--[ 2021.10.25.15.37.07.958.0 ]--
r 56             a2 = arrayOf3[1];
--[ 2021.10.25.15.37.08.768.0 ]--
r 56             a2 = arrayOf3[];
--[ 2021.10.25.15.37.09.203.0 ]--
r 56             a2 = arrayOf3[2];
--[ 2021.10.25.15.37.22.742.0 ]--
+ 59                 
--[ 2021.10.25.15.37.26.252.0 ]--
r 59                 s
--[ 2021.10.25.15.37.27.099.0 ]--
r 59                 sT
--[ 2021.10.25.15.37.27.328.0 ]--
r 59                 sTd
--[ 2021.10.25.15.37.27.771.0 ]--
r 59                 sT
--[ 2021.10.25.15.37.27.914.0 ]--
r 59                 s
--[ 2021.10.25.15.37.28.047.0 ]--
r 59                 
--[ 2021.10.25.15.37.28.336.0 ]--
r 59                 S
--[ 2021.10.25.15.37.28.563.0 ]--
r 59                 St
--[ 2021.10.25.15.37.29.248.0 ]--
r 59                 Std
--[ 2021.10.25.15.37.30.057.0 ]--
r 59                 Std.
--[ 2021.10.25.15.37.30.483.0 ]--
r 59                 Std
--[ 2021.10.25.15.37.31.064.0 ]--
r 59                 Stdo
--[ 2021.10.25.15.37.31.776.0 ]--
r 59                 StdOut
--[ 2021.10.25.15.37.31.959.0 ]--
r 59                 StdOut.
--[ 2021.10.25.15.37.32.176.0 ]--
r 59                 StdOut.p
--[ 2021.10.25.15.37.32.572.0 ]--
r 59                 StdOut.println
--[ 2021.10.25.15.37.32.579.0 ]--
r 59                 StdOut.println()
--[ 2021.10.25.15.37.32.583.0 ]--
r 59                 StdOut.println();
--[ 2021.10.25.15.37.35.190.0 ]--
r 59                 StdOut.println("");
--[ 2021.10.25.15.37.35.620.0 ]--
r 59                 StdOut.println("i");
--[ 2021.10.25.15.37.36.712.0 ]--
r 59                 StdOut.println("i0");
--[ 2021.10.25.15.37.37.639.0 ]--
r 59                 StdOut.println("i");
--[ 2021.10.25.15.37.37.790.0 ]--
r 59                 StdOut.println("");
--[ 2021.10.25.15.37.38.054.0 ]--
r 59                 StdOut.println();
--[ 2021.10.25.15.37.41.003.0 ]--
r 59                 StdOut.println(a);
--[ 2021.10.25.15.37.43.286.0 ]--
r 59                 StdOut.println(a0);
--[ 2021.10.25.15.37.46.430.0 ]--
+ 64                 
--[ 2021.10.25.15.37.46.914.0 ]--
r 64                 StdOut.println(a0);
--[ 2021.10.25.15.37.49.173.0 ]--
+ 68             
--[ 2021.10.25.15.37.49.630.0 ]--
r 68             StdOut.println(a0);
--[ 2021.10.25.15.37.50.645.0 ]--
r 68             StdOut.println(a);
--[ 2021.10.25.15.37.51.011.0 ]--
r 68             StdOut.println(a2);
--[ 2021.10.25.15.37.53.039.0 ]--
r 64                 StdOut.println(a);
--[ 2021.10.25.15.37.53.123.0 ]--
r 64                 StdOut.println(a1);
--[ 2021.10.25.15.37.56.072.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.38.02.232.0 ]--
r 90         Double[] a = {6.0, .0, 7.0, 4.0, 0.0};
--[ 2021.10.25.15.38.02.304.0 ]--
r 90         Double[] a = {6.0, 3.0, 7.0, 4.0, 0.0};
--[ 2021.10.25.15.38.05.957.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.38.14.957.0 ]--
r 90         Double[] a = {6.0, 3.0, .0, 4.0, 0.0};
--[ 2021.10.25.15.38.15.122.0 ]--
r 90         Double[] a = {6.0, 3.0, 3.0, 4.0, 0.0};
--[ 2021.10.25.15.38.18.004.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.39.00.371.0 ]--
+ 92         
--[ 2021.10.25.15.39.01.058.0 ]--
r 92         S
--[ 2021.10.25.15.39.01.296.0 ]--
r 92         St
--[ 2021.10.25.15.39.02.040.0 ]--
r 92         Std
--[ 2021.10.25.15.39.02.564.0 ]--
r 92         StdOut
--[ 2021.10.25.15.39.02.715.0 ]--
r 92         StdOut.
--[ 2021.10.25.15.39.02.968.0 ]--
r 92         StdOut.p
--[ 2021.10.25.15.39.03.319.0 ]--
r 92         StdOut.println
--[ 2021.10.25.15.39.03.325.0 ]--
r 92         StdOut.println()
--[ 2021.10.25.15.39.03.329.0 ]--
r 92         StdOut.println();
--[ 2021.10.25.15.39.14.324.0 ]--
r 58             if ((a0.compareTo(a1) =< 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.39.14.385.0 ]--
r 58             if ((a0.compareTo(a1) ==< 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.39.15.521.0 ]--
r 58             if ((a0.compareTo(a1) =< 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.39.16.822.0 ]--
r 58             if ((a0.compareTo(a1) =< 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.39.18.431.0 ]--
r 58             if ((a0.compareTo(a1) =<= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.39.19.092.0 ]--
r 58             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.39.25.478.0 ]--
r 63             if ((a1.compareTo(a0)  0 && a1.compareTo(a2) > 0) || (a1.compareTo(a0) > 0 && a1.compareTo(a2) < 0)) {
--[ 2021.10.25.15.39.27.940.0 ]--
r 63             if ((a1.compareTo(a0) < 0 && a1.compareTo(a2) > 0) || (a1.compareTo(a0) > 0 && a1.compareTo(a2) < 0)) {
--[ 2021.10.25.15.39.29.331.0 ]--
r 63             if ((a1.compareTo(a0) <= 0 && a1.compareTo(a2) > 0) || (a1.compareTo(a0) > 0 && a1.compareTo(a2) < 0)) {
--[ 2021.10.25.15.39.31.877.0 ]--
r 63             if ((a1.compareTo(a0) <= 0 && a1.compareTo(a2) >= 0) || (a1.compareTo(a0) > 0 && a1.compareTo(a2) < 0)) {
--[ 2021.10.25.15.39.33.792.0 ]--
r 58             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.39.34.920.0 ]--
r 63             if ((a1.compareTo(a0) <= 0 && a1.compareTo(a2) >= 0) || (a1.compareTo(a0) >= 0 && a1.compareTo(a2) < 0)) {
--[ 2021.10.25.15.39.38.830.0 ]--
r 63             if ((a1.compareTo(a0) <= 0 && a1.compareTo(a2) >= 0) || (a1.compareTo(a0) >= 0 && a1.compareTo(a2) <= 0)) {
--[ 2021.10.25.15.39.40.507.0 ]--
r 58             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.15.39.43.738.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.39.48.056.0 ]--
r 90         Double[] a = {6.0, .0, 3.0, 4.0, 0.0};
--[ 2021.10.25.15.39.48.520.0 ]--
r 90         Double[] a = {6.0, 7.0, 3.0, 4.0, 0.0};
--[ 2021.10.25.15.39.51.346.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.40.12.193.0 ]--
r 90         Double[] a = {6.0, 7.0, 3.0, 4.0, .0};
--[ 2021.10.25.15.40.12.365.0 ]--
r 90         Double[] a = {6.0, 7.0, 3.0, 4.0, 5.0};
--[ 2021.10.25.15.40.15.465.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.40.21.894.0 ]--
:/src/QuickSortMedian3.java
r 31             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) > 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.40.22.951.0 ]--
r 35             if ((a1.compareTo(a0) <= 0 && a1.compareTo(a2) > 0) || (a1.compareTo(a0) > 0 && a1.compareTo(a2) < 0)) {
--[ 2021.10.25.15.40.24.520.0 ]--
r 35             if ((a1.compareTo(a0) <= 0 && a1.compareTo(a2) >= 0) || (a1.compareTo(a0) > 0 && a1.compareTo(a2) < 0)) {
--[ 2021.10.25.15.40.25.385.0 ]--
r 31             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) > 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.40.26.666.0 ]--
r 31             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) < 0)) {
--[ 2021.10.25.15.40.27.819.0 ]--
r 35             if ((a1.compareTo(a0) <= 0 && a1.compareTo(a2) >= 0) || (a1.compareTo(a0) >= 0 && a1.compareTo(a2) < 0)) {
--[ 2021.10.25.15.40.30.006.0 ]--
r 31             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.15.40.31.306.0 ]--
r 35             if ((a1.compareTo(a0) <= 0 && a1.compareTo(a2) >= 0) || (a1.compareTo(a0) >= 0 && a1.compareTo(a2) <= 0)) {
--[ 2021.10.25.15.40.40.557.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.40.49.701.0 ]--
+ 32                 
--[ 2021.10.25.15.40.51.786.0 ]--
r 32                 S
--[ 2021.10.25.15.40.52.010.0 ]--
r 32                 St
--[ 2021.10.25.15.40.52.118.0 ]--
r 32                 Std
--[ 2021.10.25.15.40.52.700.0 ]--
r 32                 StdOut
--[ 2021.10.25.15.40.52.878.0 ]--
r 32                 StdOut.
--[ 2021.10.25.15.40.53.914.0 ]--
r 32                 StdOut.println
--[ 2021.10.25.15.40.53.921.0 ]--
r 32                 StdOut.println()
--[ 2021.10.25.15.40.53.925.0 ]--
r 32                 StdOut.println();
--[ 2021.10.25.15.40.58.698.0 ]--
r 32                 StdOut.println(a);
--[ 2021.10.25.15.41.00.192.0 ]--
r 32                 StdOut.println(a0);
--[ 2021.10.25.15.41.02.624.0 ]--
+ 37                 
--[ 2021.10.25.15.41.02.825.0 ]--
r 38                 StdOut.println(a0);return i1;
--[ 2021.10.25.15.41.02.837.0 ]--
r 37 
--[ 2021.10.25.15.41.03.577.0 ]--
r 37                 
r 38                 return i1;
--[ 2021.10.25.15.41.04.098.0 ]--
r 37                 StdOut.println(a0);
--[ 2021.10.25.15.41.05.386.0 ]--
r 37                 StdOut.println(a);
--[ 2021.10.25.15.41.05.434.0 ]--
r 37                 StdOut.println(a1);
--[ 2021.10.25.15.41.07.742.0 ]--
+ 41             
--[ 2021.10.25.15.41.07.998.0 ]--
r 41             StdOut.println(a0);
--[ 2021.10.25.15.41.08.866.0 ]--
r 41             StdOut.println(a);
--[ 2021.10.25.15.41.09.046.0 ]--
r 41             StdOut.println(a2);
--[ 2021.10.25.15.41.12.796.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.43.00.289.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.43.26.825.0 ]--
r 63         Double[] a = {9.0, 5.0, .0, 4.0, 0.0};
--[ 2021.10.25.15.43.26.931.0 ]--
r 63         Double[] a = {9.0, 5.0, 5.0, 4.0, 0.0};
--[ 2021.10.25.15.43.29.756.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.43.34.178.0 ]--
r 63         Double[] a = {9.0, 5.0, .0, 4.0, 0.0};
--[ 2021.10.25.15.43.34.526.0 ]--
r 63         Double[] a = {9.0, 5.0, 7.0, 4.0, 0.0};
--[ 2021.10.25.15.43.37.136.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.44.46.036.0 ]--
r 63         Double[] a = {9.0, 5.0, 7.0, 4.0 0.0};
--[ 2021.10.25.15.44.46.233.0 ]--
r 63         Double[] a = {9.0, 5.0, 7.0, 4. 0.0};
--[ 2021.10.25.15.44.46.384.0 ]--
r 63         Double[] a = {9.0, 5.0, 7.0, 4 0.0};
--[ 2021.10.25.15.44.46.577.0 ]--
r 63         Double[] a = {9.0, 5.0, 7.0,  0.0};
--[ 2021.10.25.15.44.46.797.0 ]--
r 63         Double[] a = {9.0, 5.0, 7.0, 0.0};
--[ 2021.10.25.15.44.47.029.0 ]--
r 63         Double[] a = {9.0, 5.0, 7.0 0.0};
--[ 2021.10.25.15.44.47.228.0 ]--
r 63         Double[] a = {9.0, 5.0, 7. 0.0};
--[ 2021.10.25.15.44.47.462.0 ]--
r 63         Double[] a = {9.0, 5.0, 7 0.0};
--[ 2021.10.25.15.44.47.676.0 ]--
r 63         Double[] a = {9.0, 5.0,  0.0};
--[ 2021.10.25.15.44.48.015.0 ]--
r 63         Double[] a = {9.0, 5.0, 0.0};
--[ 2021.10.25.15.44.51.590.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.44.59.552.0 ]--
r 65         for (int i=0; i<; i++) {
--[ 2021.10.25.15.44.59.739.0 ]--
r 65         for (int i=0; i<3; i++) {
--[ 2021.10.25.15.45.03.086.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.45.05.859.0 ]--
r 63         Double[] a = {.0, 5.0, 0.0};
--[ 2021.10.25.15.45.06.089.0 ]--
r 63         Double[] a = {5.0, 5.0, 0.0};
--[ 2021.10.25.15.45.08.776.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.45.11.426.0 ]--
r 63         Double[] a = {.0, 5.0, 0.0};
--[ 2021.10.25.15.45.11.996.0 ]--
r 63         Double[] a = {0.0, 5.0, 0.0};
--[ 2021.10.25.15.45.14.857.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.45.17.826.0 ]--
r 63         Double[] a = {0.0, .0, 0.0};
--[ 2021.10.25.15.45.18.159.0 ]--
r 63         Double[] a = {0.0, 3.0, 0.0};
--[ 2021.10.25.15.45.20.764.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.46.29.444.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.46.37.092.0 ]--
r 63         Double[] a = {0.0, .0, 0.0};
--[ 2021.10.25.15.46.37.694.0 ]--
r 63         Double[] a = {0.0, 8.0, 0.0};
--[ 2021.10.25.15.46.40.618.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.46.43.065.0 ]--
r 63         Double[] a = {0.0, .0, 0.0};
--[ 2021.10.25.15.46.44.238.0 ]--
r 63         Double[] a = {0.0, 3.0, 0.0};
--[ 2021.10.25.15.46.47.107.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.46.51.957.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.46.54.785.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.46.56.728.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.47.17.376.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.47.19.449.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.47.21.723.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.47.23.603.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.47.25.508.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.47.27.375.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.47.29.330.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.47.31.268.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.47.33.173.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.47.36.163.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.47.38.054.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.48.01.645.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.48.42.379.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.49.06.557.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.50.17.592.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.50.19.699.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.50.21.972.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.53.35.639.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.53.41.845.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.56.06.077.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.56.12.276.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.56.16.587.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.56.48.991.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.57.15.557.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.15.57.18.561.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.06.52.453.0 ]--
+ 21             
--[ 2021.10.25.16.06.53.025.0 ]--
r 21             f
--[ 2021.10.25.16.06.53.140.0 ]--
r 21             fo
--[ 2021.10.25.16.06.53.232.0 ]--
r 21             fo 
--[ 2021.10.25.16.06.53.704.0 ]--
r 21             fo
--[ 2021.10.25.16.06.53.785.0 ]--
r 21             for
--[ 2021.10.25.16.06.53.864.0 ]--
r 21             for 
--[ 2021.10.25.16.06.54.238.0 ]--
r 21             for ()
--[ 2021.10.25.16.06.54.689.0 ]--
r 21             for (i)
--[ 2021.10.25.16.06.55.109.0 ]--
r 21             for ()
--[ 2021.10.25.16.06.55.227.0 ]--
r 21             for 
--[ 2021.10.25.16.06.55.342.0 ]--
r 21             for
--[ 2021.10.25.16.06.55.476.0 ]--
r 21             fo
--[ 2021.10.25.16.06.55.631.0 ]--
r 21             f
--[ 2021.10.25.16.06.55.762.0 ]--
r 21             
--[ 2021.10.25.16.06.55.925.0 ]--
- 21
--[ 2021.10.25.16.06.56.142.0 ]--
r 20         public int median(Comparable[] a, int[] indices) 
--[ 2021.10.25.16.06.57.058.0 ]--
r 20         public int median(Comparable[] a, int[] indices) )
--[ 2021.10.25.16.06.57.343.0 ]--
r 20         public int median(Comparable[] a, int[] indices) 
--[ 2021.10.25.16.06.57.873.0 ]--
r 20         public int median(Comparable[] a, int[] indices) {
--[ 2021.10.25.16.07.01.959.0 ]--
r 25             SComparable a0 = a[i0];
--[ 2021.10.25.16.07.02.187.0 ]--
r 25             StComparable a0 = a[i0];
--[ 2021.10.25.16.07.02.279.0 ]--
r 25             StdComparable a0 = a[i0];
--[ 2021.10.25.16.07.02.883.0 ]--
r 25             StdOutComparable a0 = a[i0];
--[ 2021.10.25.16.07.02.891.0 ]--
r 25             StdOut Comparable a0 = a[i0];
--[ 2021.10.25.16.07.02.900.0 ]--
r 25             StdOutComparable a0 = a[i0];
--[ 2021.10.25.16.07.03.095.0 ]--
r 25             StdOut.Comparable a0 = a[i0];
--[ 2021.10.25.16.07.03.390.0 ]--
r 25             StdOut.pComparable a0 = a[i0];
--[ 2021.10.25.16.07.03.766.0 ]--
r 25             StdOut.printlnComparable a0 = a[i0];
--[ 2021.10.25.16.07.03.773.0 ]--
r 25             StdOut.println()Comparable a0 = a[i0];
--[ 2021.10.25.16.07.03.778.0 ]--
r 25             StdOut.println();Comparable a0 = a[i0];
--[ 2021.10.25.16.07.05.072.0 ]--
r 25             StdOut.println()Comparable a0 = a[i0];
--[ 2021.10.25.16.07.05.188.0 ]--
r 25             StdOut.println(Comparable a0 = a[i0];
--[ 2021.10.25.16.07.07.370.0 ]--
r 25             StdOut.println(Comparable a0 = a[i0]);
--[ 2021.10.25.16.07.09.375.0 ]--
r 25             StdOut.println(Comparable a0 = a[i0];
--[ 2021.10.25.16.07.10.121.0 ]--
r 25             StdOut.println();Comparable a0 = a[i0];
--[ 2021.10.25.16.07.10.859.0 ]--
r 25             StdOut.println(z);Comparable a0 = a[i0];
--[ 2021.10.25.16.07.11.153.0 ]--
r 25             StdOut.println();Comparable a0 = a[i0];
--[ 2021.10.25.16.07.11.448.0 ]--
r 25             StdOut.pComparable a0 = a[i0];
--[ 2021.10.25.16.07.11.804.0 ]--
r 25             StdOutComparable a0 = a[i0];
--[ 2021.10.25.16.07.12.139.0 ]--
r 25             StdComparable a0 = a[i0];
--[ 2021.10.25.16.07.12.467.0 ]--
r 25             Comparable a0 = a[i0];
--[ 2021.10.25.16.07.15.568.0 ]--
+ 26             
--[ 2021.10.25.16.07.15.678.0 ]--
r 26             StdOut.println(a0);
--[ 2021.10.25.16.07.20.883.0 ]--
+ 28             
--[ 2021.10.25.16.07.21.184.0 ]--
r 28             StdOut.println(a1);
--[ 2021.10.25.16.07.24.828.0 ]--
+ 30             
--[ 2021.10.25.16.07.24.882.0 ]--
r 30             StdOut.println(a2);
--[ 2021.10.25.16.07.28.511.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.07.34.524.0 ]--
+ 31             
--[ 2021.10.25.16.07.35.021.0 ]--
r 31             S
--[ 2021.10.25.16.07.35.673.0 ]--
r 31             StdOut
--[ 2021.10.25.16.07.35.828.0 ]--
r 31             StdOut.
--[ 2021.10.25.16.07.36.212.0 ]--
r 31             StdOut.p
--[ 2021.10.25.16.07.36.531.0 ]--
r 31             StdOut.println
--[ 2021.10.25.16.07.36.540.0 ]--
r 31             StdOut.println()
--[ 2021.10.25.16.07.36.545.0 ]--
r 31             StdOut.println();
--[ 2021.10.25.16.07.39.576.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.07.44.892.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.07.54.394.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.07.59.375.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.08.05.175.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.08.10.311.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.08.13.567.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.08.16.539.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.32.35.212.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.32.42.737.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.33.20.186.0 ]--
- 31
r 31 \
--[ 2021.10.25.16.33.22.248.0 ]--
- 30
--[ 2021.10.25.16.33.23.597.0 ]--
r 30 
--[ 2021.10.25.16.33.37.013.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.34.04.031.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.36.19.595.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.39.09.271.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.39.28.264.0 ]--
:/src/QuickSortMedian5.java
- 59
--[ 2021.10.25.16.39.30.981.0 ]--
- 63
--[ 2021.10.25.16.39.33.127.0 ]--
- 66
--[ 2021.10.25.16.39.45.120.0 ]--
:/src/QuickSortMedian3.java
- 34
--[ 2021.10.25.16.39.47.738.0 ]--
- 38
--[ 2021.10.25.16.39.50.437.0 ]--
- 41
--[ 2021.10.25.16.40.11.730.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.40.28.723.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.40.35.248.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.40.44.879.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.40.50.438.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.40.56.158.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.40.59.985.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.41.03.067.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.41.06.925.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.42.48.577.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.42.50.736.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.42.54.873.0 ]--
- 26
--[ 2021.10.25.16.42.55.977.0 ]--
- 27
--[ 2021.10.25.16.43.16.760.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.45.11.934.0 ]--
:/src/QuickSortMedian5.java
- 89
--[ 2021.10.25.16.45.30.132.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.45.45.611.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.46.01.715.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.16.48.30.120.0 ]--
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
r 37             // if a0 is median, return i0
--[ 2021.10.25.16.48.33.945.0 ]--
r 46            
--[ 2021.10.25.16.48.44.197.0 ]--
r 46             
--[ 2021.10.25.16.48.52.090.0 ]--
+ 45             // if a1 is median, return i1
+ 46             if ((a1.compareTo(a0) <= 0 && a1.compareTo(a2) >= 0) || (a1.compareTo(a0) >= 0 && a1.compareTo(a2) <= 0)) {
r 47                 return i1;
r 48             }
--[ 2021.10.25.16.49.02.202.0 ]--
r 45             // if a is median, return i1
--[ 2021.10.25.16.49.02.259.0 ]--
r 45             // if a2 is median, return i1
--[ 2021.10.25.16.49.03.780.0 ]--
r 45             // if a2 is median, return i
--[ 2021.10.25.16.49.03.930.0 ]--
r 45             // if a2 is median, return i2
--[ 2021.10.25.16.49.11.604.0 ]--
r 45             // if a2 is median, return i
--[ 2021.10.25.16.49.11.830.0 ]--
r 45             // if a2 is median, return i1
--[ 2021.10.25.16.49.12.294.0 ]--
r 45             // if a is median, return i1
--[ 2021.10.25.16.49.12.525.0 ]--
r 45             // if a1 is median, return i1
--[ 2021.10.25.16.49.17.713.0 ]--
- 45
- 45
r 45             // if a2 is median, return i2
r 46             
--[ 2021.10.25.16.49.17.856.0 ]--
r 46            
--[ 2021.10.25.16.49.17.931.0 ]--
r 46             return i2;
--[ 2021.10.25.16.49.18.129.0 ]--
+ 37             Comparable maxNum = Collections.max(Arrays.asList(a));
+ 38             int maxIndex = 0;
+ 39             Comparable minNum = Collections.min(Arrays.asList(a));
+ 40             int minIndex = 0;
+ 41             Comparable[] arrayOf3 = new Double[3];
+ 42             int count = 0;
+ 43             for (int i=0; i<5; i++) {
+ 44                if (a[i] == maxNum) {
+ 45                    maxIndex = i;
+ 46                } else if (a[i] == minNum) {
+ 47                    minIndex = i;
+ 48                } else {
+ 49                    arrayOf3[count] = a[i];
+ 50                    count++;
+ 51                }
+ 52             }
+ 53 
+ 54             a0 = arrayOf3[0];
+ 55             a1 = arrayOf3[1];
+ 56             a2 = arrayOf3[2];
r 57 
--[ 2021.10.25.16.49.18.267.0 ]--
+ 89         StdOut.println();
--[ 2021.10.25.16.49.18.456.0 ]--
+ 66             StdOut.println(a2);
--[ 2021.10.25.16.49.18.611.0 ]--
+ 63                 StdOut.println(a1);
--[ 2021.10.25.16.49.19.198.0 ]--
- 63
--[ 2021.10.25.16.49.19.888.0 ]--
- 66
--[ 2021.10.25.16.49.21.189.0 ]--
- 89
--[ 2021.10.25.16.49.42.888.0 ]--
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
r 37             
--[ 2021.10.25.16.50.30.127.0 ]--
r 37 
--[ 2021.10.25.16.51.41.822.0 ]--
+ 37 // if a0 is median, return i0
+ 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
+ 39                 return i0;
r 40             }
--[ 2021.10.25.16.51.46.589.0 ]--
r 37     // if a0 is median, return i0
--[ 2021.10.25.16.51.46.772.0 ]--
r 37         // if a0 is median, return i0
--[ 2021.10.25.16.51.46.953.0 ]--
r 37             // if a0 is median, return i0
--[ 2021.10.25.16.51.57.083.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a1) <= 0 &&a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.51.58.852.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.52.01.141.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.52.01.222.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.52.36.811.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.52.37.323.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a3) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.52.43.852.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a3) >= 0 ) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.52.44.001.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a3) >= 0 a0.compareTo(a3) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.52.48.353.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a3) >= 0 &a0.compareTo(a3) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.52.48.479.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a3) >= 0 &&a0.compareTo(a3) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.52.48.674.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a3) >= 0 && a0.compareTo(a3) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.52.53.973.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a3) >= 0 && a0.compareTo(a) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.52.54.070.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a3) >= 0 && a0.compareTo(a4) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.53.09.201.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a3) >= 0 && a0.compareTo(a) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.53.09.451.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a3) >= 0 && a0.compareTo(a3) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.53.09.893.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a3) >= 0 a0.compareTo(a3) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.53.10.249.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a3) >= 0 ) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.53.10.740.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a3) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.53.10.916.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.53.11.001.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.53.11.161.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.53.11.270.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.53.11.412.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a1) <= 0 &&a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.53.11.495.0 ]--
r 38             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.16.53.11.666.0 ]--
r 37 // if a0 is median, return i0
--[ 2021.10.25.16.53.11.851.0 ]--
- 37
- 37
- 37
r 37             
--[ 2021.10.25.16.53.11.930.0 ]--
+ 37             Comparable maxNum = Collections.max(Arrays.asList(a));
+ 38             int maxIndex = 0;
+ 39             Comparable minNum = Collections.min(Arrays.asList(a));
+ 40             int minIndex = 0;
+ 41             Comparable[] arrayOf3 = new Double[3];
+ 42             int count = 0;
+ 43             for (int i=0; i<5; i++) {
+ 44                if (a[i] == maxNum) {
+ 45                    maxIndex = i;
+ 46                } else if (a[i] == minNum) {
+ 47                    minIndex = i;
+ 48                } else {
+ 49                    arrayOf3[count] = a[i];
+ 50                    count++;
+ 51                }
+ 52             }
+ 53 
+ 54             a0 = arrayOf3[0];
+ 55             a1 = arrayOf3[1];
+ 56             a2 = arrayOf3[2];
+ 57 
+ 58             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
+ 59                 return i0;
+ 60             }
+ 61             // if a1 is median, return i1
+ 62             if ((a1.compareTo(a0) <= 0 && a1.compareTo(a2) >= 0) || (a1.compareTo(a0) >= 0 && a1.compareTo(a2) <= 0)) {
+ 63                 return i1;
+ 64             }
+ 65             // if a2 is median, return i2
r 66             return i2;
--[ 2021.10.25.16.53.12.109.0 ]--
+ 89         StdOut.println();
--[ 2021.10.25.16.53.13.116.0 ]--
- 89
--[ 2021.10.25.16.53.13.861.0 ]--
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
- 37
r 37             
--[ 2021.10.25.16.53.15.803.0 ]--
+ 37             Comparable maxNum = Collections.max(Arrays.asList(a));
+ 38             int maxIndex = 0;
+ 39             Comparable minNum = Collections.min(Arrays.asList(a));
+ 40             int minIndex = 0;
+ 41             Comparable[] arrayOf3 = new Double[3];
+ 42             int count = 0;
+ 43             for (int i=0; i<5; i++) {
+ 44                if (a[i] == maxNum) {
+ 45                    maxIndex = i;
+ 46                } else if (a[i] == minNum) {
+ 47                    minIndex = i;
+ 48                } else {
+ 49                    arrayOf3[count] = a[i];
+ 50                    count++;
+ 51                }
+ 52             }
+ 53 
+ 54             a0 = arrayOf3[0];
+ 55             a1 = arrayOf3[1];
+ 56             a2 = arrayOf3[2];
+ 57 
+ 58             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
+ 59                 return i0;
+ 60             }
+ 61             // if a1 is median, return i1
+ 62             if ((a1.compareTo(a0) <= 0 && a1.compareTo(a2) >= 0) || (a1.compareTo(a0) >= 0 && a1.compareTo(a2) <= 0)) {
+ 63                 return i1;
+ 64             }
+ 65             // if a2 is median, return i2
r 66             return i2;
--[ 2021.10.25.16.53.41.463.0 ]--
- 45
- 45
- 45
- 45
--[ 2021.10.25.16.53.44.711.0 ]--
r 44                if (a[i] = maxNum) {
--[ 2021.10.25.16.53.45.161.0 ]--
r 44                if (a[i] != maxNum) {
--[ 2021.10.25.16.56.08.049.0 ]--
:/src/EdgeCases.java
+ 2     
--[ 2021.10.25.16.56.08.230.0 ]--
+ 2     
--[ 2021.10.25.16.56.23.027.0 ]--
r 3 
--[ 2021.10.25.16.56.39.550.0 ]--
r 2     p
--[ 2021.10.25.16.56.39.718.0 ]--
r 2     pu
--[ 2021.10.25.16.56.39.829.0 ]--
r 2     pub
--[ 2021.10.25.16.56.40.311.0 ]--
r 2     public
--[ 2021.10.25.16.56.40.328.0 ]--
r 2     public 
--[ 2021.10.25.16.56.41.351.0 ]--
r 2     public s
--[ 2021.10.25.16.56.41.557.0 ]--
r 2     public st
--[ 2021.10.25.16.56.41.689.0 ]--
r 2     public sta
--[ 2021.10.25.16.56.41.824.0 ]--
r 2     public stat
--[ 2021.10.25.16.56.42.510.0 ]--
r 2     public static
--[ 2021.10.25.16.56.42.524.0 ]--
r 2     public static 
--[ 2021.10.25.16.56.43.090.0 ]--
r 2     public static v
--[ 2021.10.25.16.56.43.288.0 ]--
r 2     public static voi
--[ 2021.10.25.16.56.44.479.0 ]--
r 2     public static void
--[ 2021.10.25.16.56.45.020.0 ]--
r 2     public static void 
--[ 2021.10.25.16.56.45.181.0 ]--
r 2     public static void m
--[ 2021.10.25.16.56.45.547.0 ]--
r 2     public static void 
--[ 2021.10.25.16.57.05.537.0 ]--
r 2     public static void g
--[ 2021.10.25.16.57.05.669.0 ]--
r 2     public static void ge
--[ 2021.10.25.16.57.05.842.0 ]--
r 2     public static void gen
--[ 2021.10.25.16.57.05.920.0 ]--
r 2     public static void gene
--[ 2021.10.25.16.57.06.007.0 ]--
r 2     public static void gener
--[ 2021.10.25.16.57.06.133.0 ]--
r 2     public static void genera
--[ 2021.10.25.16.57.06.216.0 ]--
r 2     public static void generat
--[ 2021.10.25.16.57.06.376.0 ]--
r 2     public static void generate
--[ 2021.10.25.16.57.07.193.0 ]--
r 2     public static void generate()
--[ 2021.10.25.16.57.07.579.0 ]--
r 2     public static void generate(i)
--[ 2021.10.25.16.57.07.632.0 ]--
r 2     public static void generate(in)
--[ 2021.10.25.16.57.07.665.0 ]--
r 2     public static void generate(int)
--[ 2021.10.25.16.57.07.811.0 ]--
r 2     public static void generate(int )
--[ 2021.10.25.16.57.08.555.0 ]--
r 2     public static void generate(int s)
--[ 2021.10.25.16.57.08.700.0 ]--
r 2     public static void generate(int si)
--[ 2021.10.25.16.57.08.810.0 ]--
r 2     public static void generate(int siz)
--[ 2021.10.25.16.57.08.969.0 ]--
r 2     public static void generate(int size)
--[ 2021.10.25.16.57.11.010.0 ]--
r 2     public static void generate(int size) 
--[ 2021.10.25.16.57.11.743.0 ]--
r 2     public static void generate(int size) {}
--[ 2021.10.25.16.57.12.175.0 ]--
+ 2     public static void generate(int size) {
r 3     }
--[ 2021.10.25.16.57.12.212.0 ]--
+ 3         
--[ 2021.10.25.16.57.14.630.0 ]--
r 2     public static void generate(int siz) {
--[ 2021.10.25.16.57.14.750.0 ]--
r 2     public static void generate(int si) {
--[ 2021.10.25.16.57.14.868.0 ]--
r 2     public static void generate(int s) {
--[ 2021.10.25.16.57.14.998.0 ]--
r 2     public static void generate(int ) {
--[ 2021.10.25.16.57.15.940.0 ]--
r 2     public static void generate(int n) {
--[ 2021.10.25.16.58.44.526.0 ]--
r 3         /
--[ 2021.10.25.16.58.44.682.0 ]--
r 3         //
--[ 2021.10.25.16.58.45.517.0 ]--
r 3         // 
--[ 2021.10.25.16.58.46.784.0 ]--
r 3         // s
--[ 2021.10.25.16.58.46.976.0 ]--
r 3         // so
--[ 2021.10.25.16.58.47.145.0 ]--
r 3         // sor
--[ 2021.10.25.16.58.47.312.0 ]--
r 3         // sort
--[ 2021.10.25.16.58.47.567.0 ]--
r 3         // sorte
--[ 2021.10.25.16.58.47.687.0 ]--
r 3         // sorted
--[ 2021.10.25.16.58.48.062.0 ]--
+ 4         
--[ 2021.10.25.16.58.48.215.0 ]--
+ 4         
--[ 2021.10.25.16.58.48.968.0 ]--
r 5         /
--[ 2021.10.25.16.58.49.083.0 ]--
r 5         //
--[ 2021.10.25.16.58.49.281.0 ]--
r 5         //r
--[ 2021.10.25.16.58.49.637.0 ]--
r 5         //
--[ 2021.10.25.16.58.49.733.0 ]--
r 5         // 
--[ 2021.10.25.16.58.49.970.0 ]--
r 5         // r
--[ 2021.10.25.16.58.50.044.0 ]--
r 5         // re
--[ 2021.10.25.16.58.50.198.0 ]--
r 5         // rev
--[ 2021.10.25.16.58.50.384.0 ]--
r 5         // reve
--[ 2021.10.25.16.58.50.444.0 ]--
r 5         // rever
--[ 2021.10.25.16.58.50.603.0 ]--
r 5         // revere
--[ 2021.10.25.16.58.50.969.0 ]--
r 5         // rever
--[ 2021.10.25.16.58.51.078.0 ]--
r 5         // revers
--[ 2021.10.25.16.58.51.262.0 ]--
r 5         // reverse
--[ 2021.10.25.16.58.51.412.0 ]--
r 5         // reversed
--[ 2021.10.25.16.58.53.018.0 ]--
r 4 
--[ 2021.10.25.17.02.14.913.0 ]--
+ 6         
--[ 2021.10.25.17.02.15.062.0 ]--
+ 6         
--[ 2021.10.25.17.02.15.893.0 ]--
r 7         /
--[ 2021.10.25.17.02.16.027.0 ]--
r 7         //
--[ 2021.10.25.17.02.17.336.0 ]--
r 7         // 
--[ 2021.10.25.17.02.21.792.0 ]--
r 7         // a
--[ 2021.10.25.17.02.21.958.0 ]--
r 7         // al
--[ 2021.10.25.17.02.22.085.0 ]--
r 7         // all
--[ 2021.10.25.17.02.22.213.0 ]--
r 7         // all 
--[ 2021.10.25.17.02.22.393.0 ]--
r 7         // all k
--[ 2021.10.25.17.02.22.458.0 ]--
r 7         // all ke
--[ 2021.10.25.17.02.22.592.0 ]--
r 7         // all key
--[ 2021.10.25.17.02.22.756.0 ]--
r 7         // all keys
--[ 2021.10.25.17.02.22.864.0 ]--
r 7         // all keys 
--[ 2021.10.25.17.02.23.050.0 ]--
r 7         // all keys a
--[ 2021.10.25.17.02.23.224.0 ]--
r 7         // all keys af
--[ 2021.10.25.17.02.23.330.0 ]--
r 7         // all keys afe
--[ 2021.10.25.17.02.23.618.0 ]--
r 7         // all keys af
--[ 2021.10.25.17.02.23.739.0 ]--
r 7         // all keys a
--[ 2021.10.25.17.02.24.245.0 ]--
r 7         // all keys ar
--[ 2021.10.25.17.02.24.297.0 ]--
r 7         // all keys are
--[ 2021.10.25.17.02.24.444.0 ]--
r 7         // all keys are 
--[ 2021.10.25.17.02.24.717.0 ]--
r 7         // all keys are s
--[ 2021.10.25.17.02.24.893.0 ]--
r 7         // all keys are sa
--[ 2021.10.25.17.02.25.057.0 ]--
r 7         // all keys are sam
--[ 2021.10.25.17.02.25.122.0 ]--
r 7         // all keys are same
--[ 2021.10.25.17.02.25.480.0 ]--
r 7         // all keys are same 
--[ 2021.10.25.17.02.25.848.0 ]--
r 7         // all keys are same
--[ 2021.10.25.17.03.15.313.0 ]--
+ 8         
--[ 2021.10.25.17.03.16.164.0 ]--
+ 8         
--[ 2021.10.25.17.03.16.910.0 ]--
r 9         /
--[ 2021.10.25.17.03.17.025.0 ]--
r 9         //
--[ 2021.10.25.17.03.17.489.0 ]--
r 9         // 
--[ 2021.10.25.17.03.17.716.0 ]--
r 9         // a
--[ 2021.10.25.17.03.17.919.0 ]--
r 9         // ar
--[ 2021.10.25.17.03.18.075.0 ]--
r 9         // ara
--[ 2021.10.25.17.03.18.336.0 ]--
r 9         // aray
--[ 2021.10.25.17.03.18.582.0 ]--
r 9         // aray 
--[ 2021.10.25.17.03.19.243.0 ]--
r 9         // aray
--[ 2021.10.25.17.03.19.402.0 ]--
r 9         // ara
--[ 2021.10.25.17.03.19.667.0 ]--
r 9         // ar
--[ 2021.10.25.17.03.19.849.0 ]--
r 9         // a
--[ 2021.10.25.17.03.20.015.0 ]--
r 9         // 
--[ 2021.10.25.17.03.21.483.0 ]--
r 9         // s
--[ 2021.10.25.17.03.21.611.0 ]--
r 9         // si
--[ 2021.10.25.17.03.21.742.0 ]--
r 9         // siz
--[ 2021.10.25.17.03.22.094.0 ]--
r 9         // siz 
--[ 2021.10.25.17.03.22.348.0 ]--
r 9         // siz
--[ 2021.10.25.17.03.22.480.0 ]--
r 9         // size
--[ 2021.10.25.17.03.22.877.0 ]--
r 9         // size 
--[ 2021.10.25.17.03.23.297.0 ]--
r 9         // size 0
--[ 2021.10.25.17.03.23.633.0 ]--
+ 10         
--[ 2021.10.25.17.03.23.883.0 ]--
+ 10         
--[ 2021.10.25.17.03.24.173.0 ]--
r 11         /
--[ 2021.10.25.17.03.24.577.0 ]--
r 11         //
--[ 2021.10.25.17.03.24.889.0 ]--
r 11         // 
--[ 2021.10.25.17.03.25.041.0 ]--
r 11         // s
--[ 2021.10.25.17.03.25.106.0 ]--
r 11         // si
--[ 2021.10.25.17.03.25.608.0 ]--
r 11         // sie
--[ 2021.10.25.17.03.25.937.0 ]--
r 11         // si
--[ 2021.10.25.17.03.26.042.0 ]--
r 11         // siz
--[ 2021.10.25.17.03.26.244.0 ]--
r 11         // size
--[ 2021.10.25.17.03.26.406.0 ]--
r 11         // size 
--[ 2021.10.25.17.03.26.954.0 ]--
r 11         // size 1
--[ 2021.10.25.17.03.33.602.0 ]--
+ 8         
--[ 2021.10.25.17.03.33.739.0 ]--
+ 8         
--[ 2021.10.25.17.03.35.009.0 ]--
r 9         /
--[ 2021.10.25.17.03.35.119.0 ]--
r 9         //
--[ 2021.10.25.17.03.35.416.0 ]--
r 9         // 
--[ 2021.10.25.17.03.41.642.0 ]--
r 9         // o
--[ 2021.10.25.17.03.41.990.0 ]--
r 9         // 
--[ 2021.10.25.17.03.42.237.0 ]--
r 9         // t
--[ 2021.10.25.17.03.42.422.0 ]--
r 9         // tw
--[ 2021.10.25.17.03.42.542.0 ]--
r 9         // two
--[ 2021.10.25.17.03.42.738.0 ]--
r 9         // two 
--[ 2021.10.25.17.03.43.367.0 ]--
r 9         // two d
--[ 2021.10.25.17.03.43.538.0 ]--
r 9         // two di
--[ 2021.10.25.17.03.43.614.0 ]--
r 9         // two dis
--[ 2021.10.25.17.03.43.827.0 ]--
r 9         // two dist
--[ 2021.10.25.17.03.44.110.0 ]--
r 9         // two disti
--[ 2021.10.25.17.03.44.190.0 ]--
r 9         // two distin
--[ 2021.10.25.17.03.44.310.0 ]--
r 9         // two distinc
--[ 2021.10.25.17.03.44.492.0 ]--
r 9         // two distinct
--[ 2021.10.25.17.03.46.799.0 ]--
r 9         // two distinct 
--[ 2021.10.25.17.03.46.905.0 ]--
r 9         // two distinct o
--[ 2021.10.25.17.03.47.002.0 ]--
r 9         // two distinct on
--[ 2021.10.25.17.03.47.125.0 ]--
r 9         // two distinct onl
--[ 2021.10.25.17.03.47.255.0 ]--
r 9         // two distinct only
--[ 2021.10.25.17.04.03.591.0 ]--
r 4     
--[ 2021.10.25.17.04.03.916.0 ]--
r 4         
--[ 2021.10.25.17.04.04.708.0 ]--
r 4         f
--[ 2021.10.25.17.04.04.803.0 ]--
r 4         fo
--[ 2021.10.25.17.04.04.906.0 ]--
r 4         for
--[ 2021.10.25.17.04.04.968.0 ]--
r 4         for 
--[ 2021.10.25.17.04.05.763.0 ]--
r 4         for ()
--[ 2021.10.25.17.04.06.155.0 ]--
r 4         for (i)
--[ 2021.10.25.17.04.06.325.0 ]--
r 4         for (in)
--[ 2021.10.25.17.04.06.431.0 ]--
r 4         for (int)
--[ 2021.10.25.17.04.07.404.0 ]--
r 4         for (int )
--[ 2021.10.25.17.04.07.477.0 ]--
r 4         for (int i)
--[ 2021.10.25.17.04.08.088.0 ]--
r 4         for (int i=)
--[ 2021.10.25.17.04.08.294.0 ]--
r 4         for (int i=0)
--[ 2021.10.25.17.04.08.733.0 ]--
r 4         for (int i=0;)
--[ 2021.10.25.17.04.08.960.0 ]--
r 4         for (int i=0; )
--[ 2021.10.25.17.04.09.331.0 ]--
r 4         for (int i=0; i)
--[ 2021.10.25.17.04.09.998.0 ]--
r 4         for (int i=0; i<)
--[ 2021.10.25.17.04.10.599.0 ]--
r 4         for (int i=0; i<n)
--[ 2021.10.25.17.04.11.697.0 ]--
r 4         for (int i=0; i<n;)
--[ 2021.10.25.17.04.12.312.0 ]--
r 4         for (int i=0; i<n; )
--[ 2021.10.25.17.04.12.414.0 ]--
r 4         for (int i=0; i<n; i)
--[ 2021.10.25.17.04.13.830.0 ]--
r 4         for (int i=0; i<n; i+)
--[ 2021.10.25.17.04.13.889.0 ]--
r 4         for (int i=0; i<n; i++)
--[ 2021.10.25.17.04.14.744.0 ]--
r 4         for (int i=0; i<n; i++) 
--[ 2021.10.25.17.04.15.126.0 ]--
r 4         for (int i=0; i<n; i++) {
--[ 2021.10.25.17.04.15.276.0 ]--
+ 5 
+ 6 }
--[ 2021.10.25.17.04.15.284.0 ]--
r 6         }
--[ 2021.10.25.17.04.15.302.0 ]--
r 5             
--[ 2021.10.25.17.05.24.316.0 ]--
r 8 
r 10 
r 12 
r 14 
--[ 2021.10.25.17.06.22.801.0 ]--
- 3
- 3
- 3
- 3
- 3
- 3
- 3
- 3
- 3
- 3
- 3
- 3
r 3         
--[ 2021.10.25.17.06.26.127.0 ]--
+ 21 // sorted
+ 22         for (int i=0; i<n; i++) {
+ 23             
+ 24         }
+ 25         // reversed
+ 26 
+ 27         // all keys are same
+ 28 
+ 29         // two distinct only
+ 30 
+ 31         // size 0
+ 33         // size 1
--[ 2021.10.25.17.06.26.137.0 ]--
r 23 
--[ 2021.10.25.17.06.28.997.0 ]--
r 21     // sorted
--[ 2021.10.25.17.06.29.471.0 ]--
r 21         // sorted
--[ 2021.10.25.17.06.32.399.0 ]--
- 2
- 2
r 2 
--[ 2021.10.25.17.06.32.824.0 ]--
- 2
--[ 2021.10.25.17.06.37.551.0 ]--
- 19
- 19
r 19         \
--[ 2021.10.25.17.06.38.144.0 ]--
r 19         
--[ 2021.10.25.17.06.43.746.0 ]--
r 17         
--[ 2021.10.25.17.06.44.220.0 ]--
- 16
--[ 2021.10.25.17.06.45.410.0 ]--
r 18         Double[] a = { 0.0 };
--[ 2021.10.25.17.06.48.176.0 ]--
r 18         Double[] a = { 0.0, };
--[ 2021.10.25.17.06.48.348.0 ]--
r 18         Double[] a = { 0.0,  };
--[ 2021.10.25.17.06.48.884.0 ]--
r 18         Double[] a = { 0.0, 1 };
--[ 2021.10.25.17.06.49.108.0 ]--
r 18         Double[] a = { 0.0, 1. };
--[ 2021.10.25.17.06.49.330.0 ]--
r 18         Double[] a = { 0.0, 1.0 };
--[ 2021.10.25.17.06.49.620.0 ]--
r 18         Double[] a = { 0.0, 1.0, };
--[ 2021.10.25.17.06.49.907.0 ]--
r 18         Double[] a = { 0.0, 1.0,  };
--[ 2021.10.25.17.06.50.493.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2 };
--[ 2021.10.25.17.06.50.641.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2. };
--[ 2021.10.25.17.06.50.852.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0 };
--[ 2021.10.25.17.06.51.241.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, };
--[ 2021.10.25.17.06.51.496.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0,  };
--[ 2021.10.25.17.06.51.684.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3 };
--[ 2021.10.25.17.06.51.838.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3. };
--[ 2021.10.25.17.06.52.059.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3.0 };
--[ 2021.10.25.17.06.53.003.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3.0, };
--[ 2021.10.25.17.06.53.186.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3.0,  };
--[ 2021.10.25.17.06.53.586.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3.0, 5 };
--[ 2021.10.25.17.06.54.265.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3.0, 5. };
--[ 2021.10.25.17.06.54.465.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3.0, 5.0 };
--[ 2021.10.25.17.06.54.752.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3.0, 5. };
--[ 2021.10.25.17.06.54.872.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3.0, 5 };
--[ 2021.10.25.17.06.55.086.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3.0,  };
--[ 2021.10.25.17.06.57.018.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3.0, 4 };
--[ 2021.10.25.17.06.57.173.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3.0, 4. };
--[ 2021.10.25.17.06.57.414.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3.0, 4.0 };
--[ 2021.10.25.17.06.59.070.0 ]--
r 18         Double[] a = { 0.0, 1.0, 2.0, 3.0, 4.0};
--[ 2021.10.25.17.07.02.740.0 ]--
r 18         Double[] a = {0.0, 1.0, 2.0, 3.0, 4.0};
--[ 2021.10.25.17.07.10.089.0 ]--
+ 26 Bubble.sort(a);     // bubble sort
+ 27         Selection.sort(a);  // selection sort
+ 28         Insertion.sort(a);  // insertion sort
+ 29         Shell.sort(a);      // Shellsort
r 30         Quick.sort(a);      // quicksort
--[ 2021.10.25.17.07.10.115.0 ]--
r 26         Bubble.sort(a);     // bubble sort
--[ 2021.10.25.17.07.10.857.0 ]--
+ 24 Bubble.sort(a);     // bubble sort
+ 25         Selection.sort(a);  // selection sort
+ 26         Insertion.sort(a);  // insertion sort
+ 27         Shell.sort(a);      // Shellsort
r 28         Quick.sort(a);      // quicksort
--[ 2021.10.25.17.07.10.877.0 ]--
r 24         Bubble.sort(a);     // bubble sort
--[ 2021.10.25.17.07.11.748.0 ]--
+ 22 Bubble.sort(a);     // bubble sort
+ 23         Selection.sort(a);  // selection sort
+ 24         Insertion.sort(a);  // insertion sort
+ 25         Shell.sort(a);      // Shellsort
r 26         Quick.sort(a);      // quicksort
--[ 2021.10.25.17.07.11.770.0 ]--
r 22         Bubble.sort(a);     // bubble sort
--[ 2021.10.25.17.07.12.448.0 ]--
+ 20 Bubble.sort(a);     // bubble sort
+ 21         Selection.sort(a);  // selection sort
+ 22         Insertion.sort(a);  // insertion sort
+ 23         Shell.sort(a);      // Shellsort
r 24         Quick.sort(a);      // quicksort
--[ 2021.10.25.17.07.12.467.0 ]--
r 20         Bubble.sort(a);     // bubble sort
--[ 2021.10.25.17.07.14.593.0 ]--
+ 19         
--[ 2021.10.25.17.07.14.732.0 ]--
+ 19         Bubble.sort(a);     // bubble sort
+ 20         Selection.sort(a);  // selection sort
+ 21         Insertion.sort(a);  // insertion sort
+ 22         Shell.sort(a);      // Shellsort
r 23         Quick.sort(a);      // quicksort
--[ 2021.10.25.17.07.28.016.0 ]--
+ 25         
--[ 2021.10.25.17.07.28.133.0 ]--
r 25         a = {0.0, 1.0, 2.0, 3.0, 4.0};
--[ 2021.10.25.17.07.37.925.0 ]--
r 25         a = {0.0, 1.0, 2.0, 3.0,4.0};
--[ 2021.10.25.17.07.38.429.0 ]--
r 25         a = {0.0, 1.0, 2.0, 3.04.0};
--[ 2021.10.25.17.07.38.535.0 ]--
r 25         a = {0.0, 1.0, 2.0, 3.4.0};
--[ 2021.10.25.17.07.38.599.0 ]--
r 25         a = {0.0, 1.0, 2.0, 34.0};
--[ 2021.10.25.17.07.38.701.0 ]--
r 25         a = {0.0, 1.0, 2.0, 4.0};
--[ 2021.10.25.17.07.38.760.0 ]--
r 25         a = {0.0, 1.0, 2.0,4.0};
--[ 2021.10.25.17.07.38.845.0 ]--
r 25         a = {0.0, 1.0, 2.04.0};
--[ 2021.10.25.17.07.38.929.0 ]--
r 25         a = {0.0, 1.0, 2.4.0};
--[ 2021.10.25.17.07.39.033.0 ]--
r 25         a = {0.0, 1.0, 24.0};
--[ 2021.10.25.17.07.39.095.0 ]--
r 25         a = {0.0, 1.0, 4.0};
--[ 2021.10.25.17.07.39.200.0 ]--
r 25         a = {0.0, 1.0,4.0};
--[ 2021.10.25.17.07.39.261.0 ]--
r 25         a = {0.0, 1.04.0};
--[ 2021.10.25.17.07.39.370.0 ]--
r 25         a = {0.0, 1.4.0};
--[ 2021.10.25.17.07.39.426.0 ]--
r 25         a = {0.0, 14.0};
--[ 2021.10.25.17.07.39.531.0 ]--
r 25         a = {0.0, 4.0};
--[ 2021.10.25.17.07.39.681.0 ]--
r 25         a = {0.0,4.0};
--[ 2021.10.25.17.07.39.850.0 ]--
r 25         a = {0.04.0};
--[ 2021.10.25.17.07.39.996.0 ]--
r 25         a = {0.4.0};
--[ 2021.10.25.17.07.40.130.0 ]--
r 25         a = {04.0};
--[ 2021.10.25.17.07.40.356.0 ]--
r 25         a = {4.0};
--[ 2021.10.25.17.07.41.964.0 ]--
r 25         a = {4.0,};
--[ 2021.10.25.17.07.42.131.0 ]--
r 25         a = {4.0, };
--[ 2021.10.25.17.07.42.324.0 ]--
r 25         a = {4.0, 3};
--[ 2021.10.25.17.07.42.494.0 ]--
r 25         a = {4.0, 3.};
--[ 2021.10.25.17.07.42.707.0 ]--
r 25         a = {4.0, 3.0};
--[ 2021.10.25.17.07.43.019.0 ]--
r 25         a = {4.0, 3.0,};
--[ 2021.10.25.17.07.43.247.0 ]--
r 25         a = {4.0, 3.0, };
--[ 2021.10.25.17.07.43.776.0 ]--
r 25         a = {4.0, 3.0, 2};
--[ 2021.10.25.17.07.43.927.0 ]--
r 25         a = {4.0, 3.0, 2.};
--[ 2021.10.25.17.07.44.158.0 ]--
r 25         a = {4.0, 3.0, 2.0};
--[ 2021.10.25.17.07.44.642.0 ]--
r 25         a = {4.0, 3.0, 2.0,};
--[ 2021.10.25.17.07.44.866.0 ]--
r 25         a = {4.0, 3.0, 2.0, };
--[ 2021.10.25.17.07.45.588.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1};
--[ 2021.10.25.17.07.45.814.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.};
--[ 2021.10.25.17.07.46.059.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0};
--[ 2021.10.25.17.07.46.256.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0 };
--[ 2021.10.25.17.07.46.464.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0 ,};
--[ 2021.10.25.17.07.46.816.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0 ,0};
--[ 2021.10.25.17.07.47.771.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0 ,};
--[ 2021.10.25.17.07.48.031.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0 , };
--[ 2021.10.25.17.07.48.693.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0 , .};
--[ 2021.10.25.17.07.49.069.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0 , .0};
--[ 2021.10.25.17.07.49.918.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0 , .};
--[ 2021.10.25.17.07.50.327.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0 , };
--[ 2021.10.25.17.07.50.901.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0 , 0};
--[ 2021.10.25.17.07.51.202.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0 , 0.};
--[ 2021.10.25.17.07.51.427.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0 , 0.0};
--[ 2021.10.25.17.07.53.598.0 ]--
r 25         a = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.06.234.0 ]--
r 25         Da = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.06.461.0 ]--
r 25         Doa = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.06.498.0 ]--
r 25         Doua = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.07.160.0 ]--
r 25         Doublea = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.07.172.0 ]--
r 25         Double a = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.07.199.0 ]--
r 25         Doublea = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.08.248.0 ]--
r 25         Doublepa = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.08.533.0 ]--
r 25         Doublea = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.09.130.0 ]--
r 25         Double[a = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.09.254.0 ]--
r 25         Double[ a = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.09.438.0 ]--
r 25         Double[ ba = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.10.027.0 ]--
r 25         Double[ a = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.10.170.0 ]--
r 25         Double[a = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.11.240.0 ]--
r 25         Double[]a = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.11.881.0 ]--
r 25         Double[] a = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.12.562.0 ]--
r 25         Double[]  = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.12.681.0 ]--
r 25         Double[] r = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.12.719.0 ]--
r 25         Double[] re = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.12.895.0 ]--
r 25         Double[] rev = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.13.076.0 ]--
r 25         Double[] reve = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.13.155.0 ]--
r 25         Double[] rever = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.13.309.0 ]--
r 25         Double[] revers = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.13.526.0 ]--
r 25         Double[] reverse = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.14.023.0 ]--
r 25         Double[] reversed = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.17.08.25.202.0 ]--
r 18         Double[] s = {0.0, 1.0, 2.0, 3.0, 4.0};
--[ 2021.10.25.17.08.25.367.0 ]--
r 18         Double[] so = {0.0, 1.0, 2.0, 3.0, 4.0};
--[ 2021.10.25.17.08.25.423.0 ]--
r 18         Double[] sor = {0.0, 1.0, 2.0, 3.0, 4.0};
--[ 2021.10.25.17.08.25.654.0 ]--
r 18         Double[] sort = {0.0, 1.0, 2.0, 3.0, 4.0};
--[ 2021.10.25.17.08.25.824.0 ]--
r 18         Double[] sorte = {0.0, 1.0, 2.0, 3.0, 4.0};
--[ 2021.10.25.17.08.25.992.0 ]--
r 18         Double[] sorted = {0.0, 1.0, 2.0, 3.0, 4.0};
--[ 2021.10.25.17.08.32.289.0 ]--
r 19         Bubble.sort(sorted);     // bubble sort
--[ 2021.10.25.17.08.33.247.0 ]--
r 20         Selection.sort(sorted);  // selection sort
--[ 2021.10.25.17.08.33.913.0 ]--
r 21         Insertion.sort(sorted);  // insertion sort
--[ 2021.10.25.17.08.34.867.0 ]--
r 22         Shell.sort(sorted);      // Shellsort
--[ 2021.10.25.17.08.35.818.0 ]--
r 23         Quick.sort(sorted);      // quicksort
--[ 2021.10.25.17.08.38.545.0 ]--
r 26         Bubble.sort(reversed);     // bubble sort
--[ 2021.10.25.17.08.39.620.0 ]--
r 27         Selection.sort(reversed);  // selection sort
--[ 2021.10.25.17.08.40.430.0 ]--
r 28         Insertion.sort(reversed);  // insertion sort
--[ 2021.10.25.17.08.41.582.0 ]--
r 29         Shell.sort(reversed);      // Shellsort
--[ 2021.10.25.17.08.42.511.0 ]--
r 30         Quick.sort(reversed);      // quicksort
--[ 2021.10.25.17.08.47.530.0 ]--
+ 32         
--[ 2021.10.25.17.08.48.372.0 ]--
r 32         D
--[ 2021.10.25.17.08.48.667.0 ]--
r 32         Do
--[ 2021.10.25.17.08.48.732.0 ]--
r 32         Dob
--[ 2021.10.25.17.08.49.177.0 ]--
r 32         DoubleBinaryOperator
--[ 2021.10.25.17.08.49.183.0 ]--
r 32         java.util.function.DoubleBinaryOperator
--[ 2021.10.25.17.08.49.191.0 ]--
r 1 import java.util.function.DoubleBinaryOperator;public class EdgeCases {
--[ 2021.10.25.17.08.49.195.0 ]--
r 32         DoubleBinaryOperator
--[ 2021.10.25.17.08.49.203.0 ]--
+ 1 import java.util.function.DoubleBinaryOperator;
+ 2 
r 3 public class EdgeCases {
--[ 2021.10.25.17.08.49.980.0 ]--
r 34         DoubleBinaryOperato
--[ 2021.10.25.17.08.50.479.0 ]--
r 34         DoubleBinaryOperat
--[ 2021.10.25.17.08.50.578.0 ]--
r 34         DoubleBinaryOpera
--[ 2021.10.25.17.08.50.642.0 ]--
r 34         DoubleBinaryOper
--[ 2021.10.25.17.08.50.725.0 ]--
r 34         DoubleBinaryOpe
--[ 2021.10.25.17.08.50.816.0 ]--
r 34         DoubleBinaryOp
--[ 2021.10.25.17.08.50.910.0 ]--
r 34         DoubleBinaryO
--[ 2021.10.25.17.08.50.974.0 ]--
r 34         DoubleBinary
--[ 2021.10.25.17.08.51.081.0 ]--
r 34         DoubleBinar
--[ 2021.10.25.17.08.51.144.0 ]--
r 34         DoubleBina
--[ 2021.10.25.17.08.51.250.0 ]--
r 34         DoubleBin
--[ 2021.10.25.17.08.51.310.0 ]--
r 34         DoubleBi
--[ 2021.10.25.17.08.51.478.0 ]--
r 34         DoubleB
--[ 2021.10.25.17.08.51.612.0 ]--
r 34         Double
--[ 2021.10.25.17.08.52.363.0 ]--
r 34         Double[]
--[ 2021.10.25.17.08.53.456.0 ]--
r 34         Double[] 
--[ 2021.10.25.17.08.55.080.0 ]--
r 34         Double[] s
--[ 2021.10.25.17.08.55.285.0 ]--
r 34         Double[] sa
--[ 2021.10.25.17.08.55.391.0 ]--
r 34         Double[] sam
--[ 2021.10.25.17.08.55.479.0 ]--
r 34         Double[] same
--[ 2021.10.25.17.08.56.819.0 ]--
r 34         Double[] same 
--[ 2021.10.25.17.08.57.419.0 ]--
r 34         Double[] same =
--[ 2021.10.25.17.08.57.550.0 ]--
r 34         Double[] same = 
--[ 2021.10.25.17.08.57.978.0 ]--
r 34         Double[] same = {}
--[ 2021.10.25.17.09.01.210.0 ]--
r 34         Double[] same = {6}
--[ 2021.10.25.17.09.01.393.0 ]--
r 34         Double[] same = {6.}
--[ 2021.10.25.17.09.01.694.0 ]--
r 34         Double[] same = {6.0}
--[ 2021.10.25.17.09.02.494.0 ]--
r 34         Double[] same = {6.}
--[ 2021.10.25.17.09.02.643.0 ]--
r 34         Double[] same = {6}
--[ 2021.10.25.17.09.02.846.0 ]--
r 34         Double[] same = {}
--[ 2021.10.25.17.09.04.161.0 ]--
r 34         Double[] same = {3}
--[ 2021.10.25.17.09.04.307.0 ]--
r 34         Double[] same = {3.}
--[ 2021.10.25.17.09.04.508.0 ]--
r 34         Double[] same = {3.0}
--[ 2021.10.25.17.09.04.856.0 ]--
r 34         Double[] same = {3.0 }
--[ 2021.10.25.17.09.05.199.0 ]--
r 34         Double[] same = {3.0}
--[ 2021.10.25.17.09.05.487.0 ]--
r 34         Double[] same = {3.0,}
--[ 2021.10.25.17.09.09.823.0 ]--
r 34         Double[] same = {3.0, }
--[ 2021.10.25.17.09.09.969.0 ]--
r 34         Double[] same = {3.0, 3.0,}
--[ 2021.10.25.17.09.10.090.0 ]--
r 34         Double[] same = {3.0, 3.0, }
--[ 2021.10.25.17.09.10.318.0 ]--
r 34         Double[] same = {3.0, 3.0, 3.0,}
--[ 2021.10.25.17.09.10.474.0 ]--
r 34         Double[] same = {3.0, 3.0, 3.0, }
--[ 2021.10.25.17.09.10.649.0 ]--
r 34         Double[] same = {3.0, 3.0, 3.0, 3.0,}
--[ 2021.10.25.17.09.10.768.0 ]--
r 34         Double[] same = {3.0, 3.0, 3.0, 3.0, }
--[ 2021.10.25.17.09.10.938.0 ]--
r 34         Double[] same = {3.0, 3.0, 3.0, 3.0, 3.0,}
--[ 2021.10.25.17.09.12.172.0 ]--
r 34         Double[] same = {3.0, 3.0, 3.0, 3.0, 3.0}
--[ 2021.10.25.17.09.16.291.0 ]--
r 34         Double[] same = {3.0, 3.0, 3.0, 3.0, 3.0}l
--[ 2021.10.25.17.09.16.683.0 ]--
r 34         Double[] same = {3.0, 3.0, 3.0, 3.0, 3.0}
--[ 2021.10.25.17.09.18.591.0 ]--
r 34         Double[] same = {3.0, 3.0, 3.0, 3.0, 3.0};
--[ 2021.10.25.17.09.26.733.0 ]--
r 35         Bubble.sort(same);     // bubble sort
--[ 2021.10.25.17.09.27.699.0 ]--
r 36         Selection.sort(same);  // selection sort
--[ 2021.10.25.17.09.28.331.0 ]--
r 37         Insertion.sort(same);  // insertion sort
--[ 2021.10.25.17.09.29.368.0 ]--
r 38         Shell.sort(same);      // Shellsort
--[ 2021.10.25.17.09.30.138.0 ]--
r 39         Quick.sort(same);      // quicksort
--[ 2021.10.25.17.09.42.872.0 ]--
+ 41         
--[ 2021.10.25.17.09.42.961.0 ]--
r 41         same
--[ 2021.10.25.17.09.43.928.0 ]--
r 41         
--[ 2021.10.25.17.09.44.915.0 ]--
r 41         D
--[ 2021.10.25.17.09.45.164.0 ]--
r 41         Do
--[ 2021.10.25.17.09.45.244.0 ]--
r 41         Doub
--[ 2021.10.25.17.09.45.310.0 ]--
r 41         Doubl
--[ 2021.10.25.17.09.45.423.0 ]--
r 41         Double
--[ 2021.10.25.17.09.46.071.0 ]--
r 41         Double[]
--[ 2021.10.25.17.09.46.736.0 ]--
r 41         Double[] 
--[ 2021.10.25.17.10.03.067.0 ]--
r 41         Double[] t
--[ 2021.10.25.17.10.03.260.0 ]--
r 41         Double[] tw
--[ 2021.10.25.17.10.03.384.0 ]--
r 41         Double[] two
--[ 2021.10.25.17.10.04.416.0 ]--
r 41         Double[] twoD
--[ 2021.10.25.17.10.04.593.0 ]--
r 41         Double[] twoDo
--[ 2021.10.25.17.10.04.886.0 ]--
r 41         Double[] twoDos
--[ 2021.10.25.17.10.05.374.0 ]--
r 41         Double[] twoDo
--[ 2021.10.25.17.10.05.498.0 ]--
r 41         Double[] twoD
--[ 2021.10.25.17.10.05.705.0 ]--
r 41         Double[] twoDi
--[ 2021.10.25.17.10.05.765.0 ]--
r 41         Double[] twoDis
--[ 2021.10.25.17.10.06.166.0 ]--
r 41         Double[] twoDist
--[ 2021.10.25.17.10.06.280.0 ]--
r 41         Double[] twoDisti
--[ 2021.10.25.17.10.06.388.0 ]--
r 41         Double[] twoDistin
--[ 2021.10.25.17.10.06.466.0 ]--
r 41         Double[] twoDistinc
--[ 2021.10.25.17.10.06.650.0 ]--
r 41         Double[] twoDistinct
--[ 2021.10.25.17.10.07.764.0 ]--
r 41         Double[] twoDistinct 
--[ 2021.10.25.17.10.07.966.0 ]--
r 41         Double[] twoDistinct =
--[ 2021.10.25.17.10.08.071.0 ]--
r 41         Double[] twoDistinct = 
--[ 2021.10.25.17.10.10.082.0 ]--
r 41         Double[] twoDistinct = {}
--[ 2021.10.25.17.10.11.340.0 ]--
r 41         Double[] twoDistinct = {};
--[ 2021.10.25.17.10.19.909.0 ]--
r 41         Double[] twoDistinct = {0};
--[ 2021.10.25.17.10.20.223.0 ]--
r 41         Double[] twoDistinct = {0.};
--[ 2021.10.25.17.10.20.443.0 ]--
r 41         Double[] twoDistinct = {0.0};
--[ 2021.10.25.17.10.21.275.0 ]--
r 41         Double[] twoDistinct = {0.0,};
--[ 2021.10.25.17.10.21.450.0 ]--
r 41         Double[] twoDistinct = {0.0, };
--[ 2021.10.25.17.10.22.180.0 ]--
r 41         Double[] twoDistinct = {0.0, 0};
--[ 2021.10.25.17.10.22.329.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.};
--[ 2021.10.25.17.10.23.118.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0};
--[ 2021.10.25.17.10.24.272.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0,};
--[ 2021.10.25.17.10.24.534.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, };
--[ 2021.10.25.17.10.25.084.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0};
--[ 2021.10.25.17.10.25.272.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.};
--[ 2021.10.25.17.10.25.454.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0};
--[ 2021.10.25.17.10.26.310.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0,};
--[ 2021.10.25.17.10.26.474.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, };
--[ 2021.10.25.17.10.27.334.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4};
--[ 2021.10.25.17.10.27.483.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.};
--[ 2021.10.25.17.10.27.699.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0};
--[ 2021.10.25.17.10.27.978.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0,};
--[ 2021.10.25.17.10.28.505.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0,m};
--[ 2021.10.25.17.10.29.062.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0,m=};
--[ 2021.10.25.17.10.29.249.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0,m= };
--[ 2021.10.25.17.10.29.472.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0,m=};
--[ 2021.10.25.17.10.29.583.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0,m};
--[ 2021.10.25.17.10.29.716.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0,};
--[ 2021.10.25.17.10.29.820.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0, };
--[ 2021.10.25.17.10.29.918.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0, 4};
--[ 2021.10.25.17.10.30.775.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0, 4.};
--[ 2021.10.25.17.10.30.994.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0, 4.0};
--[ 2021.10.25.17.10.38.051.0 ]--
r 42         Bubble.sort(twoDistinct);     // bubble sort
--[ 2021.10.25.17.10.39.086.0 ]--
r 43         Selection.sort(twoDistinct);  // selection sort
--[ 2021.10.25.17.10.39.883.0 ]--
r 44         Insertion.sort(twoDistinct);  // insertion sort
--[ 2021.10.25.17.10.41.050.0 ]--
r 45         Shell.sort(twoDistinct);      // Shellsort
--[ 2021.10.25.17.10.41.689.0 ]--
r 46         Quick.sort(twoDistinct);      // quicksort
--[ 2021.10.25.17.10.47.450.0 ]--
+ 48         
--[ 2021.10.25.17.10.48.063.0 ]--
r 48         D
--[ 2021.10.25.17.10.48.301.0 ]--
r 48         Do
--[ 2021.10.25.17.10.48.365.0 ]--
r 48         Dou
--[ 2021.10.25.17.10.48.949.0 ]--
r 48         Double
--[ 2021.10.25.17.10.49.749.0 ]--
r 48         Double 
--[ 2021.10.25.17.10.50.522.0 ]--
r 48         Double
--[ 2021.10.25.17.10.51.122.0 ]--
r 48         Double[]
--[ 2021.10.25.17.10.53.620.0 ]--
r 48         Double[] 
--[ 2021.10.25.17.10.55.887.0 ]--
r 48         Double[] s
--[ 2021.10.25.17.10.56.650.0 ]--
r 48         Double[] siz
--[ 2021.10.25.17.10.56.837.0 ]--
r 48         Double[] size
--[ 2021.10.25.17.10.57.686.0 ]--
r 48         Double[] size09
--[ 2021.10.25.17.10.58.529.0 ]--
r 48         Double[] size0
--[ 2021.10.25.17.10.59.011.0 ]--
r 48         Double[] size0 
--[ 2021.10.25.17.10.59.185.0 ]--
r 48         Double[] size0 =
--[ 2021.10.25.17.11.00.087.0 ]--
r 48         Double[] size0 = 
--[ 2021.10.25.17.11.01.493.0 ]--
r 48         Double[] size0 = {}
--[ 2021.10.25.17.11.02.531.0 ]--
r 48         Double[] size0 = {};
--[ 2021.10.25.17.11.13.651.0 ]--
r 49         Bubble.sort(size0);     // bubble sort
--[ 2021.10.25.17.11.14.847.0 ]--
r 50         Selection.sort(size0);  // selection sort
--[ 2021.10.25.17.11.15.605.0 ]--
r 51         Insertion.sort(size0);  // insertion sort
--[ 2021.10.25.17.11.16.480.0 ]--
r 52         Shell.sort(size0);      // Shellsort
--[ 2021.10.25.17.11.17.141.0 ]--
r 53         Quick.sort(size0;      // quicksort
--[ 2021.10.25.17.11.26.488.0 ]--
+ 55         
--[ 2021.10.25.17.11.26.638.0 ]--
r 55         Double[] size0 = {};
--[ 2021.10.25.17.11.28.468.0 ]--
r 55         Double[] size0 = {0};
--[ 2021.10.25.17.11.28.481.0 ]--
r 55         Double[] size0 = {0-};
--[ 2021.10.25.17.11.28.813.0 ]--
r 55         Double[] size0 = {0-.};
--[ 2021.10.25.17.11.28.973.0 ]--
r 55         Double[] size0 = {0-.0};
--[ 2021.10.25.17.11.30.306.0 ]--
r 55         Double[] size0 = {0.0};
--[ 2021.10.25.17.11.33.052.0 ]--
r 55         Double[] size = {0.0};
--[ 2021.10.25.17.11.33.167.0 ]--
r 55         Double[] size1 = {0.0};
--[ 2021.10.25.17.11.36.004.0 ]--
r 56         Bubble.sort(size1);     // bubble sort
--[ 2021.10.25.17.11.37.128.0 ]--
r 57         Selection.sort(size1);  // selection sort
--[ 2021.10.25.17.11.37.838.0 ]--
r 58         Insertion.sort(size1);  // insertion sort
--[ 2021.10.25.17.11.39.236.0 ]--
r 59         Shell.sort(size1);      // Shellsort
--[ 2021.10.25.17.11.39.957.0 ]--
r 60         Quick.sort(size1);      // quicksort
--[ 2021.10.25.17.11.44.007.0 ]--
r 53         Quick.sort(size0);      // quicksort
--[ 2021.10.25.17.11.48.809.0 ]--
- 13
- 13
- 13
- 13
- 13
--[ 2021.10.25.17.11.49.270.0 ]--
- 12
--[ 2021.10.25.17.11.50.828.0 ]--
- 12
--[ 2021.10.25.17.11.55.720.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.17.23.26.836.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.17.24.53.492.0 ]--
:/src/QuickSortMedian5.java
r 44                if (a[i] != maxNum ) {
--[ 2021.10.25.17.24.55.548.0 ]--
r 44                if (a[i] != maxNum &) {
--[ 2021.10.25.17.24.55.694.0 ]--
r 44                if (a[i] != maxNum &&) {
--[ 2021.10.25.17.24.55.962.0 ]--
r 44                if (a[i] != maxNum && ) {
--[ 2021.10.25.17.24.56.987.0 ]--
r 44                if (a[i] != maxNum && a) {
--[ 2021.10.25.17.24.57.406.0 ]--
r 44                if (a[i] != maxNum && a[]) {
--[ 2021.10.25.17.24.57.662.0 ]--
r 44                if (a[i] != maxNum && a[i]) {
--[ 2021.10.25.17.24.58.493.0 ]--
r 44                if (a[i] != maxNum && a[i] ) {
--[ 2021.10.25.17.24.58.990.0 ]--
r 44                if (a[i] != maxNum && a[i] 1) {
--[ 2021.10.25.17.24.59.463.0 ]--
r 44                if (a[i] != maxNum && a[i] ) {
--[ 2021.10.25.17.24.59.731.0 ]--
r 44                if (a[i] != maxNum && a[i] !) {
--[ 2021.10.25.17.25.00.062.0 ]--
r 44                if (a[i] != maxNum && a[i] !=) {
--[ 2021.10.25.17.25.00.348.0 ]--
r 44                if (a[i] != maxNum && a[i] != ) {
--[ 2021.10.25.17.25.00.901.0 ]--
r 44                if (a[i] != maxNum && a[i] != m) {
--[ 2021.10.25.17.25.01.043.0 ]--
r 44                if (a[i] != maxNum && a[i] != mi) {
--[ 2021.10.25.17.25.01.102.0 ]--
r 44                if (a[i] != maxNum && a[i] != min) {
--[ 2021.10.25.17.25.01.628.0 ]--
r 44                if (a[i] != maxNum && a[i] != minNum) {
--[ 2021.10.25.17.25.06.186.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.17.25.21.377.0 ]--
- 40
--[ 2021.10.25.17.25.22.225.0 ]--
- 38
--[ 2021.10.25.17.25.30.547.0 ]--
r 42                if (a[i] != maxNum & a[i] != minNum) {
--[ 2021.10.25.17.25.30.681.0 ]--
r 42                if (a[i] != maxNum  a[i] != minNum) {
--[ 2021.10.25.17.25.34.313.0 ]--
r 42                if (a[i] != maxNum && a[i] != minNum) {
--[ 2021.10.25.17.25.53.901.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.17.29.26.817.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.17.31.00.949.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.18.19.11.521.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.18.20.59.552.0 ]--
:/src/DoublingTest.java
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 70
- 70
- 70
- 70
- 70
- 70
- 70
- 70
- 70
- 70
- 70
- 70
- 70
- 70
r 70 
--[ 2021.10.25.18.21.00.095.0 ]--
- 70
--[ 2021.10.25.18.22.20.049.0 ]--
r 49                 L.sort(a);  // selection sort
--[ 2021.10.25.18.22.25.079.0 ]--
r 49                 Shell.sort(a);  // selection sort
--[ 2021.10.25.18.22.28.452.0 ]--
r 49                 Shell.sort(a); 
--[ 2021.10.25.18.22.28.631.0 ]--
r 49                 Shell.sort(a);
--[ 2021.10.25.18.22.31.954.0 ]--
r 34                 Insertion.sort(a);  // i sort
--[ 2021.10.25.18.22.32.047.0 ]--
r 34                 Insertion.sort(a);  // in sort
--[ 2021.10.25.18.22.32.112.0 ]--
r 34                 Insertion.sort(a);  // ins sort
--[ 2021.10.25.18.22.32.375.0 ]--
r 34                 Insertion.sort(a);  // inse sort
--[ 2021.10.25.18.22.32.665.0 ]--
r 34                 Insertion.sort(a);  // inser sort
--[ 2021.10.25.18.22.32.849.0 ]--
r 34                 Insertion.sort(a);  // insert sort
--[ 2021.10.25.18.22.32.981.0 ]--
r 34                 Insertion.sort(a);  // inserti sort
--[ 2021.10.25.18.22.33.003.0 ]--
r 34                 Insertion.sort(a);  // insertio sort
--[ 2021.10.25.18.22.33.094.0 ]--
r 34                 Insertion.sort(a);  // insertion sort
--[ 2021.10.25.18.48.02.773.0 ]--
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
r 40         
--[ 2021.10.25.18.48.03.447.0 ]--
- 40
--[ 2021.10.25.18.48.08.388.0 ]--
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
r 40 
--[ 2021.10.25.18.48.09.244.0 ]--
- 40
--[ 2021.10.25.20.13.02.334.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.20.24.20.347.0 ]--
:/src/EdgeCases.java
+ 19        
--[ 2021.10.25.20.24.21.709.0 ]--
+ 27         
--[ 2021.10.25.20.24.24.055.0 ]--
+ 35       
--[ 2021.10.25.20.24.25.190.0 ]--
+ 43        
--[ 2021.10.25.20.24.26.720.0 ]--
+ 51        
--[ 2021.10.25.20.24.43.941.0 ]--
r 19 
r 27 
r 35 
r 43 
r 51 
--[ 2021.10.25.20.24.45.653.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.20.24.50.398.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.20.25.25.898.0 ]--
+ 23         
--[ 2021.10.25.20.25.26.693.0 ]--
r 23         Double[] reversed = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.25.29.275.0 ]--
+ 25         
--[ 2021.10.25.20.25.29.919.0 ]--
r 25         Double[] reversed = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.25.31.239.0 ]--
+ 27         
--[ 2021.10.25.20.25.31.515.0 ]--
r 27         Double[] reversed = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.25.32.695.0 ]--
+ 28         
--[ 2021.10.25.20.25.33.001.0 ]--
r 28         Double[] reversed = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.25.33.760.0 ]--
+ 30         
--[ 2021.10.25.20.25.34.091.0 ]--
r 30         Double[] reversed = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.25.39.378.0 ]--
r 30         reversed = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.25.42.624.0 ]--
r 28         reversed = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.25.45.501.0 ]--
r 27         reversed = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.25.48.667.0 ]--
r 25         reversed = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.25.51.106.0 ]--
r 23         reversed = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.00.483.0 ]--
r 21         Double[] reversed1 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.02.021.0 ]--
r 22         Bubble.sort(reversed2);     // bubble sort
--[ 2021.10.25.20.26.05.345.0 ]--
r 22         Bubble.sort(reversed);     // bubble sort
--[ 2021.10.25.20.26.05.419.0 ]--
r 22         Bubble.sort(reversed1);     // bubble sort
--[ 2021.10.25.20.26.07.613.0 ]--
r 23         reversed1 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.11.284.0 ]--
r 24         Selection.sort(reversed2);  // selection sort
--[ 2021.10.25.20.26.16.598.0 ]--
r 23         reversed = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.16.758.0 ]--
r 23         reversed2 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.19.268.0 ]--
r 25         reversed3 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.24.691.0 ]--
r 26         Insertion.sort(reversed3);  // insertion sort
--[ 2021.10.25.20.26.29.164.0 ]--
r 27         
--[ 2021.10.25.20.26.29.777.0 ]--
- 27
--[ 2021.10.25.20.26.38.068.0 ]--
r 27         reversed4 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.39.400.0 ]--
r 28         Shell.sort(reversed4);      // Shellsort
--[ 2021.10.25.20.26.40.592.0 ]--
r 29         reversed5 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.41.810.0 ]--
r 30         Quick.sort(reversed5);      // quicksort
--[ 2021.10.25.20.26.46.522.0 ]--
r 23         Double[]reversed2 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.47.589.0 ]--
r 23         Double[] reversed2 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.50.147.0 ]--
r 25         Double[]reversed3 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.50.479.0 ]--
r 25         Double[] reversed3 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.52.221.0 ]--
r 27         Double[]reversed4 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.52.542.0 ]--
r 27         Double[] reversed4 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.54.337.0 ]--
r 29         Double[]reversed5 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.26.54.588.0 ]--
r 29         Double[] reversed5 = {4.0, 3.0, 2.0, 1.0, 0.0};
--[ 2021.10.25.20.27.02.030.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.20.28.08.170.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.20.28.34.709.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0, 45.0};
--[ 2021.10.25.20.28.36.377.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 0.0, 4.0, 5.0};
--[ 2021.10.25.20.28.42.105.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.20.28.54.191.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, .0, 4.0, 5.0};
--[ 2021.10.25.20.28.54.282.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 5.0, 4.0, 5.0};
--[ 2021.10.25.20.28.57.219.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 5.0, 4.0, .0};
--[ 2021.10.25.20.28.57.411.0 ]--
r 41         Double[] twoDistinct = {0.0, 0.0, 5.0, 4.0, 0.0};
--[ 2021.10.25.20.29.10.726.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.20.29.25.553.0 ]--
+ 43         
--[ 2021.10.25.20.29.25.791.0 ]--
r 43         Double[] twoDistinct = {0.0, 0.0, 5.0, 4.0, 0.0};
--[ 2021.10.25.20.29.27.309.0 ]--
+ 45         
--[ 2021.10.25.20.29.27.542.0 ]--
r 45         Double[] twoDistinct = {0.0, 0.0, 5.0, 4.0, 0.0};
--[ 2021.10.25.20.29.28.246.0 ]--
+ 47         
--[ 2021.10.25.20.29.28.479.0 ]--
r 47         Double[] twoDistinct = {0.0, 0.0, 5.0, 4.0, 0.0};
--[ 2021.10.25.20.29.29.414.0 ]--
+ 49         
--[ 2021.10.25.20.29.29.597.0 ]--
r 49         Double[] twoDistinct = {0.0, 0.0, 5.0, 4.0, 0.0};
--[ 2021.10.25.20.29.34.426.0 ]--
r 41         Double[] twoDistinct1 = {0.0, 0.0, 5.0, 4.0, 0.0};
--[ 2021.10.25.20.29.35.806.0 ]--
r 42         Bubble.sort(twoDistinct1);     // bubble sort
--[ 2021.10.25.20.29.36.709.0 ]--
r 43         Double[] twoDistinct2 = {0.0, 0.0, 5.0, 4.0, 0.0};
--[ 2021.10.25.20.29.37.610.0 ]--
r 44         Selection.sort(twoDistinct2);  // selection sort
--[ 2021.10.25.20.29.38.523.0 ]--
r 45         Double[] twoDistinct3 = {0.0, 0.0, 5.0, 4.0, 0.0};
--[ 2021.10.25.20.29.39.820.0 ]--
r 46         Insertion.sort(twoDistinct3);  // insertion sort
--[ 2021.10.25.20.29.41.001.0 ]--
r 47         Double[] twoDistinct4 = {0.0, 0.0, 5.0, 4.0, 0.0};
--[ 2021.10.25.20.29.41.885.0 ]--
r 48         Shell.sort(twoDistinct4);      // Shellsort
--[ 2021.10.25.20.29.43.028.0 ]--
r 49         Double[] twoDistinct5 = {0.0, 0.0, 5.0, 4.0, 0.0};
--[ 2021.10.25.20.29.43.855.0 ]--
r 50         Quick.sort(twoDistinct5);      // quicksort
--[ 2021.10.25.20.29.48.615.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.20.33.23.051.0 ]--
+ 14         
--[ 2021.10.25.20.34.17.249.0 ]--
r 14 
--[ 2021.10.25.20.34.23.019.0 ]--
r 68     
--[ 2021.10.25.20.34.23.541.0 ]--
- 68
--[ 2021.10.25.20.34.23.696.0 ]--
r 67         Quick.sort(size1);      // quicksor
--[ 2021.10.25.20.34.24.640.0 ]--
r 14         
+ 67         Quick.sort(size1);      // quicksort
r 68     }
--[ 2021.10.25.20.34.29.901.0 ]--
- 14
--[ 2021.10.25.20.34.30.666.0 ]--
+ 14         
--[ 2021.10.25.20.34.31.619.0 ]--
r 14 
- 67
r 67         Quick.sort(size1);      // quicksor
--[ 2021.10.25.20.34.33.367.0 ]--
r 14         
+ 67         Quick.sort(size1);      // quicksort
r 68     }
--[ 2021.10.25.20.34.38.461.0 ]--
r 14 
- 67
r 67         Quick.sort(size1);      // quicksor
--[ 2021.10.25.20.34.39.878.0 ]--
r 14         
+ 67         Quick.sort(size1);      // quicksort
r 68     }
--[ 2021.10.25.20.34.41.024.0 ]--
- 14
--[ 2021.10.25.20.35.58.280.0 ]--
:/src/QuickSortMedian5.java
+ 83         
--[ 2021.10.25.20.35.58.507.0 ]--
r 83         a
--[ 2021.10.25.20.35.58.946.0 ]--
r 83         a.
--[ 2021.10.25.20.36.00.689.0 ]--
r 83         a.m
--[ 2021.10.25.20.36.00.782.0 ]--
r 83         a.me
--[ 2021.10.25.20.36.00.918.0 ]--
r 83         a.med
--[ 2021.10.25.20.36.01.849.0 ]--
r 83         a.me
--[ 2021.10.25.20.36.01.999.0 ]--
r 83         a.m
--[ 2021.10.25.20.36.02.567.0 ]--
r 83         a.
--[ 2021.10.25.20.36.03.112.0 ]--
r 83         a.m
--[ 2021.10.25.20.36.04.214.0 ]--
r 83         a.
--[ 2021.10.25.20.36.04.344.0 ]--
r 83         a
--[ 2021.10.25.20.36.04.505.0 ]--
r 83         
--[ 2021.10.25.20.36.04.989.0 ]--
r 83         Q
--[ 2021.10.25.20.36.06.007.0 ]--
r 83         QuickSortMedian3
--[ 2021.10.25.20.36.06.896.0 ]--
r 83         QuickSortMedian
--[ 2021.10.25.20.36.07.189.0 ]--
r 83         QuickSortMedian5
--[ 2021.10.25.20.36.07.584.0 ]--
r 83         QuickSortMedian5.
--[ 2021.10.25.20.36.08.187.0 ]--
r 83         QuickSortMedian5.m
--[ 2021.10.25.20.36.08.613.0 ]--
r 83         QuickSortMedian5.me
--[ 2021.10.25.20.36.09.056.0 ]--
r 83         QuickSortMedian5.m
--[ 2021.10.25.20.36.09.205.0 ]--
r 83         QuickSortMedian5.
--[ 2021.10.25.20.36.10.163.0 ]--
r 83         QuickSortMedian5
--[ 2021.10.25.20.36.10.391.0 ]--
r 83         QuickSortMedian5.
--[ 2021.10.25.20.40.04.871.0 ]--
r 83         QuickSortMedian5.MedianOf5
--[ 2021.10.25.20.40.06.408.0 ]--
r 83         QuickSortMedian5.MedianOf5.
--[ 2021.10.25.20.40.07.776.0 ]--
r 83         QuickSortMedian5.MedianOf5
--[ 2021.10.25.20.40.07.868.0 ]--
r 83         QuickSortMedian5.MedianOf
--[ 2021.10.25.20.40.08.056.0 ]--
r 83         QuickSortMedian5.MedianO
--[ 2021.10.25.20.40.08.184.0 ]--
r 83         QuickSortMedian5.Median
--[ 2021.10.25.20.40.08.373.0 ]--
r 83         QuickSortMedian5.Media
--[ 2021.10.25.20.40.08.574.0 ]--
r 83         QuickSortMedian5.Medi
--[ 2021.10.25.20.40.08.738.0 ]--
r 83         QuickSortMedian5.Med
--[ 2021.10.25.20.40.08.892.0 ]--
r 83         QuickSortMedian5.Me
--[ 2021.10.25.20.40.09.053.0 ]--
r 83         QuickSortMedian5.M
--[ 2021.10.25.20.40.09.213.0 ]--
r 83         QuickSortMedian5.
--[ 2021.10.25.20.40.09.406.0 ]--
r 83         QuickSortMedian5
--[ 2021.10.25.20.40.10.302.0 ]--
r 83         QuickSortMedian
--[ 2021.10.25.20.40.10.808.0 ]--
r 83         QuickSortMedia
--[ 2021.10.25.20.40.10.889.0 ]--
r 83         QuickSortMedi
--[ 2021.10.25.20.40.10.977.0 ]--
r 83         QuickSortMed
--[ 2021.10.25.20.40.11.057.0 ]--
r 83         QuickSortMe
--[ 2021.10.25.20.40.11.144.0 ]--
r 83         QuickSortM
--[ 2021.10.25.20.40.11.223.0 ]--
r 83         QuickSort
--[ 2021.10.25.20.40.11.312.0 ]--
r 83         QuickSor
--[ 2021.10.25.20.40.11.390.0 ]--
r 83         QuickSo
--[ 2021.10.25.20.40.11.475.0 ]--
r 83         QuickS
--[ 2021.10.25.20.40.11.565.0 ]--
r 83         Quick
--[ 2021.10.25.20.40.11.639.0 ]--
r 83         Quic
--[ 2021.10.25.20.40.11.730.0 ]--
r 83         Qui
--[ 2021.10.25.20.40.11.816.0 ]--
r 83         Qu
--[ 2021.10.25.20.40.12.116.0 ]--
r 83         Q
--[ 2021.10.25.20.40.12.565.0 ]--
r 83         
--[ 2021.10.25.20.41.51.869.0 ]--
- 83
--[ 2021.10.25.20.42.16.605.0 ]--
:/src/QuickSortMedian3.java
- 62
- 62
r 62 
--[ 2021.10.25.20.42.17.172.0 ]--
- 62
--[ 2021.10.25.20.42.23.442.0 ]--
:/src/QuickSortMedian5.java
- 83
- 83
r 83 
--[ 2021.10.25.20.42.23.849.0 ]--
- 83
--[ 2021.10.25.20.42.29.913.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.20.42.43.274.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.20.43.32.995.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.21.27.27.551.0 ]--
r 30             Comparable a0 = a[i0]; 
--[ 2021.10.25.21.40.50.664.0 ]--
:/src/DoublingTest.java
+ 40         
--[ 2021.10.25.21.40.50.828.0 ]--
+ 40         StdOut.println();
+ 41         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 42             double average = 0;
+ 43             for (int j=0; j<5; j++) {
+ 44                 Double[] a = new Double[n];
+ 45                 for (int i=0; i<n; i++) {
+ 46                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 47                 }
+ 48                 Stopwatch timer = new Stopwatch();
+ 49                 Insertion.sort(a);  // insertion sort
+ 50                 average += timer.elapsedTime();
+ 51             }
+ 52             average /= 5;
+ 53             StdOut.printf("Insertion: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
r 54         }
--[ 2021.10.25.21.41.02.363.0 ]--
r 53             StdOut.printf("L: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.21.41.04.494.0 ]--
r 53             StdOut.printf("Li: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.21.41.04.580.0 ]--
r 53             StdOut.printf("Lin: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.21.41.04.733.0 ]--
r 53             StdOut.printf("Link: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.21.41.04.909.0 ]--
r 53             StdOut.printf("Linke: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.21.41.05.080.0 ]--
r 53             StdOut.printf("Linked: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.21.41.06.070.0 ]--
r 53             StdOut.printf("LinkedL: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.21.41.06.259.0 ]--
r 53             StdOut.printf("LinkedLi: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.21.41.06.706.0 ]--
r 53             StdOut.printf("LinkedLis: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.21.41.06.960.0 ]--
r 53             StdOut.printf("LinkedList: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.21.41.09.259.0 ]--
r 53             StdOut.printf("Linked List: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.21.41.15.429.0 ]--
r 49                 L.sort(a);  // insertion sort
--[ 2021.10.25.21.41.15.994.0 ]--
r 49                 Li.sort(a);  // insertion sort
--[ 2021.10.25.21.41.16.873.0 ]--
r 49                 LinkedList.sort(a);  // insertion sort
--[ 2021.10.25.21.51.47.813.0 ]--
:/src/QuickSortMedian5.java
r 30             Comparable a0 = a[i0];
--[ 2021.10.25.21.54.15.041.0 ]--
:/src/DoublingTest.java
r 49                 LinkedList<>.sort(a);  // insertion sort
--[ 2021.10.25.21.54.15.826.0 ]--
r 49                 LinkedList<D>.sort(a);  // insertion sort
--[ 2021.10.25.21.54.16.053.0 ]--
r 49                 LinkedList<Do>.sort(a);  // insertion sort
--[ 2021.10.25.21.54.16.106.0 ]--
r 49                 LinkedList<Dou>.sort(a);  // insertion sort
--[ 2021.10.25.21.54.17.158.0 ]--
r 49                 LinkedList<Double>.sort(a);  // insertion sort
--[ 2021.10.25.21.54.41.129.0 ]--
r 49                 LinkedList<Double> .sort(a);  // insertion sort
--[ 2021.10.25.21.54.42.176.0 ]--
r 49                 LinkedList<Double>. .sort(a);  // insertion sort
--[ 2021.10.25.21.55.43.390.0 ]--
r 49                 LinkedList<Double>.
--[ 2021.10.25.21.55.44.128.0 ]--
r 49                 LinkedList<Double>
--[ 2021.10.25.21.55.44.346.0 ]--
r 49                 LinkedList<Double>.
--[ 2021.10.25.21.55.50.272.0 ]--
r 49                 LinkedList<Double>.oddList
--[ 2021.10.25.21.55.50.282.0 ]--
r 49                 LinkedList<Double>.oddList()
--[ 2021.10.25.21.55.50.286.0 ]--
r 49                 LinkedList<Double>.oddList();
--[ 2021.10.25.21.55.57.719.0 ]--
r 49                 LinkedList<Double>.oddList(a);
--[ 2021.10.25.21.56.09.511.0 ]--
r 49                 LinkedList<Double>.oddList(a;
--[ 2021.10.25.21.56.09.664.0 ]--
r 49                 LinkedList<Double>.oddList(;
--[ 2021.10.25.21.56.09.809.0 ]--
r 49                 LinkedList<Double>.oddList;
--[ 2021.10.25.21.56.09.993.0 ]--
r 49                 LinkedList<Double>.oddLis;
--[ 2021.10.25.21.56.10.176.0 ]--
r 49                 LinkedList<Double>.oddLi;
--[ 2021.10.25.21.56.10.355.0 ]--
r 49                 LinkedList<Double>.oddL;
--[ 2021.10.25.21.56.10.534.0 ]--
r 49                 LinkedList<Double>.odd;
--[ 2021.10.25.21.56.10.736.0 ]--
r 49                 LinkedList<Double>.od;
--[ 2021.10.25.21.56.10.941.0 ]--
r 49                 LinkedList<Double>.o;
--[ 2021.10.25.21.56.11.165.0 ]--
r 49                 LinkedList<Double>.;
--[ 2021.10.25.21.56.11.587.0 ]--
r 49                 LinkedList<Double>;
--[ 2021.10.25.21.56.16.523.0 ]--
r 49                 LinkedList<Double> ;
--[ 2021.10.25.21.56.28.440.0 ]--
+ 48                 
--[ 2021.10.25.21.56.28.599.0 ]--
+ 48                 LinkedList<Double> linkedlist = new LinkedList<>(a);
r 49         linkedlist.sort();
--[ 2021.10.25.21.56.28.616.0 ]--
r 49                 linkedlist.sort();
--[ 2021.10.25.21.56.30.529.0 ]--
r 49                 
--[ 2021.10.25.21.56.32.301.0 ]--
r 51                 linkedlist.sort();
--[ 2021.10.25.21.56.33.963.0 ]--
- 49
--[ 2021.10.25.21.56.50.196.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.00.43.582.0 ]--
+ 56         
--[ 2021.10.25.22.00.44.263.0 ]--
+ 56         StdOut.println();
+ 57         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 58             double average = 0;
+ 59             for (int j=0; j<5; j++) {
+ 60                 Double[] a = new Double[n];
+ 61                 for (int i=0; i<n; i++) {
+ 62                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 63                 }
+ 64                 LinkedList<Double> linkedlist = new LinkedList<>(a);
+ 65                 Stopwatch timer = new Stopwatch();
+ 66                 linkedlist.sort();
+ 67                 average += timer.elapsedTime();
+ 68             }
+ 69             average /= 5;
+ 70             StdOut.printf("Linked List: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
r 71         }
--[ 2021.10.25.22.00.58.160.0 ]--
r 66                 Q.sort();
--[ 2021.10.25.22.00.58.328.0 ]--
r 66                 Qu.sort();
--[ 2021.10.25.22.01.00.561.0 ]--
r 66                 Quick.sort();
--[ 2021.10.25.22.01.04.090.0 ]--
r 66                 Quick.sort(a);
--[ 2021.10.25.22.01.35.454.0 ]--
r 70             StdOut.printf("Q List: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.01.35.678.0 ]--
r 70             StdOut.printf("Qu List: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.01.36.066.0 ]--
r 70             StdOut.printf("Qui List: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.01.36.147.0 ]--
r 70             StdOut.printf("Quic List: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.01.36.299.0 ]--
r 70             StdOut.printf("Quick List: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.01.37.799.0 ]--
r 70             StdOut.printf("Quick: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.01.43.604.0 ]--
+ 72         
--[ 2021.10.25.22.01.43.771.0 ]--
+ 72         StdOut.println();
+ 73         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 74             double average = 0;
+ 75             for (int j=0; j<5; j++) {
+ 76                 Double[] a = new Double[n];
+ 77                 for (int i=0; i<n; i++) {
+ 78                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 79                 }
+ 80                 LinkedList<Double> linkedlist = new LinkedList<>(a);
+ 81                 Stopwatch timer = new Stopwatch();
+ 82                 Quick.sort(a);
+ 83                 average += timer.elapsedTime();
+ 84             }
+ 85             average /= 5;
+ 86             StdOut.printf("Quick: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
r 87         }
--[ 2021.10.25.22.01.44.320.0 ]--
+ 88         
--[ 2021.10.25.22.01.44.477.0 ]--
+ 88         StdOut.println();
+ 89         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 90             double average = 0;
+ 91             for (int j=0; j<5; j++) {
+ 92                 Double[] a = new Double[n];
+ 93                 for (int i=0; i<n; i++) {
+ 94                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 95                 }
+ 96                 LinkedList<Double> linkedlist = new LinkedList<>(a);
+ 97                 Stopwatch timer = new Stopwatch();
+ 98                 Quick.sort(a);
+ 99                 average += timer.elapsedTime();
+ 100             }
+ 101             average /= 5;
+ 102             StdOut.printf("Quick: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
r 103         }
--[ 2021.10.25.22.01.48.674.0 ]--
r 102             StdOut.printf("M: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.01.48.918.0 ]--
r 102             StdOut.printf("Me: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.01.49.101.0 ]--
r 102             StdOut.printf("Med: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.01.49.207.0 ]--
r 102             StdOut.printf("Medi: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.01.49.361.0 ]--
r 102             StdOut.printf("Media: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.01.49.586.0 ]--
r 102             StdOut.printf("Median: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.01.50.318.0 ]--
r 102             StdOut.printf("Median5: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.01.57.360.0 ]--
- 80
--[ 2021.10.25.22.01.59.840.0 ]--
- 95
--[ 2021.10.25.22.02.02.667.0 ]--
r 96                 Q.sort(a);
--[ 2021.10.25.22.02.02.886.0 ]--
r 96                 Qu.sort(a);
--[ 2021.10.25.22.02.04.408.0 ]--
r 96                 QuickSortMedian5.sort(a);
--[ 2021.10.25.22.02.08.190.0 ]--
r 85             StdOut.printf("Median5: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.02.09.047.0 ]--
r 85             StdOut.printf("Median: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.02.09.314.0 ]--
r 85             StdOut.printf("Median3: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.22.02.11.610.0 ]--
r 81                 Q.sort(a);
--[ 2021.10.25.22.02.13.105.0 ]--
r 81                 QuickSortMedian3.sort(a);
--[ 2021.10.25.22.02.19.935.0 ]--
- 64
--[ 2021.10.25.22.04.03.749.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.18.01.168.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.18.22.072.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.19.09.873.0 ]--
:/src/QuickSortMedian5.java
r 35     
--[ 2021.10.25.22.19.10.237.0 ]--
r 35         
--[ 2021.10.25.22.19.10.452.0 ]--
r 35             
--[ 2021.10.25.22.19.10.750.0 ]--
r 35                 
--[ 2021.10.25.22.19.12.017.0 ]--
r 35             
--[ 2021.10.25.22.19.12.317.0 ]--
r 35             Comparable[] arrayOf3 = new Double[3];
--[ 2021.10.25.22.19.21.776.0 ]--
r 35             Comparable[] arrayOf3 = new Double[];
--[ 2021.10.25.22.19.21.870.0 ]--
r 35             Comparable[] arrayOf3 = new Double[5];
--[ 2021.10.25.22.19.25.189.0 ]--
r 35             Comparable[] arrayOf = new Double[5];
--[ 2021.10.25.22.19.25.929.0 ]--
r 35             Comparable[] arrayOf5 = new Double[5];
--[ 2021.10.25.22.19.26.960.0 ]--
+ 35             
--[ 2021.10.25.22.19.29.232.0 ]--
+ 37             
--[ 2021.10.25.22.19.30.633.0 ]--
r 37             f
--[ 2021.10.25.22.19.30.849.0 ]--
r 37             for
--[ 2021.10.25.22.19.30.902.0 ]--
r 37             for 
--[ 2021.10.25.22.19.32.338.0 ]--
r 37             for ()
--[ 2021.10.25.22.19.32.589.0 ]--
r 37             for (i)
--[ 2021.10.25.22.19.32.665.0 ]--
r 37             for (in)
--[ 2021.10.25.22.19.32.802.0 ]--
r 37             for (int)
--[ 2021.10.25.22.19.33.361.0 ]--
r 37             for (int )
--[ 2021.10.25.22.19.33.845.0 ]--
r 37             for (int i)
--[ 2021.10.25.22.19.34.347.0 ]--
r 37             for (int i=)
--[ 2021.10.25.22.19.34.768.0 ]--
r 37             for (int i=5)
--[ 2021.10.25.22.19.35.095.0 ]--
r 37             for (int i=5;)
--[ 2021.10.25.22.19.35.256.0 ]--
r 37             for (int i=5; )
--[ 2021.10.25.22.19.35.457.0 ]--
r 37             for (int i=5; i)
--[ 2021.10.25.22.19.36.411.0 ]--
r 37             for (int i=5; i<)
--[ 2021.10.25.22.19.37.759.0 ]--
r 37             for (int i=5; i<5)
--[ 2021.10.25.22.19.38.013.0 ]--
r 37             for (int i=5; i<5 )
--[ 2021.10.25.22.19.38.608.0 ]--
r 37             for (int i=5; i<5 i)
--[ 2021.10.25.22.19.39.058.0 ]--
r 37             for (int i=5; i<5 i+)
--[ 2021.10.25.22.19.39.174.0 ]--
r 37             for (int i=5; i<5 i++)
--[ 2021.10.25.22.19.39.849.0 ]--
r 37             for (int i=5; i<5 i++) 
--[ 2021.10.25.22.19.40.267.0 ]--
r 37             for (int i=5; i<5 i++) {
--[ 2021.10.25.22.19.40.506.0 ]--
+ 38 
+ 39 }
--[ 2021.10.25.22.19.40.517.0 ]--
r 39             }
--[ 2021.10.25.22.19.40.537.0 ]--
r 38                 
--[ 2021.10.25.22.19.42.110.0 ]--
r 38                 a
--[ 2021.10.25.22.19.42.875.0 ]--
r 38                 ar
--[ 2021.10.25.22.19.43.459.0 ]--
r 38                 arrayOf5
--[ 2021.10.25.22.19.47.948.0 ]--
r 38                 arrayOf5[]
--[ 2021.10.25.22.19.48.916.0 ]--
r 38                 arrayOf5[i]
--[ 2021.10.25.22.19.49.776.0 ]--
r 38                 arrayOf5[i] 
--[ 2021.10.25.22.19.50.236.0 ]--
r 38                 arrayOf5[i] =
--[ 2021.10.25.22.19.50.346.0 ]--
r 38                 arrayOf5[i] = 
--[ 2021.10.25.22.20.05.688.0 ]--
r 35 
--[ 2021.10.25.22.20.44.272.0 ]--
r 38                 arrayOf5[i] = a
--[ 2021.10.25.22.20.45.215.0 ]--
r 38                 arrayOf5[i] = a[]
--[ 2021.10.25.22.20.47.000.0 ]--
r 38                 arrayOf5[i] = a[i]
--[ 2021.10.25.22.20.47.801.0 ]--
r 38                 arrayOf5[i] = a[in]
--[ 2021.10.25.22.20.47.982.0 ]--
r 38                 arrayOf5[i] = a[ind]
--[ 2021.10.25.22.20.48.539.0 ]--
r 38                 arrayOf5[i] = a[indices]
--[ 2021.10.25.22.20.49.817.0 ]--
r 38                 arrayOf5[i] = a[indices[]]
--[ 2021.10.25.22.20.50.154.0 ]--
r 38                 arrayOf5[i] = a[indices[0]]
--[ 2021.10.25.22.20.51.622.0 ]--
r 38                 arrayOf5[i] = a[indices[0]];
--[ 2021.10.25.22.20.57.846.0 ]--
r 37             for (int i=5; i<5; i++) {
--[ 2021.10.25.22.21.34.348.0 ]--
r 38                 arrayOf5[i] = a[indices[]];
--[ 2021.10.25.22.21.34.686.0 ]--
r 38                 arrayOf5[i] = a[indices[i]];
--[ 2021.10.25.22.21.46.900.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.22.02.999.0 ]--
r 41             Comparable maxNum = Collections.max(Arrays.asList(ar));
--[ 2021.10.25.22.22.03.619.0 ]--
r 41             Comparable maxNum = Collections.max(Arrays.asList(arrayOf5));
--[ 2021.10.25.22.22.05.549.0 ]--
r 42             Comparable minNum = Collections.min(Arrays.asList());
--[ 2021.10.25.22.22.05.687.0 ]--
r 42             Comparable minNum = Collections.min(Arrays.asList(a));
--[ 2021.10.25.22.22.05.786.0 ]--
r 42             Comparable minNum = Collections.min(Arrays.asList(ar));
--[ 2021.10.25.22.22.06.488.0 ]--
r 42             Comparable minNum = Collections.min(Arrays.asList(arrayOf5));
--[ 2021.10.25.22.22.10.570.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.22.26.327.0 ]--
r 46                if ([i] != maxNum && a[i] != minNum) {
--[ 2021.10.25.22.22.26.472.0 ]--
r 46                if (a[i] != maxNum && a[i] != minNum) {
--[ 2021.10.25.22.22.26.771.0 ]--
r 46                if (ar[i] != maxNum && a[i] != minNum) {
--[ 2021.10.25.22.22.27.343.0 ]--
r 46                if (arrayOf3[i] != maxNum && a[i] != minNum) {
--[ 2021.10.25.22.22.27.830.0 ]--
r 46                if (arrayOf[i] != maxNum && a[i] != minNum) {
--[ 2021.10.25.22.22.28.696.0 ]--
r 46                if (arrayOf5[i] != maxNum && a[i] != minNum) {
--[ 2021.10.25.22.22.35.113.0 ]--
r 46                if (arrayOf5[i] != maxNum && arrayOf5[i] != minNum) {
--[ 2021.10.25.22.22.36.069.0 ]--
r 47                    arrayOf3[count] = arrayOf5[i];
--[ 2021.10.25.22.22.50.279.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.22.59.863.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.23.34.307.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.23.48.041.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.24.25.130.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.25.02.603.0 ]--
r 38                 arrayOf5[i] = a0;
--[ 2021.10.25.22.25.04.736.0 ]--
+ 39                 
--[ 2021.10.25.22.25.08.292.0 ]--
r 39 
--[ 2021.10.25.22.25.15.146.0 ]--
r 39     
--[ 2021.10.25.22.25.15.509.0 ]--
r 39         
--[ 2021.10.25.22.25.15.744.0 ]--
r 39             
--[ 2021.10.25.22.25.15.933.0 ]--
r 39                 
--[ 2021.10.25.22.25.16.673.0 ]--
r 39                 arrayOf5[i] = a0;
--[ 2021.10.25.22.25.17.300.0 ]--
+ 40                 
--[ 2021.10.25.22.25.17.494.0 ]--
r 40                 arrayOf5[i] = a0;
--[ 2021.10.25.22.25.17.693.0 ]--
+ 41                 
--[ 2021.10.25.22.25.17.838.0 ]--
r 41                 arrayOf5[i] = a0;
--[ 2021.10.25.22.25.17.928.0 ]--
+ 42                 
--[ 2021.10.25.22.25.18.325.0 ]--
r 41                 arrayOf5[i] = a0;arrayOf5[i] = a0;
--[ 2021.10.25.22.25.18.431.0 ]--
+ 42                 
--[ 2021.10.25.22.25.22.598.0 ]--
+ 38                 arrayOf5[i] = a0;
r 42                 arrayOf5[i] = a0;
--[ 2021.10.25.22.25.24.222.0 ]--
- 43
--[ 2021.10.25.22.25.24.333.0 ]--
- 43
--[ 2021.10.25.22.25.25.922.0 ]--
r 42                 arrayOf5[i] = a;
--[ 2021.10.25.22.25.26.352.0 ]--
r 42                 arrayOf5[i] = a4;
--[ 2021.10.25.22.25.26.849.0 ]--
r 41                 arrayOf5[i] = a;
--[ 2021.10.25.22.25.26.900.0 ]--
r 41                 arrayOf5[i] = a3;
--[ 2021.10.25.22.25.27.463.0 ]--
r 40                 arrayOf5[i] = a;
--[ 2021.10.25.22.25.27.582.0 ]--
r 40                 arrayOf5[i] = a2;
--[ 2021.10.25.22.25.29.161.0 ]--
r 39                 arrayOf5[i] = a;
--[ 2021.10.25.22.25.29.287.0 ]--
r 39                 arrayOf5[i] = a1;
--[ 2021.10.25.22.25.33.307.0 ]--
r 38                 arrayOf5[] = a0;
--[ 2021.10.25.22.25.33.548.0 ]--
r 38                 arrayOf5[0] = a0;
--[ 2021.10.25.22.25.34.189.0 ]--
r 39                 arrayOf5[] = a1;
--[ 2021.10.25.22.25.34.603.0 ]--
r 39                 arrayOf5[1] = a1;
--[ 2021.10.25.22.25.35.055.0 ]--
r 40                 arrayOf5[] = a2;
--[ 2021.10.25.22.25.35.189.0 ]--
r 40                 arrayOf5[2] = a2;
--[ 2021.10.25.22.25.35.710.0 ]--
r 41                 arrayOf5[] = a3;
--[ 2021.10.25.22.25.35.834.0 ]--
r 41                 arrayOf5[3] = a3;
--[ 2021.10.25.22.25.36.310.0 ]--
r 42                 arrayOf5[] = a4;
--[ 2021.10.25.22.25.36.792.0 ]--
r 42                 arrayOf5[4] = a4;
--[ 2021.10.25.22.25.39.514.0 ]--
- 43
--[ 2021.10.25.22.25.40.339.0 ]--
+ 43 
--[ 2021.10.25.22.25.41.864.0 ]--
- 37
--[ 2021.10.25.22.25.44.971.0 ]--
r 37             arrayOf5[0] = a0;
r 38             arrayOf5[1] = a1;
r 39             arrayOf5[2] = a2;
r 40             arrayOf5[3] = a3;
r 41             arrayOf5[4] = a4;
--[ 2021.10.25.22.25.49.324.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.26.35.535.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.31.04.611.0 ]--
r 56             a1 = arrayOf3[1]; 
--[ 2021.10.25.22.32.32.075.0 ]--
r 56             a1 = arrayOf3[1];
--[ 2021.10.25.22.33.01.817.0 ]--
+ 54             
--[ 2021.10.25.22.33.03.763.0 ]--
+ 54             
--[ 2021.10.25.22.33.04.091.0 ]--
r 55             i
--[ 2021.10.25.22.33.04.144.0 ]--
r 55             if
--[ 2021.10.25.22.33.04.280.0 ]--
r 55             if 
--[ 2021.10.25.22.33.05.426.0 ]--
r 55             if ()
--[ 2021.10.25.22.34.16.161.0 ]--
+ 35             
--[ 2021.10.25.22.34.16.309.0 ]--
+ 35             
--[ 2021.10.25.22.34.16.429.0 ]--
+ 35             
--[ 2021.10.25.22.34.17.864.0 ]--
r 36             i
--[ 2021.10.25.22.34.17.926.0 ]--
r 36             if
--[ 2021.10.25.22.34.18.655.0 ]--
r 36             i
--[ 2021.10.25.22.34.18.795.0 ]--
r 36             
--[ 2021.10.25.22.34.26.353.0 ]--
+ 36             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
+ 37                 return i0;
r 38             }
--[ 2021.10.25.22.34.26.362.0 ]--
r 35 
--[ 2021.10.25.22.35.38.550.0 ]--
r 36             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) = 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.22.35.39.015.0 ]--
r 36             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.22.35.50.133.0 ]--
r 36             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0) && a0.compareTo(a2) <= 0)|| (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.22.36.00.271.0 ]--
r 36             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) <= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.22.36.00.693.0 ]--
r 36             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) = 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.22.36.00.903.0 ]--
r 36             if ((a0.compareTo(a1) <= 0 && a0.compareTo(a2) >= 0) || (a0.compareTo(a1) >= 0 && a0.compareTo(a2) <= 0)) {
--[ 2021.10.25.22.36.01.278.0 ]--
- 35
- 35
r 35             
r 36             
--[ 2021.10.25.22.36.01.474.0 ]--
r 36             if
--[ 2021.10.25.22.36.01.928.0 ]--
r 36             
--[ 2021.10.25.22.36.02.678.0 ]--
- 35
--[ 2021.10.25.22.36.03.036.0 ]--
- 35
--[ 2021.10.25.22.36.03.515.0 ]--
- 35
--[ 2021.10.25.22.36.13.374.0 ]--
r 54 
--[ 2021.10.25.22.36.33.797.0 ]--
- 55
--[ 2021.10.25.22.36.34.255.0 ]--
- 54
--[ 2021.10.25.22.36.43.227.0 ]--
+ 49                if 
r 50                (arrayOf5[i] != maxNum && arrayOf5[i] != minNum) {
--[ 2021.10.25.22.36.57.053.0 ]--
r 49                if ()
--[ 2021.10.25.22.36.59.263.0 ]--
r 49                if (a)
--[ 2021.10.25.22.36.59.849.0 ]--
r 49                if ()
--[ 2021.10.25.22.37.08.330.0 ]--
r 49                if (arrayOf5[i] != maxNum)
--[ 2021.10.25.22.37.09.815.0 ]--
r 49                if (arrayOf5[i] != maxNum) 
--[ 2021.10.25.22.37.10.267.0 ]--
r 49                if (arrayOf5[i] != maxNum) {
--[ 2021.10.25.22.37.10.558.0 ]--
+ 50 
+ 51 }
--[ 2021.10.25.22.37.10.566.0 ]--
r 51                }
--[ 2021.10.25.22.37.10.586.0 ]--
r 50                    
--[ 2021.10.25.22.37.12.189.0 ]--
r 51                } 
--[ 2021.10.25.22.37.12.574.0 ]--
r 51                } e
--[ 2021.10.25.22.37.12.776.0 ]--
r 51                } el
--[ 2021.10.25.22.37.12.858.0 ]--
r 51                } els
--[ 2021.10.25.22.37.13.082.0 ]--
r 51                } else
--[ 2021.10.25.22.37.13.161.0 ]--
r 51                } else 
--[ 2021.10.25.22.37.13.310.0 ]--
r 51                } else i
--[ 2021.10.25.22.37.13.493.0 ]--
r 51                } else if
--[ 2021.10.25.22.37.14.215.0 ]--
r 51                } else if 
--[ 2021.10.25.22.37.14.783.0 ]--
r 51                } else if ()
--[ 2021.10.25.22.37.23.611.0 ]--
r 51                } else if (arrayOf5[i] != maxNum) {)
--[ 2021.10.25.22.37.25.850.0 ]--
r 51                } else if (arrayOf5[i] != maxNum) {
--[ 2021.10.25.22.37.27.038.0 ]--
+ 52 
+ 53 }
--[ 2021.10.25.22.37.27.048.0 ]--
r 53                }
--[ 2021.10.25.22.37.27.083.0 ]--
r 52                    
--[ 2021.10.25.22.37.28.825.0 ]--
r 53                } 
--[ 2021.10.25.22.37.29.235.0 ]--
r 53                } e
--[ 2021.10.25.22.37.29.618.0 ]--
r 53                } el
--[ 2021.10.25.22.37.30.204.0 ]--
r 53                } else
--[ 2021.10.25.22.37.30.214.0 ]--
r 53                } else 
--[ 2021.10.25.22.37.31.318.0 ]--
r 53                } else {
--[ 2021.10.25.22.37.35.760.0 ]--
r 54                (arrayOf5[i] != maxNum && arrayOf5[i] != minNum) 
--[ 2021.10.25.22.37.35.973.0 ]--
r 54                (arrayOf5[i] != maxNum && arrayOf5[i] != minNum)
--[ 2021.10.25.22.37.41.036.0 ]--
r 54 
--[ 2021.10.25.22.37.41.506.0 ]--
- 54
--[ 2021.10.25.22.37.49.176.0 ]--
+ 48             
--[ 2021.10.25.22.37.52.059.0 ]--
r 48             b
--[ 2021.10.25.22.37.52.174.0 ]--
r 48             bo
--[ 2021.10.25.22.37.52.319.0 ]--
r 48             boo
--[ 2021.10.25.22.37.52.471.0 ]--
r 48             bool
--[ 2021.10.25.22.37.52.522.0 ]--
r 48             boole
--[ 2021.10.25.22.37.52.774.0 ]--
r 48             boolea
--[ 2021.10.25.22.37.52.875.0 ]--
r 48             boolean
--[ 2021.10.25.22.37.53.008.0 ]--
r 48             boolean 
--[ 2021.10.25.22.37.53.483.0 ]--
r 48             boolean m
--[ 2021.10.25.22.37.53.529.0 ]--
r 48             boolean ma
--[ 2021.10.25.22.37.53.955.0 ]--
r 48             boolean max
--[ 2021.10.25.22.37.55.575.0 ]--
r 48             boolean maxR
--[ 2021.10.25.22.37.55.746.0 ]--
r 48             boolean maxRe
--[ 2021.10.25.22.37.55.849.0 ]--
r 48             boolean maxRem
--[ 2021.10.25.22.37.55.971.0 ]--
r 48             boolean maxRemo
--[ 2021.10.25.22.37.56.029.0 ]--
r 48             boolean maxRemov
--[ 2021.10.25.22.37.56.222.0 ]--
r 48             boolean maxRemove
--[ 2021.10.25.22.37.56.370.0 ]--
r 48             boolean maxRemoved
--[ 2021.10.25.22.37.56.925.0 ]--
r 48             boolean maxRemoved 
--[ 2021.10.25.22.37.57.208.0 ]--
r 48             boolean maxRemoved =
--[ 2021.10.25.22.37.57.283.0 ]--
r 48             boolean maxRemoved = 
--[ 2021.10.25.22.37.57.782.0 ]--
r 48             boolean maxRemoved = f
--[ 2021.10.25.22.37.58.001.0 ]--
r 48             boolean maxRemoved = fa
--[ 2021.10.25.22.37.58.073.0 ]--
r 48             boolean maxRemoved = fal
--[ 2021.10.25.22.37.58.192.0 ]--
r 48             boolean maxRemoved = fals
--[ 2021.10.25.22.37.58.472.0 ]--
r 48             boolean maxRemoved = false
--[ 2021.10.25.22.37.58.911.0 ]--
r 48             boolean maxRemoved = false;
--[ 2021.10.25.22.37.59.404.0 ]--
+ 49             
--[ 2021.10.25.22.38.00.244.0 ]--
r 49             b
--[ 2021.10.25.22.38.00.369.0 ]--
r 49             bo
--[ 2021.10.25.22.38.00.529.0 ]--
r 49             boo
--[ 2021.10.25.22.38.00.875.0 ]--
r 49             bo
--[ 2021.10.25.22.38.01.007.0 ]--
r 49             b
--[ 2021.10.25.22.38.01.168.0 ]--
r 49             
--[ 2021.10.25.22.38.03.184.0 ]--
r 49             boolean maxRemoved = false;
--[ 2021.10.25.22.38.07.139.0 ]--
r 49             boolean maRemoved = false;
--[ 2021.10.25.22.38.07.264.0 ]--
r 49             boolean mRemoved = false;
--[ 2021.10.25.22.38.08.026.0 ]--
r 49             boolean miRemoved = false;
--[ 2021.10.25.22.38.08.092.0 ]--
r 49             boolean minRemoved = false;
--[ 2021.10.25.22.38.18.566.0 ]--
r 51                if (arrayOf5[i] != maxNum ) {
--[ 2021.10.25.22.38.19.265.0 ]--
r 51                if (arrayOf5[i] != maxNum |) {
--[ 2021.10.25.22.38.19.386.0 ]--
r 51                if (arrayOf5[i] != maxNum ||) {
--[ 2021.10.25.22.38.19.636.0 ]--
r 51                if (arrayOf5[i] != maxNum || ) {
--[ 2021.10.25.22.38.20.695.0 ]--
r 51                if (arrayOf5[i] != maxNum || m) {
--[ 2021.10.25.22.38.20.837.0 ]--
r 51                if (arrayOf5[i] != maxNum || ma) {
--[ 2021.10.25.22.38.21.457.0 ]--
r 51                if (arrayOf5[i] != maxNum || maxRemoved) {
--[ 2021.10.25.22.38.24.167.0 ]--
r 51                if (arrayOf5[i] != maxNum || !maxRemoved) {
--[ 2021.10.25.22.38.29.379.0 ]--
r 51                if (arrayOf5[i] != maxNum || maxRemoved) {
--[ 2021.10.25.22.38.33.819.0 ]--
r 51                if (arrayOf5[i] != maxNum || maxRemoved ) {
--[ 2021.10.25.22.38.34.040.0 ]--
r 51                if (arrayOf5[i] != maxNum || maxRemoved =) {
--[ 2021.10.25.22.38.34.152.0 ]--
r 51                if (arrayOf5[i] != maxNum || maxRemoved ==) {
--[ 2021.10.25.22.38.34.340.0 ]--
r 51                if (arrayOf5[i] != maxNum || maxRemoved == ) {
--[ 2021.10.25.22.38.34.431.0 ]--
r 51                if (arrayOf5[i] != maxNum || maxRemoved == f) {
--[ 2021.10.25.22.38.34.535.0 ]--
r 51                if (arrayOf5[i] != maxNum || maxRemoved == fa) {
--[ 2021.10.25.22.38.34.606.0 ]--
r 51                if (arrayOf5[i] != maxNum || maxRemoved == fal) {
--[ 2021.10.25.22.38.34.779.0 ]--
r 51                if (arrayOf5[i] != maxNum || maxRemoved == fals) {
--[ 2021.10.25.22.38.35.031.0 ]--
r 51                if (arrayOf5[i] != maxNum || maxRemoved == false) {
--[ 2021.10.25.22.38.37.970.0 ]--
r 51                if (arrayOf5[i] != maxNum || maxRemoved) {
--[ 2021.10.25.22.38.38.476.0 ]--
r 51                if (arrayOf5[i] != maxNum || !maxRemoved) {
--[ 2021.10.25.22.38.43.952.0 ]--
r 53                } else if (arrayOf5[i] != maxNum ) {
--[ 2021.10.25.22.38.44.736.0 ]--
r 53                } else if (arrayOf5[i] != maxNum |) {
--[ 2021.10.25.22.38.44.830.0 ]--
r 53                } else if (arrayOf5[i] != maxNum ||) {
--[ 2021.10.25.22.38.45.369.0 ]--
r 53                } else if (arrayOf5[i] != maxNum || ) {
--[ 2021.10.25.22.38.46.450.0 ]--
r 53                } else if (arrayOf5[i] != maxNum || !) {
--[ 2021.10.25.22.38.46.820.0 ]--
r 53                } else if (arrayOf5[i] != maxNum || !m) {
--[ 2021.10.25.22.38.47.027.0 ]--
r 53                } else if (arrayOf5[i] != maxNum || !mi) {
--[ 2021.10.25.22.38.47.140.0 ]--
r 53                } else if (arrayOf5[i] != maxNum || !min) {
--[ 2021.10.25.22.38.47.719.0 ]--
r 53                } else if (arrayOf5[i] != maxNum || !minRemoved) {
--[ 2021.10.25.22.38.50.816.0 ]--
r 52 
r 54 
--[ 2021.10.25.22.38.54.690.0 ]--
r 52     
--[ 2021.10.25.22.38.55.042.0 ]--
r 52         
--[ 2021.10.25.22.38.55.300.0 ]--
r 52             
--[ 2021.10.25.22.38.55.517.0 ]--
r 52                 
--[ 2021.10.25.22.38.55.781.0 ]--
r 52                     
--[ 2021.10.25.22.38.56.999.0 ]--
r 52                     m
--[ 2021.10.25.22.38.57.179.0 ]--
r 52                     ma
--[ 2021.10.25.22.38.57.713.0 ]--
r 52                     maxRemoved
--[ 2021.10.25.22.38.58.285.0 ]--
r 52                     maxRemoved 
--[ 2021.10.25.22.38.58.529.0 ]--
r 52                     maxRemoved =
--[ 2021.10.25.22.38.58.633.0 ]--
r 52                     maxRemoved = 
--[ 2021.10.25.22.38.59.064.0 ]--
r 52                     maxRemoved = t
--[ 2021.10.25.22.38.59.220.0 ]--
r 52                     maxRemoved = tr
--[ 2021.10.25.22.38.59.681.0 ]--
r 52                     maxRemoved = true
--[ 2021.10.25.22.38.59.937.0 ]--
r 52                     maxRemoved = true;
--[ 2021.10.25.22.39.03.006.0 ]--
r 54     
--[ 2021.10.25.22.39.03.222.0 ]--
r 54         
--[ 2021.10.25.22.39.03.378.0 ]--
r 54             
--[ 2021.10.25.22.39.03.528.0 ]--
r 54                 
--[ 2021.10.25.22.39.03.737.0 ]--
r 54                     
--[ 2021.10.25.22.39.04.262.0 ]--
r 54                     maxRemoved = true;
--[ 2021.10.25.22.39.04.271.0 ]--
r 54                    maxRemoved = true;
--[ 2021.10.25.22.39.06.086.0 ]--
r 54                    maRemoved = true;
--[ 2021.10.25.22.39.06.196.0 ]--
r 54                    mRemoved = true;
--[ 2021.10.25.22.39.06.690.0 ]--
r 54                    miRemoved = true;
--[ 2021.10.25.22.39.06.830.0 ]--
r 54                    minRemoved = true;
--[ 2021.10.25.22.39.27.531.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.39.42.393.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.40.45.092.0 ]--
r 51                if (arrayOf5[i] = maxNum || !maxRemoved) {
--[ 2021.10.25.22.40.45.169.0 ]--
r 51                if (arrayOf5[i] == maxNum || !maxRemoved) {
--[ 2021.10.25.22.40.48.833.0 ]--
r 53                } else if (arrayOf5[i] = maxNum || !minRemoved) {
--[ 2021.10.25.22.40.49.128.0 ]--
r 53                } else if (arrayOf5[i] == maxNum || !minRemoved) {
--[ 2021.10.25.22.40.51.131.0 ]--
r 53                } else if (arrayOf5[i] == maNum || !minRemoved) {
--[ 2021.10.25.22.40.51.248.0 ]--
r 53                } else if (arrayOf5[i] == mNum || !minRemoved) {
--[ 2021.10.25.22.40.51.792.0 ]--
r 53                } else if (arrayOf5[i] == miNum || !minRemoved) {
--[ 2021.10.25.22.40.51.888.0 ]--
r 53                } else if (arrayOf5[i] == minNum || !minRemoved) {
--[ 2021.10.25.22.40.56.740.0 ]--
r 51                if (arrayOf5[i] == maxNum & !maxRemoved) {
--[ 2021.10.25.22.40.56.850.0 ]--
r 51                if (arrayOf5[i] == maxNum && !maxRemoved) {
--[ 2021.10.25.22.40.59.582.0 ]--
r 53                } else if (arrayOf5[i] == minNum & !minRemoved) {
--[ 2021.10.25.22.40.59.708.0 ]--
r 53                } else if (arrayOf5[i] == minNum && !minRemoved) {
--[ 2021.10.25.22.41.06.820.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.22.58.39.061.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.23.08.31.641.0 ]--
:/src/DoublingTest.java
+ 40         
--[ 2021.10.25.23.08.31.915.0 ]--
+ 40         StdOut.println();
+ 41         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 42             double average = 0;
+ 43             for (int j=0; j<5; j++) {
+ 44                 Double[] a = new Double[n];
+ 45                 for (int i=0; i<n; i++) {
+ 46                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 47                 }
+ 48                 Stopwatch timer = new Stopwatch();
+ 49                 Insertion.sort(a);  // insertion sort
+ 50                 average += timer.elapsedTime();
+ 51             }
+ 52             average /= 5;
+ 53             StdOut.printf("Insertion: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
r 54         }
--[ 2021.10.25.23.08.37.429.0 ]--
r 49                 S.sort(a);  // insertion sort
--[ 2021.10.25.23.08.38.236.0 ]--
r 49                 Sh.sort(a);  // insertion sort
--[ 2021.10.25.23.08.38.847.0 ]--
r 49                 Shell.sort(a);  // insertion sort
--[ 2021.10.25.23.08.41.117.0 ]--
r 49                 Shell.sort(a);  
--[ 2021.10.25.23.08.41.222.0 ]--
r 49                 Shell.sort(a); 
--[ 2021.10.25.23.08.41.660.0 ]--
r 49                 Shell.sort(a);
--[ 2021.10.25.23.08.53.226.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.23.08.54.845.0 ]--
r 53             StdOut.printf("S: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.23.08.54.987.0 ]--
r 53             StdOut.printf("Sh: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.23.08.55.064.0 ]--
r 53             StdOut.printf("She: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.23.08.55.181.0 ]--
r 53             StdOut.printf("Shel: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.23.08.55.282.0 ]--
r 53             StdOut.printf("Shell: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.23.09.00.373.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.23.09.39.703.0 ]--
r 49                 Shel.sort(a);
--[ 2021.10.25.23.09.40.302.0 ]--
r 49                 Shell.sort(a);
--[ 2021.10.25.23.10.09.934.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.23.10.40.675.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.23.13.01.949.0 ]--
r 13             for (int j=0; j<; j++) {
--[ 2021.10.25.23.13.07.983.0 ]--
r 13             for (int j=0; j<1; j++) {
--[ 2021.10.25.23.13.08.097.0 ]--
r 13             for (int j=0; j<10; j++) {
--[ 2021.10.25.23.13.08.234.0 ]--
r 13             for (int j=0; j<100; j++) {
--[ 2021.10.25.23.13.11.550.0 ]--
r 28             for (int j=0; j<; j++) {
--[ 2021.10.25.23.13.11.726.0 ]--
r 28             for (int j=0; j<1; j++) {
--[ 2021.10.25.23.13.11.863.0 ]--
r 28             for (int j=0; j<10; j++) {
--[ 2021.10.25.23.13.12.004.0 ]--
r 28             for (int j=0; j<100; j++) {
--[ 2021.10.25.23.13.18.208.0 ]--
r 43             for (int j=0; j<; j++) {
--[ 2021.10.25.23.13.18.427.0 ]--
r 43             for (int j=0; j<1; j++) {
--[ 2021.10.25.23.13.18.689.0 ]--
r 43             for (int j=0; j<10; j++) {
--[ 2021.10.25.23.13.18.869.0 ]--
r 43             for (int j=0; j<100; j++) {
--[ 2021.10.25.23.13.23.544.0 ]--
r 58             for (int j=0; j<; j++) {
--[ 2021.10.25.23.13.23.647.0 ]--
r 58             for (int j=0; j<1; j++) {
--[ 2021.10.25.23.13.23.831.0 ]--
r 58             for (int j=0; j<1-; j++) {
--[ 2021.10.25.23.13.23.999.0 ]--
r 58             for (int j=0; j<1--; j++) {
--[ 2021.10.25.23.13.24.341.0 ]--
r 58             for (int j=0; j<1-; j++) {
--[ 2021.10.25.23.13.24.468.0 ]--
r 58             for (int j=0; j<1; j++) {
--[ 2021.10.25.23.13.25.002.0 ]--
r 58             for (int j=0; j<10; j++) {
--[ 2021.10.25.23.13.25.111.0 ]--
r 58             for (int j=0; j<100; j++) {
--[ 2021.10.25.23.13.28.842.0 ]--
r 74             for (int j=0; j<; j++) {
--[ 2021.10.25.23.13.28.974.0 ]--
r 74             for (int j=0; j<1; j++) {
--[ 2021.10.25.23.13.29.157.0 ]--
r 74             for (int j=0; j<10; j++) {
--[ 2021.10.25.23.13.29.286.0 ]--
r 74             for (int j=0; j<100; j++) {
--[ 2021.10.25.23.13.32.933.0 ]--
r 89             for (int j=0; j<; j++) {
--[ 2021.10.25.23.13.33.056.0 ]--
r 89             for (int j=0; j<1; j++) {
--[ 2021.10.25.23.13.33.210.0 ]--
r 89             for (int j=0; j<10; j++) {
--[ 2021.10.25.23.13.33.338.0 ]--
r 89             for (int j=0; j<100; j++) {
--[ 2021.10.25.23.13.33.465.0 ]--
r 89             for (int j=0; j<1000; j++) {
--[ 2021.10.25.23.13.34.395.0 ]--
r 89             for (int j=0; j<100; j++) {
--[ 2021.10.25.23.13.37.848.0 ]--
r 104             for (int j=0; j<; j++) {
--[ 2021.10.25.23.13.38.322.0 ]--
r 104             for (int j=0; j<1; j++) {
--[ 2021.10.25.23.13.38.444.0 ]--
r 104             for (int j=0; j<10; j++) {
--[ 2021.10.25.23.13.38.567.0 ]--
r 104             for (int j=0; j<100; j++) {
--[ 2021.10.25.23.13.43.639.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.23.26.42.985.0 ]--
+ 3     
--[ 2021.10.25.23.26.43.150.0 ]--
+ 3     
--[ 2021.10.25.23.26.43.611.0 ]--
+ 3     
--[ 2021.10.25.23.26.45.566.0 ]--
r 4     p
--[ 2021.10.25.23.26.45.822.0 ]--
r 4     pu
--[ 2021.10.25.23.26.46.525.0 ]--
r 4     public
--[ 2021.10.25.23.26.46.536.0 ]--
r 4     public 
--[ 2021.10.25.23.26.49.614.0 ]--
r 4     public s
--[ 2021.10.25.23.26.49.822.0 ]--
r 4     public st
--[ 2021.10.25.23.26.50.427.0 ]--
r 4     public static
--[ 2021.10.25.23.26.50.438.0 ]--
r 4     public static 
--[ 2021.10.25.23.26.51.506.0 ]--
r 4     public static v
--[ 2021.10.25.23.26.51.656.0 ]--
r 4     public static vo
--[ 2021.10.25.23.26.51.729.0 ]--
r 4     public static voi
--[ 2021.10.25.23.26.51.972.0 ]--
r 4     public static void
--[ 2021.10.25.23.26.54.029.0 ]--
r 4     public static void 
--[ 2021.10.25.23.26.55.694.0 ]--
r 4     public static void s
--[ 2021.10.25.23.26.55.889.0 ]--
r 4     public static void se
--[ 2021.10.25.23.26.56.016.0 ]--
r 4     public static void sel
--[ 2021.10.25.23.26.56.101.0 ]--
r 4     public static void sele
--[ 2021.10.25.23.26.56.225.0 ]--
r 4     public static void selec
--[ 2021.10.25.23.26.56.444.0 ]--
r 4     public static void select
--[ 2021.10.25.23.26.56.530.0 ]--
r 4     public static void selectio
--[ 2021.10.25.23.26.56.569.0 ]--
r 4     public static void selection
--[ 2021.10.25.23.26.57.458.0 ]--
r 4     public static void selection()
--[ 2021.10.25.23.26.58.340.0 ]--
r 4     public static void selection() 
--[ 2021.10.25.23.26.58.580.0 ]--
r 4     public static void selection() {}
--[ 2021.10.25.23.26.58.783.0 ]--
+ 4     public static void selection() {
r 5     }
--[ 2021.10.25.23.26.58.814.0 ]--
+ 5         
--[ 2021.10.25.23.27.11.228.0 ]--
- 15
- 15
- 15
- 15
- 15
- 15
- 15
- 15
- 15
- 15
- 15
- 15
- 15
- 15
r 15         
--[ 2021.10.25.23.27.13.195.0 ]--
+ 5         double MAX = 1000000;
+ 6         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 7             double average = 0;
+ 8             for (int j=0; j<100; j++) {
+ 9                 Double[] a = new Double[n];
+ 10                 for (int i=0; i<n; i++) {
+ 11                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 12                 }
+ 13                 Stopwatch timer = new Stopwatch();
+ 14                 Selection.sort(a);  // selection sort
+ 15                 average += timer.elapsedTime();
+ 16             }
+ 17             average /= 5;
+ 18             StdOut.printf("Selection: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
r 19         }
--[ 2021.10.25.23.27.15.396.0 ]--
+ 21     
--[ 2021.10.25.23.27.17.471.0 ]--
+ 21     
--[ 2021.10.25.23.27.25.146.0 ]--
+ 21     public static void selection() {
+ 22         double MAX = 1000000;
+ 23         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 24             double average = 0;
+ 25             for (int j=0; j<100; j++) {
+ 26                 Double[] a = new Double[n];
+ 27                 for (int i=0; i<n; i++) {
+ 28                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 29                 }
+ 30                 Stopwatch timer = new Stopwatch();
+ 31                 Selection.sort(a);  // selection sort
+ 32                 average += timer.elapsedTime();
+ 33             }
+ 34             average /= 5;
+ 35             StdOut.printf("Selection: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
+ 36         }
r 37     }
--[ 2021.10.25.23.27.26.634.0 ]--
+ 21     
--[ 2021.10.25.23.27.29.233.0 ]--
r 48         s
--[ 2021.10.25.23.27.29.463.0 ]--
r 48         se
--[ 2021.10.25.23.27.30.316.0 ]--
r 48         selection
--[ 2021.10.25.23.27.30.320.0 ]--
r 48         selection()
--[ 2021.10.25.23.27.30.324.0 ]--
r 48         selection();
--[ 2021.10.25.23.27.40.551.0 ]--
r 22     public static void i() {
--[ 2021.10.25.23.27.40.796.0 ]--
r 22     public static void ins() {
--[ 2021.10.25.23.27.40.897.0 ]--
r 22     public static void inse() {
--[ 2021.10.25.23.27.41.098.0 ]--
r 22     public static void inset() {
--[ 2021.10.25.23.27.41.177.0 ]--
r 22     public static void inseti() {
--[ 2021.10.25.23.27.41.189.0 ]--
r 22     public static void insetio() {
--[ 2021.10.25.23.27.41.238.0 ]--
r 22     public static void insetion() {
--[ 2021.10.25.23.27.42.835.0 ]--
r 22     public static void insertion() {
--[ 2021.10.25.23.27.56.505.0 ]--
r 32                 I.sort(a);  // selection sort
--[ 2021.10.25.23.27.57.329.0 ]--
r 32                 In.sort(a);  // selection sort
--[ 2021.10.25.23.27.58.017.0 ]--
r 32                 Ins.sort(a);  // selection sort
--[ 2021.10.25.23.27.58.541.0 ]--
r 32                 Insertion.sort(a);  // selection sort
--[ 2021.10.25.23.28.01.948.0 ]--
r 36             StdOut.printf("Insertion: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.23.28.13.273.0 ]--
- 50
- 50
- 50
- 50
- 50
- 50
- 50
- 50
- 50
- 50
- 50
- 50
- 50
r 50         i
--[ 2021.10.25.23.28.13.392.0 ]--
r 50         in
--[ 2021.10.25.23.28.14.226.0 ]--
r 50         ins
--[ 2021.10.25.23.28.14.701.0 ]--
r 50         insertion
--[ 2021.10.25.23.28.14.706.0 ]--
r 50         insertion()
--[ 2021.10.25.23.28.14.710.0 ]--
r 50         insertion();
--[ 2021.10.25.23.29.03.064.0 ]--
r 50         ins
--[ 2021.10.25.23.29.03.586.0 ]--
+ 50         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 51             double average = 0;
+ 52             for (int j=0; j<100; j++) {
+ 53                 Double[] a = new Double[n];
+ 54                 for (int i=0; i<n; i++) {
+ 55                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 56                 }
+ 57                 Stopwatch timer = new Stopwatch();
+ 58                 Insertion.sort(a);  // insertion sort
+ 59                 average += timer.elapsedTime();
+ 60             }
+ 61             average /= 5;
+ 62             StdOut.printf("Insertion: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
r 63         }
--[ 2021.10.25.23.29.03.726.0 ]--
r 36             StdOut.printf("Selection: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.23.29.03.894.0 ]--
r 32                 Ins.sort(a);  // selection sort
--[ 2021.10.25.23.29.03.977.0 ]--
r 32                 Selection.sort(a);  // selection sort
--[ 2021.10.25.23.29.04.137.0 ]--
r 22     public static void insetion() {
--[ 2021.10.25.23.29.04.316.0 ]--
r 22     public static void selection() {
--[ 2021.10.25.23.29.04.476.0 ]--
r 48         se
--[ 2021.10.25.23.29.04.564.0 ]--
r 48         
--[ 2021.10.25.23.29.04.741.0 ]--
- 21
--[ 2021.10.25.23.29.04.910.0 ]--
- 21
- 21
- 21
- 21
- 21
- 21
- 21
- 21
- 21
- 21
- 21
- 21
- 21
- 21
- 21
- 21
r 21     
--[ 2021.10.25.23.29.05.070.0 ]--
- 21
--[ 2021.10.25.23.29.05.152.0 ]--
- 21
--[ 2021.10.25.23.29.05.316.0 ]--
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
r 5         
--[ 2021.10.25.23.29.05.477.0 ]--
+ 15         double MAX = 1000000;
+ 16         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 17             double average = 0;
+ 18             for (int j=0; j<100; j++) {
+ 19                 Double[] a = new Double[n];
+ 20                 for (int i=0; i<n; i++) {
+ 21                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 22                 }
+ 23                 Stopwatch timer = new Stopwatch();
+ 24                 Selection.sort(a);  // selection sort
+ 25                 average += timer.elapsedTime();
+ 26             }
+ 27             average /= 5;
+ 28             StdOut.printf("Selection: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
r 29         }
--[ 2021.10.25.23.29.05.660.0 ]--
- 4
- 4
r 4     public static void selection() {}
--[ 2021.10.25.23.29.05.728.0 ]--
r 4     public static void selection()
--[ 2021.10.25.23.29.05.909.0 ]--
r 4     public static 
--[ 2021.10.25.23.29.05.971.0 ]--
r 4     public st
--[ 2021.10.25.23.29.06.056.0 ]--
r 4     public 
--[ 2021.10.25.23.29.06.145.0 ]--
r 4     pu
--[ 2021.10.25.23.29.06.225.0 ]--
r 4     
--[ 2021.10.25.23.29.06.400.0 ]--
- 3
--[ 2021.10.25.23.29.06.475.0 ]--
- 3
--[ 2021.10.25.23.29.06.567.0 ]--
- 3
--[ 2021.10.25.23.29.06.727.0 ]--
r 104             for (int j=0; j<; j++) {
--[ 2021.10.25.23.29.06.812.0 ]--
r 104             for (int j=0; j<5; j++) {
--[ 2021.10.25.23.29.06.978.0 ]--
r 89             for (int j=0; j<1000; j++) {
--[ 2021.10.25.23.29.07.066.0 ]--
r 89             for (int j=0; j<; j++) {
--[ 2021.10.25.23.29.07.143.0 ]--
r 89             for (int j=0; j<5; j++) {
--[ 2021.10.25.23.29.08.512.0 ]--
r 89             for (int j=0; j<; j++) {
--[ 2021.10.25.23.29.08.802.0 ]--
r 89             for (int j=0; j<1000; j++) {
--[ 2021.10.25.23.29.09.107.0 ]--
r 89             for (int j=0; j<100; j++) {
--[ 2021.10.25.23.29.09.640.0 ]--
r 104             for (int j=0; j<; j++) {
--[ 2021.10.25.23.29.09.994.0 ]--
r 104             for (int j=0; j<100; j++) {
--[ 2021.10.25.23.29.28.310.0 ]--
:/src/EdgeCases.java
+ 5     
--[ 2021.10.25.23.29.28.441.0 ]--
+ 5     
--[ 2021.10.25.23.29.30.118.0 ]--
r 5     p
--[ 2021.10.25.23.29.30.222.0 ]--
r 5     pu
--[ 2021.10.25.23.29.30.412.0 ]--
r 5     pub
--[ 2021.10.25.23.29.30.534.0 ]--
r 5     publ
--[ 2021.10.25.23.29.30.883.0 ]--
r 5     public
--[ 2021.10.25.23.29.30.899.0 ]--
r 5     public 
--[ 2021.10.25.23.29.31.384.0 ]--
r 5     public s
--[ 2021.10.25.23.29.31.567.0 ]--
r 5     public st
--[ 2021.10.25.23.29.31.688.0 ]--
r 5     public sta
--[ 2021.10.25.23.29.31.764.0 ]--
r 5     public stat
--[ 2021.10.25.23.29.32.614.0 ]--
r 5     public static
--[ 2021.10.25.23.29.32.628.0 ]--
r 5     public static 
--[ 2021.10.25.23.29.33.185.0 ]--
r 5     public static v
--[ 2021.10.25.23.29.33.378.0 ]--
r 5     public static vo
--[ 2021.10.25.23.29.33.407.0 ]--
r 5     public static voi
--[ 2021.10.25.23.29.33.882.0 ]--
r 5     public static void
--[ 2021.10.25.23.29.34.336.0 ]--
r 5     public static void 
--[ 2021.10.25.23.29.36.089.0 ]--
r 5     public static void s
--[ 2021.10.25.23.29.36.224.0 ]--
r 5     public static void so
--[ 2021.10.25.23.29.36.277.0 ]--
r 5     public static void sor
--[ 2021.10.25.23.29.36.452.0 ]--
r 5     public static void sort
--[ 2021.10.25.23.29.36.573.0 ]--
r 5     public static void sorte
--[ 2021.10.25.23.29.36.728.0 ]--
r 5     public static void sorted
--[ 2021.10.25.23.29.37.565.0 ]--
r 5     public static void sorted()
--[ 2021.10.25.23.29.38.505.0 ]--
r 5     public static void sorted() 
--[ 2021.10.25.23.29.38.776.0 ]--
r 5     public static void sorted() {}
--[ 2021.10.25.23.29.38.941.0 ]--
+ 5     public static void sorted() {
r 6     }
--[ 2021.10.25.23.29.38.960.0 ]--
+ 6         
--[ 2021.10.25.23.29.41.849.0 ]--
r 5     public static void sorted(i) {
--[ 2021.10.25.23.29.41.960.0 ]--
r 5     public static void sorted(in) {
--[ 2021.10.25.23.29.42.080.0 ]--
r 5     public static void sorted(int) {
--[ 2021.10.25.23.29.42.152.0 ]--
r 5     public static void sorted(int ) {
--[ 2021.10.25.23.29.42.908.0 ]--
r 5     public static void sorted(int n) {
--[ 2021.10.25.23.29.49.009.0 ]--
+ 17         
--[ 2021.10.25.23.29.49.142.0 ]--
r 17         s
--[ 2021.10.25.23.29.50.043.0 ]--
r 17         sorted
--[ 2021.10.25.23.29.50.048.0 ]--
r 17         sorted()
--[ 2021.10.25.23.29.50.052.0 ]--
r 17         sorted();
--[ 2021.10.25.23.29.52.976.0 ]--
r 17         sorted(1);
--[ 2021.10.25.23.29.53.061.0 ]--
r 17         sorted(10);
--[ 2021.10.25.23.29.53.241.0 ]--
r 17         sorted(100);
--[ 2021.10.25.23.29.53.499.0 ]--
r 17         sorted(1000);
--[ 2021.10.25.23.31.28.919.0 ]--
:/src/DoublingTest.java
+ 3     
--[ 2021.10.25.23.31.29.052.0 ]--
+ 3     
--[ 2021.10.25.23.31.35.341.0 ]--
:/src/EdgeCases.java
r 6 
r 8 
--[ 2021.10.25.23.31.35.350.0 ]--
:/src/DoublingTest.java
r 4 
--[ 2021.10.25.23.33.04.330.0 ]--
r 3     p
--[ 2021.10.25.23.33.04.547.0 ]--
r 3     pu
--[ 2021.10.25.23.33.04.696.0 ]--
r 3     puv
--[ 2021.10.25.23.33.05.056.0 ]--
r 3     pu
--[ 2021.10.25.23.33.05.091.0 ]--
r 3     pub
--[ 2021.10.25.23.33.05.656.0 ]--
r 3     public
--[ 2021.10.25.23.33.05.681.0 ]--
r 3     public 
--[ 2021.10.25.23.33.06.379.0 ]--
r 3     public s
--[ 2021.10.25.23.33.06.605.0 ]--
r 3     public st
--[ 2021.10.25.23.33.07.091.0 ]--
r 3     public static
--[ 2021.10.25.23.33.07.110.0 ]--
r 3     public static 
--[ 2021.10.25.23.33.07.399.0 ]--
r 3     public static v
--[ 2021.10.25.23.33.07.991.0 ]--
r 3     public static void
--[ 2021.10.25.23.33.08.000.0 ]--
r 3     public static void 
--[ 2021.10.25.23.33.09.312.0 ]--
r 3     public static void ()
--[ 2021.10.25.23.33.10.635.0 ]--
r 3     public static void 
--[ 2021.10.25.23.33.11.969.0 ]--
r 3     public static void s
--[ 2021.10.25.23.33.12.552.0 ]--
r 3     public static void so
--[ 2021.10.25.23.33.12.606.0 ]--
r 3     public static void sor
--[ 2021.10.25.23.33.12.759.0 ]--
r 3     public static void sort
--[ 2021.10.25.23.33.15.352.0 ]--
r 3     public static void sort()
--[ 2021.10.25.23.33.16.516.0 ]--
r 3     public static void sort() 
--[ 2021.10.25.23.33.17.023.0 ]--
r 3     public static void sort() {}
--[ 2021.10.25.23.33.17.364.0 ]--
+ 3     public static void sort() {
r 4     }
--[ 2021.10.25.23.33.17.395.0 ]--
+ 4         
--[ 2021.10.25.23.33.26.409.0 ]--
r 3     public static void sort(s) {
--[ 2021.10.25.23.33.27.005.0 ]--
r 3     public static void sort(st) {
--[ 2021.10.25.23.33.27.830.0 ]--
r 3     public static void sort(s) {
--[ 2021.10.25.23.33.28.007.0 ]--
r 3     public static void sort() {
--[ 2021.10.25.23.33.28.213.0 ]--
r 3     public static void sort(S) {
--[ 2021.10.25.23.33.29.153.0 ]--
r 3     public static void sort(String) {
--[ 2021.10.25.23.33.30.002.0 ]--
r 3     public static void sort(String ) {
--[ 2021.10.25.23.33.31.827.0 ]--
r 3     public static void sort(String m) {
--[ 2021.10.25.23.33.31.881.0 ]--
r 3     public static void sort(String me) {
--[ 2021.10.25.23.33.32.018.0 ]--
r 3     public static void sort(String met) {
--[ 2021.10.25.23.33.32.062.0 ]--
r 3     public static void sort(String meth) {
--[ 2021.10.25.23.33.32.130.0 ]--
r 3     public static void sort(String metho) {
--[ 2021.10.25.23.33.32.215.0 ]--
r 3     public static void sort(String method) {
--[ 2021.10.25.23.33.38.438.0 ]--
+ 4         double MAX = 1000000;
+ 5         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 6             double average = 0;
+ 7             for (int j=0; j<100; j++) {
+ 8                 Double[] a = new Double[n];
+ 9                 for (int i=0; i<n; i++) {
+ 10                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 11                 }
+ 12                 Stopwatch timer = new Stopwatch();
+ 13                 Selection.sort(a);  // selection sort
+ 14                 average += timer.elapsedTime();
+ 15             }
+ 16             average /= 5;
+ 17             StdOut.printf("Selection: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
r 18         }
--[ 2021.10.25.23.33.41.614.0 ]--
+ 13                 
--[ 2021.10.25.23.33.42.646.0 ]--
r 13                 i
--[ 2021.10.25.23.33.42.704.0 ]--
r 13                 if
--[ 2021.10.25.23.33.42.861.0 ]--
r 13                 if 
--[ 2021.10.25.23.33.45.026.0 ]--
r 13                 if ()
--[ 2021.10.25.23.33.46.021.0 ]--
r 13                 if (s)
--[ 2021.10.25.23.33.46.331.0 ]--
r 13                 if (st)
--[ 2021.10.25.23.33.46.960.0 ]--
r 13                 if (s)
--[ 2021.10.25.23.33.47.118.0 ]--
r 13                 if ()
--[ 2021.10.25.23.33.47.498.0 ]--
r 13                 if (S)
--[ 2021.10.25.23.33.47.848.0 ]--
r 13                 if ()
--[ 2021.10.25.23.33.48.212.0 ]--
r 13                 if 
--[ 2021.10.25.23.33.48.955.0 ]--
r 13                 if ()
--[ 2021.10.25.23.33.49.184.0 ]--
r 13                 if (m)
--[ 2021.10.25.23.33.49.353.0 ]--
r 13                 if (me)
--[ 2021.10.25.23.33.50.552.0 ]--
r 13                 if (m)
--[ 2021.10.25.23.33.50.697.0 ]--
r 13                 if ()
--[ 2021.10.25.23.33.50.780.0 ]--
r 13                 if 
--[ 2021.10.25.23.33.50.914.0 ]--
r 13                 if
--[ 2021.10.25.23.33.51.058.0 ]--
r 13                 i
--[ 2021.10.25.23.33.51.193.0 ]--
r 13                 
--[ 2021.10.25.23.33.51.780.0 ]--
r 13                 w
--[ 2021.10.25.23.33.52.576.0 ]--
r 13                 ws
--[ 2021.10.25.23.33.52.885.0 ]--
r 13                 w
--[ 2021.10.25.23.33.53.005.0 ]--
r 13                 
--[ 2021.10.25.23.33.53.103.0 ]--
r 13                 s
--[ 2021.10.25.23.33.53.354.0 ]--
r 13                 sw
--[ 2021.10.25.23.33.54.050.0 ]--
r 13                 switch
--[ 2021.10.25.23.33.54.062.0 ]--
r 13                 switch ()
--[ 2021.10.25.23.33.58.442.0 ]--
r 13                 switch (m)
--[ 2021.10.25.23.33.58.548.0 ]--
r 13                 switch (me)
--[ 2021.10.25.23.33.59.508.0 ]--
r 13                 switch (method)
--[ 2021.10.25.23.34.02.304.0 ]--
r 13                 switch (method):
--[ 2021.10.25.23.34.02.737.0 ]--
+ 14                 
--[ 2021.10.25.23.34.06.059.0 ]--
r 13                 switch (method)
--[ 2021.10.25.23.34.06.355.0 ]--
r 13                 switch (method) 
--[ 2021.10.25.23.34.06.806.0 ]--
r 13                 switch (method) {
--[ 2021.10.25.23.34.07.037.0 ]--
+ 14 
+ 15 }
--[ 2021.10.25.23.34.07.049.0 ]--
r 15                 }
--[ 2021.10.25.23.34.07.081.0 ]--
r 14                     
--[ 2021.10.25.23.34.10.152.0 ]--
r 16 
--[ 2021.10.25.23.34.21.406.0 ]--
r 14                     c
--[ 2021.10.25.23.34.21.556.0 ]--
r 14                     ca
--[ 2021.10.25.23.34.21.921.0 ]--
r 14                     cas
--[ 2021.10.25.23.34.22.161.0 ]--
r 14                     case
--[ 2021.10.25.23.34.22.271.0 ]--
r 14                     case 
--[ 2021.10.25.23.34.23.705.0 ]--
r 14                     case 1
--[ 2021.10.25.23.34.24.091.0 ]--
r 14                     case 1:
--[ 2021.10.25.23.34.24.400.0 ]--
r 14                     case 1: 
--[ 2021.10.25.23.34.38.538.0 ]--
r 14                     case 1: m
--[ 2021.10.25.23.34.39.268.0 ]--
r 14                     case 1: method
--[ 2021.10.25.23.34.40.341.0 ]--
r 14                     case 1: method 
--[ 2021.10.25.23.34.41.335.0 ]--
r 14                     case 1: method =
--[ 2021.10.25.23.34.43.739.0 ]--
r 14                     case 1: method = 
--[ 2021.10.25.23.34.44.812.0 ]--
r 14                     case 1: method = ""
--[ 2021.10.25.23.34.49.938.0 ]--
r 14                     case 1: method = "S"
--[ 2021.10.25.23.34.50.150.0 ]--
r 14                     case 1: method = "Se"
--[ 2021.10.25.23.34.50.246.0 ]--
r 14                     case 1: method = "Sel"
--[ 2021.10.25.23.34.50.338.0 ]--
r 14                     case 1: method = "Sele"
--[ 2021.10.25.23.34.50.486.0 ]--
r 14                     case 1: method = "Selec"
--[ 2021.10.25.23.34.50.691.0 ]--
r 14                     case 1: method = "Select"
--[ 2021.10.25.23.34.50.775.0 ]--
r 14                     case 1: method = "Selecti"
--[ 2021.10.25.23.34.50.801.0 ]--
r 14                     case 1: method = "Selectio"
--[ 2021.10.25.23.34.50.850.0 ]--
r 14                     case 1: method = "Selection"
--[ 2021.10.25.23.34.53.540.0 ]--
r 14                     case 1: method = "Selection";
--[ 2021.10.25.23.34.53.872.0 ]--
+ 15                     
--[ 2021.10.25.23.34.54.081.0 ]--
r 15                     b
--[ 2021.10.25.23.34.54.298.0 ]--
r 15                     br
--[ 2021.10.25.23.34.54.382.0 ]--
r 15                     bre
--[ 2021.10.25.23.34.55.026.0 ]--
r 15                     break
--[ 2021.10.25.23.34.55.034.0 ]--
r 15                     break;
--[ 2021.10.25.23.35.00.536.0 ]--
r 14                     case : method = "Selection";
--[ 2021.10.25.23.35.01.001.0 ]--
r 14                     case S: method = "Selection";
--[ 2021.10.25.23.35.01.225.0 ]--
r 14                     case Se: method = "Selection";
--[ 2021.10.25.23.35.01.863.0 ]--
r 14                     case Selection: method = "Selection";
--[ 2021.10.25.23.35.04.697.0 ]--
r 14                     case Selection": method = "Selection";
--[ 2021.10.25.23.35.07.002.0 ]--
r 14                     case "Selection": method = "Selection";
--[ 2021.10.25.23.35.15.542.0 ]--
r 14                     case "Selection": s;
--[ 2021.10.25.23.35.15.926.0 ]--
r 14                     case "Selection": ;
--[ 2021.10.25.23.35.16.692.0 ]--
r 14                     case "Selection": S;
--[ 2021.10.25.23.35.16.978.0 ]--
r 14                     case "Selection": Se;
--[ 2021.10.25.23.35.17.361.0 ]--
r 14                     case "Selection": S;
--[ 2021.10.25.23.35.18.262.0 ]--
r 14                     case "Selection": Se;
--[ 2021.10.25.23.35.18.754.0 ]--
r 14                     case "Selection": Selection;
--[ 2021.10.25.23.35.19.065.0 ]--
r 14                     case "Selection": Selection.;
--[ 2021.10.25.23.35.19.786.0 ]--
r 14                     case "Selection": Selection.sort;
--[ 2021.10.25.23.35.19.792.0 ]--
r 14                     case "Selection": Selection.sort();
--[ 2021.10.25.23.35.21.233.0 ]--
r 14                     case "Selection": Selection.sort(a);
--[ 2021.10.25.23.35.27.325.0 ]--
r 15                         break;
--[ 2021.10.25.23.35.30.478.0 ]--
r 15                         
--[ 2021.10.25.23.35.30.730.0 ]--
r 15                     
--[ 2021.10.25.23.35.31.061.0 ]--
- 15
--[ 2021.10.25.23.35.31.317.0 ]--
r 14                     case "Selection": Selection.sort(a)
--[ 2021.10.25.23.35.32.238.0 ]--
r 14                     case "Selection": Selection.sort(a);
--[ 2021.10.25.23.35.32.513.0 ]--
+ 15                     
--[ 2021.10.25.23.35.33.395.0 ]--
r 15                     b
--[ 2021.10.25.23.35.33.611.0 ]--
r 15                     br
--[ 2021.10.25.23.35.34.489.0 ]--
r 15                     brr
--[ 2021.10.25.23.35.34.515.0 ]--
r 15                     brre
--[ 2021.10.25.23.35.34.671.0 ]--
r 15                     brrea
--[ 2021.10.25.23.35.35.085.0 ]--
r 15                     brre
--[ 2021.10.25.23.35.35.193.0 ]--
r 15                     brr
--[ 2021.10.25.23.35.35.337.0 ]--
r 15                     br
--[ 2021.10.25.23.35.35.759.0 ]--
r 15                     bre
--[ 2021.10.25.23.35.35.926.0 ]--
r 15                     brea
--[ 2021.10.25.23.35.36.086.0 ]--
r 15                     break
--[ 2021.10.25.23.35.37.561.0 ]--
r 15                     break;
--[ 2021.10.25.23.35.42.739.0 ]--
+ 16                     
--[ 2021.10.25.23.35.43.018.0 ]--
+ 16                     case "Selection": Selection.sort(a);
r 17                     break;
--[ 2021.10.25.23.35.43.031.0 ]--
r 17                         break;
--[ 2021.10.25.23.35.44.459.0 ]--
+ 18                         
--[ 2021.10.25.23.35.44.548.0 ]--
+ 18                         case "Selection": Selection.sort(a);
r 19                     break;
--[ 2021.10.25.23.35.44.559.0 ]--
r 18                     case "Selection": Selection.sort(a);
r 19                         break;
--[ 2021.10.25.23.35.45.336.0 ]--
+ 20                         
--[ 2021.10.25.23.35.45.390.0 ]--
+ 20                         case "Selection": Selection.sort(a);
r 21                     break;
--[ 2021.10.25.23.35.45.401.0 ]--
r 20                     case "Selection": Selection.sort(a);
r 21                         break;
--[ 2021.10.25.23.35.49.861.0 ]--
r 16                     case "I": Selection.sort(a);
--[ 2021.10.25.23.35.50.345.0 ]--
r 16                     case "In": Selection.sort(a);
--[ 2021.10.25.23.35.50.390.0 ]--
r 16                     case "Ins": Selection.sort(a);
--[ 2021.10.25.23.35.50.891.0 ]--
r 16                     case "Inse": Selection.sort(a);
--[ 2021.10.25.23.35.50.950.0 ]--
r 16                     case "Inser": Selection.sort(a);
--[ 2021.10.25.23.35.51.124.0 ]--
r 16                     case "Insert": Selection.sort(a);
--[ 2021.10.25.23.35.51.176.0 ]--
r 16                     case "Inserti": Selection.sort(a);
--[ 2021.10.25.23.35.51.198.0 ]--
r 16                     case "Insertio": Selection.sort(a);
--[ 2021.10.25.23.35.51.265.0 ]--
r 16                     case "Insertion": Selection.sort(a);
--[ 2021.10.25.23.35.53.267.0 ]--
+ 16                     case "case \"Selection\": Selection.sort(a);\n" +
r 17 "                    break;": Selection.sort(a);
--[ 2021.10.25.23.35.53.274.0 ]--
r 17                             "                    break;": Selection.sort(a);
--[ 2021.10.25.23.35.54.207.0 ]--
- 16
r 16                     case "Insertion": Selection.sort(a);
--[ 2021.10.25.23.35.55.739.0 ]--
r 16                     case "Insertion": Insertion.sort(a);
--[ 2021.10.25.23.35.57.251.0 ]--
r 18                     case "S": Selection.sort(a);
--[ 2021.10.25.23.35.57.379.0 ]--
r 18                     case "Sh": Selection.sort(a);
--[ 2021.10.25.23.35.57.457.0 ]--
r 18                     case "She": Selection.sort(a);
--[ 2021.10.25.23.35.57.583.0 ]--
r 18                     case "Shel": Selection.sort(a);
--[ 2021.10.25.23.35.57.756.0 ]--
r 18                     case "Shell": Selection.sort(a);
--[ 2021.10.25.23.35.59.984.0 ]--
r 18                     case "Shell": S.sort(a);
--[ 2021.10.25.23.36.00.421.0 ]--
r 18                     case "Shell": Se.sort(a);
--[ 2021.10.25.23.36.00.769.0 ]--
r 18                     case "Shell": S.sort(a);
--[ 2021.10.25.23.36.00.944.0 ]--
r 18                     case "Shell": Sj.sort(a);
--[ 2021.10.25.23.36.00.991.0 ]--
r 18                     case "Shell": Sje.sort(a);
--[ 2021.10.25.23.36.01.547.0 ]--
r 18                     case "Shell": Sj.sort(a);
--[ 2021.10.25.23.36.01.666.0 ]--
r 18                     case "Shell": S.sort(a);
--[ 2021.10.25.23.36.01.852.0 ]--
r 18                     case "Shell": Sh.sort(a);
--[ 2021.10.25.23.36.01.911.0 ]--
r 18                     case "Shell": She.sort(a);
--[ 2021.10.25.23.36.02.026.0 ]--
r 18                     case "Shell": Shel.sort(a);
--[ 2021.10.25.23.36.02.147.0 ]--
r 18                     case "Shell": Shell.sort(a);
--[ 2021.10.25.23.36.22.694.0 ]--
r 20                     case "Q": Selection.sort(a);
--[ 2021.10.25.23.36.22.930.0 ]--
r 20                     case "Qu": Selection.sort(a);
--[ 2021.10.25.23.36.23.039.0 ]--
r 20                     case "Qui": Selection.sort(a);
--[ 2021.10.25.23.36.23.146.0 ]--
r 20                     case "Quic": Selection.sort(a);
--[ 2021.10.25.23.36.23.277.0 ]--
r 20                     case "Quick": Selection.sort(a);
--[ 2021.10.25.23.36.25.571.0 ]--
r 20                     case "Quick": Q.sort(a);
--[ 2021.10.25.23.36.26.372.0 ]--
r 20                     case "Quick": Quick.sort(a);
--[ 2021.10.25.23.36.31.883.0 ]--
+ 22                         
--[ 2021.10.25.23.36.32.047.0 ]--
+ 22                         case "Quick": Quick.sort(a);
r 23                         break;
--[ 2021.10.25.23.36.32.058.0 ]--
r 22                     case "Quick": Quick.sort(a);
--[ 2021.10.25.23.36.33.086.0 ]--
+ 24                         
--[ 2021.10.25.23.36.33.139.0 ]--
+ 24                         case "Quick": Quick.sort(a);
r 25                         break;
--[ 2021.10.25.23.36.33.150.0 ]--
r 24                     case "Quick": Quick.sort(a);
--[ 2021.10.25.23.36.36.363.0 ]--
r 24                     case "Quic": Quick.sort(a);
--[ 2021.10.25.23.36.36.485.0 ]--
r 24                     case "Qui": Quick.sort(a);
--[ 2021.10.25.23.36.36.634.0 ]--
r 24                     case "Qu": Quick.sort(a);
--[ 2021.10.25.23.36.36.754.0 ]--
r 24                     case "Q": Quick.sort(a);
--[ 2021.10.25.23.36.36.912.0 ]--
r 24                     case "": Quick.sort(a);
--[ 2021.10.25.23.36.37.839.0 ]--
r 24                     case "M": Quick.sort(a);
--[ 2021.10.25.23.36.37.936.0 ]--
r 24                     case "Me": Quick.sort(a);
--[ 2021.10.25.23.36.38.076.0 ]--
r 24                     case "Mei": Quick.sort(a);
--[ 2021.10.25.23.36.38.136.0 ]--
r 24                     case "Meid": Quick.sort(a);
--[ 2021.10.25.23.36.38.334.0 ]--
r 24                     case "Meida": Quick.sort(a);
--[ 2021.10.25.23.36.38.439.0 ]--
r 24                     case "Meidan": Quick.sort(a);
--[ 2021.10.25.23.36.38.829.0 ]--
r 24                     case "Meida": Quick.sort(a);
--[ 2021.10.25.23.36.38.881.0 ]--
r 24                     case "Meid": Quick.sort(a);
--[ 2021.10.25.23.36.39.047.0 ]--
r 24                     case "Mei": Quick.sort(a);
--[ 2021.10.25.23.36.39.162.0 ]--
r 24                     case "Me": Quick.sort(a);
--[ 2021.10.25.23.36.39.272.0 ]--
r 24                     case "Med": Quick.sort(a);
--[ 2021.10.25.23.36.39.378.0 ]--
r 24                     case "Medi": Quick.sort(a);
--[ 2021.10.25.23.36.39.490.0 ]--
r 24                     case "Media": Quick.sort(a);
--[ 2021.10.25.23.36.39.594.0 ]--
r 24                     case "Median": Quick.sort(a);
--[ 2021.10.25.23.36.40.268.0 ]--
r 24                     case "Median5": Quick.sort(a);
--[ 2021.10.25.23.36.43.930.0 ]--
r 22                     case "M": Quick.sort(a);
--[ 2021.10.25.23.36.43.986.0 ]--
r 22                     case "Me": Quick.sort(a);
--[ 2021.10.25.23.36.44.291.0 ]--
r 22                     case "Med": Quick.sort(a);
--[ 2021.10.25.23.36.44.444.0 ]--
r 22                     case "Medi": Quick.sort(a);
--[ 2021.10.25.23.36.44.553.0 ]--
r 22                     case "Media": Quick.sort(a);
--[ 2021.10.25.23.36.44.633.0 ]--
r 22                     case "Median": Quick.sort(a);
--[ 2021.10.25.23.36.45.328.0 ]--
r 22                     case "Median3": Quick.sort(a);
--[ 2021.10.25.23.36.47.766.0 ]--
r 22                     case "Median3": Q.sort(a);
--[ 2021.10.25.23.36.47.944.0 ]--
r 22                     case "Median3": Qu.sort(a);
--[ 2021.10.25.23.36.49.203.0 ]--
r 22                     case "Median3": QuickSortMedian3.sort(a);
--[ 2021.10.25.23.36.53.141.0 ]--
r 24                     case "Median5": Q.sort(a);
--[ 2021.10.25.23.36.53.379.0 ]--
r 24                     case "Median5": Qu.sort(a);
--[ 2021.10.25.23.36.54.730.0 ]--
r 24                     case "Median5": QuickSortMedian5.sort(a);
--[ 2021.10.25.23.36.59.641.0 ]--
- 28
--[ 2021.10.25.23.37.00.052.0 ]--
- 27
--[ 2021.10.25.23.37.10.084.0 ]--
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
- 41
r 41         
--[ 2021.10.25.23.37.15.909.0 ]--
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 56
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
r 57        
--[ 2021.10.25.23.37.19.035.0 ]--
r 58     }
--[ 2021.10.25.23.37.20.187.0 ]--
r 58     
--[ 2021.10.25.23.37.20.396.0 ]--
- 57
r 57         
--[ 2021.10.25.23.37.20.778.0 ]--
- 57
--[ 2021.10.25.23.37.32.339.0 ]--
r 41         double MAX = 1000000;
--[ 2021.10.25.23.37.34.903.0 ]--
+ 41         
--[ 2021.10.25.23.37.35.274.0 ]--
+ 41         
--[ 2021.10.25.23.37.38.810.0 ]--
r 41         s
--[ 2021.10.25.23.37.39.949.0 ]--
r 41         sort
--[ 2021.10.25.23.37.39.954.0 ]--
r 41         sort()
--[ 2021.10.25.23.37.39.957.0 ]--
r 41         sort();
--[ 2021.10.25.23.37.41.808.0 ]--
r 41         sort("");
--[ 2021.10.25.23.37.42.085.0 ]--
r 41         sort("S");
--[ 2021.10.25.23.37.42.291.0 ]--
r 41         sort("Se");
--[ 2021.10.25.23.37.43.164.0 ]--
r 41         sort("Sel");
--[ 2021.10.25.23.37.43.254.0 ]--
r 41         sort("Sele");
--[ 2021.10.25.23.37.43.442.0 ]--
r 41         sort("Selec");
--[ 2021.10.25.23.37.43.719.0 ]--
r 41         sort("Selecti");
--[ 2021.10.25.23.37.43.770.0 ]--
r 41         sort("Selectio");
--[ 2021.10.25.23.37.43.807.0 ]--
r 41         sort("Selection");
--[ 2021.10.25.23.37.46.103.0 ]--
+ 42         
--[ 2021.10.25.23.37.46.401.0 ]--
r 42         sort("Selection");
--[ 2021.10.25.23.37.46.903.0 ]--
+ 43         
--[ 2021.10.25.23.37.47.125.0 ]--
r 43         sort("Selection");
--[ 2021.10.25.23.37.50.315.0 ]--
+ 44         
--[ 2021.10.25.23.37.50.429.0 ]--
r 44         sort("Selection");
--[ 2021.10.25.23.37.50.722.0 ]--
+ 45         
--[ 2021.10.25.23.37.50.855.0 ]--
r 45         sort("Selection");
--[ 2021.10.25.23.37.51.151.0 ]--
+ 46         
--[ 2021.10.25.23.37.51.287.0 ]--
r 46         sort("Selection");
--[ 2021.10.25.23.37.55.598.0 ]--
r 15                         break;
--[ 2021.10.25.23.37.58.337.0 ]--
r 42         sort("Insertion");
--[ 2021.10.25.23.38.01.379.0 ]--
r 43         sort("Shell");
--[ 2021.10.25.23.38.04.276.0 ]--
r 44         sort("Quick");
--[ 2021.10.25.23.38.06.924.0 ]--
r 45         sort("Median3");
--[ 2021.10.25.23.38.10.030.0 ]--
r 46         sort("Median5");
--[ 2021.10.25.23.38.21.007.0 ]--
r 30             StdOut.printf("%: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.23.38.21.382.0 ]--
r 30             StdOut.printf("%s: N = %d || Time = %f || Ratio = %f\n", n, average, n/average);
--[ 2021.10.25.23.38.24.571.0 ]--
r 30             StdOut.printf("%s: N = %d || Time = %f || Ratio = %f\n", mn, average, n/average);
--[ 2021.10.25.23.38.24.643.0 ]--
r 30             StdOut.printf("%s: N = %d || Time = %f || Ratio = %f\n", men, average, n/average);
--[ 2021.10.25.23.38.24.801.0 ]--
r 30             StdOut.printf("%s: N = %d || Time = %f || Ratio = %f\n", methn, average, n/average);
--[ 2021.10.25.23.38.24.855.0 ]--
r 30             StdOut.printf("%s: N = %d || Time = %f || Ratio = %f\n", methon, average, n/average);
--[ 2021.10.25.23.38.24.946.0 ]--
r 30             StdOut.printf("%s: N = %d || Time = %f || Ratio = %f\n", methodn, average, n/average);
--[ 2021.10.25.23.38.25.074.0 ]--
r 30             StdOut.printf("%s: N = %d || Time = %f || Ratio = %f\n", method,n, average, n/average);
--[ 2021.10.25.23.38.25.323.0 ]--
r 30             StdOut.printf("%s: N = %d || Time = %f || Ratio = %f\n", method, n, average, n/average);
--[ 2021.10.25.23.38.28.441.0 ]--
r 47 
--[ 2021.10.25.23.38.30.449.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.23.39.11.479.0 ]--
+ 42         
--[ 2021.10.25.23.39.11.817.0 ]--
r 42         S
--[ 2021.10.25.23.39.12.090.0 ]--
r 42         St
--[ 2021.10.25.23.39.12.695.0 ]--
r 42         Std
--[ 2021.10.25.23.39.13.161.0 ]--
r 42         Std.
--[ 2021.10.25.23.39.13.661.0 ]--
r 42         Std
--[ 2021.10.25.23.39.14.666.0 ]--
r 42         StdO
--[ 2021.10.25.23.39.15.391.0 ]--
r 42         StdOut
--[ 2021.10.25.23.39.15.619.0 ]--
r 42         StdOut.
--[ 2021.10.25.23.39.16.924.0 ]--
r 42         StdOut.println
--[ 2021.10.25.23.39.16.931.0 ]--
r 42         StdOut.println()
--[ 2021.10.25.23.39.16.935.0 ]--
r 42         StdOut.println();
--[ 2021.10.25.23.39.20.306.0 ]--
+ 44         
--[ 2021.10.25.23.39.20.484.0 ]--
r 44         StdOut.println();
--[ 2021.10.25.23.39.21.456.0 ]--
+ 46         
--[ 2021.10.25.23.39.21.620.0 ]--
r 46         StdOut.println();
--[ 2021.10.25.23.39.23.019.0 ]--
+ 48         
--[ 2021.10.25.23.39.23.186.0 ]--
r 48         StdOut.println();
--[ 2021.10.25.23.39.24.451.0 ]--
+ 50         
--[ 2021.10.25.23.39.24.647.0 ]--
r 50         StdOut.println();
--[ 2021.10.25.23.39.26.443.0 ]--
+ 52         
--[ 2021.10.25.23.39.26.604.0 ]--
r 52         StdOut.println();
--[ 2021.10.25.23.39.32.630.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.23.45.51.021.0 ]--
:/src/EdgeCases.java
+ 5     public static void sort(String method) {
+ 6         double MAX = 1000000;
+ 7         for (int n=1000, count=0; count < 5; n*=2, count++) {
+ 8             double average = 0;
+ 9             for (int j=0; j<100; j++) {
+ 10                 Double[] a = new Double[n];
+ 11                 for (int i=0; i<n; i++) {
+ 12                     a[i] = StdRandom.uniform(-MAX, MAX);
+ 13                 }
+ 14                 Stopwatch timer = new Stopwatch();
+ 15                 switch (method) {
+ 16                     case "Selection": Selection.sort(a);
+ 17                         break;
+ 18                     case "Insertion": Insertion.sort(a);
+ 19                         break;
+ 20                     case "Shell": Shell.sort(a);
+ 21                         break;
+ 22                     case "Quick": Quick.sort(a);
+ 23                         break;
+ 24                     case "Median3": QuickSortMedian3.sort(a);
+ 25                         break;
+ 26                     case "Median5": QuickSortMedian5.sort(a);
+ 27                         break;
+ 28                 }
+ 29                 average += timer.elapsedTime();
+ 30             }
+ 31             average /= 5;
r 32             StdOut.printf("%s: N = %d || Time = %f || Ratio = %f\n", method, n, average, n/average);
r 33         }
--[ 2021.10.25.23.45.52.254.0 ]--
r 5     public static void sorte(String method) {
--[ 2021.10.25.23.45.52.489.0 ]--
r 5     public static void sorted(String method) {
--[ 2021.10.25.23.46.38.645.0 ]--
r 44         
--[ 2021.10.25.23.46.39.133.0 ]--
- 44
--[ 2021.10.25.23.47.29.316.0 ]--
r 12                     a[i] = i;
--[ 2021.10.25.23.47.37.686.0 ]--
r 11                 for (D i=0; i<n; i++) {
--[ 2021.10.25.23.47.37.884.0 ]--
r 11                 for (Do i=0; i<n; i++) {
--[ 2021.10.25.23.47.37.942.0 ]--
r 11                 for (Dou i=0; i<n; i++) {
--[ 2021.10.25.23.47.38.100.0 ]--
r 11                 for (Doub i=0; i<n; i++) {
--[ 2021.10.25.23.47.38.584.0 ]--
r 11                 for (Double i=0; i<n; i++) {
--[ 2021.10.25.23.47.40.262.0 ]--
r 11                 for (Double i=0.; i<n; i++) {
--[ 2021.10.25.23.47.40.521.0 ]--
r 11                 for (Double i=0.0; i<n; i++) {
--[ 2021.10.25.23.47.50.899.0 ]--
r 11                 for (Double i=0; i<n; i++) {
--[ 2021.10.25.23.47.51.872.0 ]--
r 11                 for (Doub i=0; i<n; i++) {
--[ 2021.10.25.23.47.52.303.0 ]--
r 11                 for (int i=0; i<n; i++) {
--[ 2021.10.25.23.47.54.319.0 ]--
r 11                 for (int i=0,; i<n; i++) {
--[ 2021.10.25.23.47.54.473.0 ]--
r 11                 for (int i=0, ; i<n; i++) {
--[ 2021.10.25.23.47.55.091.0 ]--
r 11                 for (int i=0, D; i<n; i++) {
--[ 2021.10.25.23.47.55.214.0 ]--
r 11                 for (int i=0, Do; i<n; i++) {
--[ 2021.10.25.23.47.55.279.0 ]--
r 11                 for (int i=0, Dou; i<n; i++) {
--[ 2021.10.25.23.47.55.334.0 ]--
r 11                 for (int i=0, Doub; i<n; i++) {
--[ 2021.10.25.23.47.55.439.0 ]--
r 11                 for (int i=0, Doubl; i<n; i++) {
--[ 2021.10.25.23.47.55.524.0 ]--
r 11                 for (int i=0, Double; i<n; i++) {
--[ 2021.10.25.23.47.57.051.0 ]--
r 11                 for (int i=0, Double ; i<n; i++) {
--[ 2021.10.25.23.47.57.216.0 ]--
r 11                 for (int i=0, Double j; i<n; i++) {
--[ 2021.10.25.23.47.58.217.0 ]--
r 11                 for (int i=0, Double j=; i<n; i++) {
--[ 2021.10.25.23.47.58.469.0 ]--
r 11                 for (int i=0, Double j=0; i<n; i++) {
--[ 2021.10.25.23.47.58.485.0 ]--
r 11                 for (int i=0, Double j=0-; i<n; i++) {
--[ 2021.10.25.23.47.58.746.0 ]--
r 11                 for (int i=0, Double j=0-.; i<n; i++) {
--[ 2021.10.25.23.47.58.966.0 ]--
r 11                 for (int i=0, Double j=0-.0; i<n; i++) {
--[ 2021.10.25.23.48.00.696.0 ]--
r 11                 for (int i=0, Double j=0.0; i<n; i++) {
--[ 2021.10.25.23.48.04.566.0 ]--
r 11                 for (int i=0, Double j=0.0; i<n; i++,) {
--[ 2021.10.25.23.48.04.710.0 ]--
r 11                 for (int i=0, Double j=0.0; i<n; i++, ) {
--[ 2021.10.25.23.48.05.770.0 ]--
r 11                 for (int i=0, Double j=0.0; i<n; i++, j) {
--[ 2021.10.25.23.48.06.638.0 ]--
r 11                 for (int i=0, Double j=0.0; i<n; i++, j+) {
--[ 2021.10.25.23.48.06.753.0 ]--
r 11                 for (int i=0, Double j=0.0; i<n; i++, j++) {
--[ 2021.10.25.23.48.14.620.0 ]--
r 11                 for (int i=0,  j=0.0; i<n; i++, j++) {
--[ 2021.10.25.23.48.15.353.0 ]--
r 11                 for (int i=0, j=0.0; i<n; i++, j++) {
--[ 2021.10.25.23.48.21.956.0 ]--
r 11                 for (int i=0, Double j=0.0; i<n; i++, j++) {
--[ 2021.10.25.23.48.22.625.0 ]--
r 11                 for (int i=0, Double j=0.0; i<n; i++) {
--[ 2021.10.25.23.48.23.371.0 ]--
r 11                 for (int i=0, Double j=0-.0; i<n; i++) {
--[ 2021.10.25.23.48.23.992.0 ]--
r 11                 for (int i=0; i<n; i++) {
--[ 2021.10.25.23.48.24.948.0 ]--
r 12                     a[i] = StdRandom.uniform(-MAX, MAX);
--[ 2021.10.25.23.48.25.888.0 ]--
r 12                     a[i] = i;
--[ 2021.10.25.23.48.52.084.0 ]--
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
- 5
r 5 
--[ 2021.10.25.23.48.52.174.0 ]--
- 4
r 4     
--[ 2021.10.25.23.48.52.624.0 ]--
- 4
--[ 2021.10.25.23.54.03.479.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.23.55.11.751.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.23.55.18.818.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.23.55.26.805.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.23.55.39.813.0 ]--
CompilationStatus (AEW): 0 0 0
