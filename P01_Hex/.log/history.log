--[ 2021.09.14.10.13.10.539.0 ]--
NewLogger: P01_Hex
Version: 1.5
--[ 2021.09.14.10.13.10.560.0 ]--
InitTree:
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2021.09.14.10.13.10.563.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.14.10.13.10.565.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.09.14.10.13.10.567.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.09.14.10.13.10.590.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    public HexBoard(int N) {
    }

    public int getPlayer(int row, int col) {
        return 0;
    }
    
    public boolean isSet(int row, int col) {
        return false;
    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        return 0;
    }
}

--[ 2021.09.14.10.13.10.595.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public HexBoardStats(int N0, int N1, int T) {
    }

    public int getN0() {
        return -1;
    }

    public int getN1() {
        return -1;
    }

    public int getT() {
        return -1;
    }

    public double getP1WinProbabilityEstimate(int n) {
        return -1.0;
    }

    public double getP2WinProbabilityEstimate(int n) {
        return -1.0;
    }

    public static void main(String[] args) {
    }
}

--[ 2021.09.14.10.13.10.597.0 ]--
InitFile: /.cos265


--[ 2021.09.14.10.13.16.047.0 ]--
UpdateTree (AD): 1 0
+ /.idea/.gitignore

--[ 2021.09.14.11.11.48.764.0 ]--
UpdateTree (AD): 25 0
+ /out/production/P01_Hex/.donotlog
+ /out/production/P01_Hex/algs4.jar
+ /out/production/P01_Hex/stdlib.jar
+ /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/input-1-p1.txt
+ /out/production/P01_Hex/input-1-p2.txt
+ /out/production/P01_Hex/input-3-p1.txt
+ /out/production/P01_Hex/input-3-p2.txt
+ /out/production/P01_Hex/input-7-p2.txt
+ /out/production/P01_Hex/input-11-p2.txt
+ /out/production/P01_Hex/input-17-p1.txt
+ /out/production/P01_Hex/input-random-5.txt
+ /out/production/P01_Hex/HexBoardStats.class
+ /out/production/P01_Hex/input-random-13.txt
+ /out/production/P01_Hex/input-random-49.txt
+ /out/production/P01_Hex/input-random-99.txt
+ /out/production/P01_Hex/input-random-199.txt
+ /out/production/P01_Hex/input-1-nowinners.txt
+ /out/production/P01_Hex/input-zigzag-5-p1.txt
+ /out/production/P01_Hex/input-zigzag-5-p2.txt
+ /out/production/P01_Hex/input-zigzag-13-p1.txt
+ /out/production/P01_Hex/input-zigzag-17-p2.txt
+ /out/production/P01_Hex/input-zigzag-31-p2.txt
+ /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/InteractiveHexBoardVisualizer.class

--[ 2021.09.14.11.11.48.769.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.13.26.644.0 ]--
:/src/HexBoard.java
+ 14         
--[ 2021.09.14.11.13.32.661.0 ]--
r 14         p
--[ 2021.09.14.11.13.32.810.0 ]--
r 14         pr
--[ 2021.09.14.11.13.32.966.0 ]--
r 14         pri
--[ 2021.09.14.11.13.33.069.0 ]--
r 14         prin
--[ 2021.09.14.11.13.33.117.0 ]--
r 14         print
--[ 2021.09.14.11.13.33.718.0 ]--
r 14         printf
--[ 2021.09.14.11.13.34.989.0 ]--
r 14         print
--[ 2021.09.14.11.13.36.822.0 ]--
r 14         printl
--[ 2021.09.14.11.13.36.973.0 ]--
r 14         println
--[ 2021.09.14.11.13.39.594.0 ]--
r 14         printl
--[ 2021.09.14.11.13.39.796.0 ]--
r 14         print
--[ 2021.09.14.11.13.40.918.0 ]--
r 14         printf
--[ 2021.09.14.11.13.41.590.0 ]--
r 14         printf()
--[ 2021.09.14.11.13.44.043.0 ]--
r 14         printf();
--[ 2021.09.14.11.13.45.734.0 ]--
r 14         printf("");
--[ 2021.09.14.11.13.46.417.0 ]--
r 14         printf("h");
--[ 2021.09.14.11.13.46.510.0 ]--
r 14         printf("hi");
--[ 2021.09.14.11.14.01.775.0 ]--
r 14         print("hi");
--[ 2021.09.14.11.14.02.294.0 ]--
r 14         printl("hi");
--[ 2021.09.14.11.14.02.584.0 ]--
r 14         println("hi");
--[ 2021.09.14.11.14.30.068.0 ]--
r 14         Sprintln("hi");
--[ 2021.09.14.11.14.30.315.0 ]--
r 14         Syprintln("hi");
--[ 2021.09.14.11.14.30.369.0 ]--
r 14         Sysprintln("hi");
--[ 2021.09.14.11.14.30.673.0 ]--
r 14         Systprintln("hi");
--[ 2021.09.14.11.14.30.784.0 ]--
r 14         Systeprintln("hi");
--[ 2021.09.14.11.14.30.929.0 ]--
r 14         Systemprintln("hi");
--[ 2021.09.14.11.14.31.321.0 ]--
r 14         System.println("hi");
--[ 2021.09.14.11.14.31.963.0 ]--
r 14         System.oprintln("hi");
--[ 2021.09.14.11.14.31.993.0 ]--
r 14         System.ouprintln("hi");
--[ 2021.09.14.11.14.32.089.0 ]--
r 14         System.outprintln("hi");
--[ 2021.09.14.11.14.32.390.0 ]--
r 14         System.out.println("hi");
--[ 2021.09.14.11.15.12.315.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.15.25.519.0 ]--
r 14         System.out.println("hi);
--[ 2021.09.14.11.15.25.694.0 ]--
r 14         System.out.println("h);
--[ 2021.09.14.11.15.25.880.0 ]--
r 14         System.out.println(");
--[ 2021.09.14.11.15.26.020.0 ]--
r 14         System.out.println();
--[ 2021.09.14.11.15.26.355.0 ]--
r 14         System.out.println(r);
--[ 2021.09.14.11.15.26.590.0 ]--
r 14         System.out.println(ro);
--[ 2021.09.14.11.15.26.698.0 ]--
r 14         System.out.println(row);
--[ 2021.09.14.11.15.27.078.0 ]--
r 14         System.out.println(row,);
--[ 2021.09.14.11.15.27.237.0 ]--
r 14         System.out.println(row, );
--[ 2021.09.14.11.15.27.391.0 ]--
r 14         System.out.println(row, c);
--[ 2021.09.14.11.15.27.435.0 ]--
r 14         System.out.println(row, co);
--[ 2021.09.14.11.15.27.642.0 ]--
r 14         System.out.println(row, col);
--[ 2021.09.14.11.15.31.470.0 ]--
r 14         System.out.println("row, col);
--[ 2021.09.14.11.15.32.124.0 ]--
r 14         System.out.println(""row, col);
--[ 2021.09.14.11.15.33.183.0 ]--
r 14         System.out.println("",row, col);
--[ 2021.09.14.11.15.33.547.0 ]--
r 14         System.out.println("", row, col);
--[ 2021.09.14.11.15.36.289.0 ]--
r 14         System.out.println("%", row, col);
--[ 2021.09.14.11.15.37.399.0 ]--
r 14         System.out.println("%i", row, col);
--[ 2021.09.14.11.15.37.788.0 ]--
r 14         System.out.println("%i,", row, col);
--[ 2021.09.14.11.15.37.967.0 ]--
r 14         System.out.println("%i, ", row, col);
--[ 2021.09.14.11.15.40.883.0 ]--
r 14         System.out.println("%i, %", row, col);
--[ 2021.09.14.11.15.41.244.0 ]--
r 14         System.out.println("%i, %i", row, col);
--[ 2021.09.14.11.15.44.491.0 ]--
r 14         System.out.println("r%i, %i", row, col);
--[ 2021.09.14.11.15.44.603.0 ]--
r 14         System.out.println("ro%i, %i", row, col);
--[ 2021.09.14.11.15.44.683.0 ]--
r 14         System.out.println("row%i, %i", row, col);
--[ 2021.09.14.11.15.44.798.0 ]--
r 14         System.out.println("row %i, %i", row, col);
--[ 2021.09.14.11.15.46.357.0 ]--
r 14         System.out.println("row %i, c%i", row, col);
--[ 2021.09.14.11.15.46.691.0 ]--
r 14         System.out.println("row %i, co%i", row, col);
--[ 2021.09.14.11.15.46.895.0 ]--
r 14         System.out.println("row %i, col%i", row, col);
--[ 2021.09.14.11.15.46.988.0 ]--
r 14         System.out.println("row %i, col %i", row, col);
--[ 2021.09.14.11.16.11.930.0 ]--
r 14         System.out.println("row %i, col %i" row, col);
--[ 2021.09.14.11.16.14.363.0 ]--
r 14         System.out.println("row %i, col %i", row, col);
--[ 2021.09.14.11.16.18.946.0 ]--
r 14         System.out.println("row %i, col %i", row);
--[ 2021.09.14.11.16.25.736.0 ]--
r 14         System.out.println("row %i", row);
--[ 2021.09.14.11.16.30.180.0 ]--
r 14         System.out.println("row %i" row);
--[ 2021.09.14.11.16.31.555.0 ]--
r 14         System.out.println("row %i"row);
--[ 2021.09.14.11.16.32.060.0 ]--
r 14         System.out.println("row %irow);
--[ 2021.09.14.11.16.32.085.0 ]--
r 14         System.out.println("row %row);
--[ 2021.09.14.11.16.32.110.0 ]--
r 14         System.out.println("row row);
--[ 2021.09.14.11.16.32.146.0 ]--
r 14         System.out.println("rowrow);
--[ 2021.09.14.11.16.32.169.0 ]--
r 14         System.out.println("rorow);
--[ 2021.09.14.11.16.32.198.0 ]--
r 14         System.out.println("rrow);
--[ 2021.09.14.11.16.32.228.0 ]--
r 14         System.out.println("row);
--[ 2021.09.14.11.16.32.264.0 ]--
r 14         System.out.println(row);
--[ 2021.09.14.11.16.32.299.0 ]--
r 14         System.out.printlnrow);
--[ 2021.09.14.11.16.32.317.0 ]--
r 14         System.out.printlrow);
--[ 2021.09.14.11.16.32.348.0 ]--
r 14         System.out.printrow);
--[ 2021.09.14.11.16.32.377.0 ]--
r 14         System.out.prinrow);
--[ 2021.09.14.11.16.32.413.0 ]--
r 14         System.out.prirow);
--[ 2021.09.14.11.16.32.448.0 ]--
r 14         System.out.prrow);
--[ 2021.09.14.11.16.33.738.0 ]--
r 14         System.out.println("row %i" row);
--[ 2021.09.14.11.16.35.096.0 ]--
r 14         System.out.println("row %i"row);
--[ 2021.09.14.11.16.35.283.0 ]--
r 14         System.out.println("row %irow);
--[ 2021.09.14.11.16.35.429.0 ]--
r 14         System.out.println("row %row);
--[ 2021.09.14.11.16.35.597.0 ]--
r 14         System.out.println("row row);
--[ 2021.09.14.11.16.35.757.0 ]--
r 14         System.out.println("rowrow);
--[ 2021.09.14.11.16.35.907.0 ]--
r 14         System.out.println("rorow);
--[ 2021.09.14.11.16.36.069.0 ]--
r 14         System.out.println("rrow);
--[ 2021.09.14.11.16.36.237.0 ]--
r 14         System.out.println("row);
--[ 2021.09.14.11.16.36.744.0 ]--
r 14         System.out.println(row);
--[ 2021.09.14.11.16.40.554.0 ]--
r 14         System.out.println(row,);
--[ 2021.09.14.11.16.40.739.0 ]--
r 14         System.out.println(row, );
--[ 2021.09.14.11.16.41.275.0 ]--
r 14         System.out.println(row, c);
--[ 2021.09.14.11.16.41.332.0 ]--
r 14         System.out.println(row, co);
--[ 2021.09.14.11.16.41.599.0 ]--
r 14         System.out.println(row, col);
--[ 2021.09.14.11.16.42.628.0 ]--
r 14         System.out.println(row, co);
--[ 2021.09.14.11.16.42.774.0 ]--
r 14         System.out.println(row, c);
--[ 2021.09.14.11.16.42.910.0 ]--
r 14         System.out.println(row, );
--[ 2021.09.14.11.16.43.077.0 ]--
r 14         System.out.println(row,);
--[ 2021.09.14.11.16.43.221.0 ]--
r 14         System.out.println(row);
--[ 2021.09.14.11.16.49.323.0 ]--
r 14         System.out.println("row);
--[ 2021.09.14.11.16.49.748.0 ]--
r 14         System.out.println(""row);
--[ 2021.09.14.11.16.50.922.0 ]--
r 14         System.out.println("",row);
--[ 2021.09.14.11.16.51.043.0 ]--
r 14         System.out.println("", row);
--[ 2021.09.14.11.16.52.715.0 ]--
r 14         System.out.println("",row);
--[ 2021.09.14.11.16.52.951.0 ]--
r 14         System.out.println(""row);
--[ 2021.09.14.11.16.53.193.0 ]--
r 14         System.out.println("row);
--[ 2021.09.14.11.16.55.185.0 ]--
+ 15         
--[ 2021.09.14.11.16.55.229.0 ]--
r 15                 
--[ 2021.09.14.11.16.55.896.0 ]--
- 15
--[ 2021.09.14.11.17.01.309.0 ]--
r 14         System.out.println("row");
--[ 2021.09.14.11.17.24.646.0 ]--
r 14         System.out.println("row" );
--[ 2021.09.14.11.17.25.431.0 ]--
r 14         System.out.println("row" +);
--[ 2021.09.14.11.17.25.568.0 ]--
r 14         System.out.println("row" + );
--[ 2021.09.14.11.17.25.954.0 ]--
r 14         System.out.println("row" + r);
--[ 2021.09.14.11.17.26.270.0 ]--
r 14         System.out.println("row" + rp);
--[ 2021.09.14.11.17.26.331.0 ]--
r 14         System.out.println("row" + rpw);
--[ 2021.09.14.11.17.26.951.0 ]--
r 14         System.out.println("row" + rp);
--[ 2021.09.14.11.17.27.076.0 ]--
r 14         System.out.println("row" + r);
--[ 2021.09.14.11.17.28.106.0 ]--
r 14         System.out.println("row" + ro);
--[ 2021.09.14.11.17.28.189.0 ]--
r 14         System.out.println("row" + row);
--[ 2021.09.14.11.17.32.641.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.17.43.064.0 ]--
r 14         System.out.println("row " + row);
--[ 2021.09.14.11.17.44.543.0 ]--
r 14         System.out.println("row " + row );
--[ 2021.09.14.11.17.44.877.0 ]--
r 14         System.out.println("row " + row +);
--[ 2021.09.14.11.17.44.987.0 ]--
r 14         System.out.println("row " + row + );
--[ 2021.09.14.11.17.45.919.0 ]--
r 14         System.out.println("row " + row + "");
--[ 2021.09.14.11.17.46.709.0 ]--
r 14         System.out.println("row " + row + "c");
--[ 2021.09.14.11.17.46.780.0 ]--
r 14         System.out.println("row " + row + "co");
--[ 2021.09.14.11.17.46.932.0 ]--
r 14         System.out.println("row " + row + "col");
--[ 2021.09.14.11.17.47.575.0 ]--
r 14         System.out.println("row " + row + "col ");
--[ 2021.09.14.11.17.48.254.0 ]--
r 14         System.out.println("row " + row + "col " );
--[ 2021.09.14.11.17.48.509.0 ]--
r 14         System.out.println("row " + row + "col " +);
--[ 2021.09.14.11.17.48.621.0 ]--
r 14         System.out.println("row " + row + "col " + );
--[ 2021.09.14.11.17.49.359.0 ]--
r 14         System.out.println("row " + row + "col " + c);
--[ 2021.09.14.11.17.49.426.0 ]--
r 14         System.out.println("row " + row + "col " + co);
--[ 2021.09.14.11.17.49.626.0 ]--
r 14         System.out.println("row " + row + "col " + col);
--[ 2021.09.14.11.17.54.671.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.19.08.338.0 ]--
+ 23         
--[ 2021.09.14.11.19.25.413.0 ]--
+ 6     
--[ 2021.09.14.11.19.25.801.0 ]--
+ 6     
--[ 2021.09.14.11.19.32.052.0 ]--
r 6     b
--[ 2021.09.14.11.19.32.217.0 ]--
r 6     bo
--[ 2021.09.14.11.19.32.318.0 ]--
r 6     boa
--[ 2021.09.14.11.19.32.467.0 ]--
r 6     boar
--[ 2021.09.14.11.19.32.677.0 ]--
r 6     board
--[ 2021.09.14.11.19.35.425.0 ]--
r 6     iboard
--[ 2021.09.14.11.19.35.527.0 ]--
r 6     inboard
--[ 2021.09.14.11.19.35.635.0 ]--
r 6     intboard
--[ 2021.09.14.11.19.35.939.0 ]--
r 6     int board
--[ 2021.09.14.11.19.36.346.0 ]--
r 6     intboard
--[ 2021.09.14.11.19.37.651.0 ]--
r 6     int[board
--[ 2021.09.14.11.19.38.174.0 ]--
r 6     int[]board
--[ 2021.09.14.11.19.38.430.0 ]--
r 6     int[] board
--[ 2021.09.14.11.19.40.699.0 ]--
r 6     int[] board;
--[ 2021.09.14.11.19.47.330.0 ]--
r 6     int[] board ;
--[ 2021.09.14.11.19.47.698.0 ]--
r 6     int[] board =;
--[ 2021.09.14.11.19.47.787.0 ]--
r 6     int[] board = ;
--[ 2021.09.14.11.19.50.306.0 ]--
r 6     int[] board = i;
--[ 2021.09.14.11.19.50.405.0 ]--
r 6     int[] board = in;
--[ 2021.09.14.11.19.50.432.0 ]--
r 6     int[] board = int;
--[ 2021.09.14.11.19.51.281.0 ]--
r 6     int[] board = int[];
--[ 2021.09.14.11.19.54.369.0 ]--
r 6     int[] board = int[N];
--[ 2021.09.14.11.19.55.916.0 ]--
r 6     int[] board = int[N*];
--[ 2021.09.14.11.19.56.737.0 ]--
r 6     int[] board = int[N*N];
--[ 2021.09.14.11.19.59.821.0 ]--
r 6     
--[ 2021.09.14.11.20.00.202.0 ]--
- 6
--[ 2021.09.14.11.20.00.448.0 ]--
r 5 public class HexBoard 
--[ 2021.09.14.11.20.01.357.0 ]--
- 5
--[ 2021.09.14.11.20.02.568.0 ]--
+ 5 public class HexBoard 
--[ 2021.09.14.11.20.03.016.0 ]--
+ 5 public class HexBoard {
r 6     
--[ 2021.09.14.11.20.03.803.0 ]--
- 6
--[ 2021.09.14.11.20.05.819.0 ]--
+ 8     
--[ 2021.09.14.11.20.06.518.0 ]--
r 8         
--[ 2021.09.14.11.20.07.194.0 ]--
+ 8         public class HexBoard 
r 9 
--[ 2021.09.14.11.20.07.204.0 ]--
r 8         public class HexBoard
--[ 2021.09.14.11.20.09.165.0 ]--
- 9
--[ 2021.09.14.11.20.11.523.0 ]--
r 8         i
--[ 2021.09.14.11.20.11.606.0 ]--
r 8         in
--[ 2021.09.14.11.20.11.685.0 ]--
r 8         int
--[ 2021.09.14.11.20.13.696.0 ]--
r 8         int[]
--[ 2021.09.14.11.20.15.371.0 ]--
r 8         int[] 
--[ 2021.09.14.11.20.15.763.0 ]--
r 8         int[] b
--[ 2021.09.14.11.20.16.006.0 ]--
r 8         int[] bo
--[ 2021.09.14.11.20.16.118.0 ]--
r 8         int[] boa
--[ 2021.09.14.11.20.16.197.0 ]--
r 8         int[] boar
--[ 2021.09.14.11.20.16.394.0 ]--
r 8         int[] board
--[ 2021.09.14.11.20.16.481.0 ]--
r 8         int[] board 
--[ 2021.09.14.11.20.17.157.0 ]--
r 8         int[] board
--[ 2021.09.14.11.20.17.457.0 ]--
r 8         int[] boar
--[ 2021.09.14.11.20.18.027.0 ]--
r 8         int[] board
--[ 2021.09.14.11.20.18.402.0 ]--
r 8         int[] board 
--[ 2021.09.14.11.20.18.691.0 ]--
r 8         int[] board =
--[ 2021.09.14.11.20.18.804.0 ]--
r 8         int[] board = 
--[ 2021.09.14.11.20.20.358.0 ]--
r 8         int[] board = i
--[ 2021.09.14.11.20.20.465.0 ]--
r 8         int[] board = in
--[ 2021.09.14.11.20.20.848.0 ]--
r 8         int[] board = int
--[ 2021.09.14.11.20.21.658.0 ]--
r 8         int[] board = int[]
--[ 2021.09.14.11.20.22.244.0 ]--
r 8         int[] board = int[N]
--[ 2021.09.14.11.20.24.877.0 ]--
r 8         int[] board = int[N*]
--[ 2021.09.14.11.20.25.485.0 ]--
r 8         int[] board = int[N*N]
--[ 2021.09.14.11.20.27.197.0 ]--
r 8         int[] board = int[N*N];
--[ 2021.09.14.11.20.29.335.0 ]--
r 6 
r 25 
--[ 2021.09.14.11.21.37.029.0 ]--
r 8         int[] board = nint[N*N];
--[ 2021.09.14.11.21.37.147.0 ]--
r 8         int[] board = neint[N*N];
--[ 2021.09.14.11.21.37.188.0 ]--
r 8         int[] board = newint[N*N];
--[ 2021.09.14.11.21.37.322.0 ]--
r 8         int[] board = new int[N*N];
--[ 2021.09.14.11.21.53.875.0 ]--
r 16 //        System.out.println("row " + row + "col " + col);
--[ 2021.09.14.11.21.56.995.0 ]--
r 16         System.out.println("row " + row + "col " + col);
--[ 2021.09.14.11.22.16.245.0 ]--
r 25     
--[ 2021.09.14.11.22.16.708.0 ]--
r 25         
--[ 2021.09.14.11.23.10.551.0 ]--
- 25
--[ 2021.09.14.11.23.10.817.0 ]--
r 24     public void setTile(int row, int col, int player) 
--[ 2021.09.14.11.23.12.455.0 ]--
+ 24     public void setTile(int row, int col, int player) {
r 25         
--[ 2021.09.14.11.23.19.021.0 ]--
+ 9         
--[ 2021.09.14.11.23.19.201.0 ]--
r 9         System.out.println("row " + row + "col " + col);
--[ 2021.09.14.11.23.23.647.0 ]--
r 9         System.out.println(b);
--[ 2021.09.14.11.23.23.788.0 ]--
r 9         System.out.println(bo);
--[ 2021.09.14.11.23.23.942.0 ]--
r 9         System.out.println(boa);
--[ 2021.09.14.11.23.24.192.0 ]--
r 9         System.out.println(boar);
--[ 2021.09.14.11.23.24.304.0 ]--
r 9         System.out.println(board);
--[ 2021.09.14.11.23.27.424.0 ]--
r 17 //        System.out.println("row " + row + "col " + col);
--[ 2021.09.14.11.23.29.254.0 ]--
r 26 
--[ 2021.09.14.11.23.32.161.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.23.37.611.0 ]--
r 9         System.out.println(board[]);
--[ 2021.09.14.11.23.37.900.0 ]--
r 9         System.out.println(board[0]);
--[ 2021.09.14.11.23.44.089.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.25.47.608.0 ]--
+ 18 
--[ 2021.09.14.11.25.47.647.0 ]--
r 18         
--[ 2021.09.14.11.25.48.828.0 ]--
r 18         i
--[ 2021.09.14.11.25.49.022.0 ]--
r 18         if
--[ 2021.09.14.11.25.49.265.0 ]--
r 18         if 
--[ 2021.09.14.11.25.52.528.0 ]--
r 18         if ()
--[ 2021.09.14.11.25.53.514.0 ]--
r 18         if (t)
--[ 2021.09.14.11.25.53.745.0 ]--
r 18         if (th)
--[ 2021.09.14.11.25.53.830.0 ]--
r 18         if (thi)
--[ 2021.09.14.11.25.54.025.0 ]--
r 18         if (this)
--[ 2021.09.14.11.25.54.368.0 ]--
r 18         if (this.)
--[ 2021.09.14.11.25.55.690.0 ]--
r 18         if (this.b)
--[ 2021.09.14.11.25.56.262.0 ]--
r 18         if (this.bo)
--[ 2021.09.14.11.25.57.037.0 ]--
r 18         if (this.boa)
--[ 2021.09.14.11.25.57.234.0 ]--
r 18         if (this.boar)
--[ 2021.09.14.11.25.57.435.0 ]--
r 18         if (this.board)
--[ 2021.09.14.11.25.58.792.0 ]--
r 18         if (this.boar)
--[ 2021.09.14.11.25.59.296.0 ]--
r 18         if (this.boa)
--[ 2021.09.14.11.25.59.323.0 ]--
r 18         if (this.bo)
--[ 2021.09.14.11.25.59.352.0 ]--
r 18         if (this.b)
--[ 2021.09.14.11.25.59.382.0 ]--
r 18         if (this.)
--[ 2021.09.14.11.25.59.410.0 ]--
r 18         if (this)
--[ 2021.09.14.11.25.59.446.0 ]--
r 18         if (thi)
--[ 2021.09.14.11.25.59.472.0 ]--
r 18         if (th)
--[ 2021.09.14.11.25.59.979.0 ]--
r 18         if (t)
--[ 2021.09.14.11.26.00.238.0 ]--
r 18         if ()
--[ 2021.09.14.11.26.04.411.0 ]--
r 18         if (b)
--[ 2021.09.14.11.26.04.546.0 ]--
r 18         if (bo)
--[ 2021.09.14.11.26.04.749.0 ]--
r 18         if (boa)
--[ 2021.09.14.11.26.05.143.0 ]--
r 18         if (boar)
--[ 2021.09.14.11.26.05.418.0 ]--
r 18         if (board)
--[ 2021.09.14.11.26.07.039.0 ]--
r 18         if (boar)
--[ 2021.09.14.11.26.07.249.0 ]--
r 18         if (boa)
--[ 2021.09.14.11.26.07.425.0 ]--
r 18         if (bo)
--[ 2021.09.14.11.26.07.626.0 ]--
r 18         if (b)
--[ 2021.09.14.11.26.12.466.0 ]--
r 6     
--[ 2021.09.14.11.26.12.856.0 ]--
r 6     i
--[ 2021.09.14.11.26.12.983.0 ]--
r 6     in
--[ 2021.09.14.11.26.13.098.0 ]--
r 6     int
--[ 2021.09.14.11.26.14.055.0 ]--
r 6     int[]
--[ 2021.09.14.11.26.17.665.0 ]--
r 6     int[] 
--[ 2021.09.14.11.26.18.097.0 ]--
r 6     int[] b
--[ 2021.09.14.11.26.18.281.0 ]--
r 6     int[] bo
--[ 2021.09.14.11.26.18.385.0 ]--
r 6     int[] boa
--[ 2021.09.14.11.26.18.521.0 ]--
r 6     int[] boar
--[ 2021.09.14.11.26.18.699.0 ]--
r 6     int[] board
--[ 2021.09.14.11.26.19.264.0 ]--
r 6     int[] board;
--[ 2021.09.14.11.26.25.083.0 ]--
r 8         board = new int[N*N];
--[ 2021.09.14.11.26.30.220.0 ]--
r 18         if ()
--[ 2021.09.14.11.26.30.703.0 ]--
r 18         if (t)
--[ 2021.09.14.11.26.30.869.0 ]--
r 18         if (th)
--[ 2021.09.14.11.26.30.958.0 ]--
r 18         if (thi)
--[ 2021.09.14.11.26.31.059.0 ]--
r 18         if (this)
--[ 2021.09.14.11.26.31.432.0 ]--
r 18         if (this.)
--[ 2021.09.14.11.26.31.702.0 ]--
r 18         if (this.b)
--[ 2021.09.14.11.26.32.234.0 ]--
r 18         if (this.board)
--[ 2021.09.14.11.26.33.225.0 ]--
r 18         if (this.board )
--[ 2021.09.14.11.26.34.082.0 ]--
r 18         if (this.board)
--[ 2021.09.14.11.26.35.480.0 ]--
r 18         if (this.board[])
--[ 2021.09.14.11.26.36.379.0 ]--
r 18         if (this.board[r])
--[ 2021.09.14.11.26.36.525.0 ]--
r 18         if (this.board[ro])
--[ 2021.09.14.11.26.36.612.0 ]--
r 18         if (this.board[row])
--[ 2021.09.14.11.26.40.561.0 ]--
r 18         if (this.board[ro])
--[ 2021.09.14.11.26.40.689.0 ]--
r 18         if (this.board[r])
--[ 2021.09.14.11.26.40.882.0 ]--
r 18         if (this.board[])
--[ 2021.09.14.11.26.46.091.0 ]--
r 8         board = new int[N*];
--[ 2021.09.14.11.26.46.283.0 ]--
r 8         board = new int[N];
--[ 2021.09.14.11.26.47.727.0 ]--
r 8         board = new int[N][];
--[ 2021.09.14.11.26.48.398.0 ]--
r 8         board = new int[N][N];
--[ 2021.09.14.11.26.58.118.0 ]--
r 8         board = new int[N];
--[ 2021.09.14.11.26.58.908.0 ]--
r 8         board = new int[N*N];
--[ 2021.09.14.11.29.42.444.0 ]--
r 18         if (this.board[][])
--[ 2021.09.14.11.29.43.598.0 ]--
r 18         if (this.board[][c])
--[ 2021.09.14.11.29.43.691.0 ]--
r 18         if (this.board[][co])
--[ 2021.09.14.11.29.43.932.0 ]--
r 18         if (this.board[][col])
--[ 2021.09.14.11.29.45.610.0 ]--
r 18         if (this.board[r][col])
--[ 2021.09.14.11.29.45.728.0 ]--
r 18         if (this.board[ro][col])
--[ 2021.09.14.11.29.45.908.0 ]--
r 18         if (this.board[row][col])
--[ 2021.09.14.11.29.54.768.0 ]--
r 18         if (this.board[row][col] )
--[ 2021.09.14.11.29.55.314.0 ]--
r 18         if (this.board[row][col] =)
--[ 2021.09.14.11.29.55.441.0 ]--
r 18         if (this.board[row][col] ==)
--[ 2021.09.14.11.29.55.649.0 ]--
r 18         if (this.board[row][col] == )
--[ 2021.09.14.11.30.00.048.0 ]--
r 18         if (this.board[row][col] == 0)
--[ 2021.09.14.11.30.31.265.0 ]--
r 18         if (this.board[row][col] == 0) 
--[ 2021.09.14.11.30.31.496.0 ]--
r 18         if (this.board[row][col] == 0) {
--[ 2021.09.14.11.30.33.664.0 ]--
+ 19 
+ 20 }
--[ 2021.09.14.11.30.33.701.0 ]--
r 20         }
--[ 2021.09.14.11.30.33.724.0 ]--
r 19             
--[ 2021.09.14.11.30.35.575.0 ]--
r 19             f
--[ 2021.09.14.11.30.36.163.0 ]--
r 19             fr
--[ 2021.09.14.11.30.36.472.0 ]--
r 19             f
--[ 2021.09.14.11.30.36.599.0 ]--
r 19             
--[ 2021.09.14.11.30.36.745.0 ]--
r 19             r
--[ 2021.09.14.11.30.36.839.0 ]--
r 19             re
--[ 2021.09.14.11.30.37.339.0 ]--
r 19             return
--[ 2021.09.14.11.30.37.346.0 ]--
r 19             return 
--[ 2021.09.14.11.30.37.720.0 ]--
r 19             return f
--[ 2021.09.14.11.30.37.823.0 ]--
r 19             return fa
--[ 2021.09.14.11.30.37.914.0 ]--
r 19             return fal
--[ 2021.09.14.11.30.38.288.0 ]--
r 19             return false
--[ 2021.09.14.11.30.41.841.0 ]--
r 21         return t;
--[ 2021.09.14.11.30.41.972.0 ]--
r 21         return tr;
--[ 2021.09.14.11.30.42.056.0 ]--
r 21         return tru;
--[ 2021.09.14.11.30.42.071.0 ]--
r 21         return true;
--[ 2021.09.14.11.30.46.506.0 ]--
r 19             return false;
--[ 2021.09.14.11.31.00.449.0 ]--
r 18         if (this.board[row][col == 0) {
--[ 2021.09.14.11.31.00.604.0 ]--
r 18         if (this.board[row][co == 0) {
--[ 2021.09.14.11.31.00.777.0 ]--
r 18         if (this.board[row][c == 0) {
--[ 2021.09.14.11.31.00.898.0 ]--
r 18         if (this.board[row][ == 0) {
--[ 2021.09.14.11.31.01.078.0 ]--
r 18         if (this.board[row] == 0) {
--[ 2021.09.14.11.31.27.683.0 ]--
r 6     int[][] board;
--[ 2021.09.14.11.31.32.689.0 ]--
r 8         board = new int[N*];
--[ 2021.09.14.11.31.32.875.0 ]--
r 8         board = new int[N];
--[ 2021.09.14.11.31.33.275.0 ]--
r 8         board = new int[N][];
--[ 2021.09.14.11.31.34.560.0 ]--
r 8         board = new int[N][N];
--[ 2021.09.14.11.31.39.676.0 ]--
r 9         System.out.println(board[0][]);
--[ 2021.09.14.11.31.40.737.0 ]--
r 9         System.out.println(board[0][0]);
--[ 2021.09.14.11.31.43.883.0 ]--
r 18         if (this.board[row][] == 0) {
--[ 2021.09.14.11.31.44.310.0 ]--
r 18         if (this.board[row][c] == 0) {
--[ 2021.09.14.11.31.44.442.0 ]--
r 18         if (this.board[row][co] == 0) {
--[ 2021.09.14.11.31.44.622.0 ]--
r 18         if (this.board[row][col] == 0) {
--[ 2021.09.14.11.31.52.035.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.33.32.558.0 ]--
- 17
--[ 2021.09.14.11.33.38.789.0 ]--
+ 20         
--[ 2021.09.14.11.33.39.751.0 ]--
r 20         p
--[ 2021.09.14.11.33.39.852.0 ]--
r 20         pr
--[ 2021.09.14.11.33.39.948.0 ]--
r 20         pri
--[ 2021.09.14.11.33.40.025.0 ]--
r 20         prin
--[ 2021.09.14.11.33.40.086.0 ]--
r 20         print
--[ 2021.09.14.11.33.40.535.0 ]--
r 20         printl
--[ 2021.09.14.11.33.40.662.0 ]--
r 20         println
--[ 2021.09.14.11.33.44.006.0 ]--
r 20         Sprintln
--[ 2021.09.14.11.33.45.050.0 ]--
r 20         Systemprintln
--[ 2021.09.14.11.33.45.059.0 ]--
r 20         System println
--[ 2021.09.14.11.33.45.068.0 ]--
r 20         Systemprintln
--[ 2021.09.14.11.33.45.320.0 ]--
r 20         System.println
--[ 2021.09.14.11.33.46.016.0 ]--
r 20         System.outprintln
--[ 2021.09.14.11.33.46.512.0 ]--
r 20         System.out.println
--[ 2021.09.14.11.33.48.150.0 ]--
r 20         System.out.printlnprintln
--[ 2021.09.14.11.33.48.165.0 ]--
r 20         System.out.println()println
--[ 2021.09.14.11.33.48.170.0 ]--
r 20         System.out.println();println
--[ 2021.09.14.11.33.49.990.0 ]--
r 20         System.out.println("");println
--[ 2021.09.14.11.33.50.552.0 ]--
r 20         System.out.println("f");println
--[ 2021.09.14.11.33.50.686.0 ]--
r 20         System.out.println("fa");println
--[ 2021.09.14.11.33.50.793.0 ]--
r 20         System.out.println("fal");println
--[ 2021.09.14.11.33.51.287.0 ]--
r 20         System.out.println("fa");println
--[ 2021.09.14.11.33.51.446.0 ]--
r 20         System.out.println("f");println
--[ 2021.09.14.11.33.51.567.0 ]--
r 20         System.out.println("");println
--[ 2021.09.14.11.33.51.666.0 ]--
r 20         System.out.println("t");println
--[ 2021.09.14.11.33.51.818.0 ]--
r 20         System.out.println("tu");println
--[ 2021.09.14.11.33.51.889.0 ]--
r 20         System.out.println("tur");println
--[ 2021.09.14.11.33.51.991.0 ]--
r 20         System.out.println("ture");println
--[ 2021.09.14.11.33.52.480.0 ]--
r 20         System.out.println("tur");println
--[ 2021.09.14.11.33.52.639.0 ]--
r 20         System.out.println("tu");println
--[ 2021.09.14.11.33.52.760.0 ]--
r 20         System.out.println("t");println
--[ 2021.09.14.11.33.52.948.0 ]--
r 20         System.out.println("tr");println
--[ 2021.09.14.11.33.53.055.0 ]--
r 20         System.out.println("tru");println
--[ 2021.09.14.11.33.53.183.0 ]--
r 20         System.out.println("true");println
--[ 2021.09.14.11.33.56.866.0 ]--
r 20         System.out.println("true");
--[ 2021.09.14.11.34.02.049.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.34.13.472.0 ]--
+ 19             
--[ 2021.09.14.11.34.13.766.0 ]--
r 19             System.out.println("true");
--[ 2021.09.14.11.34.14.984.0 ]--
r 19             
--[ 2021.09.14.11.34.15.496.0 ]--
- 19
--[ 2021.09.14.11.34.17.759.0 ]--
+ 18             
--[ 2021.09.14.11.34.18.373.0 ]--
r 18             System.out.println("true");
--[ 2021.09.14.11.34.21.896.0 ]--
r 18             System.out.println("f");
--[ 2021.09.14.11.34.22.022.0 ]--
r 18             System.out.println("fa");
--[ 2021.09.14.11.34.22.148.0 ]--
r 18             System.out.println("fal");
--[ 2021.09.14.11.34.22.238.0 ]--
r 18             System.out.println("fals");
--[ 2021.09.14.11.34.22.383.0 ]--
r 18             System.out.println("falso");
--[ 2021.09.14.11.34.22.502.0 ]--
r 18             System.out.println("falsoe");
--[ 2021.09.14.11.34.22.918.0 ]--
r 18             System.out.println("falso");
--[ 2021.09.14.11.34.22.967.0 ]--
r 18             System.out.println("fals");
--[ 2021.09.14.11.34.23.075.0 ]--
r 18             System.out.println("false");
--[ 2021.09.14.11.34.27.326.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.34.38.563.0 ]--
r 30     
--[ 2021.09.14.11.34.39.561.0 ]--
r 30         
--[ 2021.09.14.11.34.43.696.0 ]--
r 30         t
--[ 2021.09.14.11.34.43.836.0 ]--
r 30         th
--[ 2021.09.14.11.34.43.900.0 ]--
r 30         thi
--[ 2021.09.14.11.34.44.102.0 ]--
r 30         this
--[ 2021.09.14.11.34.44.461.0 ]--
r 30         this.
--[ 2021.09.14.11.34.44.866.0 ]--
r 30         this.b
--[ 2021.09.14.11.34.45.257.0 ]--
r 30         this.board
--[ 2021.09.14.11.34.46.905.0 ]--
r 30         this.board[]
--[ 2021.09.14.11.34.47.243.0 ]--
r 30         this.board[r]
--[ 2021.09.14.11.34.47.783.0 ]--
r 30         this.board[row]
--[ 2021.09.14.11.34.49.528.0 ]--
r 30         this.board[row][]
--[ 2021.09.14.11.34.49.767.0 ]--
r 30         this.board[row][c]
--[ 2021.09.14.11.34.50.336.0 ]--
r 30         this.board[row][col]
--[ 2021.09.14.11.34.51.578.0 ]--
r 30         this.board[row][col] 
--[ 2021.09.14.11.34.51.864.0 ]--
r 30         this.board[row][col] =
--[ 2021.09.14.11.34.52.047.0 ]--
r 30         this.board[row][col] = 
--[ 2021.09.14.11.35.13.077.0 ]--
r 30         this.board[row][col] = p
--[ 2021.09.14.11.35.13.885.0 ]--
r 30         this.board[row][col] = player
--[ 2021.09.14.11.35.14.590.0 ]--
r 30         this.board[row][col] = player 
--[ 2021.09.14.11.35.29.877.0 ]--
r 30         this.board[row][col] = player
--[ 2021.09.14.11.35.31.100.0 ]--
r 30         this.board[row][col] = player;
--[ 2021.09.14.11.35.36.520.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.36.05.451.0 ]--
- 21
--[ 2021.09.14.11.36.06.636.0 ]--
- 18
--[ 2021.09.14.11.36.11.943.0 ]--
+ 18             System.out.println("false");
--[ 2021.09.14.11.36.15.855.0 ]--
- 18
--[ 2021.09.14.11.36.22.504.0 ]--
- 17
r 17         if (this.board[row][col] == 0) { return false;
--[ 2021.09.14.11.36.23.566.0 ]--
r 17         if (this.board[row][col] == 0) {return false;
--[ 2021.09.14.11.36.25.274.0 ]--
- 17
r 17         if (this.board[row][col] == 0) {return false; }
--[ 2021.09.14.11.36.26.159.0 ]--
r 17         if (this.board[row][col] == 0) {return false;}
--[ 2021.09.14.11.36.30.283.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.37.37.340.0 ]--
+ 38         
--[ 2021.09.14.11.37.37.758.0 ]--
r 38         f
--[ 2021.09.14.11.37.38.262.0 ]--
r 38         fo
--[ 2021.09.14.11.37.38.313.0 ]--
r 38         for
--[ 2021.09.14.11.37.38.463.0 ]--
r 38         for 
--[ 2021.09.14.11.37.39.054.0 ]--
r 38         for ()
--[ 2021.09.14.11.37.39.301.0 ]--
r 38         for (i)
--[ 2021.09.14.11.37.40.361.0 ]--
r 38         for (i<)
--[ 2021.09.14.11.37.42.063.0 ]--
r 38         for (i)
--[ 2021.09.14.11.37.42.209.0 ]--
r 38         for ()
--[ 2021.09.14.11.37.42.438.0 ]--
r 38         for (i)
--[ 2021.09.14.11.37.42.821.0 ]--
r 38         for (int)
--[ 2021.09.14.11.37.42.843.0 ]--
r 38         for (int )
--[ 2021.09.14.11.37.43.099.0 ]--
r 38         for (int i)
--[ 2021.09.14.11.37.44.044.0 ]--
r 38         for (int i<)
--[ 2021.09.14.11.37.45.479.0 ]--
r 38         for (int i<0)
--[ 2021.09.14.11.37.46.206.0 ]--
r 38         for (int i<)
--[ 2021.09.14.11.37.46.390.0 ]--
r 38         for (int i)
--[ 2021.09.14.11.37.47.036.0 ]--
r 38         for (int i=)
--[ 2021.09.14.11.37.47.293.0 ]--
r 38         for (int i=0)
--[ 2021.09.14.11.37.47.974.0 ]--
r 38         for (int i=0;)
--[ 2021.09.14.11.37.48.381.0 ]--
r 38         for (int i=0; )
--[ 2021.09.14.11.37.48.693.0 ]--
r 38         for (int i=0; i)
--[ 2021.09.14.11.37.49.362.0 ]--
r 38         for (int i=0; iM)
--[ 2021.09.14.11.37.49.744.0 ]--
r 38         for (int i=0; i)
--[ 2021.09.14.11.37.50.141.0 ]--
r 38         for (int i=0; i<)
--[ 2021.09.14.11.37.51.185.0 ]--
r 38         for (int i=0; i<b)
--[ 2021.09.14.11.37.51.313.0 ]--
r 38         for (int i=0; i<bo)
--[ 2021.09.14.11.37.51.708.0 ]--
r 38         for (int i=0; i<b)
--[ 2021.09.14.11.37.51.868.0 ]--
r 38         for (int i=0; i<)
--[ 2021.09.14.11.37.51.938.0 ]--
r 38         for (int i=0; i<t)
--[ 2021.09.14.11.37.52.070.0 ]--
r 38         for (int i=0; i<th)
--[ 2021.09.14.11.37.52.097.0 ]--
r 38         for (int i=0; i<thi)
--[ 2021.09.14.11.37.52.273.0 ]--
r 38         for (int i=0; i<this)
--[ 2021.09.14.11.37.52.689.0 ]--
r 38         for (int i=0; i<this.)
--[ 2021.09.14.11.37.52.899.0 ]--
r 38         for (int i=0; i<this.b)
--[ 2021.09.14.11.37.53.042.0 ]--
r 38         for (int i=0; i<this.bo)
--[ 2021.09.14.11.37.53.527.0 ]--
r 38         for (int i=0; i<this.board)
--[ 2021.09.14.11.37.53.806.0 ]--
r 38         for (int i=0; i<this.board.)
--[ 2021.09.14.11.37.54.458.0 ]--
r 38         for (int i=0; i<this.board.l)
--[ 2021.09.14.11.37.54.594.0 ]--
r 38         for (int i=0; i<this.board.le)
--[ 2021.09.14.11.37.55.062.0 ]--
r 38         for (int i=0; i<this.board.length)
--[ 2021.09.14.11.37.56.900.0 ]--
r 38         for (int i=0; i<this.board.length;)
--[ 2021.09.14.11.37.57.365.0 ]--
r 38         for (int i=0; i<this.board.length; )
--[ 2021.09.14.11.37.57.623.0 ]--
r 38         for (int i=0; i<this.board.length; i)
--[ 2021.09.14.11.37.58.334.0 ]--
r 38         for (int i=0; i<this.board.length; i+)
--[ 2021.09.14.11.37.58.471.0 ]--
r 38         for (int i=0; i<this.board.length; i++)
--[ 2021.09.14.11.37.59.472.0 ]--
r 38         for (int i=0; i<this.board.length; i++) 
--[ 2021.09.14.11.37.59.802.0 ]--
r 38         for (int i=0; i<this.board.length; i++) {
--[ 2021.09.14.11.38.00.047.0 ]--
+ 39 
+ 40 }
--[ 2021.09.14.11.38.00.073.0 ]--
r 40         }
--[ 2021.09.14.11.38.00.103.0 ]--
r 39             
--[ 2021.09.14.11.38.19.509.0 ]--
+ 39             for (int i=0; i<this.board.length; i++) {
+ 41         }
--[ 2021.09.14.11.38.19.526.0 ]--
r 40 
r 41             }
--[ 2021.09.14.11.38.22.657.0 ]--
r 39             for (int =0; i<this.board.length; i++) {
--[ 2021.09.14.11.38.22.914.0 ]--
r 39             for (int j=0; i<this.board.length; i++) {
--[ 2021.09.14.11.38.25.399.0 ]--
r 39             for (int j=0; i<this.board.length; ++) {
--[ 2021.09.14.11.38.25.518.0 ]--
r 39             for (int j=0; i<this.board.length; j++) {
--[ 2021.09.14.11.38.26.520.0 ]--
r 40     
--[ 2021.09.14.11.38.27.022.0 ]--
r 40         
--[ 2021.09.14.11.38.27.279.0 ]--
r 40             
--[ 2021.09.14.11.38.27.518.0 ]--
r 40                 
--[ 2021.09.14.11.38.28.245.0 ]--
r 40                 b
--[ 2021.09.14.11.38.28.348.0 ]--
r 40                 bo
--[ 2021.09.14.11.38.28.497.0 ]--
r 40                 boa
--[ 2021.09.14.11.38.28.596.0 ]--
r 40                 boar
--[ 2021.09.14.11.38.29.488.0 ]--
r 40                 boa
--[ 2021.09.14.11.38.29.637.0 ]--
r 40                 bo
--[ 2021.09.14.11.38.29.773.0 ]--
r 40                 b
--[ 2021.09.14.11.38.29.905.0 ]--
r 40                 
--[ 2021.09.14.11.38.29.966.0 ]--
r 40                 t
--[ 2021.09.14.11.38.30.170.0 ]--
r 40                 th
--[ 2021.09.14.11.38.30.186.0 ]--
r 40                 thi
--[ 2021.09.14.11.38.30.329.0 ]--
r 40                 this
--[ 2021.09.14.11.38.30.487.0 ]--
r 40                 this.
--[ 2021.09.14.11.38.30.860.0 ]--
r 40                 this.b
--[ 2021.09.14.11.38.31.242.0 ]--
r 40                 this.board
--[ 2021.09.14.11.38.32.690.0 ]--
r 40                 this.board[]
--[ 2021.09.14.11.38.33.676.0 ]--
r 40                 this.board[i]
--[ 2021.09.14.11.38.35.644.0 ]--
r 40                 this.board[i]]
--[ 2021.09.14.11.38.36.069.0 ]--
r 40                 this.board[i]
--[ 2021.09.14.11.38.36.648.0 ]--
r 40                 this.board[i][]
--[ 2021.09.14.11.38.36.990.0 ]--
r 40                 this.board[i][j]
--[ 2021.09.14.11.38.38.652.0 ]--
r 40                 this.board[i][j];
--[ 2021.09.14.11.38.43.743.0 ]--
r 40                 ithis.board[i][j];
--[ 2021.09.14.11.38.43.791.0 ]--
r 40                 ifthis.board[i][j];
--[ 2021.09.14.11.38.44.149.0 ]--
r 40                 if this.board[i][j];
--[ 2021.09.14.11.38.44.517.0 ]--
r 40                 if (this.board[i][j];
--[ 2021.09.14.11.38.46.678.0 ]--
r 40                 if (this.board[i][j]
--[ 2021.09.14.11.38.47.237.0 ]--
r 40                 if (this.board[i][j] 
--[ 2021.09.14.11.38.47.808.0 ]--
r 40                 if (this.board[i][j] =
--[ 2021.09.14.11.38.47.943.0 ]--
r 40                 if (this.board[i][j] ==
--[ 2021.09.14.11.38.48.115.0 ]--
r 40                 if (this.board[i][j] == 
--[ 2021.09.14.11.38.48.309.0 ]--
r 40                 if (this.board[i][j] == -0
--[ 2021.09.14.11.38.48.904.0 ]--
r 40                 if (this.board[i][j] == -
--[ 2021.09.14.11.38.49.038.0 ]--
r 40                 if (this.board[i][j] == 
--[ 2021.09.14.11.38.49.726.0 ]--
r 40                 if (this.board[i][j] == 0
--[ 2021.09.14.11.38.50.343.0 ]--
r 40                 if (this.board[i][j] == 0)
--[ 2021.09.14.11.38.51.894.0 ]--
+ 37     public int numberOfUnsetTiles() {\
r 38     
--[ 2021.09.14.11.38.51.924.0 ]--
r 38         
--[ 2021.09.14.11.38.52.781.0 ]--
r 38         i
--[ 2021.09.14.11.38.52.926.0 ]--
r 38         in
--[ 2021.09.14.11.38.53.015.0 ]--
r 38         int
--[ 2021.09.14.11.38.53.312.0 ]--
r 38         int 
--[ 2021.09.14.11.38.53.423.0 ]--
r 38         int c
--[ 2021.09.14.11.38.53.477.0 ]--
r 38         int co
--[ 2021.09.14.11.38.53.541.0 ]--
r 38         int cou
--[ 2021.09.14.11.38.53.717.0 ]--
r 38         int coun
--[ 2021.09.14.11.38.53.778.0 ]--
r 38         int count
--[ 2021.09.14.11.38.54.069.0 ]--
r 38         int count;
--[ 2021.09.14.11.38.55.254.0 ]--
r 38         int count
--[ 2021.09.14.11.38.55.480.0 ]--
r 38         int count 
--[ 2021.09.14.11.38.55.599.0 ]--
r 38         int count =
--[ 2021.09.14.11.38.55.686.0 ]--
r 38         int count = 
--[ 2021.09.14.11.38.55.882.0 ]--
r 38         int count = 0
--[ 2021.09.14.11.38.57.509.0 ]--
r 37     public int numberOfUnsetTiles() {
--[ 2021.09.14.11.38.59.064.0 ]--
r 38         int count = 0;
--[ 2021.09.14.11.39.01.313.0 ]--
r 41                 if (this.board[i][j] == 0) 
--[ 2021.09.14.11.39.02.849.0 ]--
r 41                 if (this.board[i][j] == 0) {
--[ 2021.09.14.11.39.03.196.0 ]--
r 41                 if (this.board[i][j] == 0) {c
--[ 2021.09.14.11.39.03.346.0 ]--
r 41                 if (this.board[i][j] == 0) {co
--[ 2021.09.14.11.39.03.460.0 ]--
r 41                 if (this.board[i][j] == 0) {cou
--[ 2021.09.14.11.39.03.610.0 ]--
r 41                 if (this.board[i][j] == 0) {coun
--[ 2021.09.14.11.39.03.719.0 ]--
r 41                 if (this.board[i][j] == 0) {count
--[ 2021.09.14.11.39.04.396.0 ]--
r 41                 if (this.board[i][j] == 0) {count+
--[ 2021.09.14.11.39.04.535.0 ]--
r 41                 if (this.board[i][j] == 0) {count++
--[ 2021.09.14.11.39.05.574.0 ]--
r 41                 if (this.board[i][j] == 0) {count++}
--[ 2021.09.14.11.39.11.597.0 ]--
r 41                 if (this.board[i][j] == 0) {count++;}
--[ 2021.09.14.11.39.16.126.0 ]--
r 44         return ;
--[ 2021.09.14.11.39.16.301.0 ]--
r 44         return c;
--[ 2021.09.14.11.39.16.861.0 ]--
r 44         return co;
--[ 2021.09.14.11.39.16.906.0 ]--
r 44         return cou;
--[ 2021.09.14.11.39.17.398.0 ]--
r 44         return count;
--[ 2021.09.14.11.39.19.618.0 ]--
+ 44         
--[ 2021.09.14.11.39.20.270.0 ]--
r 44         p
--[ 2021.09.14.11.39.21.238.0 ]--
r 44         pr
--[ 2021.09.14.11.39.21.277.0 ]--
r 44         pri
--[ 2021.09.14.11.39.21.333.0 ]--
r 44         prin
--[ 2021.09.14.11.39.21.412.0 ]--
r 44         print
--[ 2021.09.14.11.39.22.003.0 ]--
r 44         prin
--[ 2021.09.14.11.39.22.114.0 ]--
r 44         pri
--[ 2021.09.14.11.39.22.254.0 ]--
r 44         pr
--[ 2021.09.14.11.39.22.388.0 ]--
r 44         p
--[ 2021.09.14.11.39.22.509.0 ]--
r 44         
--[ 2021.09.14.11.39.22.635.0 ]--
r 44         s
--[ 2021.09.14.11.39.22.780.0 ]--
r 44         sy
--[ 2021.09.14.11.39.22.985.0 ]--
r 44         sys
--[ 2021.09.14.11.39.23.622.0 ]--
r 44         sy
--[ 2021.09.14.11.39.23.736.0 ]--
r 44         s
--[ 2021.09.14.11.39.23.864.0 ]--
r 44         
--[ 2021.09.14.11.39.24.055.0 ]--
r 44         S
--[ 2021.09.14.11.39.24.946.0 ]--
r 44         System
--[ 2021.09.14.11.39.25.118.0 ]--
r 44         System.
--[ 2021.09.14.11.39.25.496.0 ]--
r 44         System.o
--[ 2021.09.14.11.39.25.821.0 ]--
r 44         System.out
--[ 2021.09.14.11.39.26.191.0 ]--
r 44         System.outp
--[ 2021.09.14.11.39.26.298.0 ]--
r 44         System.outpr
--[ 2021.09.14.11.39.26.849.0 ]--
r 44         System.outp
--[ 2021.09.14.11.39.26.955.0 ]--
r 44         System.out
--[ 2021.09.14.11.39.27.150.0 ]--
r 44         System.out.
--[ 2021.09.14.11.39.27.372.0 ]--
r 44         System.out.p
--[ 2021.09.14.11.39.27.975.0 ]--
r 44         System.out.println
--[ 2021.09.14.11.39.27.987.0 ]--
r 44         System.out.println()
--[ 2021.09.14.11.39.27.994.0 ]--
r 44         System.out.println();
--[ 2021.09.14.11.39.30.400.0 ]--
r 44         System.out.println(c);
--[ 2021.09.14.11.39.30.496.0 ]--
r 44         System.out.println(co);
--[ 2021.09.14.11.39.31.194.0 ]--
r 44         System.out.println(count);
--[ 2021.09.14.11.39.36.173.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.40.44.246.0 ]--
r 39         for (int i=0; i<this.board.length/; i++) {
--[ 2021.09.14.11.40.44.942.0 ]--
r 39         for (int i=0; i<this.board.length/2; i++) {
--[ 2021.09.14.11.40.46.551.0 ]--
r 40             for (int j=0; i<this.board.length/; j++) {
--[ 2021.09.14.11.40.46.651.0 ]--
r 40             for (int j=0; i<this.board.length/2; j++) {
--[ 2021.09.14.11.40.51.688.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.40.59.886.0 ]--
r 40             for (int j=0; i<this.board.length; j++) {
--[ 2021.09.14.11.41.00.815.0 ]--
r 39         for (int i=0; i<this.board.length; i++) {
--[ 2021.09.14.11.41.48.717.0 ]--
r 39 //        for (int i=0; i<this.board.length; i++) {
r 40 //            for (int j=0; i<this.board.length; j++) {
r 41 //                if (this.board[i][j] == 0) {count++;}
r 42 //            }
r 43 //        }
r 44 //        System.out.println(count);
--[ 2021.09.14.11.41.52.972.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.43.40.369.0 ]--
+ 27         
--[ 2021.09.14.11.43.41.399.0 ]--
r 27         p
--[ 2021.09.14.11.43.41.577.0 ]--
r 27         pr
--[ 2021.09.14.11.43.41.613.0 ]--
r 27         pri
--[ 2021.09.14.11.43.41.716.0 ]--
r 27         prin
--[ 2021.09.14.11.43.41.764.0 ]--
r 27         print
--[ 2021.09.14.11.43.42.252.0 ]--
r 27         prin
--[ 2021.09.14.11.43.42.388.0 ]--
r 27         pri
--[ 2021.09.14.11.43.42.519.0 ]--
r 27         pr
--[ 2021.09.14.11.43.42.774.0 ]--
r 27         p
--[ 2021.09.14.11.43.43.181.0 ]--
r 27         
--[ 2021.09.14.11.43.43.421.0 ]--
r 27         S
--[ 2021.09.14.11.43.44.045.0 ]--
r 27         System
--[ 2021.09.14.11.43.44.251.0 ]--
r 27         System.
--[ 2021.09.14.11.43.44.526.0 ]--
r 27         System.po
--[ 2021.09.14.11.43.45.045.0 ]--
r 27         System.p
--[ 2021.09.14.11.43.45.180.0 ]--
r 27         System.
--[ 2021.09.14.11.43.45.644.0 ]--
r 27         System.o
--[ 2021.09.14.11.43.46.070.0 ]--
r 27         System.out
--[ 2021.09.14.11.43.46.492.0 ]--
r 27         System.out.
--[ 2021.09.14.11.43.47.285.0 ]--
r 27         System.out.println
--[ 2021.09.14.11.43.47.297.0 ]--
r 27         System.out.println()
--[ 2021.09.14.11.43.47.310.0 ]--
r 27         System.out.println();
--[ 2021.09.14.11.43.47.964.0 ]--
r 27         System.out.println(p);
--[ 2021.09.14.11.43.48.534.0 ]--
r 27         System.out.println(player);
--[ 2021.09.14.11.43.53.237.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.14.11.50.30.398.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.17.08.07.08.061.0 ]--
NewLogger: P01_Hex
Version: 1.5
--[ 2021.09.17.08.07.08.366.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2021.09.17.08.07.08.438.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public HexBoardStats(int N0, int N1, int T) {
    }

    public int getN0() {
        return -1;
    }

    public int getN1() {
        return -1;
    }

    public int getT() {
        return -1;
    }

    public double getP1WinProbabilityEstimate(int n) {
        return -1.0;
    }

    public double getP2WinProbabilityEstimate(int n) {
        return -1.0;
    }

    public static void main(String[] args) {
    }
}

--[ 2021.09.17.08.07.08.483.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.17.08.07.08.530.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.09.17.08.07.08.578.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    int[][] board;
    public HexBoard(int N) {
        board = new int[N][N];
        System.out.println(board[0][0]);
    }

    public int getPlayer(int row, int col) {
        return 0;
    }
    
    public boolean isSet(int row, int col) {
        if (this.board[row][col] == 0) {return false;}
        return true;
    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
        this.board[row][col] = player;
        System.out.println(player);
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        int count = 0;
//        for (int i=0; i<this.board.length; i++) {
//            for (int j=0; i<this.board.length; j++) {
//                if (this.board[i][j] == 0) {count++;}
//            }
//        }
//        System.out.println(count);
        return count;
    }
}

--[ 2021.09.17.08.07.08.644.0 ]--
InitFile: /.cos265


--[ 2021.09.17.08.07.08.690.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.09.17.08.08.10.362.0 ]--
UpdateTree (AD): 1 0
+ /.idea/runConfigurations.xml

--[ 2021.09.17.08.08.24.199.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.17.08.10.22.782.0 ]--
:/src/HexBoard.java
- 41
- 41
r 41 
--[ 2021.09.17.08.10.30.732.0 ]--
r 40         for (int i=0; i<this.board.length; i++) {
r 42         }
--[ 2021.09.17.08.10.58.165.0 ]--
r 41     
--[ 2021.09.17.08.10.59.527.0 ]--
r 41         
--[ 2021.09.17.08.11.00.704.0 ]--
r 41             
--[ 2021.09.17.08.11.04.924.0 ]--
r 41             i
--[ 2021.09.17.08.11.07.140.0 ]--
r 41             is
--[ 2021.09.17.08.11.08.344.0 ]--
r 41             isS
--[ 2021.09.17.08.11.09.546.0 ]--
r 41             isSe
--[ 2021.09.17.08.11.10.786.0 ]--
r 41             isSet
--[ 2021.09.17.08.11.12.089.0 ]--
+ 42             
--[ 2021.09.17.08.11.13.296.0 ]--
+ 42                     
r 43                     
--[ 2021.09.17.08.11.14.298.0 ]--
r 43                     9
--[ 2021.09.17.08.11.17.118.0 ]--
r 43                     
--[ 2021.09.17.08.11.19.167.0 ]--
- 42
--[ 2021.09.17.08.11.20.156.0 ]--
- 42
--[ 2021.09.17.08.11.22.982.0 ]--
r 41             isSet()
--[ 2021.09.17.08.11.26.912.0 ]--
r 41             isSet(i)
--[ 2021.09.17.08.11.28.114.0 ]--
r 41             isSet(i,)
--[ 2021.09.17.08.11.30.346.0 ]--
r 41             isSet(i,j)
--[ 2021.09.17.08.11.33.672.0 ]--
r 41             isSet(i,j);
--[ 2021.09.17.08.11.38.018.0 ]--
r 41             tisSet(i,j);
--[ 2021.09.17.08.11.39.304.0 ]--
r 41             thisisSet(i,j);
--[ 2021.09.17.08.11.40.432.0 ]--
r 41             this.isSet(i,j);
--[ 2021.09.17.08.11.50.208.0 ]--
+ 41             
--[ 2021.09.17.08.11.55.896.0 ]--
r 41             for (int i=0; i<this.board.length; i++) {
--[ 2021.09.17.08.11.59.085.0 ]--
+ 43             
--[ 2021.09.17.08.12.00.528.0 ]--
r 43             }
--[ 2021.09.17.08.12.02.834.0 ]--
r 42                 this.isSet(i,j);
--[ 2021.09.17.08.12.03.996.0 ]--
r 42                 this.isSet(i, j);
--[ 2021.09.17.08.12.08.459.0 ]--
r 41             for (int =0; i<this.board.length; i++) {
--[ 2021.09.17.08.12.14.565.0 ]--
r 41             for (int j=0; i<this.board.length; i++) {
--[ 2021.09.17.08.12.26.986.0 ]--
r 40         for (int =0; i<this.board.length; i++) {
--[ 2021.09.17.08.12.35.882.0 ]--
r 40         for (int row=0; i<this.board.length; i++) {
--[ 2021.09.17.08.12.45.530.0 ]--
r 40         for (int row=0; <this.board.length; i++) {
--[ 2021.09.17.08.12.52.737.0 ]--
r 40         for (int row=0; r<this.board.length; i++) {
--[ 2021.09.17.08.12.58.566.0 ]--
r 40         for (int row=0; row<this.board.length; i++) {
--[ 2021.09.17.08.13.03.004.0 ]--
r 40         for (int row=0; row<this.board.length; ++) {
--[ 2021.09.17.08.13.04.796.0 ]--
r 40         for (int row=0; row<this.board.length; ro++) {
--[ 2021.09.17.08.13.07.176.0 ]--
r 41             for (int j=0; i<this.board.length; ++) {
--[ 2021.09.17.08.13.08.256.0 ]--
r 41             for (int j=0; i<this.board.length; r++) {
--[ 2021.09.17.08.13.09.529.0 ]--
r 41             for (int j=0; i<this.board.length; col++) {
--[ 2021.09.17.08.13.12.107.0 ]--
r 40         for (int row=0; row<this.board.length; row++) {
--[ 2021.09.17.08.13.14.843.0 ]--
r 41             for (int =0; i<this.board.length; col++) {
--[ 2021.09.17.08.13.27.645.0 ]--
r 41             for (int col=0; i<this.board.length; col++) {
--[ 2021.09.17.08.13.39.858.0 ]--
r 41             for (int col=0; <this.board.length; col++) {
--[ 2021.09.17.08.13.48.488.0 ]--
r 41             for (int col=0; col<this.board.length; col++) {
--[ 2021.09.17.08.13.58.317.0 ]--
r 42                 this.isSet(, j);
--[ 2021.09.17.08.14.00.273.0 ]--
r 42                 this.isSet(row, j);
--[ 2021.09.17.08.14.03.731.0 ]--
r 42                 this.isSet(row, );
--[ 2021.09.17.08.14.05.709.0 ]--
r 42                 this.isSet(row, col);
--[ 2021.09.17.08.14.42.401.0 ]--
r 40 //        for (int row=0; row<this.board.length; row++) {
r 41 //            for (int col=0; col<this.board.length; col++) {
r 42 //                this.isSet(row, col);
r 43 //            }
r 44 //        }
--[ 2021.09.17.08.14.49.638.0 ]--
r 45         System.out.println(count);
--[ 2021.09.17.08.14.52.107.0 ]--
r 45         System.out.println(t);
--[ 2021.09.17.08.14.53.032.0 ]--
r 45         System.out.println(thi);
--[ 2021.09.17.08.14.53.969.0 ]--
r 45         System.out.println(this.);
--[ 2021.09.17.08.14.55.618.0 ]--
r 45         System.out.println(this.boa);
--[ 2021.09.17.08.14.56.517.0 ]--
r 45         System.out.println(this.board);
--[ 2021.09.17.08.14.57.444.0 ]--
r 45         System.out.println(this.board.l);
--[ 2021.09.17.08.14.58.766.0 ]--
r 45         System.out.println(this.board.le);
--[ 2021.09.17.08.14.59.693.0 ]--
r 45         System.out.println(this.board.len);
--[ 2021.09.17.08.15.00.599.0 ]--
r 45         System.out.println(this.board.leng);
--[ 2021.09.17.08.15.01.537.0 ]--
r 45         System.out.println(this.board.length);
--[ 2021.09.17.08.15.17.372.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.17.08.15.37.015.0 ]--
r 40         for (int row=0; row<this.board.length; row++) {
r 41             for (int col=0; col<this.board.length; col++) {
r 42                 this.isSet(row, col);
r 43             }
r 44         }
--[ 2021.09.17.08.15.49.119.0 ]--
r 45         System.out.println(c);
--[ 2021.09.17.08.15.57.721.0 ]--
r 45         System.out.println(count);
--[ 2021.09.17.08.16.11.933.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.17.08.16.28.412.0 ]--
r 42                 ithis.isSet(row, col);
--[ 2021.09.17.08.16.29.586.0 ]--
r 42                 if this.isSet(row, col);
--[ 2021.09.17.08.16.31.265.0 ]--
r 42                 if (this.isSet(row, col);
--[ 2021.09.17.08.16.33.215.0 ]--
r 42                 if (this.isSet(row, col)
--[ 2021.09.17.08.16.34.544.0 ]--
r 42                 if (this.isSet(row, col))
--[ 2021.09.17.08.16.43.842.0 ]--
r 42                 if (!this.isSet(row, col))
--[ 2021.09.17.08.16.46.440.0 ]--
r 42                 if (!this.isSet(row, col)) 
--[ 2021.09.17.08.16.47.347.0 ]--
r 42                 if (!this.isSet(row, col)) {
--[ 2021.09.17.08.16.50.748.0 ]--
r 42                 if (!this.isSet(row, col)) {r
--[ 2021.09.17.08.16.51.710.0 ]--
r 42                 if (!this.isSet(row, col)) {retur
--[ 2021.09.17.08.16.52.647.0 ]--
r 42                 if (!this.isSet(row, col)) {return 
--[ 2021.09.17.08.16.54.461.0 ]--
r 42                 if (!this.isSet(row, col)) {return
--[ 2021.09.17.08.16.55.384.0 ]--
r 42                 if (!this.isSet(row, col)) {re
--[ 2021.09.17.08.16.56.279.0 ]--
r 42                 if (!this.isSet(row, col)) {r
--[ 2021.09.17.08.16.57.654.0 ]--
r 42                 if (!this.isSet(row, col)) {
--[ 2021.09.17.08.16.58.543.0 ]--
r 42                 if (!this.isSet(row, col)) {c
--[ 2021.09.17.08.16.59.642.0 ]--
r 42                 if (!this.isSet(row, col)) {count+
--[ 2021.09.17.08.17.00.622.0 ]--
r 42                 if (!this.isSet(row, col)) {count++
--[ 2021.09.17.08.17.01.566.0 ]--
r 42                 if (!this.isSet(row, col)) {count++;)
--[ 2021.09.17.08.17.02.886.0 ]--
r 42                 if (!this.isSet(row, col)) {count++;
--[ 2021.09.17.08.17.03.799.0 ]--
r 42                 if (!this.isSet(row, col)) {count++;}
--[ 2021.09.17.08.17.17.223.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.17.08.17.30.096.0 ]--
- 45
--[ 2021.09.17.08.17.57.037.0 ]--
- 9
--[ 2021.09.17.08.18.13.690.0 ]--
+ 12         
r 13         
--[ 2021.09.17.08.18.16.106.0 ]--
- 12
--[ 2021.09.17.08.18.18.819.0 ]--
r 12         r
--[ 2021.09.17.08.18.20.563.0 ]--
r 12         ret
--[ 2021.09.17.08.18.21.509.0 ]--
r 12         retur
--[ 2021.09.17.08.18.22.435.0 ]--
r 12         return
--[ 2021.09.17.08.18.23.239.0 ]--
r 12         return 
--[ 2021.09.17.08.18.30.133.0 ]--
r 12         return t
--[ 2021.09.17.08.18.31.154.0 ]--
r 12         return thi
--[ 2021.09.17.08.18.32.868.0 ]--
r 12         return this
--[ 2021.09.17.08.18.33.781.0 ]--
r 12         return this.
--[ 2021.09.17.08.18.34.716.0 ]--
r 12         return this.bo
--[ 2021.09.17.08.18.35.629.0 ]--
r 12         return this.board
--[ 2021.09.17.08.18.36.557.0 ]--
r 12         return this.board[]
--[ 2021.09.17.08.18.37.861.0 ]--
r 12         return this.board[row]
--[ 2021.09.17.08.18.39.715.0 ]--
r 12         return this.board[row][]
--[ 2021.09.17.08.18.41.019.0 ]--
r 12         return this.board[row][col]
--[ 2021.09.17.08.18.42.326.0 ]--
r 12         return this.board[row][col];
--[ 2021.09.17.08.19.03.973.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.17.08.22.30.122.0 ]--
r 26         System.out.println("player);
--[ 2021.09.17.08.22.31.966.0 ]--
r 26         System.out.println(""player);
--[ 2021.09.17.08.22.33.253.0 ]--
r 26         System.out.println(""+player);
--[ 2021.09.17.08.22.36.715.0 ]--
r 26         System.out.println("p"+player);
--[ 2021.09.17.08.22.37.620.0 ]--
r 26         System.out.println("pl"+player);
--[ 2021.09.17.08.22.43.068.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.17.08.24.09.148.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.17.08.30.22.584.0 ]--
+ 8         
--[ 2021.09.17.08.30.24.066.0 ]--
r 8         if 
--[ 2021.09.17.08.30.26.802.0 ]--
r 8         if (N)
--[ 2021.09.17.08.30.31.078.0 ]--
r 8         if (N )
--[ 2021.09.17.08.30.32.518.0 ]--
r 8         if (N <)
--[ 2021.09.17.08.30.34.630.0 ]--
r 8         if (N <= 0)
--[ 2021.09.17.08.30.38.822.0 ]--
r 8         if (N <= 0) 
--[ 2021.09.17.08.30.39.692.0 ]--
r 8         if (N <= 0) {
--[ 2021.09.17.08.30.48.304.0 ]--
r 8         if (N <= 0) {;}
--[ 2021.09.17.08.31.16.343.0 ]--
r 8         if (N <= 0) {t;}
--[ 2021.09.17.08.31.17.263.0 ]--
r 8         if (N <= 0) {thro;}
--[ 2021.09.17.08.31.18.436.0 ]--
r 8         if (N <= 0) {throw;}
--[ 2021.09.17.08.31.19.733.0 ]--
r 8         if (N <= 0) {throw ;}
--[ 2021.09.17.08.31.36.664.0 ]--
r 8         if (N <= 0) {throw n;}
--[ 2021.09.17.08.31.38.425.0 ]--
r 8         if (N <= 0) {throw new Exce;}
--[ 2021.09.17.08.31.39.264.0 ]--
r 8         if (N <= 0) {throw new Exception;}
--[ 2021.09.17.08.31.40.680.0 ]--
r 8         if (N <= 0) {throw new Exception();}
--[ 2021.09.17.08.32.07.237.0 ]--
r 8         if (N <= 0) {throw new Exception(java.lang.IllegalArgumentException);}
--[ 2021.09.17.08.32.18.239.0 ]--
r 8         if (N <= 0) {throw new Exceptionjava.lang.IllegalArgumentException);}
--[ 2021.09.17.08.32.19.973.0 ]--
r 8         if (N <= 0) {throw new Excepjava.lang.IllegalArgumentException);}
--[ 2021.09.17.08.32.20.903.0 ]--
r 8         if (N <= 0) {throw new Excjava.lang.IllegalArgumentException);}
--[ 2021.09.17.08.32.21.808.0 ]--
r 8         if (N <= 0) {throw new Exjava.lang.IllegalArgumentException);}
--[ 2021.09.17.08.32.22.748.0 ]--
r 8         if (N <= 0) {throw new Ejava.lang.IllegalArgumentException);}
--[ 2021.09.17.08.32.23.675.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException);}
--[ 2021.09.17.08.32.25.672.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException;}
--[ 2021.09.17.08.32.33.896.0 ]--
r 8         if (N <= 0) {throw  java.lang.IllegalArgumentException;}
--[ 2021.09.17.08.32.35.437.0 ]--
r 8         if (N <= 0) {throw java.lang.IllegalArgumentException;}
--[ 2021.09.17.08.32.55.925.0 ]--
r 8         if (N <= 0) {throw  java.lang.IllegalArgumentException;}
--[ 2021.09.17.08.32.56.951.0 ]--
r 8         if (N <= 0) {throw n java.lang.IllegalArgumentException;}
--[ 2021.09.17.08.32.58.628.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException;}
--[ 2021.09.17.08.33.02.587.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException();}
--[ 2021.09.17.08.33.05.915.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException("");}
--[ 2021.09.17.08.33.09.463.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException("N");}
--[ 2021.09.17.08.33.10.466.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException("N ");}
--[ 2021.09.17.08.33.11.408.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException("N c");}
--[ 2021.09.17.08.33.12.253.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException("N ca");}
--[ 2021.09.17.08.33.13.177.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot");}
--[ 2021.09.17.08.33.14.138.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be ");}
--[ 2021.09.17.08.33.15.385.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <");}
--[ 2021.09.17.08.33.16.349.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= ");}
--[ 2021.09.17.08.33.17.253.0 ]--
r 8         if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= 0");}
--[ 2021.09.17.08.33.45.858.0 ]--
r 18         
--[ 2021.09.17.08.33.50.010.0 ]--
r 18         t
--[ 2021.09.17.08.33.51.702.0 ]--
r 18         throw 
--[ 2021.09.17.08.33.53.012.0 ]--
r 18         throw new 
--[ 2021.09.17.08.33.54.724.0 ]--
r 18         throw new java.lang.IllegalArgumentException
--[ 2021.09.17.08.33.55.959.0 ]--
+ 19         
--[ 2021.09.17.08.33.56.863.0 ]--
r 19                 
--[ 2021.09.17.08.33.57.701.0 ]--
r 19                 ()
--[ 2021.09.17.08.33.59.736.0 ]--
r 19                 
--[ 2021.09.17.08.34.01.045.0 ]--
- 18
r 18         throw new java.lang.IllegalArgumentExceptio
--[ 2021.09.17.08.34.02.322.0 ]--
r 18         throw new java.lang.IllegalArgumentException
--[ 2021.09.17.08.34.03.207.0 ]--
r 18         throw new java.lang.IllegalArgumentException()
--[ 2021.09.17.08.34.04.988.0 ]--
r 18         throw new java.lang.IllegalArgumentException();
--[ 2021.09.17.08.34.07.124.0 ]--
r 18         throw new java.lang.IllegalArgumentException("");
--[ 2021.09.17.08.34.10.750.0 ]--
r 18         throw new java.lang.IllegalArgumentException("T");
--[ 2021.09.17.08.34.12.014.0 ]--
r 18         throw new java.lang.IllegalArgumentException("Tile ");
--[ 2021.09.17.08.34.12.967.0 ]--
r 18         throw new java.lang.IllegalArgumentException("Tile is s");
--[ 2021.09.17.08.34.15.906.0 ]--
r 18         throw new java.lang.IllegalArgumentException("Tile is alrea");
--[ 2021.09.17.08.34.16.795.0 ]--
r 18         throw new java.lang.IllegalArgumentException("Tile is already ");
--[ 2021.09.17.08.34.17.734.0 ]--
r 18         throw new java.lang.IllegalArgumentException("Tile is already set");
--[ 2021.09.17.08.34.40.786.0 ]--
r 18         
--[ 2021.09.17.08.34.42.823.0 ]--
r 18         throw new java.lang.IllegalArgumentException("Tile is ");
--[ 2021.09.17.08.34.44.474.0 ]--
r 18         throw new java.lang.IllegalArgumentException("Tile is s");
--[ 2021.09.17.08.34.45.462.0 ]--
r 18         throw new java.lang.IllegalArgumentException()
--[ 2021.09.17.08.34.47.268.0 ]--
r 18         throw new java.lang.IllegalArgumentExceptio
--[ 2021.09.17.08.34.48.559.0 ]--
+ 18         throw new java.lang.IllegalArgumentException
r 19                 ()
--[ 2021.09.17.08.34.50.312.0 ]--
r 19                 
--[ 2021.09.17.08.34.51.638.0 ]--
- 19
--[ 2021.09.17.08.34.52.583.0 ]--
r 18         throw new 
--[ 2021.09.17.08.34.53.869.0 ]--
r 18         
--[ 2021.09.17.08.34.55.604.0 ]--
r 18         return true;
--[ 2021.09.17.08.35.02.597.0 ]--
+ 26         
--[ 2021.09.17.08.35.06.856.0 ]--
r 26         i
--[ 2021.09.17.08.35.09.318.0 ]--
r 26         if
--[ 2021.09.17.08.35.12.094.0 ]--
r 26         if ()
--[ 2021.09.17.08.35.14.355.0 ]--
r 26         if (isSe)
--[ 2021.09.17.08.35.15.277.0 ]--
r 26         if (isSet)
--[ 2021.09.17.08.35.17.913.0 ]--
r 26         if (tisSet)
--[ 2021.09.17.08.35.18.830.0 ]--
r 26         if (thisisSet)
--[ 2021.09.17.08.35.19.773.0 ]--
r 26         if (this.isSet)
--[ 2021.09.17.08.35.24.366.0 ]--
r 26         if (this.isSet())
--[ 2021.09.17.08.35.25.344.0 ]--
r 26         if (this.isSet(r))
--[ 2021.09.17.08.35.26.233.0 ]--
r 26         if (this.isSet(row))
--[ 2021.09.17.08.35.27.167.0 ]--
r 26         if (this.isSet(row,c))
--[ 2021.09.17.08.35.28.445.0 ]--
r 26         if (this.isSet(row,col))
--[ 2021.09.17.08.35.31.012.0 ]--
r 26         if (this.isSet(row,col)) 
--[ 2021.09.17.08.35.31.936.0 ]--
r 26         if (this.isSet(row,col)) {
--[ 2021.09.17.08.35.35.918.0 ]--
r 26         if (this.isSet(row,col)) {}
--[ 2021.09.17.08.35.40.052.0 ]--
r 26         if (this.isSet(row,col)) {;}
--[ 2021.09.17.08.35.43.606.0 ]--
r 26         if (this.isSet(row,col)) {}
--[ 2021.09.17.08.35.44.848.0 ]--
r 26         if (this.isSet(row,col)) {throw new java.lang.IllegalArgumentException("Tile is already set");}
--[ 2021.09.17.08.36.01.070.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.17.08.37.05.099.0 ]--
+ 13         
--[ 2021.09.17.08.37.06.678.0 ]--
r 13         java.lang.IndexOutOfBoundsException
--[ 2021.09.17.08.37.09.436.0 ]--
r 13         java.lang.IndexOutOfBoundsException()
--[ 2021.09.17.08.37.11.049.0 ]--
r 13         java.lang.IndexOutOfBoundsException();
--[ 2021.09.17.08.37.13.431.0 ]--
r 13         tjava.lang.IndexOutOfBoundsException();
--[ 2021.09.17.08.37.14.344.0 ]--
r 13         throjava.lang.IndexOutOfBoundsException();
--[ 2021.09.17.08.37.15.263.0 ]--
r 13         throw njava.lang.IndexOutOfBoundsException();
--[ 2021.09.17.08.37.16.199.0 ]--
r 13         throw new java.lang.IndexOutOfBoundsException();
--[ 2021.09.17.08.37.21.798.0 ]--
r 13         throw new java.lang.IndexOutOfBoundsException("");
--[ 2021.09.17.08.37.32.600.0 ]--
r 13         throw new java.lang.IndexOutOfBoundsException("r");
--[ 2021.09.17.08.37.33.956.0 ]--
r 13         throw new java.lang.IndexOutOfBoundsException("row");
--[ 2021.09.17.08.37.34.886.0 ]--
r 13         throw new java.lang.IndexOutOfBoundsException("row ");
--[ 2021.09.17.08.37.35.775.0 ]--
r 13         throw new java.lang.IndexOutOfBoundsException("row or c");
--[ 2021.09.17.08.37.36.699.0 ]--
r 13         throw new java.lang.IndexOutOfBoundsException("row or col ");
--[ 2021.09.17.08.37.37.601.0 ]--
r 13         throw new java.lang.IndexOutOfBoundsException("row or col is ");
--[ 2021.09.17.08.37.38.525.0 ]--
r 13         throw new java.lang.IndexOutOfBoundsException("row or col is out ");
--[ 2021.09.17.08.37.39.433.0 ]--
r 13         throw new java.lang.IndexOutOfBoundsException("row or col is out of ");
--[ 2021.09.17.08.37.40.322.0 ]--
r 13         throw new java.lang.IndexOutOfBoundsException("row or col is out of ra");
--[ 2021.09.17.08.37.41.252.0 ]--
r 13         throw new java.lang.IndexOutOfBoundsException("row or col is out of range");
--[ 2021.09.17.08.37.46.234.0 ]--
+ 13         
--[ 2021.09.17.08.37.47.184.0 ]--
r 13         if 
--[ 2021.09.17.08.37.48.857.0 ]--
r 13         if ( )
--[ 2021.09.17.08.37.51.557.0 ]--
r 13         if ()
--[ 2021.09.17.08.37.54.793.0 ]--
r 13         if (r)
--[ 2021.09.17.08.37.55.734.0 ]--
r 13         if (ro)
--[ 2021.09.17.08.37.56.654.0 ]--
r 13         if (row)
--[ 2021.09.17.08.37.57.668.0 ]--
r 13         if (row )
--[ 2021.09.17.08.37.58.605.0 ]--
r 13         if (row >)
--[ 2021.09.17.08.38.01.575.0 ]--
r 13         if (row >=)
--[ 2021.09.17.08.38.02.503.0 ]--
r 13         if (row >= )
--[ 2021.09.17.08.38.03.470.0 ]--
r 13         if (row >= this)
--[ 2021.09.17.08.38.05.055.0 ]--
r 13         if (row >= this.ba)
--[ 2021.09.17.08.38.05.968.0 ]--
r 13         if (row >= this.bard.l)
--[ 2021.09.17.08.38.07.238.0 ]--
r 13         if (row >= this.bard.lenth)
--[ 2021.09.17.08.38.09.861.0 ]--
r 13         if (row >= this.bard.length)
--[ 2021.09.17.08.38.12.908.0 ]--
r 13         if (row >= this.board.length)
--[ 2021.09.17.08.38.16.086.0 ]--
r 13         if (row >= this.board.length )
--[ 2021.09.17.08.38.18.676.0 ]--
r 13         if (row >= this.board.length |)
--[ 2021.09.17.08.38.24.528.0 ]--
r 13         if (row >= this.board.length ||)
--[ 2021.09.17.08.38.25.415.0 ]--
r 13         if (row >= this.board.length || )
--[ 2021.09.17.08.38.26.682.0 ]--
r 13         if (row >= this.board.length || r)
--[ 2021.09.17.08.38.27.954.0 ]--
r 13         if (row >= this.board.length || ro)
--[ 2021.09.17.08.38.28.996.0 ]--
r 13         if (row >= this.board.length || row)
--[ 2021.09.17.08.38.29.878.0 ]--
r 13         if (row >= this.board.length || row )
--[ 2021.09.17.08.38.30.756.0 ]--
r 13         if (row >= this.board.length || row < )
--[ 2021.09.17.08.38.31.586.0 ]--
r 13         if (row >= this.board.length || row < 0)
--[ 2021.09.17.08.38.32.850.0 ]--
r 13         if (row >= this.board.length || row < 0 )
--[ 2021.09.17.08.38.33.859.0 ]--
r 13         if (row >= this.board.length || row < 0 |)
--[ 2021.09.17.08.38.35.367.0 ]--
r 13         if (row >= this.board.length || row < 0 ||)
--[ 2021.09.17.08.38.36.591.0 ]--
r 13         if (row >= this.board.length || row < 0 || )
--[ 2021.09.17.08.38.37.476.0 ]--
r 13         if (row >= this.board.length || row < 0 || c)
--[ 2021.09.17.08.38.38.739.0 ]--
r 13         if (row >= this.board.length || row < 0 || col)
--[ 2021.09.17.08.38.39.681.0 ]--
r 13         if (row >= this.board.length || row < 0 || col )
--[ 2021.09.17.08.38.42.607.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >)
--[ 2021.09.17.08.38.43.906.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >=)
--[ 2021.09.17.08.38.44.798.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= th)
--[ 2021.09.17.08.38.46.140.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= thi)
--[ 2021.09.17.08.38.47.356.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this)
--[ 2021.09.17.08.38.48.275.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.)
--[ 2021.09.17.08.38.49.195.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.bo)
--[ 2021.09.17.08.38.50.100.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd)
--[ 2021.09.17.08.38.51.041.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd.l)
--[ 2021.09.17.08.38.52.339.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd.len)
--[ 2021.09.17.08.38.53.260.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd.length)
--[ 2021.09.17.08.38.54.148.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd.length )
--[ 2021.09.17.08.38.55.213.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd.length ||)
--[ 2021.09.17.08.38.56.533.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd.length || c)
--[ 2021.09.17.08.38.57.814.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd.length || col )
--[ 2021.09.17.08.38.59.112.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd.length || col <)
--[ 2021.09.17.08.39.00.369.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd.length || col <0)
--[ 2021.09.17.08.39.03.067.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd.length || col <0 )
--[ 2021.09.17.08.39.05.078.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd.length || col <0 ) 
--[ 2021.09.17.08.39.06.118.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd.length || col <0 ) {
--[ 2021.09.17.08.39.12.183.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.boasrd.length || col <0 ) {}
--[ 2021.09.17.08.39.20.103.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {}
--[ 2021.09.17.08.39.23.930.0 ]--
r 14         
--[ 2021.09.17.08.39.25.693.0 ]--
- 13
r 13         if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {
--[ 2021.09.17.08.39.34.749.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {}
--[ 2021.09.17.08.39.48.900.0 ]--
r 13         if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.17.08.40.37.596.0 ]--
+ 18         
--[ 2021.09.17.08.40.38.511.0 ]--
r 18         if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.17.08.40.46.654.0 ]--
+ 28         
--[ 2021.09.17.08.40.48.141.0 ]--
r 28         if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.17.08.40.55.724.0 ]--
+ 24         
--[ 2021.09.17.08.40.58.955.0 ]--
r 24         if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.17.08.52.23.821.0 ]--
DisposeComponent
--[ 2021.09.20.08.02.27.010.0 ]--
NewLogger: P01_Hex
Version: 1.5
--[ 2021.09.20.08.02.28.541.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/runConfigurations.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2021.09.20.08.02.28.598.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public HexBoardStats(int N0, int N1, int T) {
    }

    public int getN0() {
        return -1;
    }

    public int getN1() {
        return -1;
    }

    public int getT() {
        return -1;
    }

    public double getP1WinProbabilityEstimate(int n) {
        return -1.0;
    }

    public double getP2WinProbabilityEstimate(int n) {
        return -1.0;
    }

    public static void main(String[] args) {
    }
}

--[ 2021.09.20.08.02.28.655.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.20.08.02.28.713.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.09.20.08.02.28.769.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    int[][] board;
    public HexBoard(int N) {
        if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= 0");}
        board = new int[N][N];
    }

    public int getPlayer(int row, int col) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        return this.board[row][col];
    }
    
    public boolean isSet(int row, int col) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        if (this.board[row][col] == 0) {return false;}
        return true;
    }

    public boolean isOnWinningPath(int row, int col) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        return false;
    }

    public void setTile(int row, int col, int player) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        if (this.isSet(row,col)) {throw new java.lang.IllegalArgumentException("Tile is already set");}
        this.board[row][col] = player;
        System.out.println("pl"+player);
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        int count = 0;
        for (int row=0; row<this.board.length; row++) {
            for (int col=0; col<this.board.length; col++) {
                if (!this.isSet(row, col)) {count++;}
            }
        }
        return count;
    }
}

--[ 2021.09.20.08.02.28.827.0 ]--
InitFile: /.cos265


--[ 2021.09.20.08.02.28.880.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.09.20.08.05.53.788.0 ]--
:/src/HexBoard.java
+ 7     
--[ 2021.09.20.08.05.55.356.0 ]--
r 7     i
--[ 2021.09.20.08.05.58.082.0 ]--
r 7     int 
--[ 2021.09.20.08.06.13.730.0 ]--
r 7     int n
--[ 2021.09.20.08.06.15.802.0 ]--
r 7     int node
--[ 2021.09.20.08.06.16.705.0 ]--
r 7     int no
--[ 2021.09.20.08.06.17.525.0 ]--
r 7     int n
--[ 2021.09.20.08.06.19.067.0 ]--
r 7     int 
--[ 2021.09.20.08.06.21.242.0 ]--
r 7     int par
--[ 2021.09.20.08.06.23.336.0 ]--
r 7     int parent
--[ 2021.09.20.08.06.33.947.0 ]--
r 7     int parent;
--[ 2021.09.20.08.07.08.622.0 ]--
r 33         
--[ 2021.09.20.08.07.17.447.0 ]--
- 33
--[ 2021.09.20.08.07.20.634.0 ]--
r 7     int parent
--[ 2021.09.20.08.07.21.524.0 ]--
r 7     int pa
--[ 2021.09.20.08.07.22.435.0 ]--
r 7     int p
--[ 2021.09.20.08.07.23.739.0 ]--
r 7     int 
--[ 2021.09.20.08.07.25.782.0 ]--
r 7     i
--[ 2021.09.20.08.07.27.064.0 ]--
r 7     
--[ 2021.09.20.08.10.23.804.0 ]--
r 7 
--[ 2021.09.20.08.10.30.092.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.20.08.35.03.746.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.20.08.48.58.016.0 ]--
DisposeComponent
--[ 2021.09.21.08.45.35.036.0 ]--
NewLogger: P01_Hex
Version: 1.5
--[ 2021.09.21.08.45.36.323.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/runConfigurations.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2021.09.21.08.45.36.370.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public HexBoardStats(int N0, int N1, int T) {
    }

    public int getN0() {
        return -1;
    }

    public int getN1() {
        return -1;
    }

    public int getT() {
        return -1;
    }

    public double getP1WinProbabilityEstimate(int n) {
        return -1.0;
    }

    public double getP2WinProbabilityEstimate(int n) {
        return -1.0;
    }

    public static void main(String[] args) {
    }
}

--[ 2021.09.21.08.45.36.413.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.21.08.45.36.483.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.09.21.08.45.36.534.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    int[][] board;

    public HexBoard(int N) {
        if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= 0");}
        board = new int[N][N];
    }

    public int getPlayer(int row, int col) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        return this.board[row][col];
    }
    
    public boolean isSet(int row, int col) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        if (this.board[row][col] == 0) {return false;}
        return true;
    }

    public boolean isOnWinningPath(int row, int col) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        return false;
    }

    public void setTile(int row, int col, int player) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        if (this.isSet(row,col)) {throw new java.lang.IllegalArgumentException("Tile is already set");}
        this.board[row][col] = player;
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        int count = 0;
        for (int row=0; row<this.board.length; row++) {
            for (int col=0; col<this.board.length; col++) {
                if (!this.isSet(row, col)) {count++;}
            }
        }
        return count;
    }
}

--[ 2021.09.21.08.45.36.582.0 ]--
InitFile: /.cos265


--[ 2021.09.21.08.45.36.628.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.09.21.08.45.53.491.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.08.47.55.878.0 ]--
DisposeComponent
--[ 2021.09.21.09.59.19.463.0 ]--
NewLogger: P01_Hex
Version: 1.5
--[ 2021.09.21.09.59.19.489.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2021.09.21.09.59.19.494.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.09.21.09.59.19.496.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.09.21.09.59.19.499.0 ]--
InitFile: /.cos265


--[ 2021.09.21.09.59.19.501.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.21.09.59.19.504.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    int[][] board;

    public HexBoard(int N) {
        if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= 0");}
        board = new int[N][N];
    }

    public int getPlayer(int row, int col) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        return this.board[row][col];
    }
    
    public boolean isSet(int row, int col) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        if (this.board[row][col] == 0) {return false;}
        return true;
    }

    public boolean isOnWinningPath(int row, int col) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        return false;
    }

    public void setTile(int row, int col, int player) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        if (this.isSet(row,col)) {throw new java.lang.IllegalArgumentException("Tile is already set");}
        this.board[row][col] = player;
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        int count = 0;
        for (int row=0; row<this.board.length; row++) {
            for (int col=0; col<this.board.length; col++) {
                if (!this.isSet(row, col)) {count++;}
            }
        }
        return count;
    }
}

--[ 2021.09.21.09.59.19.506.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public HexBoardStats(int N0, int N1, int T) {
    }

    public int getN0() {
        return -1;
    }

    public int getN1() {
        return -1;
    }

    public int getT() {
        return -1;
    }

    public double getP1WinProbabilityEstimate(int n) {
        return -1.0;
    }

    public double getP2WinProbabilityEstimate(int n) {
        return -1.0;
    }

    public static void main(String[] args) {
    }
}

--[ 2021.09.21.09.59.27.292.0 ]--
UpdateTree (AD): 1 0
+ /.idea/runConfigurations.xml

--[ 2021.09.21.10.05.55.449.0 ]--
:/src/HexBoard.java
+ 36         
--[ 2021.09.21.10.05.55.487.0 ]--
UpdateTree (AD): 0 1
- /.idea/runConfigurations.xml

--[ 2021.09.21.10.08.31.043.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.10.10.46.589.0 ]--
+ 7     
--[ 2021.09.21.10.10.46.882.0 ]--
+ 7     
--[ 2021.09.21.10.10.48.015.0 ]--
r 8     p
--[ 2021.09.21.10.10.48.160.0 ]--
r 8     pu
--[ 2021.09.21.10.10.48.341.0 ]--
r 8     pur
--[ 2021.09.21.10.10.49.002.0 ]--
r 8     pu
--[ 2021.09.21.10.10.49.089.0 ]--
r 8     pub
--[ 2021.09.21.10.10.49.355.0 ]--
r 8     publ
--[ 2021.09.21.10.10.49.483.0 ]--
r 8     publi
--[ 2021.09.21.10.10.49.788.0 ]--
r 8     public
--[ 2021.09.21.10.10.53.202.0 ]--
r 8     public 
--[ 2021.09.21.10.10.57.579.0 ]--
r 8     public i
--[ 2021.09.21.10.10.57.708.0 ]--
r 8     public in
--[ 2021.09.21.10.10.57.838.0 ]--
r 8     public int
--[ 2021.09.21.10.11.00.236.0 ]--
r 8     
--[ 2021.09.21.10.11.00.695.0 ]--
- 7
--[ 2021.09.21.10.11.00.889.0 ]--
- 7
--[ 2021.09.21.10.11.03.048.0 ]--
+ 12     
--[ 2021.09.21.10.11.03.287.0 ]--
+ 12     
--[ 2021.09.21.10.11.04.142.0 ]--
r 13     public int
--[ 2021.09.21.10.11.04.155.0 ]--
r 12 
--[ 2021.09.21.10.11.06.539.0 ]--
r 13     public int 
--[ 2021.09.21.10.11.17.883.0 ]--
r 13     public int g
--[ 2021.09.21.10.11.18.155.0 ]--
r 13     public int ge
--[ 2021.09.21.10.11.18.441.0 ]--
r 13     public int get
--[ 2021.09.21.10.11.22.013.0 ]--
r 13     public int get1
--[ 2021.09.21.10.11.23.052.0 ]--
r 13     public int get1d
--[ 2021.09.21.10.11.24.244.0 ]--
r 13     public int get1dL
--[ 2021.09.21.10.11.24.499.0 ]--
r 13     public int get1dLo
--[ 2021.09.21.10.11.24.576.0 ]--
r 13     public int get1dLoc
--[ 2021.09.21.10.11.24.866.0 ]--
r 13     public int get1dLoca
--[ 2021.09.21.10.11.25.296.0 ]--
r 13     public int get1dLocat
--[ 2021.09.21.10.11.25.527.0 ]--
r 13     public int get1dLocati
--[ 2021.09.21.10.11.25.547.0 ]--
r 13     public int get1dLocatio
--[ 2021.09.21.10.11.25.616.0 ]--
r 13     public int get1dLocation
--[ 2021.09.21.10.11.27.099.0 ]--
r 13     public int get1dLocation()
--[ 2021.09.21.10.11.27.772.0 ]--
r 13     public int get1dLocation(i)
--[ 2021.09.21.10.11.27.915.0 ]--
r 13     public int get1dLocation(in)
--[ 2021.09.21.10.11.28.165.0 ]--
r 13     public int get1dLocation(int)
--[ 2021.09.21.10.11.28.496.0 ]--
r 13     public int get1dLocation(int )
--[ 2021.09.21.10.11.28.887.0 ]--
r 13     public int get1dLocation(int N)
--[ 2021.09.21.10.11.30.402.0 ]--
r 13     public int get1dLocation(int N) 
--[ 2021.09.21.10.11.30.714.0 ]--
r 13     public int get1dLocation(int N) {}
--[ 2021.09.21.10.11.31.036.0 ]--
+ 13     public int get1dLocation(int N) {
r 14     }
--[ 2021.09.21.10.11.31.065.0 ]--
+ 14         
--[ 2021.09.21.10.12.04.340.0 ]--
- 13
- 13
- 13
--[ 2021.09.21.10.12.04.642.0 ]--
- 12
--[ 2021.09.21.10.12.06.663.0 ]--
+ 7     
--[ 2021.09.21.10.12.07.783.0 ]--
r 7     i
--[ 2021.09.21.10.12.07.896.0 ]--
r 7     in
--[ 2021.09.21.10.12.08.024.0 ]--
r 7     int
--[ 2021.09.21.10.12.09.086.0 ]--
r 7     int[]
--[ 2021.09.21.10.12.11.778.0 ]--
r 7     int[] 
--[ 2021.09.21.10.12.12.712.0 ]--
r 7     int[] i
--[ 2021.09.21.10.12.12.910.0 ]--
r 7     int[] id
--[ 2021.09.21.10.12.13.422.0 ]--
r 7     int[] idB
--[ 2021.09.21.10.12.13.816.0 ]--
r 7     int[] idBo
--[ 2021.09.21.10.12.14.159.0 ]--
r 7     int[] idBoa
--[ 2021.09.21.10.12.14.477.0 ]--
r 7     int[] idBoar
--[ 2021.09.21.10.12.14.680.0 ]--
r 7     int[] idBoard
--[ 2021.09.21.10.12.15.736.0 ]--
r 7     int[] idBoard;
--[ 2021.09.21.10.12.19.497.0 ]--
r 7     int[][] idBoard;
--[ 2021.09.21.10.12.25.869.0 ]--
+ 12         
--[ 2021.09.21.10.12.27.346.0 ]--
r 12         i
--[ 2021.09.21.10.12.27.429.0 ]--
r 12         id
--[ 2021.09.21.10.12.28.117.0 ]--
r 12         idBoard
--[ 2021.09.21.10.12.28.716.0 ]--
r 12         idBoard 
--[ 2021.09.21.10.12.28.941.0 ]--
r 12         idBoard =
--[ 2021.09.21.10.12.29.072.0 ]--
r 12         idBoard = 
--[ 2021.09.21.10.12.29.825.0 ]--
r 12         idBoard = n
--[ 2021.09.21.10.12.31.603.0 ]--
r 12         idBoard = ne
--[ 2021.09.21.10.12.31.787.0 ]--
r 12         idBoard = new
--[ 2021.09.21.10.12.32.454.0 ]--
r 12         idBoard = new 
--[ 2021.09.21.10.12.32.590.0 ]--
r 12         idBoard = new i
--[ 2021.09.21.10.12.32.659.0 ]--
r 12         idBoard = new in
--[ 2021.09.21.10.12.32.803.0 ]--
r 12         idBoard = new int
--[ 2021.09.21.10.12.34.074.0 ]--
r 12         idBoard = new int[]
--[ 2021.09.21.10.12.42.838.0 ]--
r 12         idBoard = new int[r]
--[ 2021.09.21.10.12.43.003.0 ]--
r 12         idBoard = new int[ro]
--[ 2021.09.21.10.12.43.852.0 ]--
r 12         idBoard = new int[row]
--[ 2021.09.21.10.12.47.683.0 ]--
r 12         idBoard = new int[ro]
--[ 2021.09.21.10.12.47.826.0 ]--
r 12         idBoard = new int[r]
--[ 2021.09.21.10.12.48.010.0 ]--
r 12         idBoard = new int[]
--[ 2021.09.21.10.12.48.791.0 ]--
r 12         idBoard = new int[()]
--[ 2021.09.21.10.12.49.638.0 ]--
r 12         idBoard = new int[(r)]
--[ 2021.09.21.10.12.49.720.0 ]--
r 12         idBoard = new int[(ro)]
--[ 2021.09.21.10.12.50.021.0 ]--
r 12         idBoard = new int[(row)]
--[ 2021.09.21.10.12.52.403.0 ]--
r 12         idBoard = new int[(row*)]
--[ 2021.09.21.10.12.54.775.0 ]--
r 12         idBoard = new int[(row*N)]
--[ 2021.09.21.10.12.56.743.0 ]--
r 12         idBoard = new int[(row*N)+]
--[ 2021.09.21.10.12.57.087.0 ]--
r 12         idBoard = new int[(row*N)+c]
--[ 2021.09.21.10.12.57.253.0 ]--
r 12         idBoard = new int[(row*N)+co]
--[ 2021.09.21.10.12.57.450.0 ]--
r 12         idBoard = new int[(row*N)+col]
--[ 2021.09.21.10.13.00.684.0 ]--
r 12         idBoard = new int[(row*N)+col][]
--[ 2021.09.21.10.13.04.487.0 ]--
r 12         idBoard = new int[(row*N)+col][0]
--[ 2021.09.21.10.13.06.409.0 ]--
r 12         idBoard = new int[(row*N)+col][0];
--[ 2021.09.21.10.13.09.201.0 ]--
r 9     public HexBoard(int N,) {
--[ 2021.09.21.10.13.09.431.0 ]--
r 9     public HexBoard(int N, ) {
--[ 2021.09.21.10.13.09.686.0 ]--
r 9     public HexBoard(int N, i) {
--[ 2021.09.21.10.13.09.879.0 ]--
r 9     public HexBoard(int N, in) {
--[ 2021.09.21.10.13.10.023.0 ]--
r 9     public HexBoard(int N, int) {
--[ 2021.09.21.10.13.10.449.0 ]--
r 9     public HexBoard(int N, int ) {
--[ 2021.09.21.10.13.11.047.0 ]--
r 9     public HexBoard(int N, int r) {
--[ 2021.09.21.10.13.11.188.0 ]--
r 9     public HexBoard(int N, int ro) {
--[ 2021.09.21.10.13.12.102.0 ]--
r 9     public HexBoard(int N, int row) {
--[ 2021.09.21.10.13.12.198.0 ]--
r 9     public HexBoard(int N, int row,) {
--[ 2021.09.21.10.13.12.399.0 ]--
r 9     public HexBoard(int N, int row, ) {
--[ 2021.09.21.10.13.12.717.0 ]--
r 9     public HexBoard(int N, int row, i) {
--[ 2021.09.21.10.13.12.984.0 ]--
r 9     public HexBoard(int N, int row, in) {
--[ 2021.09.21.10.13.13.189.0 ]--
r 9     public HexBoard(int N, int row, int) {
--[ 2021.09.21.10.13.13.559.0 ]--
r 9     public HexBoard(int N, int row, int ) {
--[ 2021.09.21.10.13.14.319.0 ]--
r 9     public HexBoard(int N, int row, int c) {
--[ 2021.09.21.10.13.14.516.0 ]--
r 9     public HexBoard(int N, int row, int co) {
--[ 2021.09.21.10.13.14.721.0 ]--
r 9     public HexBoard(int N, int row, int col) {
--[ 2021.09.21.10.13.28.597.0 ]--
r 9     public HexBoard(int N) {
--[ 2021.09.21.10.13.29.258.0 ]--
r 12         idBoard = new int[(row*N)+col][0]
--[ 2021.09.21.10.13.29.325.0 ]--
r 12         idBoard = new int[]
--[ 2021.09.21.10.13.29.349.0 ]--
r 12         idBoard = new int[row]
--[ 2021.09.21.10.13.29.384.0 ]--
r 12         idBoard
--[ 2021.09.21.10.13.29.409.0 ]--
r 12         id
--[ 2021.09.21.10.13.29.440.0 ]--
r 12         
--[ 2021.09.21.10.13.29.476.0 ]--
- 12
--[ 2021.09.21.10.13.29.966.0 ]--
r 7     int[] idBoard;
--[ 2021.09.21.10.13.30.608.0 ]--
r 7     int[]
--[ 2021.09.21.10.13.31.125.0 ]--
r 7     
--[ 2021.09.21.10.13.31.365.0 ]--
- 7
--[ 2021.09.21.10.13.32.436.0 ]--
+ 12 
--[ 2021.09.21.10.13.32.917.0 ]--
+ 13     public int get1dLocation(int N) {
+ 14         
+ 15     }
--[ 2021.09.21.10.13.34.815.0 ]--
- 13
- 13
- 13
--[ 2021.09.21.10.13.35.390.0 ]--
- 12
--[ 2021.09.21.10.14.47.729.0 ]--
+ 33         
--[ 2021.09.21.10.14.49.810.0 ]--
r 33         S
--[ 2021.09.21.10.14.50.001.0 ]--
r 33         Sy
--[ 2021.09.21.10.14.50.641.0 ]--
r 33         System
--[ 2021.09.21.10.14.50.839.0 ]--
r 33         System.
--[ 2021.09.21.10.14.51.573.0 ]--
r 33         System.o
--[ 2021.09.21.10.14.52.005.0 ]--
r 33         System.out
--[ 2021.09.21.10.14.52.539.0 ]--
r 33         System.outp
--[ 2021.09.21.10.14.53.030.0 ]--
r 33         System.out
--[ 2021.09.21.10.14.53.252.0 ]--
r 33         System.out.
--[ 2021.09.21.10.14.53.488.0 ]--
r 33         System.out.p[]
--[ 2021.09.21.10.14.54.013.0 ]--
r 33         System.out.p
--[ 2021.09.21.10.14.54.790.0 ]--
r 33         System.out.pr
--[ 2021.09.21.10.14.54.918.0 ]--
r 33         System.out.pri
--[ 2021.09.21.10.14.55.481.0 ]--
r 33         System.out.println
--[ 2021.09.21.10.14.55.493.0 ]--
r 33         System.out.println()
--[ 2021.09.21.10.14.55.498.0 ]--
r 33         System.out.println();
--[ 2021.09.21.10.14.57.954.0 ]--
r 33         System.out.println(r);
--[ 2021.09.21.10.14.58.250.0 ]--
r 33         System.out.println(ro);
--[ 2021.09.21.10.14.58.942.0 ]--
r 33         System.out.println(row);
--[ 2021.09.21.10.14.59.848.0 ]--
r 33         System.out.println(ro);
--[ 2021.09.21.10.15.00.025.0 ]--
r 33         System.out.println(r);
--[ 2021.09.21.10.15.00.211.0 ]--
r 33         System.out.println();
--[ 2021.09.21.10.15.00.931.0 ]--
r 33         System.out.println(());
--[ 2021.09.21.10.15.02.155.0 ]--
r 33         System.out.println((r));
--[ 2021.09.21.10.15.02.863.0 ]--
r 33         System.out.println((row));
--[ 2021.09.21.10.15.04.294.0 ]--
r 33         System.out.println((row*));
--[ 2021.09.21.10.15.07.069.0 ]--
r 33         System.out.println((row*N));
--[ 2021.09.21.10.15.11.657.0 ]--
r 33         System.out.println((row*));
--[ 2021.09.21.10.15.12.292.0 ]--
r 33         System.out.println((row*5));
--[ 2021.09.21.10.15.13.661.0 ]--
r 33         System.out.println((row*5)+);
--[ 2021.09.21.10.15.14.054.0 ]--
r 33         System.out.println((row*5)+c);
--[ 2021.09.21.10.15.14.150.0 ]--
r 33         System.out.println((row*5)+co);
--[ 2021.09.21.10.15.14.385.0 ]--
r 33         System.out.println((row*5)+col);
--[ 2021.09.21.10.15.20.543.0 ]--
r 37 
--[ 2021.09.21.10.15.22.175.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.10.16.22.044.0 ]--
+ 6     
--[ 2021.09.21.10.16.33.659.0 ]--
- 6
--[ 2021.09.21.10.16.35.260.0 ]--
+ 7     
--[ 2021.09.21.10.16.37.049.0 ]--
r 7     i
--[ 2021.09.21.10.16.37.123.0 ]--
r 7     in
--[ 2021.09.21.10.16.37.519.0 ]--
r 7     int
--[ 2021.09.21.10.16.38.696.0 ]--
r 7     int[]
--[ 2021.09.21.10.16.40.475.0 ]--
r 7     int[] 
--[ 2021.09.21.10.16.41.592.0 ]--
r 7     int[] i
--[ 2021.09.21.10.16.41.755.0 ]--
r 7     int[] id
--[ 2021.09.21.10.16.42.934.0 ]--
r 7     int[] id;
--[ 2021.09.21.10.18.53.156.0 ]--
+ 12         
--[ 2021.09.21.10.18.56.037.0 ]--
r 12         i
--[ 2021.09.21.10.18.56.133.0 ]--
r 12         id
--[ 2021.09.21.10.18.56.300.0 ]--
r 12         id 
--[ 2021.09.21.10.18.57.070.0 ]--
r 12         id =
--[ 2021.09.21.10.18.57.257.0 ]--
r 12         id = 
--[ 2021.09.21.10.18.57.866.0 ]--
r 12         id = n
--[ 2021.09.21.10.18.57.999.0 ]--
r 12         id = ne
--[ 2021.09.21.10.18.58.155.0 ]--
r 12         id = new
--[ 2021.09.21.10.18.58.270.0 ]--
r 12         id = new 
--[ 2021.09.21.10.18.58.962.0 ]--
r 12         id = new
--[ 2021.09.21.10.18.59.297.0 ]--
r 12         id = new 
--[ 2021.09.21.10.18.59.441.0 ]--
r 12         id = new i
--[ 2021.09.21.10.18.59.530.0 ]--
r 12         id = new in
--[ 2021.09.21.10.18.59.634.0 ]--
r 12         id = new int
--[ 2021.09.21.10.19.01.073.0 ]--
r 12         id = new int[]
--[ 2021.09.21.10.19.10.242.0 ]--
r 12         id = new int[N]
--[ 2021.09.21.10.19.11.853.0 ]--
r 12         id = new int[N*]
--[ 2021.09.21.10.19.12.668.0 ]--
r 12         id = new int[N*N]
--[ 2021.09.21.10.19.15.097.0 ]--
r 12         id = new int[N*N-]
--[ 2021.09.21.10.19.15.559.0 ]--
r 12         id = new int[N*N-1]
--[ 2021.09.21.10.19.25.085.0 ]--
r 12         id = new int[N*N-]
--[ 2021.09.21.10.19.25.497.0 ]--
r 12         id = new int[N*N]
--[ 2021.09.21.10.19.32.405.0 ]--
r 12         id = new int[N*N];
--[ 2021.09.21.10.20.06.299.0 ]--
+ 23         
--[ 2021.09.21.10.20.07.766.0 ]--
r 23         i
--[ 2021.09.21.10.20.07.832.0 ]--
r 23         if
--[ 2021.09.21.10.20.07.961.0 ]--
r 23         if 
--[ 2021.09.21.10.20.10.044.0 ]--
r 23         if
--[ 2021.09.21.10.20.10.182.0 ]--
r 23         i
--[ 2021.09.21.10.20.10.327.0 ]--
r 23         
--[ 2021.09.21.10.20.10.491.0 ]--
- 23
--[ 2021.09.21.10.20.10.699.0 ]--
r 22         if (this.board[row][col] == 0) {return false;
--[ 2021.09.21.10.20.12.369.0 ]--
+ 22         if (this.board[row][col] == 0) {return false;}
r 23         if 
--[ 2021.09.21.10.20.13.072.0 ]--
r 23         if
--[ 2021.09.21.10.20.13.245.0 ]--
r 23         i
--[ 2021.09.21.10.20.13.415.0 ]--
r 23         
--[ 2021.09.21.10.20.13.624.0 ]--
- 23
--[ 2021.09.21.10.20.18.170.0 ]--
+ 36         
--[ 2021.09.21.10.20.19.012.0 ]--
r 36         i
--[ 2021.09.21.10.20.19.175.0 ]--
r 36         if
--[ 2021.09.21.10.20.19.812.0 ]--
r 36         if 
--[ 2021.09.21.10.20.22.216.0 ]--
r 36         if ()
--[ 2021.09.21.10.20.22.665.0 ]--
r 36         if (t)
--[ 2021.09.21.10.20.22.744.0 ]--
r 36         if (th)
--[ 2021.09.21.10.20.22.910.0 ]--
r 36         if (thi)
--[ 2021.09.21.10.20.25.694.0 ]--
r 36         if (th)
--[ 2021.09.21.10.20.25.880.0 ]--
r 36         if (t)
--[ 2021.09.21.10.20.26.083.0 ]--
r 36         if ()
--[ 2021.09.21.10.20.31.871.0 ]--
r 36         if (this.board[row][col] = player;)
--[ 2021.09.21.10.20.34.556.0 ]--
r 36         if (this.board[row][col] == player;)
--[ 2021.09.21.10.20.37.116.0 ]--
r 36         if (this.board[row][col] == player)
--[ 2021.09.21.10.20.37.287.0 ]--
r 36         if (this.board[row][col] == playe)
--[ 2021.09.21.10.20.37.439.0 ]--
r 36         if (this.board[row][col] == play)
--[ 2021.09.21.10.20.37.606.0 ]--
r 36         if (this.board[row][col] == pla)
--[ 2021.09.21.10.20.37.758.0 ]--
r 36         if (this.board[row][col] == pl)
--[ 2021.09.21.10.20.37.905.0 ]--
r 36         if (this.board[row][col] == p)
--[ 2021.09.21.10.20.38.273.0 ]--
r 36         if (this.board[row][col] == )
--[ 2021.09.21.10.20.50.492.0 ]--
r 36         if (this.board[row][col] ==)
--[ 2021.09.21.10.20.50.987.0 ]--
r 36         if (this.board[row][col] =)
--[ 2021.09.21.10.20.51.017.0 ]--
r 36         if (this.board[row][col] )
--[ 2021.09.21.10.20.51.048.0 ]--
r 36         if (this.board[row][col])
--[ 2021.09.21.10.20.51.081.0 ]--
r 36         if (this.board[row][col)
--[ 2021.09.21.10.20.51.120.0 ]--
r 36         if (this.board[row][co)
--[ 2021.09.21.10.20.51.146.0 ]--
r 36         if (this.board[row][c)
--[ 2021.09.21.10.20.51.173.0 ]--
r 36         if (this.board[row][)
--[ 2021.09.21.10.20.51.204.0 ]--
r 36         if (this.board[row])
--[ 2021.09.21.10.20.51.235.0 ]--
r 36         if (this.board[row)
--[ 2021.09.21.10.20.51.266.0 ]--
r 36         if (this.board[ro)
--[ 2021.09.21.10.20.51.297.0 ]--
r 36         if (this.board[r)
--[ 2021.09.21.10.20.51.326.0 ]--
r 36         if (this.board[)
--[ 2021.09.21.10.20.51.354.0 ]--
r 36         if (this.board)
--[ 2021.09.21.10.20.51.385.0 ]--
r 36         if (this.boar)
--[ 2021.09.21.10.20.51.415.0 ]--
r 36         if (this.boa)
--[ 2021.09.21.10.20.51.599.0 ]--
r 36         if (this.bo)
--[ 2021.09.21.10.20.51.790.0 ]--
r 36         if (this.b)
--[ 2021.09.21.10.20.51.964.0 ]--
r 36         if (this.)
--[ 2021.09.21.10.20.52.150.0 ]--
r 36         if (this)
--[ 2021.09.21.10.20.52.303.0 ]--
r 36         if (thi)
--[ 2021.09.21.10.20.52.478.0 ]--
r 36         if (th)
--[ 2021.09.21.10.20.52.651.0 ]--
r 36         if (t)
--[ 2021.09.21.10.20.52.903.0 ]--
r 36         if ()
--[ 2021.09.21.10.20.55.480.0 ]--
r 36         if (r)
--[ 2021.09.21.10.20.55.671.0 ]--
r 36         if (ro)
--[ 2021.09.21.10.20.55.975.0 ]--
r 36         if (row)
--[ 2021.09.21.10.20.57.316.0 ]--
r 36         if (row )
--[ 2021.09.21.10.20.57.471.0 ]--
r 36         if (row =)
--[ 2021.09.21.10.20.57.607.0 ]--
r 36         if (row ==)
--[ 2021.09.21.10.20.58.068.0 ]--
r 36         if (row == )
--[ 2021.09.21.10.21.54.982.0 ]--
r 36         if (row == 0)
--[ 2021.09.21.10.21.56.280.0 ]--
r 36         if (row == 0 )
--[ 2021.09.21.10.21.57.408.0 ]--
r 36         if (row == 0 |)
--[ 2021.09.21.10.21.57.591.0 ]--
r 36         if (row == 0 ||)
--[ 2021.09.21.10.22.02.774.0 ]--
r 36         if (row == 0 || )
--[ 2021.09.21.10.22.03.292.0 ]--
r 36         if (row == 0 || row == 0 ||)
--[ 2021.09.21.10.22.04.403.0 ]--
r 36         if (row == 0 || row == 0 || )
--[ 2021.09.21.10.22.04.655.0 ]--
r 36         if (row == 0 || row == 0 || row == 0 ||)
--[ 2021.09.21.10.22.13.021.0 ]--
r 36         if (row == 0 || row == 0 || row == 0 || )
--[ 2021.09.21.10.22.13.390.0 ]--
r 36         if (row == 0 || row == 0 || row == 0 || row == 0 ||)
--[ 2021.09.21.10.22.14.507.0 ]--
r 36         if (row == 0 || row == 0 || row == 0 || row == 0 || )
--[ 2021.09.21.10.22.14.875.0 ]--
r 36         if (row == 0 || row == 0 || row == 0 || row == 0 || row == 0 ||)
--[ 2021.09.21.10.22.23.767.0 ]--
r 36         if (row == 0  || row == 0 || row == 0 || row == 0 || row == 0 ||)
--[ 2021.09.21.10.22.25.186.0 ]--
r 36         if (row == 0 & || row == 0 || row == 0 || row == 0 || row == 0 ||)
--[ 2021.09.21.10.22.25.612.0 ]--
r 36         if (row == 0 &  || row == 0 || row == 0 || row == 0 || row == 0 ||)
--[ 2021.09.21.10.22.26.222.0 ]--
r 36         if (row == 0 & c || row == 0 || row == 0 || row == 0 || row == 0 ||)
--[ 2021.09.21.10.22.26.550.0 ]--
r 36         if (row == 0 & co || row == 0 || row == 0 || row == 0 || row == 0 ||)
--[ 2021.09.21.10.22.26.574.0 ]--
r 36         if (row == 0 & col || row == 0 || row == 0 || row == 0 || row == 0 ||)
--[ 2021.09.21.10.22.34.622.0 ]--
r 36         if ()
--[ 2021.09.21.10.22.36.769.0 ]--
+ 36         
--[ 2021.09.21.10.22.38.532.0 ]--
r 36         i
--[ 2021.09.21.10.22.38.730.0 ]--
r 36         in
--[ 2021.09.21.10.22.38.792.0 ]--
r 36         int
--[ 2021.09.21.10.22.40.198.0 ]--
r 36         int 
--[ 2021.09.21.10.22.42.229.0 ]--
r 36         int l
--[ 2021.09.21.10.22.42.424.0 ]--
r 36         int lo
--[ 2021.09.21.10.22.42.501.0 ]--
r 36         int loc
--[ 2021.09.21.10.22.43.114.0 ]--
r 36         int loca
--[ 2021.09.21.10.22.43.491.0 ]--
r 36         int locat
--[ 2021.09.21.10.22.43.615.0 ]--
r 36         int locatoi
--[ 2021.09.21.10.22.43.718.0 ]--
r 36         int locatoin
--[ 2021.09.21.10.22.44.364.0 ]--
r 36         int locatoi
--[ 2021.09.21.10.22.44.499.0 ]--
r 36         int locato
--[ 2021.09.21.10.22.44.643.0 ]--
r 36         int locat
--[ 2021.09.21.10.22.44.893.0 ]--
r 36         int locati
--[ 2021.09.21.10.22.44.944.0 ]--
r 36         int locatio
--[ 2021.09.21.10.22.44.997.0 ]--
r 36         int location
--[ 2021.09.21.10.22.45.159.0 ]--
r 36         int location 
--[ 2021.09.21.10.22.46.100.0 ]--
r 36         int location =
--[ 2021.09.21.10.22.46.195.0 ]--
r 36         int location = 
--[ 2021.09.21.10.22.47.943.0 ]--
r 36         int location = ()
--[ 2021.09.21.10.22.48.189.0 ]--
r 36         int location = (r)
--[ 2021.09.21.10.22.48.423.0 ]--
r 36         int location = (ro)
--[ 2021.09.21.10.22.49.619.0 ]--
r 36         int location = (row)
--[ 2021.09.21.10.23.14.286.0 ]--
r 36         int location = (row*)
--[ 2021.09.21.10.23.14.973.0 ]--
r 36         int location = (row*N)
--[ 2021.09.21.10.23.18.192.0 ]--
r 36         int location = (row*N)+
--[ 2021.09.21.10.23.18.876.0 ]--
r 36         int location = (row*N)+c
--[ 2021.09.21.10.23.19.311.0 ]--
r 36         int location = (row*N)+co
--[ 2021.09.21.10.23.19.496.0 ]--
r 36         int location = (row*N)+col
--[ 2021.09.21.10.23.20.388.0 ]--
r 36         int location = (row*N)+col;
--[ 2021.09.21.10.24.22.292.0 ]--
r 31     public void setTile(int row, int col, int player,) {
--[ 2021.09.21.10.24.22.462.0 ]--
r 31     public void setTile(int row, int col, int player, ) {
--[ 2021.09.21.10.24.22.795.0 ]--
r 31     public void setTile(int row, int col, int player, i) {
--[ 2021.09.21.10.24.22.904.0 ]--
r 31     public void setTile(int row, int col, int player, in) {
--[ 2021.09.21.10.24.23.058.0 ]--
r 31     public void setTile(int row, int col, int player, int) {
--[ 2021.09.21.10.24.23.198.0 ]--
r 31     public void setTile(int row, int col, int player, int ) {
--[ 2021.09.21.10.24.23.701.0 ]--
r 31     public void setTile(int row, int col, int player, int N) {
--[ 2021.09.21.10.24.43.298.0 ]--
:/src/InteractiveHexBoardVisualizer.java
r 54                             board.setTile(i, j, player,);
--[ 2021.09.21.10.24.46.147.0 ]--
r 54                             board.setTile(i, j, player, );
--[ 2021.09.21.10.24.53.354.0 ]--
r 54                             board.setTile(i, j, player, N);
--[ 2021.09.21.10.25.05.979.0 ]--
r 54                             board.setTile(i, j, player);
--[ 2021.09.21.10.25.10.867.0 ]--
:/src/HexBoard.java
r 31     public void setTile(int row, int col, int player) {
--[ 2021.09.21.10.25.11.664.0 ]--
r 36         int location = (row*N)
--[ 2021.09.21.10.25.12.430.0 ]--
r 36         int locat
--[ 2021.09.21.10.25.12.712.0 ]--
r 36         int locatoin
--[ 2021.09.21.10.25.13.021.0 ]--
r 36         
--[ 2021.09.21.10.25.13.383.0 ]--
- 36
--[ 2021.09.21.10.25.19.164.0 ]--
r 36         if (r)
--[ 2021.09.21.10.25.19.383.0 ]--
r 36         if (ro)
--[ 2021.09.21.10.25.20.256.0 ]--
r 36         if (r)
--[ 2021.09.21.10.25.20.616.0 ]--
r 36         if ()
--[ 2021.09.21.10.25.21.291.0 ]--
r 36         if (())
--[ 2021.09.21.10.25.22.122.0 ]--
r 36         if ((r))
--[ 2021.09.21.10.25.22.223.0 ]--
r 36         if ((ro))
--[ 2021.09.21.10.25.23.125.0 ]--
r 36         if ((row))
--[ 2021.09.21.10.25.23.659.0 ]--
r 36         if ((row ))
--[ 2021.09.21.10.25.24.075.0 ]--
r 36         if ((row =))
--[ 2021.09.21.10.25.24.253.0 ]--
r 36         if ((row ==))
--[ 2021.09.21.10.25.24.516.0 ]--
r 36         if ((row == ))
--[ 2021.09.21.10.25.25.682.0 ]--
r 36         if ((row == 0))
--[ 2021.09.21.10.25.26.470.0 ]--
r 36         if ((row == 0 ))
--[ 2021.09.21.10.25.27.755.0 ]--
r 36         if ((row == 0 &))
--[ 2021.09.21.10.25.27.965.0 ]--
r 36         if ((row == 0 &&))
--[ 2021.09.21.10.25.28.370.0 ]--
r 36         if ((row == 0 && ))
--[ 2021.09.21.10.25.28.896.0 ]--
r 36         if ((row == 0 && c))
--[ 2021.09.21.10.25.28.947.0 ]--
r 36         if ((row == 0 && co))
--[ 2021.09.21.10.25.29.184.0 ]--
r 36         if ((row == 0 && col))
--[ 2021.09.21.10.25.29.275.0 ]--
r 36         if ((row == 0 && col ))
--[ 2021.09.21.10.25.30.061.0 ]--
r 36         if ((row == 0 && col =))
--[ 2021.09.21.10.25.30.213.0 ]--
r 36         if ((row == 0 && col ==))
--[ 2021.09.21.10.25.30.692.0 ]--
r 36         if ((row == 0 && col == ))
--[ 2021.09.21.10.25.42.021.0 ]--
r 36         if ((row == 0 && col == 0))
--[ 2021.09.21.10.26.02.472.0 ]--
r 36         if ((row == 0 && col == 0) )
--[ 2021.09.21.10.26.03.690.0 ]--
r 36         if ((row == 0 && col == 0) |)
--[ 2021.09.21.10.26.03.906.0 ]--
r 36         if ((row == 0 && col == 0) ||)
--[ 2021.09.21.10.26.04.445.0 ]--
r 36         if ((row == 0 && col == 0) || )
--[ 2021.09.21.10.26.26.692.0 ]--
- 35
r 35 
--[ 2021.09.21.10.26.27.375.0 ]--
- 35
--[ 2021.09.21.10.26.35.952.0 ]--
- 38
--[ 2021.09.21.10.28.27.544.0 ]--
+ 54     
--[ 2021.09.21.10.28.27.869.0 ]--
+ 54     
--[ 2021.09.21.10.28.43.644.0 ]--
r 54 
--[ 2021.09.21.10.30.21.663.0 ]--
+ 38         
--[ 2021.09.21.10.30.24.567.0 ]--
r 38         QuickFindUF.java
--[ 2021.09.21.10.30.25.673.0 ]--
r 38         QuickFindUF.java.
--[ 2021.09.21.10.30.27.368.0 ]--
r 38         QuickFindUF.java.f
--[ 2021.09.21.10.30.27.948.0 ]--
r 38         QuickFindUF.java.fi
--[ 2021.09.21.10.30.28.118.0 ]--
r 38         QuickFindUF.java.fin
--[ 2021.09.21.10.30.28.737.0 ]--
r 38         QuickFindUF.java.fi
--[ 2021.09.21.10.30.28.898.0 ]--
r 38         QuickFindUF.java.f
--[ 2021.09.21.10.30.29.059.0 ]--
r 38         QuickFindUF.java.
--[ 2021.09.21.10.30.30.711.0 ]--
r 38         QuickFindUF.java
--[ 2021.09.21.10.30.31.200.0 ]--
r 38         QuickFindUF.jav
--[ 2021.09.21.10.30.31.231.0 ]--
r 38         QuickFindUF.ja
--[ 2021.09.21.10.30.31.266.0 ]--
r 38         QuickFindUF.j
--[ 2021.09.21.10.30.31.294.0 ]--
r 38         QuickFindUF.
--[ 2021.09.21.10.30.31.319.0 ]--
r 38         QuickFindUF
--[ 2021.09.21.10.30.31.349.0 ]--
r 38         QuickFindU
--[ 2021.09.21.10.30.31.380.0 ]--
r 38         QuickFind
--[ 2021.09.21.10.30.31.410.0 ]--
r 38         QuickFin
--[ 2021.09.21.10.30.31.440.0 ]--
r 38         QuickFi
--[ 2021.09.21.10.30.31.470.0 ]--
r 38         QuickF
--[ 2021.09.21.10.30.31.500.0 ]--
r 38         Quick
--[ 2021.09.21.10.30.31.531.0 ]--
r 38         Quic
--[ 2021.09.21.10.30.31.561.0 ]--
r 38         Qui
--[ 2021.09.21.10.30.31.591.0 ]--
r 38         Qu
--[ 2021.09.21.10.30.31.622.0 ]--
r 38         Q
--[ 2021.09.21.10.30.32.018.0 ]--
r 38         
--[ 2021.09.21.10.30.36.883.0 ]--
r 56 
--[ 2021.09.21.10.30.46.706.0 ]--
r 38         a
--[ 2021.09.21.10.30.47.076.0 ]--
r 38         al
--[ 2021.09.21.10.30.48.360.0 ]--
r 38         alg
--[ 2021.09.21.10.30.49.103.0 ]--
r 38         algs
--[ 2021.09.21.10.30.49.506.0 ]--
r 38         algs4
--[ 2021.09.21.10.30.49.885.0 ]--
r 38         algs4.
--[ 2021.09.21.10.30.50.651.0 ]--
r 38         algs4.j
--[ 2021.09.21.10.30.51.406.0 ]--
r 38         algs4.ja
--[ 2021.09.21.10.30.51.761.0 ]--
r 38         algs4.jar
--[ 2021.09.21.10.30.52.377.0 ]--
r 38         algs4.ja
--[ 2021.09.21.10.30.52.529.0 ]--
r 38         algs4.j
--[ 2021.09.21.10.30.52.698.0 ]--
r 38         algs4.
--[ 2021.09.21.10.30.52.884.0 ]--
r 38         algs4
--[ 2021.09.21.10.30.53.017.0 ]--
r 38         algs
--[ 2021.09.21.10.30.53.186.0 ]--
r 38         alg
--[ 2021.09.21.10.30.53.371.0 ]--
r 38         al
--[ 2021.09.21.10.30.53.498.0 ]--
r 38         a
--[ 2021.09.21.10.30.53.674.0 ]--
r 38         
--[ 2021.09.21.10.32.26.835.0 ]--
r 38         Q
--[ 2021.09.21.10.32.27.056.0 ]--
r 38         Qu
--[ 2021.09.21.10.32.27.393.0 ]--
r 38         Qui
--[ 2021.09.21.10.32.27.826.0 ]--
r 38         Quic
--[ 2021.09.21.10.32.28.000.0 ]--
r 38         Quick
--[ 2021.09.21.10.32.29.514.0 ]--
r 38         QuickFindUF
--[ 2021.09.21.10.32.30.389.0 ]--
r 38         QuickFindUF 
--[ 2021.09.21.10.32.32.008.0 ]--
r 38         QuickFindUF q
--[ 2021.09.21.10.32.32.381.0 ]--
r 38         QuickFindUF qf
--[ 2021.09.21.10.32.32.962.0 ]--
r 38         QuickFindUF qf 
--[ 2021.09.21.10.32.33.746.0 ]--
r 38         QuickFindUF qf =
--[ 2021.09.21.10.32.33.970.0 ]--
r 38         QuickFindUF qf = 
--[ 2021.09.21.10.34.34.083.0 ]--
r 38         QuickFindUF qf = n
--[ 2021.09.21.10.34.34.194.0 ]--
r 38         QuickFindUF qf = ne
--[ 2021.09.21.10.34.34.446.0 ]--
r 38         QuickFindUF qf = new
--[ 2021.09.21.10.34.34.725.0 ]--
r 38         QuickFindUF qf = new 
--[ 2021.09.21.10.34.36.314.0 ]--
r 38         QuickFindUF qf = new QuickFindUF
--[ 2021.09.21.10.34.36.331.0 ]--
r 38         QuickFindUF qf = new QuickFindUF()
--[ 2021.09.21.10.34.42.667.0 ]--
r 38         QuickFindUF qf = new QuickFindUF();
--[ 2021.09.21.10.35.25.741.0 ]--
r 38         
--[ 2021.09.21.10.38.35.610.0 ]--
r 38         Q
--[ 2021.09.21.10.38.36.015.0 ]--
r 38         Qu
--[ 2021.09.21.10.38.37.405.0 ]--
r 38         Q
--[ 2021.09.21.10.38.37.562.0 ]--
r 38         
--[ 2021.09.21.10.38.37.745.0 ]--
- 38
--[ 2021.09.21.10.38.38.420.0 ]--
+ 38         
--[ 2021.09.21.10.38.39.266.0 ]--
r 38         W
--[ 2021.09.21.10.38.39.495.0 ]--
r 38         We
--[ 2021.09.21.10.38.39.888.0 ]--
r 38         Wei
--[ 2021.09.21.10.38.41.073.0 ]--
r 38         WeightedQuickUnionUF
--[ 2021.09.21.10.40.28.801.0 ]--
r 38         Q
--[ 2021.09.21.10.40.29.131.0 ]--
r 38         Qu
--[ 2021.09.21.10.40.29.169.0 ]--
r 38         Qui
--[ 2021.09.21.10.40.29.874.0 ]--
r 38         QuickFindUF
--[ 2021.09.21.10.40.32.154.0 ]--
r 38         QuickFindUF 
--[ 2021.09.21.10.40.34.079.0 ]--
r 38         QuickFindUF q
--[ 2021.09.21.10.40.34.404.0 ]--
r 38         QuickFindUF qf
--[ 2021.09.21.10.40.34.578.0 ]--
r 38         QuickFindUF qf 
--[ 2021.09.21.10.40.35.433.0 ]--
r 38         QuickFindUF qf =
--[ 2021.09.21.10.40.35.648.0 ]--
r 38         QuickFindUF qf = 
--[ 2021.09.21.10.40.36.215.0 ]--
r 38         QuickFindUF qf = n
--[ 2021.09.21.10.40.37.136.0 ]--
r 38         QuickFindUF qf = new
--[ 2021.09.21.10.40.37.143.0 ]--
r 38         QuickFindUF qf = new 
--[ 2021.09.21.10.40.38.480.0 ]--
r 38         QuickFindUF qf = new Q
--[ 2021.09.21.10.40.39.260.0 ]--
r 38         QuickFindUF qf = new QuickFindUF
--[ 2021.09.21.10.40.39.268.0 ]--
r 38         QuickFindUF qf = new QuickFindUF()
--[ 2021.09.21.10.40.40.547.0 ]--
r 38         QuickFindUF qf = new QuickFindUF(t)
--[ 2021.09.21.10.40.40.699.0 ]--
r 38         QuickFindUF qf = new QuickFindUF(th)
--[ 2021.09.21.10.40.43.067.0 ]--
r 38         QuickFindUF qf = new QuickFindUF(this)
--[ 2021.09.21.10.40.43.897.0 ]--
r 38         QuickFindUF qf = new QuickFindUF(this.)
--[ 2021.09.21.10.40.44.692.0 ]--
r 38         QuickFindUF qf = new QuickFindUF(this.board)
--[ 2021.09.21.10.40.45.522.0 ]--
r 38         QuickFindUF qf = new QuickFindUF(this.board.)
--[ 2021.09.21.10.40.46.167.0 ]--
r 38         QuickFindUF qf = new QuickFindUF(this.board.length)
--[ 2021.09.21.10.40.49.080.0 ]--
r 38         QuickFindUF qf = new QuickFindUF(this.board.length);
--[ 2021.09.21.10.40.54.336.0 ]--
+ 39         
--[ 2021.09.21.10.41.02.537.0 ]--
r 39         q
--[ 2021.09.21.10.41.03.388.0 ]--
r 39         qf
--[ 2021.09.21.10.41.03.673.0 ]--
r 39         qf.
--[ 2021.09.21.10.41.06.067.0 ]--
r 39         qf.f
--[ 2021.09.21.10.41.11.441.0 ]--
r 39         qf.find
--[ 2021.09.21.10.41.11.464.0 ]--
r 39         qf.find()
--[ 2021.09.21.10.41.23.371.0 ]--
r 39         qf.find
--[ 2021.09.21.10.41.23.553.0 ]--
r 39         qf.fin
--[ 2021.09.21.10.41.23.792.0 ]--
r 39         qf.fi
--[ 2021.09.21.10.41.23.942.0 ]--
r 39         qf.f
--[ 2021.09.21.10.41.24.158.0 ]--
r 39         qf.
--[ 2021.09.21.10.41.24.360.0 ]--
r 39         qf
--[ 2021.09.21.10.41.24.584.0 ]--
r 39         q
--[ 2021.09.21.10.41.24.959.0 ]--
r 39         
--[ 2021.09.21.10.41.25.867.0 ]--
r 39         f
--[ 2021.09.21.10.41.26.064.0 ]--
r 39         fo
--[ 2021.09.21.10.41.26.166.0 ]--
r 39         for
--[ 2021.09.21.10.41.26.379.0 ]--
r 39         for 
--[ 2021.09.21.10.41.27.361.0 ]--
r 39         for ()
--[ 2021.09.21.10.42.55.263.0 ]--
r 39         for (
--[ 2021.09.21.10.42.55.424.0 ]--
r 39         for 
--[ 2021.09.21.10.42.55.600.0 ]--
r 39         for
--[ 2021.09.21.10.42.55.800.0 ]--
r 39         fo
--[ 2021.09.21.10.42.56.040.0 ]--
r 39         f
--[ 2021.09.21.10.42.56.559.0 ]--
r 39         
--[ 2021.09.21.10.43.12.036.0 ]--
:/src/HexBoardStats.java
r 15         return -1
--[ 2021.09.21.10.43.12.176.0 ]--
r 15         return -
--[ 2021.09.21.10.43.12.302.0 ]--
r 15         return 
--[ 2021.09.21.10.43.12.463.0 ]--
r 15         return
--[ 2021.09.21.10.43.12.591.0 ]--
r 15         retur
--[ 2021.09.21.10.43.12.751.0 ]--
r 15         retu
--[ 2021.09.21.10.43.12.879.0 ]--
r 15         ret
--[ 2021.09.21.10.43.13.033.0 ]--
r 15         re
--[ 2021.09.21.10.43.14.672.0 ]--
r 15         ret
--[ 2021.09.21.10.43.14.859.0 ]--
r 15         retu
--[ 2021.09.21.10.43.14.985.0 ]--
r 15         retur
--[ 2021.09.21.10.43.15.157.0 ]--
r 15         return
--[ 2021.09.21.10.43.15.353.0 ]--
r 15         return 
--[ 2021.09.21.10.43.16.342.0 ]--
r 15         return t
--[ 2021.09.21.10.43.16.480.0 ]--
r 15         return th
--[ 2021.09.21.10.43.16.577.0 ]--
r 15         return thi
--[ 2021.09.21.10.43.17.619.0 ]--
r 15         return this
--[ 2021.09.21.10.43.17.834.0 ]--
r 15         return this.
--[ 2021.09.21.10.43.18.640.0 ]--
r 15         return this.N
--[ 2021.09.21.10.43.23.779.0 ]--
r 15         return this.N0
--[ 2021.09.21.10.43.26.991.0 ]--
r 15         return this.N0;
--[ 2021.09.21.10.43.29.727.0 ]--
+ 11     
--[ 2021.09.21.10.43.31.632.0 ]--
r 11     p
--[ 2021.09.21.10.43.31.788.0 ]--
r 11     pr
--[ 2021.09.21.10.43.32.216.0 ]--
r 11     pri
--[ 2021.09.21.10.43.32.338.0 ]--
r 11     priv
--[ 2021.09.21.10.43.32.793.0 ]--
r 11     private
--[ 2021.09.21.10.43.32.806.0 ]--
r 11     private 
--[ 2021.09.21.10.43.33.284.0 ]--
r 11     private i
--[ 2021.09.21.10.43.33.823.0 ]--
r 11     private int
--[ 2021.09.21.10.43.34.424.0 ]--
r 11     private int 
--[ 2021.09.21.10.43.34.910.0 ]--
r 11     private int N
--[ 2021.09.21.10.43.35.574.0 ]--
r 11     private int N0
--[ 2021.09.21.10.43.37.015.0 ]--
r 11     private int N0 
--[ 2021.09.21.10.43.37.486.0 ]--
r 11     private int N0 =
--[ 2021.09.21.10.43.38.031.0 ]--
r 11     private int N0 = 
--[ 2021.09.21.10.43.38.552.0 ]--
r 11     private int N0 = -
--[ 2021.09.21.10.43.38.832.0 ]--
r 11     private int N0 = -1
--[ 2021.09.21.10.43.39.198.0 ]--
r 11     private int N0 = -1;
--[ 2021.09.21.10.43.45.584.0 ]--
+ 12     
--[ 2021.09.21.10.43.46.821.0 ]--
r 12     private int N0 = -1;
--[ 2021.09.21.10.43.47.867.0 ]--
+ 13     
--[ 2021.09.21.10.43.48.390.0 ]--
r 13     private int N0 = -1;
--[ 2021.09.21.10.43.50.900.0 ]--
r 13     private int N = -1;
--[ 2021.09.21.10.43.51.150.0 ]--
r 13     private int N2 = -1;
--[ 2021.09.21.10.43.51.697.0 ]--
r 12     private int N = -1;
--[ 2021.09.21.10.43.51.815.0 ]--
r 12     private int N1 = -1;
--[ 2021.09.21.10.44.06.799.0 ]--
r 22         return this.N0;
--[ 2021.09.21.10.44.08.384.0 ]--
r 22         return this.N;
--[ 2021.09.21.10.44.08.680.0 ]--
r 22         return this.N1;
--[ 2021.09.21.10.44.12.589.0 ]--
r 26         return this.N0;
--[ 2021.09.21.10.44.13.660.0 ]--
r 26         return this.N;
--[ 2021.09.21.10.44.13.939.0 ]--
r 26         return this.N2;
--[ 2021.09.21.10.44.16.693.0 ]--
- 17
r 17     public int getN0() { return this.N0;
--[ 2021.09.21.10.44.18.522.0 ]--
- 17
r 17     public int getN0() { return this.N0; }
--[ 2021.09.21.10.44.20.398.0 ]--
:/src/HexBoard.java
r 39 
--[ 2021.09.21.10.44.27.582.0 ]--
:/src/HexBoardStats.java
- 13
--[ 2021.09.21.10.44.32.161.0 ]--
+ 13     private int N2 = -1;
--[ 2021.09.21.10.44.34.073.0 ]--
- 13
--[ 2021.09.21.10.44.38.683.0 ]--
+ 13     
--[ 2021.09.21.10.44.38.961.0 ]--
r 13     d
--[ 2021.09.21.10.44.39.166.0 ]--
r 13     do
--[ 2021.09.21.10.44.39.237.0 ]--
r 13     dou
--[ 2021.09.21.10.44.39.361.0 ]--
r 13     doub
--[ 2021.09.21.10.44.39.468.0 ]--
r 13     doubl
--[ 2021.09.21.10.44.39.629.0 ]--
r 13     double
--[ 2021.09.21.10.44.39.743.0 ]--
r 13     double 
--[ 2021.09.21.10.44.40.110.0 ]--
r 13     double p
--[ 2021.09.21.10.44.40.197.0 ]--
r 13     double pr
--[ 2021.09.21.10.44.40.304.0 ]--
r 13     double pro
--[ 2021.09.21.10.44.40.366.0 ]--
r 13     double prop
--[ 2021.09.21.10.44.40.842.0 ]--
r 13     double pro
--[ 2021.09.21.10.44.41.463.0 ]--
r 13     double prob
--[ 2021.09.21.10.44.42.133.0 ]--
r 13     double prob[]
--[ 2021.09.21.10.44.44.509.0 ]--
r 13     double prob[];
--[ 2021.09.21.10.44.51.364.0 ]--
r 24         return this.T;
--[ 2021.09.21.10.44.53.463.0 ]--
- 24
r 24         return this.T; }
--[ 2021.09.21.10.44.54.882.0 ]--
- 23
r 23     public int getT() { return this.T; }
--[ 2021.09.21.10.45.01.064.0 ]--
+ 15         
--[ 2021.09.21.10.45.03.367.0 ]--
r 15         t
--[ 2021.09.21.10.45.03.480.0 ]--
r 15         th
--[ 2021.09.21.10.45.03.535.0 ]--
r 15         thi
--[ 2021.09.21.10.45.04.056.0 ]--
r 15         this
--[ 2021.09.21.10.45.04.920.0 ]--
r 15         this.
--[ 2021.09.21.10.45.05.863.0 ]--
r 15         this.N0
--[ 2021.09.21.10.45.06.262.0 ]--
r 15         this.N0 
--[ 2021.09.21.10.45.06.582.0 ]--
r 15         this.N0 =
--[ 2021.09.21.10.45.06.719.0 ]--
r 15         this.N0 = 
--[ 2021.09.21.10.45.07.268.0 ]--
r 15         this.N0 = N
--[ 2021.09.21.10.45.07.998.0 ]--
r 15         this.N0 = N0
--[ 2021.09.21.10.45.08.830.0 ]--
r 15         this.N0 = N0;
--[ 2021.09.21.10.45.09.116.0 ]--
+ 16         
--[ 2021.09.21.10.45.11.150.0 ]--
r 16         t
--[ 2021.09.21.10.45.11.301.0 ]--
r 16         th
--[ 2021.09.21.10.45.11.934.0 ]--
r 16         this
--[ 2021.09.21.10.45.12.437.0 ]--
r 16         this.
--[ 2021.09.21.10.45.13.087.0 ]--
r 16         this.N0
--[ 2021.09.21.10.45.13.502.0 ]--
r 16         this.N0 
--[ 2021.09.21.10.45.14.016.0 ]--
r 16         this.N0 =
--[ 2021.09.21.10.45.14.114.0 ]--
r 16         this.N0 = 
--[ 2021.09.21.10.45.15.045.0 ]--
r 16         this.N0 = N
--[ 2021.09.21.10.45.16.521.0 ]--
r 16         this.N0 = N1
--[ 2021.09.21.10.45.17.355.0 ]--
r 16         this.N0 = N1;
--[ 2021.09.21.10.45.18.806.0 ]--
r 16         this.N = N1;
--[ 2021.09.21.10.45.18.901.0 ]--
r 16         this.N1 = N1;
--[ 2021.09.21.10.45.22.909.0 ]--
+ 17         
--[ 2021.09.21.10.45.23.541.0 ]--
r 17         this.N1 = N1;
--[ 2021.09.21.10.45.25.150.0 ]--
r 17         this.N1 = N;
--[ 2021.09.21.10.45.25.310.0 ]--
r 17         this.N1 = ;
--[ 2021.09.21.10.45.26.311.0 ]--
r 17         this.N1 = T;
--[ 2021.09.21.10.45.27.547.0 ]--
r 17         this.N = T;
--[ 2021.09.21.10.45.27.655.0 ]--
r 17         this. = T;
--[ 2021.09.21.10.45.28.046.0 ]--
r 17         this.T = T;
--[ 2021.09.21.10.45.40.535.0 ]--
+ 18         
--[ 2021.09.21.10.45.50.199.0 ]--
+ 13     
--[ 2021.09.21.10.45.51.127.0 ]--
r 13     p
--[ 2021.09.21.10.45.51.281.0 ]--
r 13     pr
--[ 2021.09.21.10.45.51.352.0 ]--
r 13     pri
--[ 2021.09.21.10.45.51.530.0 ]--
r 13     priv
--[ 2021.09.21.10.45.51.911.0 ]--
r 13     priva
--[ 2021.09.21.10.45.52.139.0 ]--
r 13     privat
--[ 2021.09.21.10.45.52.614.0 ]--
r 13     private
--[ 2021.09.21.10.45.52.767.0 ]--
r 13     private 
--[ 2021.09.21.10.45.52.985.0 ]--
r 13     private i
--[ 2021.09.21.10.45.53.079.0 ]--
r 13     private in
--[ 2021.09.21.10.45.53.224.0 ]--
r 13     private int
--[ 2021.09.21.10.45.53.456.0 ]--
r 13     private int 
--[ 2021.09.21.10.45.54.061.0 ]--
r 13     private int T
--[ 2021.09.21.10.45.54.441.0 ]--
r 13     private int T 
--[ 2021.09.21.10.45.54.663.0 ]--
r 13     private int T =
--[ 2021.09.21.10.45.54.831.0 ]--
r 13     private int T = 
--[ 2021.09.21.10.45.55.400.0 ]--
r 13     private int T = -
--[ 2021.09.21.10.45.55.686.0 ]--
r 13     private int T = -1
--[ 2021.09.21.10.45.56.049.0 ]--
r 13     private int T = -1;
--[ 2021.09.21.10.46.06.184.0 ]--
r 19         t
--[ 2021.09.21.10.46.06.319.0 ]--
r 19         th
--[ 2021.09.21.10.46.06.375.0 ]--
r 19         thi
--[ 2021.09.21.10.46.07.086.0 ]--
r 19         this
--[ 2021.09.21.10.46.07.201.0 ]--
r 19         this.
--[ 2021.09.21.10.46.07.462.0 ]--
r 19         this.p
--[ 2021.09.21.10.46.08.015.0 ]--
r 19         this.prob
--[ 2021.09.21.10.46.09.760.0 ]--
r 19         this.prob 
--[ 2021.09.21.10.46.11.366.0 ]--
r 19         this.prob =
--[ 2021.09.21.10.46.11.600.0 ]--
r 19         this.prob = 
--[ 2021.09.21.10.46.12.129.0 ]--
r 19         this.prob = n
--[ 2021.09.21.10.46.12.325.0 ]--
r 19         this.prob = ne
--[ 2021.09.21.10.46.12.528.0 ]--
r 19         this.prob = new
--[ 2021.09.21.10.46.12.655.0 ]--
r 19         this.prob = new 
--[ 2021.09.21.10.46.12.879.0 ]--
r 19         this.prob = new d
--[ 2021.09.21.10.46.13.302.0 ]--
r 19         this.prob = new double
--[ 2021.09.21.10.46.13.317.0 ]--
r 19         this.prob = new double[]
--[ 2021.09.21.10.46.17.214.0 ]--
r 19         this.prob = new double[N]
--[ 2021.09.21.10.46.19.214.0 ]--
r 19         this.prob = new double[N1]
--[ 2021.09.21.10.46.21.246.0 ]--
r 19         this.prob = new double[N1-]
--[ 2021.09.21.10.46.22.414.0 ]--
r 19         this.prob = new double[N1-N]
--[ 2021.09.21.10.46.23.104.0 ]--
r 19         this.prob = new double[N1-N0]
--[ 2021.09.21.10.46.23.943.0 ]--
r 19         this.prob = new double[N1-N0+]
--[ 2021.09.21.10.46.24.654.0 ]--
r 19         this.prob = new double[N1-N0+1]
--[ 2021.09.21.10.46.33.851.0 ]--
+ 16         
--[ 2021.09.21.10.46.51.710.0 ]--
r 16         I
--[ 2021.09.21.10.46.52.416.0 ]--
r 16         
--[ 2021.09.21.10.46.52.617.0 ]--
r 16         i
--[ 2021.09.21.10.46.52.703.0 ]--
r 16         if
--[ 2021.09.21.10.46.52.947.0 ]--
r 16         if 
--[ 2021.09.21.10.46.53.366.0 ]--
r 16         if ()
--[ 2021.09.21.10.46.55.214.0 ]--
r 16         if (N)
--[ 2021.09.21.10.46.56.218.0 ]--
r 16         if (N0)
--[ 2021.09.21.10.46.56.879.0 ]--
r 16         if (N0 )
--[ 2021.09.21.10.46.57.143.0 ]--
r 16         if (N0 <)
--[ 2021.09.21.10.46.57.533.0 ]--
r 16         if (N0 <=)
--[ 2021.09.21.10.46.58.471.0 ]--
r 16         if (N0 <= )
--[ 2021.09.21.10.46.59.924.0 ]--
r 16         if (N0 <= 0)
--[ 2021.09.21.10.47.00.258.0 ]--
r 16         if (N0 <= 0 )
--[ 2021.09.21.10.47.00.937.0 ]--
r 16         if (N0 <= 0 |)
--[ 2021.09.21.10.47.01.101.0 ]--
r 16         if (N0 <= 0 ||)
--[ 2021.09.21.10.47.01.405.0 ]--
r 16         if (N0 <= 0 || )
--[ 2021.09.21.10.47.02.687.0 ]--
r 16         if (N0 <= 0 || N)
--[ 2021.09.21.10.47.03.354.0 ]--
r 16         if (N0 <= 0 || N1)
--[ 2021.09.21.10.47.03.938.0 ]--
r 16         if (N0 <= 0 || N1 )
--[ 2021.09.21.10.47.04.471.0 ]--
r 16         if (N0 <= 0 || N1 <)
--[ 2021.09.21.10.47.07.129.0 ]--
r 16         if (N0 <= 0 || N1 < )
--[ 2021.09.21.10.47.07.519.0 ]--
r 16         if (N0 <= 0 || N1 < N)
--[ 2021.09.21.10.47.08.270.0 ]--
r 16         if (N0 <= 0 || N1 < N0)
--[ 2021.09.21.10.47.08.703.0 ]--
r 16         if (N0 <= 0 || N1 < N0 )
--[ 2021.09.21.10.47.09.759.0 ]--
r 16         if (N0 <= 0 || N1 < N0 |)
--[ 2021.09.21.10.47.09.934.0 ]--
r 16         if (N0 <= 0 || N1 < N0 ||)
--[ 2021.09.21.10.47.10.772.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || )
--[ 2021.09.21.10.47.12.519.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T)
--[ 2021.09.21.10.47.12.859.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T )
--[ 2021.09.21.10.47.13.103.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <)
--[ 2021.09.21.10.47.13.591.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <=)
--[ 2021.09.21.10.47.14.061.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= )
--[ 2021.09.21.10.47.14.373.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0)
--[ 2021.09.21.10.47.18.236.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) 
--[ 2021.09.21.10.47.19.010.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) {
--[ 2021.09.21.10.47.20.865.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) {}
--[ 2021.09.21.10.47.22.431.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { }
--[ 2021.09.21.10.47.23.984.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { r}
--[ 2021.09.21.10.47.24.320.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { re}
--[ 2021.09.21.10.47.24.806.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { return}
--[ 2021.09.21.10.47.24.820.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { return;}
--[ 2021.09.21.10.47.26.039.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { return; }
--[ 2021.09.21.10.47.27.222.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { return ; }
--[ 2021.09.21.10.47.34.590.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { return  }
--[ 2021.09.21.10.47.34.750.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { return }
--[ 2021.09.21.10.47.34.902.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { retur }
--[ 2021.09.21.10.47.35.054.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { retu }
--[ 2021.09.21.10.47.35.190.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { ret }
--[ 2021.09.21.10.47.35.350.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { re }
--[ 2021.09.21.10.47.35.493.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { r }
--[ 2021.09.21.10.47.35.654.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) {  }
--[ 2021.09.21.10.47.48.300.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("N cannot be <= 0"); }
--[ 2021.09.21.10.47.55.740.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("I"); }
--[ 2021.09.21.10.47.56.040.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Il"); }
--[ 2021.09.21.10.47.56.187.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Ill"); }
--[ 2021.09.21.10.47.56.602.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Ille"); }
--[ 2021.09.21.10.47.57.243.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illeg"); }
--[ 2021.09.21.10.47.57.417.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illega"); }
--[ 2021.09.21.10.47.57.575.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal"); }
--[ 2021.09.21.10.47.57.721.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal "); }
--[ 2021.09.21.10.47.58.117.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal A"); }
--[ 2021.09.21.10.47.58.791.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Ar"); }
--[ 2021.09.21.10.47.59.058.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Arg"); }
--[ 2021.09.21.10.47.59.222.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argu"); }
--[ 2021.09.21.10.47.59.636.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argum"); }
--[ 2021.09.21.10.47.59.952.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argume"); }
--[ 2021.09.21.10.48.00.085.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argumen"); }
--[ 2021.09.21.10.48.00.293.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument"); }
--[ 2021.09.21.10.48.00.773.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument "); }
--[ 2021.09.21.10.48.03.970.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument"); }
--[ 2021.09.21.10.48.05.445.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument("); }
--[ 2021.09.21.10.48.05.695.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument(s"); }
--[ 2021.09.21.10.48.06.154.0 ]--
r 16         if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument(s)"); }
--[ 2021.09.21.10.48.24.850.0 ]--
r 20         this.prob = new double[N1-N0+1];
--[ 2021.09.21.10.48.25.307.0 ]--
+ 21         
--[ 2021.09.21.10.49.53.288.0 ]--
- 26
r 26     public int getN1() { return this.N1;
--[ 2021.09.21.10.49.55.343.0 ]--
- 26
r 26     public int getN1() { return this.N1; }
--[ 2021.09.21.10.50.28.589.0 ]--
:/src/HexBoard.java
- 38
r 38   
--[ 2021.09.21.10.50.29.106.0 ]--
- 38
--[ 2021.09.21.10.51.39.143.0 ]--
:/src/HexBoardStats.java
+ 37     
--[ 2021.09.21.10.51.39.268.0 ]--
+ 37     
--[ 2021.09.21.10.51.39.981.0 ]--
r 38     p
--[ 2021.09.21.10.51.40.134.0 ]--
r 38     pr
--[ 2021.09.21.10.51.40.276.0 ]--
r 38     pri
--[ 2021.09.21.10.51.40.725.0 ]--
r 38     priv
--[ 2021.09.21.10.51.41.062.0 ]--
r 38     private
--[ 2021.09.21.10.51.41.085.0 ]--
r 38     private 
--[ 2021.09.21.10.51.41.619.0 ]--
r 38     private s
--[ 2021.09.21.10.51.42.248.0 ]--
r 38     private static
--[ 2021.09.21.10.51.42.257.0 ]--
r 38     private static 
--[ 2021.09.21.10.51.45.010.0 ]--
r 38     private static p
--[ 2021.09.21.10.51.45.219.0 ]--
r 38     private static pl
--[ 2021.09.21.10.51.45.583.0 ]--
r 38     private static pla
--[ 2021.09.21.10.51.45.721.0 ]--
r 38     private static play
--[ 2021.09.21.10.51.46.190.0 ]--
r 38     private static playA
--[ 2021.09.21.10.51.46.756.0 ]--
r 38     private static playAG
--[ 2021.09.21.10.51.47.056.0 ]--
r 38     private static playAGa
--[ 2021.09.21.10.51.47.261.0 ]--
r 38     private static playAGam
--[ 2021.09.21.10.51.47.420.0 ]--
r 38     private static playAGame
--[ 2021.09.21.10.51.48.252.0 ]--
r 38     private static playAGame()
--[ 2021.09.21.10.51.50.445.0 ]--
r 38     private static playAGame(N)
--[ 2021.09.21.10.51.52.350.0 ]--
r 38     private static playAGame(N) 
--[ 2021.09.21.10.51.53.205.0 ]--
r 38     private static playAGame(N) {}
--[ 2021.09.21.10.52.13.780.0 ]--
+ 38     private static playAGame(N) {
r 39     }
--[ 2021.09.21.10.52.13.815.0 ]--
+ 39         
--[ 2021.09.21.10.53.05.359.0 ]--
r 39         H
--[ 2021.09.21.10.53.05.915.0 ]--
r 39         He
--[ 2021.09.21.10.53.06.163.0 ]--
r 39         Hec
--[ 2021.09.21.10.53.06.529.0 ]--
r 39         He
--[ 2021.09.21.10.53.06.672.0 ]--
r 39         Hex
--[ 2021.09.21.10.53.07.544.0 ]--
r 39         HexBoard
--[ 2021.09.21.10.53.08.996.0 ]--
r 39         HexBoard 
--[ 2021.09.21.10.53.09.383.0 ]--
r 39         HexBoard b
--[ 2021.09.21.10.53.10.029.0 ]--
r 39         HexBoard board
--[ 2021.09.21.10.53.10.501.0 ]--
r 39         HexBoard board 
--[ 2021.09.21.10.53.11.005.0 ]--
r 39         HexBoard board =
--[ 2021.09.21.10.53.11.277.0 ]--
r 39         HexBoard board = 
--[ 2021.09.21.10.53.11.838.0 ]--
r 39         HexBoard board = n
--[ 2021.09.21.10.53.11.992.0 ]--
r 39         HexBoard board = ne
--[ 2021.09.21.10.53.12.321.0 ]--
r 39         HexBoard board = new
--[ 2021.09.21.10.53.12.558.0 ]--
r 39         HexBoard board = new 
--[ 2021.09.21.10.53.13.576.0 ]--
r 39         HexBoard board = new HexBoard
--[ 2021.09.21.10.53.13.585.0 ]--
r 39         HexBoard board = new HexBoard()
--[ 2021.09.21.10.53.14.910.0 ]--
r 39         HexBoard board = new HexBoard(N)
--[ 2021.09.21.10.53.16.722.0 ]--
r 39         HexBoard board = new HexBoard(N);
--[ 2021.09.21.10.53.17.277.0 ]--
+ 40         
--[ 2021.09.21.10.53.19.053.0 ]--
r 40         i
--[ 2021.09.21.10.53.19.202.0 ]--
r 40         in
--[ 2021.09.21.10.53.19.279.0 ]--
r 40         int
--[ 2021.09.21.10.53.19.591.0 ]--
r 40         int 
--[ 2021.09.21.10.53.19.765.0 ]--
r 40         int p
--[ 2021.09.21.10.53.19.958.0 ]--
r 40         int pl
--[ 2021.09.21.10.53.20.063.0 ]--
r 40         int pla
--[ 2021.09.21.10.53.20.167.0 ]--
r 40         int play
--[ 2021.09.21.10.53.20.678.0 ]--
r 40         int playe
--[ 2021.09.21.10.53.20.910.0 ]--
r 40         int player
--[ 2021.09.21.10.53.21.580.0 ]--
r 40         int player 
--[ 2021.09.21.10.53.22.309.0 ]--
r 40         int player -
--[ 2021.09.21.10.53.22.650.0 ]--
r 40         int player 
--[ 2021.09.21.10.53.22.838.0 ]--
r 40         int player =
--[ 2021.09.21.10.53.22.955.0 ]--
r 40         int player =1
--[ 2021.09.21.10.53.23.150.0 ]--
r 40         int player =1 
--[ 2021.09.21.10.53.23.524.0 ]--
r 40         int player =1
--[ 2021.09.21.10.53.23.684.0 ]--
r 40         int player =
--[ 2021.09.21.10.53.23.916.0 ]--
r 40         int player =1
--[ 2021.09.21.10.53.24.071.0 ]--
r 40         int player =1 
--[ 2021.09.21.10.53.24.284.0 ]--
r 40         int player =1
--[ 2021.09.21.10.53.24.412.0 ]--
r 40         int player =
--[ 2021.09.21.10.53.24.581.0 ]--
r 40         int player = 
--[ 2021.09.21.10.53.24.694.0 ]--
r 40         int player = 1
--[ 2021.09.21.10.53.25.254.0 ]--
r 40         int player = 1;
--[ 2021.09.21.10.53.27.914.0 ]--
+ 41         
--[ 2021.09.21.10.53.32.988.0 ]--
r 21         f
--[ 2021.09.21.10.53.33.113.0 ]--
r 21         fo
--[ 2021.09.21.10.53.33.215.0 ]--
r 21         for
--[ 2021.09.21.10.53.33.308.0 ]--
r 21         for 
--[ 2021.09.21.10.53.34.175.0 ]--
r 21         for ()
--[ 2021.09.21.10.53.34.604.0 ]--
r 21         for (i)
--[ 2021.09.21.10.53.34.788.0 ]--
r 21         for (in)
--[ 2021.09.21.10.53.34.844.0 ]--
r 21         for (int)
--[ 2021.09.21.10.53.36.307.0 ]--
r 21         for (int )
--[ 2021.09.21.10.53.36.476.0 ]--
r 21         for (int i)
--[ 2021.09.21.10.53.37.702.0 ]--
r 21         for (int i=)
--[ 2021.09.21.10.53.39.523.0 ]--
r 21         for (int i=N)
--[ 2021.09.21.10.53.40.271.0 ]--
r 21         for (int i=N0)
--[ 2021.09.21.10.53.41.117.0 ]--
r 21         for (int i=N0;)
--[ 2021.09.21.10.53.41.293.0 ]--
r 21         for (int i=N0; )
--[ 2021.09.21.10.53.41.852.0 ]--
r 21         for (int i=N0; i)
--[ 2021.09.21.10.53.44.104.0 ]--
r 21         for (int i=N0; iN)
--[ 2021.09.21.10.53.45.276.0 ]--
r 21         for (int i=N0; i)
--[ 2021.09.21.10.53.45.925.0 ]--
r 21         for (int i=N0; i<)
--[ 2021.09.21.10.53.46.413.0 ]--
r 21         for (int i=N0; i<=)
--[ 2021.09.21.10.53.48.252.0 ]--
r 21         for (int i=N0; i<=N)
--[ 2021.09.21.10.53.49.893.0 ]--
r 21         for (int i=N0; i<=N1)
--[ 2021.09.21.10.53.50.918.0 ]--
r 21         for (int i=N0; i<=N1;)
--[ 2021.09.21.10.53.52.693.0 ]--
r 21         for (int i=N0; i<=N1; )
--[ 2021.09.21.10.53.52.939.0 ]--
r 21         for (int i=N0; i<=N1; i)
--[ 2021.09.21.10.53.53.768.0 ]--
r 21         for (int i=N0; i<=N1; i+)
--[ 2021.09.21.10.53.53.892.0 ]--
r 21         for (int i=N0; i<=N1; i++)
--[ 2021.09.21.10.53.55.252.0 ]--
r 21         for (int i=N0; i<=N1; i++) 
--[ 2021.09.21.10.53.55.470.0 ]--
r 21         for (int i=N0; i<=N1; i++) {
--[ 2021.09.21.10.53.55.691.0 ]--
+ 22 
+ 23 }
--[ 2021.09.21.10.53.55.723.0 ]--
r 23         }
--[ 2021.09.21.10.53.55.746.0 ]--
r 22             
--[ 2021.09.21.10.53.58.086.0 ]--
r 22             f
--[ 2021.09.21.10.53.58.211.0 ]--
r 22             fo
--[ 2021.09.21.10.53.58.695.0 ]--
r 22             for
--[ 2021.09.21.10.53.58.712.0 ]--
r 22             for ()
--[ 2021.09.21.10.54.00.605.0 ]--
r 22             for (i)
--[ 2021.09.21.10.54.00.695.0 ]--
r 22             for (in)
--[ 2021.09.21.10.54.00.851.0 ]--
r 22             for (int)
--[ 2021.09.21.10.54.00.996.0 ]--
r 22             for (int )
--[ 2021.09.21.10.54.01.164.0 ]--
r 22             for (int j)
--[ 2021.09.21.10.54.01.781.0 ]--
r 22             for (int j=)
--[ 2021.09.21.10.54.02.044.0 ]--
r 22             for (int j=0)
--[ 2021.09.21.10.54.03.315.0 ]--
r 22             for (int j=0;)
--[ 2021.09.21.10.54.03.540.0 ]--
r 22             for (int j=0; )
--[ 2021.09.21.10.54.04.290.0 ]--
r 22             for (int j=0; i)
--[ 2021.09.21.10.54.06.037.0 ]--
r 22             for (int j=0; i<)
--[ 2021.09.21.10.54.06.413.0 ]--
r 22             for (int j=0; i<T)
--[ 2021.09.21.10.54.07.454.0 ]--
r 22             for (int j=0; i<T;)
--[ 2021.09.21.10.54.07.877.0 ]--
r 22             for (int j=0; i<T; )
--[ 2021.09.21.10.54.09.940.0 ]--
r 22             for (int j=0; i<T; j)
--[ 2021.09.21.10.54.10.891.0 ]--
r 22             for (int j=0; i<T; j+)
--[ 2021.09.21.10.54.11.019.0 ]--
r 22             for (int j=0; i<T; j++)
--[ 2021.09.21.10.55.30.438.0 ]--
r 22             for (int j=0; i<T; j++) 
--[ 2021.09.21.10.55.31.054.0 ]--
r 22             for (int j=0; i<T; j++) {
--[ 2021.09.21.10.55.31.261.0 ]--
+ 23 
+ 24 }
--[ 2021.09.21.10.55.31.298.0 ]--
r 24             }
--[ 2021.09.21.10.55.31.332.0 ]--
r 23                 
--[ 2021.09.21.10.55.33.414.0 ]--
r 23                 p
--[ 2021.09.21.10.55.33.579.0 ]--
r 23                 pr
--[ 2021.09.21.10.55.33.688.0 ]--
r 23                 pro
--[ 2021.09.21.10.55.34.044.0 ]--
r 23                 prob
--[ 2021.09.21.10.55.34.894.0 ]--
r 23                 prob[]
--[ 2021.09.21.10.55.36.594.0 ]--
r 23                 prob[i]
--[ 2021.09.21.10.55.37.409.0 ]--
r 23                 prob[i-]
--[ 2021.09.21.10.55.38.172.0 ]--
r 23                 prob[i-N]
--[ 2021.09.21.10.55.38.810.0 ]--
r 23                 prob[i-N0]
--[ 2021.09.21.10.55.40.425.0 ]--
r 23                 prob[i-N0] 
--[ 2021.09.21.10.55.41.188.0 ]--
r 23                 prob[i-N0] +
--[ 2021.09.21.10.55.41.534.0 ]--
r 23                 prob[i-N0] +=
--[ 2021.09.21.10.55.50.685.0 ]--
r 23                 prob[i-N0] += 
--[ 2021.09.21.10.55.51.391.0 ]--
r 23                 prob[i-N0] += p
--[ 2021.09.21.10.55.51.626.0 ]--
r 23                 prob[i-N0] += pl
--[ 2021.09.21.10.55.52.660.0 ]--
r 23                 prob[i-N0] += pla
--[ 2021.09.21.10.55.53.018.0 ]--
r 23                 prob[i-N0] += play
--[ 2021.09.21.10.55.53.785.0 ]--
r 23                 prob[i-N0] += playA
--[ 2021.09.21.10.55.54.418.0 ]--
r 23                 prob[i-N0] += playAG
--[ 2021.09.21.10.55.54.868.0 ]--
r 23                 prob[i-N0] += playAGa
--[ 2021.09.21.10.55.55.062.0 ]--
r 23                 prob[i-N0] += playAGam
--[ 2021.09.21.10.55.55.308.0 ]--
r 23                 prob[i-N0] += playAGame
--[ 2021.09.21.10.55.57.268.0 ]--
r 23                 prob[i-N0] += playAGame()
--[ 2021.09.21.10.55.58.006.0 ]--
r 23                 prob[i-N0] += playAGame(i)
--[ 2021.09.21.10.55.59.837.0 ]--
r 23                 prob[i-N0] += playAGame(i) 
--[ 2021.09.21.10.56.00.211.0 ]--
r 23                 prob[i-N0] += playAGame(i) =
--[ 2021.09.21.10.56.00.348.0 ]--
r 23                 prob[i-N0] += playAGame(i) ==
--[ 2021.09.21.10.56.00.462.0 ]--
r 23                 prob[i-N0] += playAGame(i) == 
--[ 2021.09.21.10.56.01.837.0 ]--
r 23                 prob[i-N0] += playAGame(i) == 1
--[ 2021.09.21.10.56.02.159.0 ]--
r 23                 prob[i-N0] += playAGame(i) == 1 
--[ 2021.09.21.10.56.02.437.0 ]--
r 23                 prob[i-N0] += playAGame(i) == 1 ?
--[ 2021.09.21.10.56.04.327.0 ]--
r 23                 prob[i-N0] += playAGame(i) == 1 ? 
--[ 2021.09.21.10.56.05.019.0 ]--
r 23                 prob[i-N0] += playAGame(i) == 1 ? 1
--[ 2021.09.21.10.56.05.505.0 ]--
r 23                 prob[i-N0] += playAGame(i) == 1 ? 1:
--[ 2021.09.21.10.56.06.900.0 ]--
r 23                 prob[i-N0] += playAGame(i) == 1 ? 1:0
--[ 2021.09.21.10.56.08.335.0 ]--
r 23                 prob[i-N0] += playAGame(i) == 1 ? 1:0;
--[ 2021.09.21.10.56.08.705.0 ]--
+ 24                 
--[ 2021.09.21.10.56.10.607.0 ]--
- 24
--[ 2021.09.21.10.56.10.726.0 ]--
r 23                 prob[i-N0] += playAGame(i) == 1 ? 1:0
--[ 2021.09.21.10.56.11.814.0 ]--
r 23                 prob[i-N0] += playAGame(i) == 1 ? 1:0;
--[ 2021.09.21.10.56.12.647.0 ]--
+ 25             
--[ 2021.09.21.10.56.14.164.0 ]--
r 25             p
--[ 2021.09.21.10.56.14.328.0 ]--
r 25             pr
--[ 2021.09.21.10.56.14.390.0 ]--
r 25             pro
--[ 2021.09.21.10.56.14.722.0 ]--
r 25             prob
--[ 2021.09.21.10.56.15.777.0 ]--
r 25             prob[]
--[ 2021.09.21.10.56.16.331.0 ]--
r 25             prob[i]
--[ 2021.09.21.10.56.17.075.0 ]--
r 25             prob[i-]
--[ 2021.09.21.10.56.17.948.0 ]--
r 25             prob[i-N]
--[ 2021.09.21.10.56.18.730.0 ]--
r 25             prob[i-N0]
--[ 2021.09.21.10.56.20.661.0 ]--
r 25             prob[i-N0] 
--[ 2021.09.21.10.56.21.277.0 ]--
r 25             prob[i-N0] =
--[ 2021.09.21.10.56.21.360.0 ]--
r 25             prob[i-N0] = 
--[ 2021.09.21.10.56.22.940.0 ]--
r 25             prob[i-N0] = p
--[ 2021.09.21.10.56.23.061.0 ]--
r 25             prob[i-N0] = pr
--[ 2021.09.21.10.56.23.135.0 ]--
r 25             prob[i-N0] = pro
--[ 2021.09.21.10.56.23.769.0 ]--
r 25             prob[i-N0] = prob
--[ 2021.09.21.10.56.25.534.0 ]--
r 25             prob[i-N0] = prob[]
--[ 2021.09.21.10.56.25.889.0 ]--
r 25             prob[i-N0] = prob[i]
--[ 2021.09.21.10.56.26.621.0 ]--
r 25             prob[i-N0] = prob[i=]
--[ 2021.09.21.10.56.26.996.0 ]--
r 25             prob[i-N0] = prob[i]
--[ 2021.09.21.10.56.27.588.0 ]--
r 25             prob[i-N0] = prob[i-]
--[ 2021.09.21.10.56.28.340.0 ]--
r 25             prob[i-N0] = prob[i-N]
--[ 2021.09.21.10.56.28.985.0 ]--
r 25             prob[i-N0] = prob[i-N0]
--[ 2021.09.21.10.56.31.229.0 ]--
r 25             prob[i-N0] = prob[i-N0]/
--[ 2021.09.21.10.56.33.711.0 ]--
r 25             prob[i-N0] = prob[i-N0]/T
--[ 2021.09.21.10.56.34.633.0 ]--
r 25             prob[i-N0] = prob[i-N0]/T;
--[ 2021.09.21.10.56.37.542.0 ]--
r 42 
r 46 
--[ 2021.09.21.10.56.57.666.0 ]--
- 42
- 42
- 42
- 42
r 43     
--[ 2021.09.21.10.56.58.522.0 ]--
- 42
--[ 2021.09.21.10.56.58.643.0 ]--
- 42
--[ 2021.09.21.10.57.03.794.0 ]--
+ 29     
--[ 2021.09.21.10.57.04.534.0 ]--
+ 29     
--[ 2021.09.21.10.57.05.642.0 ]--
+ 28 
+ 29     private static playAGame(N) {
+ 30         HexBoard board = new HexBoard(N);
+ 31         int player = 1;
r 33     }
--[ 2021.09.21.10.57.08.824.0 ]--
- 28
- 28
- 28
- 28
r 29     
--[ 2021.09.21.10.57.09.521.0 ]--
- 29
--[ 2021.09.21.10.57.09.834.0 ]--
- 29
--[ 2021.09.21.10.57.10.764.0 ]--
+ 42 
+ 43     
--[ 2021.09.21.10.57.11.122.0 ]--
+ 42 
+ 43     private static playAGame(N) {
+ 44         HexBoard board = new HexBoard(N);
+ 45         int player = 1;
r 47     }
--[ 2021.09.21.10.57.13.604.0 ]--
r 46     
--[ 2021.09.21.10.57.14.076.0 ]--
r 46         
--[ 2021.09.21.10.57.14.750.0 ]--
r 46         w
--[ 2021.09.21.10.57.14.990.0 ]--
r 46         wh
--[ 2021.09.21.10.57.15.050.0 ]--
r 46         whi
--[ 2021.09.21.10.57.15.200.0 ]--
r 46         whil
--[ 2021.09.21.10.57.15.287.0 ]--
r 46         while
--[ 2021.09.21.10.57.15.892.0 ]--
r 46         while()
--[ 2021.09.21.10.57.18.850.0 ]--
r 46         while(!)
--[ 2021.09.21.10.57.19.667.0 ]--
r 46         while(!b)
--[ 2021.09.21.10.57.19.816.0 ]--
r 46         while(!bo)
--[ 2021.09.21.10.57.20.263.0 ]--
r 46         while(!board)
--[ 2021.09.21.10.57.20.731.0 ]--
r 46         while(!board.)
--[ 2021.09.21.10.57.22.592.0 ]--
r 46         while(!board.hasPlayer1Won)
--[ 2021.09.21.10.57.22.603.0 ]--
r 46         while(!board.hasPlayer1Won())
--[ 2021.09.21.10.57.24.877.0 ]--
r 46         while(!board.hasPlayer1Won() )
--[ 2021.09.21.10.57.26.157.0 ]--
r 46         while(!board.hasPlayer1Won() &)
--[ 2021.09.21.10.57.26.299.0 ]--
r 46         while(!board.hasPlayer1Won() &&)
--[ 2021.09.21.10.57.30.186.0 ]--
r 46         while(!board.hasPlayer1Won() && )
--[ 2021.09.21.10.57.31.055.0 ]--
r 46         while(!board.hasPlayer1Won() && !)
--[ 2021.09.21.10.57.31.890.0 ]--
r 46         while(!board.hasPlayer1Won() && !b)
--[ 2021.09.21.10.57.32.616.0 ]--
r 46         while(!board.hasPlayer1Won() && !board)
--[ 2021.09.21.10.57.32.907.0 ]--
r 46         while(!board.hasPlayer1Won() && !board.)
--[ 2021.09.21.10.57.34.954.0 ]--
r 46         while(!board.hasPlayer1Won() && !board.hasPlayer2Won)
--[ 2021.09.21.10.57.34.967.0 ]--
r 46         while(!board.hasPlayer1Won() && !board.hasPlayer2Won())
--[ 2021.09.21.10.57.36.019.0 ]--
r 46         while(!board.hasPlayer1Won() && !board.hasPlayer2Won()) 
--[ 2021.09.21.10.57.36.364.0 ]--
r 46         while(!board.hasPlayer1Won() && !board.hasPlayer2Won()) {
--[ 2021.09.21.10.57.36.630.0 ]--
+ 47 
+ 48 }
--[ 2021.09.21.10.57.36.650.0 ]--
r 48         }
--[ 2021.09.21.10.57.36.674.0 ]--
r 47             
--[ 2021.09.21.10.58.17.779.0 ]--
r 47             i
--[ 2021.09.21.10.58.17.973.0 ]--
r 47             itn
--[ 2021.09.21.10.58.18.028.0 ]--
r 47             itn 
--[ 2021.09.21.10.58.18.187.0 ]--
r 47             itn r
--[ 2021.09.21.10.58.18.317.0 ]--
r 47             itn ro
--[ 2021.09.21.10.58.18.555.0 ]--
r 47             itn r
--[ 2021.09.21.10.58.18.691.0 ]--
r 47             itn 
--[ 2021.09.21.10.58.18.837.0 ]--
r 47             itn
--[ 2021.09.21.10.58.18.973.0 ]--
r 47             it
--[ 2021.09.21.10.58.19.106.0 ]--
r 47             i
--[ 2021.09.21.10.58.19.387.0 ]--
r 47             in
--[ 2021.09.21.10.58.19.538.0 ]--
r 47             int
--[ 2021.09.21.10.58.19.796.0 ]--
r 47             int 
--[ 2021.09.21.10.58.20.005.0 ]--
r 47             int r
--[ 2021.09.21.10.58.20.086.0 ]--
r 47             int ro
--[ 2021.09.21.10.58.20.917.0 ]--
r 47             int row
--[ 2021.09.21.10.58.21.213.0 ]--
r 47             int row 
--[ 2021.09.21.10.58.21.707.0 ]--
r 47             int row =
--[ 2021.09.21.10.58.22.084.0 ]--
r 47             int row = 
--[ 2021.09.21.10.58.23.077.0 ]--
r 47             int row = s
--[ 2021.09.21.10.58.23.794.0 ]--
r 47             int row = st
--[ 2021.09.21.10.58.24.474.0 ]--
r 47             int row = s
--[ 2021.09.21.10.58.24.622.0 ]--
r 47             int row = 
--[ 2021.09.21.10.58.24.852.0 ]--
r 47             int row = S
--[ 2021.09.21.10.58.25.859.0 ]--
r 47             int row = St
--[ 2021.09.21.10.58.27.411.0 ]--
r 47             int row = Std
--[ 2021.09.21.10.58.28.033.0 ]--
r 47             int row = Stdr
--[ 2021.09.21.10.58.28.777.0 ]--
r 47             int row = StdRandom
--[ 2021.09.21.10.58.30.364.0 ]--
r 47             int row = StdRandom.
--[ 2021.09.21.10.58.31.324.0 ]--
r 47             int row = StdRandom.u
--[ 2021.09.21.10.58.31.875.0 ]--
r 47             int row = StdRandom.uniform
--[ 2021.09.21.10.58.31.888.0 ]--
r 47             int row = StdRandom.uniform()
--[ 2021.09.21.10.58.46.077.0 ]--
r 47             int row = StdRandom.uniform(N)
--[ 2021.09.21.10.58.47.558.0 ]--
r 47             int row = StdRandom.uniform(N);
--[ 2021.09.21.10.58.51.987.0 ]--
+ 48             
--[ 2021.09.21.10.58.52.582.0 ]--
r 48             int row = StdRandom.uniform(N);
--[ 2021.09.21.10.58.57.094.0 ]--
r 48             int c = StdRandom.uniform(N);
--[ 2021.09.21.10.58.57.196.0 ]--
r 48             int co = StdRandom.uniform(N);
--[ 2021.09.21.10.58.57.379.0 ]--
r 48             int col = StdRandom.uniform(N);
--[ 2021.09.21.10.59.06.826.0 ]--
+ 49             
--[ 2021.09.21.11.00.00.624.0 ]--
r 49             f
--[ 2021.09.21.11.00.00.731.0 ]--
r 49             fi
--[ 2021.09.21.11.00.00.817.0 ]--
r 49             fi 
--[ 2021.09.21.11.00.01.390.0 ]--
r 49             fi
--[ 2021.09.21.11.00.01.507.0 ]--
r 49             f
--[ 2021.09.21.11.00.01.992.0 ]--
r 49             
--[ 2021.09.21.11.00.02.187.0 ]--
r 49             i
--[ 2021.09.21.11.00.02.336.0 ]--
r 49             if
--[ 2021.09.21.11.00.02.401.0 ]--
r 49             if 
--[ 2021.09.21.11.00.03.195.0 ]--
r 49             if ()
--[ 2021.09.21.11.00.04.249.0 ]--
r 49             if (i)
--[ 2021.09.21.11.00.04.311.0 ]--
r 49             if (is)
--[ 2021.09.21.11.00.06.206.0 ]--
r 49             if (board.isSet)
--[ 2021.09.21.11.00.06.215.0 ]--
r 49             if (board;)
--[ 2021.09.21.11.00.06.221.0 ]--
r 49             if (board.isSet)
--[ 2021.09.21.11.00.06.227.0 ]--
r 49             if (board.isSet())
--[ 2021.09.21.11.00.07.386.0 ]--
r 49             if (board.isSet(r))
--[ 2021.09.21.11.00.07.545.0 ]--
r 49             if (board.isSet(ro))
--[ 2021.09.21.11.00.07.710.0 ]--
r 49             if (board.isSet(row))
--[ 2021.09.21.11.00.08.226.0 ]--
r 49             if (board.isSet(row,))
--[ 2021.09.21.11.00.08.420.0 ]--
r 49             if (board.isSet(row, ))
--[ 2021.09.21.11.00.09.452.0 ]--
r 49             if (board.isSet(row, c))
--[ 2021.09.21.11.00.09.553.0 ]--
r 49             if (board.isSet(row, co))
--[ 2021.09.21.11.00.10.228.0 ]--
r 49             if (board.isSet(row, col))
--[ 2021.09.21.11.00.11.572.0 ]--
r 49             if (board.isSet(row, col) )
--[ 2021.09.21.11.00.13.161.0 ]--
r 49             if (board.isSet(row, col))
--[ 2021.09.21.11.00.16.561.0 ]--
r 49             if (board.isSet(row, col)) 
--[ 2021.09.21.11.00.16.787.0 ]--
r 49             if (board.isSet(row, col)) {
--[ 2021.09.21.11.00.17.980.0 ]--
r 49             if (board.isSet(row, col)) { 
--[ 2021.09.21.11.00.18.054.0 ]--
r 49             if (board.isSet(row, col)) { r
--[ 2021.09.21.11.00.18.240.0 ]--
r 49             if (board.isSet(row, col)) { re
--[ 2021.09.21.11.00.18.453.0 ]--
r 49             if (board.isSet(row, col)) { ret
--[ 2021.09.21.11.00.18.568.0 ]--
r 49             if (board.isSet(row, col)) { retu
--[ 2021.09.21.11.00.18.700.0 ]--
r 49             if (board.isSet(row, col)) { retur
--[ 2021.09.21.11.00.19.137.0 ]--
r 49             if (board.isSet(row, col)) { return
--[ 2021.09.21.11.00.19.319.0 ]--
r 49             if (board.isSet(row, col)) { return 
--[ 2021.09.21.11.00.20.347.0 ]--
r 49             if (board.isSet(row, col)) { return
--[ 2021.09.21.11.00.20.469.0 ]--
r 49             if (board.isSet(row, col)) { retur
--[ 2021.09.21.11.00.20.619.0 ]--
r 49             if (board.isSet(row, col)) { retu
--[ 2021.09.21.11.00.20.763.0 ]--
r 49             if (board.isSet(row, col)) { ret
--[ 2021.09.21.11.00.20.915.0 ]--
r 49             if (board.isSet(row, col)) { re
--[ 2021.09.21.11.00.21.061.0 ]--
r 49             if (board.isSet(row, col)) { r
--[ 2021.09.21.11.00.21.203.0 ]--
r 49             if (board.isSet(row, col)) { 
--[ 2021.09.21.11.00.21.446.0 ]--
r 49             if (board.isSet(row, col)) { c
--[ 2021.09.21.11.00.21.617.0 ]--
r 49             if (board.isSet(row, col)) { co
--[ 2021.09.21.11.00.21.703.0 ]--
r 49             if (board.isSet(row, col)) { con
--[ 2021.09.21.11.00.21.849.0 ]--
r 49             if (board.isSet(row, col)) { cont
--[ 2021.09.21.11.00.22.399.0 ]--
r 49             if (board.isSet(row, col)) { continue
--[ 2021.09.21.11.00.22.431.0 ]--
r 49             if (board.isSet(row, col)) { continue;
--[ 2021.09.21.11.00.23.394.0 ]--
r 49             if (board.isSet(row, col)) { continue;)
--[ 2021.09.21.11.00.24.474.0 ]--
r 49             if (board.isSet(row, col)) { continue;
--[ 2021.09.21.11.00.24.970.0 ]--
r 49             if (board.isSet(row, col)) { continue;}
--[ 2021.09.21.11.00.25.923.0 ]--
r 49             if (board.isSet(row, col)) { continue; }
--[ 2021.09.21.11.00.31.689.0 ]--
+ 50             
--[ 2021.09.21.11.00.35.643.0 ]--
r 50             s
--[ 2021.09.21.11.00.35.848.0 ]--
r 50             se
--[ 2021.09.21.11.00.36.121.0 ]--
r 50             set
--[ 2021.09.21.11.00.36.885.0 ]--
r 50             se
--[ 2021.09.21.11.00.37.028.0 ]--
r 50             s
--[ 2021.09.21.11.00.37.162.0 ]--
r 50             
--[ 2021.09.21.11.00.37.388.0 ]--
r 50             b
--[ 2021.09.21.11.00.37.509.0 ]--
r 50             bo
--[ 2021.09.21.11.00.37.951.0 ]--
r 50             board
--[ 2021.09.21.11.00.38.197.0 ]--
r 50             board.
--[ 2021.09.21.11.00.38.475.0 ]--
r 50             board.s
--[ 2021.09.21.11.00.39.444.0 ]--
r 50             board.setTile
--[ 2021.09.21.11.00.39.457.0 ]--
r 50             board.setTile()
--[ 2021.09.21.11.00.39.465.0 ]--
r 50             board.setTile();
--[ 2021.09.21.11.00.41.250.0 ]--
r 50             board.setTile(r);
--[ 2021.09.21.11.00.41.801.0 ]--
r 50             board.setTile(row);
--[ 2021.09.21.11.00.42.299.0 ]--
r 50             board.setTile(row,);
--[ 2021.09.21.11.00.42.553.0 ]--
r 50             board.setTile(row, );
--[ 2021.09.21.11.00.42.780.0 ]--
r 50             board.setTile(row, c);
--[ 2021.09.21.11.00.42.844.0 ]--
r 50             board.setTile(row, co);
--[ 2021.09.21.11.00.43.343.0 ]--
r 50             board.setTile(row, col);
--[ 2021.09.21.11.00.54.871.0 ]--
r 50             board.setTile(row, col,);
--[ 2021.09.21.11.00.54.995.0 ]--
r 50             board.setTile(row, col, );
--[ 2021.09.21.11.00.55.665.0 ]--
r 50             board.setTile(row, col, p);
--[ 2021.09.21.11.00.55.883.0 ]--
r 50             board.setTile(row, col, pl);
--[ 2021.09.21.11.00.56.260.0 ]--
r 50             board.setTile(row, col, player);
--[ 2021.09.21.11.00.58.322.0 ]--
+ 51             
--[ 2021.09.21.11.01.58.004.0 ]--
r 51             p
--[ 2021.09.21.11.01.58.471.0 ]--
r 51             pl
--[ 2021.09.21.11.01.58.601.0 ]--
r 51             pla
--[ 2021.09.21.11.01.58.733.0 ]--
r 51             play
--[ 2021.09.21.11.01.59.220.0 ]--
r 51             playw
--[ 2021.09.21.11.01.59.751.0 ]--
r 51             play
--[ 2021.09.21.11.01.59.844.0 ]--
r 51             playe
--[ 2021.09.21.11.02.00.061.0 ]--
r 51             player 
--[ 2021.09.21.11.02.00.700.0 ]--
r 51             player =
--[ 2021.09.21.11.02.00.827.0 ]--
r 51             player = 
--[ 2021.09.21.11.02.05.133.0 ]--
r 51             player = p
--[ 2021.09.21.11.02.05.350.0 ]--
r 51             player = pl
--[ 2021.09.21.11.02.05.587.0 ]--
r 51             player = pls
--[ 2021.09.21.11.02.06.487.0 ]--
r 51             player = plsy
--[ 2021.09.21.11.02.06.922.0 ]--
r 51             player = pls
--[ 2021.09.21.11.02.07.290.0 ]--
r 51             player = pl
--[ 2021.09.21.11.02.07.412.0 ]--
r 51             player = pla
--[ 2021.09.21.11.02.07.605.0 ]--
r 51             player = play
--[ 2021.09.21.11.02.08.350.0 ]--
r 51             player = playe
--[ 2021.09.21.11.02.08.601.0 ]--
r 51             player = player
--[ 2021.09.21.11.02.08.762.0 ]--
r 51             player = player 
--[ 2021.09.21.11.02.10.450.0 ]--
r 51             player = player =
--[ 2021.09.21.11.02.10.611.0 ]--
r 51             player = player ==
--[ 2021.09.21.11.02.11.132.0 ]--
r 51             player = player == 
--[ 2021.09.21.11.02.11.827.0 ]--
r 51             player = player == 1
--[ 2021.09.21.11.02.12.324.0 ]--
r 51             player = player == 1 
--[ 2021.09.21.11.02.12.964.0 ]--
r 51             player = player == 1 ?
--[ 2021.09.21.11.02.14.652.0 ]--
r 51             player = player == 1 ? 
--[ 2021.09.21.11.02.15.617.0 ]--
r 51             player = player == 1 ? 2
--[ 2021.09.21.11.02.15.961.0 ]--
r 51             player = player == 1 ? 2:
--[ 2021.09.21.11.02.16.530.0 ]--
r 51             player = player == 1 ? 2:1
--[ 2021.09.21.11.02.17.867.0 ]--
r 51             player = player == 1 ? 2:1;
--[ 2021.09.21.11.03.00.904.0 ]--
r 43     private static iplayAGame(N) {
--[ 2021.09.21.11.03.01.002.0 ]--
r 43     private static inplayAGame(N) {
--[ 2021.09.21.11.03.01.183.0 ]--
r 43     private static intplayAGame(N) {
--[ 2021.09.21.11.03.01.313.0 ]--
r 43     private static int playAGame(N) {
--[ 2021.09.21.11.03.44.002.0 ]--
+ 53         
--[ 2021.09.21.11.03.45.451.0 ]--
r 53         i
--[ 2021.09.21.11.03.45.579.0 ]--
r 53         if
--[ 2021.09.21.11.03.45.673.0 ]--
r 53         if 
--[ 2021.09.21.11.03.48.769.0 ]--
r 53         if
--[ 2021.09.21.11.03.48.922.0 ]--
r 53         i
--[ 2021.09.21.11.03.49.162.0 ]--
r 53         
--[ 2021.09.21.11.03.49.857.0 ]--
r 53         r
--[ 2021.09.21.11.03.50.074.0 ]--
r 53         re
--[ 2021.09.21.11.03.50.602.0 ]--
r 53         return
--[ 2021.09.21.11.03.50.617.0 ]--
r 53         return 
--[ 2021.09.21.11.03.52.468.0 ]--
r 53         return b
--[ 2021.09.21.11.03.53.198.0 ]--
r 53         return board
--[ 2021.09.21.11.04.04.867.0 ]--
r 53         return boar
--[ 2021.09.21.11.04.05.009.0 ]--
r 53         return boa
--[ 2021.09.21.11.04.05.153.0 ]--
r 53         return bo
--[ 2021.09.21.11.04.05.297.0 ]--
r 53         return b
--[ 2021.09.21.11.04.05.442.0 ]--
r 53         return 
--[ 2021.09.21.11.04.05.955.0 ]--
r 53         return h
--[ 2021.09.21.11.04.06.090.0 ]--
r 53         return ha
--[ 2021.09.21.11.04.06.362.0 ]--
r 53         return has
--[ 2021.09.21.11.04.08.059.0 ]--
r 53         return ha
--[ 2021.09.21.11.04.08.194.0 ]--
r 53         return h
--[ 2021.09.21.11.04.08.337.0 ]--
r 53         return 
--[ 2021.09.21.11.04.08.835.0 ]--
r 53         return b
--[ 2021.09.21.11.04.08.947.0 ]--
r 53         return bo
--[ 2021.09.21.11.04.09.363.0 ]--
r 53         return board
--[ 2021.09.21.11.04.09.562.0 ]--
r 53         return board.
--[ 2021.09.21.11.04.10.075.0 ]--
r 53         return board.h
--[ 2021.09.21.11.04.11.594.0 ]--
r 53         return board.hasPlayer1Won
--[ 2021.09.21.11.04.11.599.0 ]--
r 53         return board.hasPlayer1Won()
--[ 2021.09.21.11.04.12.140.0 ]--
r 53         return board.hasPlayer1Won() 
--[ 2021.09.21.11.04.16.500.0 ]--
r 53         return board.hasPlayer1Won() ?
--[ 2021.09.21.11.04.16.866.0 ]--
r 53         return board.hasPlayer1Won() ? 
--[ 2021.09.21.11.04.17.842.0 ]--
r 53         return board.hasPlayer1Won() ? 1
--[ 2021.09.21.11.04.18.256.0 ]--
r 53         return board.hasPlayer1Won() ? 1:
--[ 2021.09.21.11.04.18.610.0 ]--
r 53         return board.hasPlayer1Won() ? 1:0
--[ 2021.09.21.11.04.19.379.0 ]--
r 53         return board.hasPlayer1Won() ? 1:0;
--[ 2021.09.21.11.07.45.151.0 ]--
r 22             for (int j=0; <T; j++) {
--[ 2021.09.21.11.07.45.484.0 ]--
r 22             for (int j=0; j<T; j++) {
--[ 2021.09.21.11.09.06.247.0 ]--
r 44         HexBoard board = new bHexBoard(N);
--[ 2021.09.21.11.09.07.049.0 ]--
r 44         HexBoard board = new boHexBoard(N);
--[ 2021.09.21.11.09.07.225.0 ]--
r 44         HexBoard board = new boaHexBoard(N);
--[ 2021.09.21.11.09.07.732.0 ]--
r 44         HexBoard board = new boarHexBoard(N);
--[ 2021.09.21.11.09.07.938.0 ]--
r 44         HexBoard board = new boardHexBoard(N);
--[ 2021.09.21.11.09.08.089.0 ]--
r 44         HexBoard board = new board.HexBoard(N);
--[ 2021.09.21.11.09.08.897.0 ]--
r 44         HexBoard board = new board.boardHexBoard(N);
--[ 2021.09.21.11.09.09.555.0 ]--
r 44         HexBoard board = new board.boarHexBoard(N);
--[ 2021.09.21.11.09.09.682.0 ]--
r 44         HexBoard board = new board.boaHexBoard(N);
--[ 2021.09.21.11.09.09.849.0 ]--
r 44         HexBoard board = new board.boHexBoard(N);
--[ 2021.09.21.11.09.09.985.0 ]--
r 44         HexBoard board = new board.bHexBoard(N);
--[ 2021.09.21.11.09.10.136.0 ]--
r 44         HexBoard board = new board.HexBoard(N);
--[ 2021.09.21.11.09.10.281.0 ]--
r 44         HexBoard board = new boardHexBoard(N);
--[ 2021.09.21.11.09.10.432.0 ]--
r 44         HexBoard board = new boarHexBoard(N);
--[ 2021.09.21.11.09.10.578.0 ]--
r 44         HexBoard board = new boaHexBoard(N);
--[ 2021.09.21.11.09.10.744.0 ]--
r 44         HexBoard board = new boHexBoard(N);
--[ 2021.09.21.11.09.10.896.0 ]--
r 44         HexBoard board = new bHexBoard(N);
--[ 2021.09.21.11.09.11.153.0 ]--
r 44         HexBoard board = new HexBoard(N);
--[ 2021.09.21.11.09.24.344.0 ]--
r 43     private static int playAGame(iN) {
--[ 2021.09.21.11.09.24.466.0 ]--
r 43     private static int playAGame(inN) {
--[ 2021.09.21.11.09.24.555.0 ]--
r 43     private static int playAGame(intN) {
--[ 2021.09.21.11.09.24.664.0 ]--
r 43     private static int playAGame(int N) {
--[ 2021.09.21.11.11.27.183.0 ]--
+ 57         
--[ 2021.09.21.11.14.29.648.0 ]--
r 57         H
--[ 2021.09.21.11.14.30.078.0 ]--
r 57         He
--[ 2021.09.21.11.14.32.253.0 ]--
r 57         HexBoardStats
--[ 2021.09.21.11.14.33.752.0 ]--
r 57         HexBoardStats 
--[ 2021.09.21.11.14.34.383.0 ]--
r 57         HexBoardStats h
--[ 2021.09.21.11.14.34.599.0 ]--
r 57         HexBoardStats hb
--[ 2021.09.21.11.14.34.825.0 ]--
r 57         HexBoardStats hbs
--[ 2021.09.21.11.14.35.034.0 ]--
r 57         HexBoardStats hbs 
--[ 2021.09.21.11.14.35.280.0 ]--
r 57         HexBoardStats hbs =
--[ 2021.09.21.11.14.35.912.0 ]--
r 57         HexBoardStats hbs = 
--[ 2021.09.21.11.14.36.087.0 ]--
r 57         HexBoardStats hbs = n
--[ 2021.09.21.11.14.36.448.0 ]--
r 57         HexBoardStats hbs = ne
--[ 2021.09.21.11.14.36.603.0 ]--
r 57         HexBoardStats hbs = new
--[ 2021.09.21.11.14.36.722.0 ]--
r 57         HexBoardStats hbs = new 
--[ 2021.09.21.11.14.37.127.0 ]--
r 57         HexBoardStats hbs = new H
--[ 2021.09.21.11.14.37.248.0 ]--
r 57         HexBoardStats hbs = new He
--[ 2021.09.21.11.14.38.108.0 ]--
r 57         HexBoardStats hbs = new HexBoardStats
--[ 2021.09.21.11.14.38.117.0 ]--
r 57         HexBoardStats hbs = new HexBoardStats()
--[ 2021.09.21.11.14.40.906.0 ]--
r 57         HexBoardStats hbs = new HexBoardStats(1)
--[ 2021.09.21.11.14.41.002.0 ]--
r 57         HexBoardStats hbs = new HexBoardStats(10)
--[ 2021.09.21.11.14.41.383.0 ]--
r 57         HexBoardStats hbs = new HexBoardStats(10,)
--[ 2021.09.21.11.14.41.531.0 ]--
r 57         HexBoardStats hbs = new HexBoardStats(10,1)
--[ 2021.09.21.11.14.41.970.0 ]--
r 57         HexBoardStats hbs = new HexBoardStats(10,15)
--[ 2021.09.21.11.14.42.080.0 ]--
r 57         HexBoardStats hbs = new HexBoardStats(10,15,)
--[ 2021.09.21.11.14.43.449.0 ]--
r 57         HexBoardStats hbs = new HexBoardStats(10,15,1)
--[ 2021.09.21.11.14.44.231.0 ]--
r 57         HexBoardStats hbs = new HexBoardStats(10,15,10)
--[ 2021.09.21.11.14.46.139.0 ]--
r 57         HexBoardStats hbs = new HexBoardStats(10,15,10);
--[ 2021.09.21.11.16.57.979.0 ]--
+ 58         
--[ 2021.09.21.11.17.01.463.0 ]--
r 58         N
--[ 2021.09.21.11.17.02.810.0 ]--
r 58         N0
--[ 2021.09.21.11.17.12.952.0 ]--
r 58         N
--[ 2021.09.21.11.17.13.127.0 ]--
r 58         
--[ 2021.09.21.11.17.13.969.0 ]--
+ 57         
--[ 2021.09.21.11.19.02.522.0 ]--
r 57         i
--[ 2021.09.21.11.19.02.623.0 ]--
r 57         in
--[ 2021.09.21.11.19.02.674.0 ]--
r 57         int
--[ 2021.09.21.11.19.02.798.0 ]--
r 57         int 
--[ 2021.09.21.11.19.03.401.0 ]--
r 57         int N
--[ 2021.09.21.11.19.03.551.0 ]--
r 57         int No
--[ 2021.09.21.11.19.03.881.0 ]--
r 57         int N
--[ 2021.09.21.11.19.04.406.0 ]--
r 57         int N0
--[ 2021.09.21.11.19.06.707.0 ]--
r 57         int N0 
--[ 2021.09.21.11.19.07.367.0 ]--
r 57         int N0 =
--[ 2021.09.21.11.19.07.535.0 ]--
r 57         int N0 = 
--[ 2021.09.21.11.19.08.504.0 ]--
r 57         int N0 = i
--[ 2021.09.21.11.19.08.608.0 ]--
r 57         int N0 = in
--[ 2021.09.21.11.19.08.860.0 ]--
r 57         int N0 = int
--[ 2021.09.21.11.19.09.694.0 ]--
r 57         int N0 = in
--[ 2021.09.21.11.19.09.832.0 ]--
r 57         int N0 = i
--[ 2021.09.21.11.19.09.966.0 ]--
r 57         int N0 = 
--[ 2021.09.21.11.19.13.074.0 ]--
r 57         int N0 = I
--[ 2021.09.21.11.19.14.108.0 ]--
r 57         int N0 = In
--[ 2021.09.21.11.19.14.912.0 ]--
r 57         int N0 = I
--[ 2021.09.21.11.19.15.343.0 ]--
r 57         int N0 = In
--[ 2021.09.21.11.19.16.903.0 ]--
r 57         int N0 = Integer
--[ 2021.09.21.11.19.17.637.0 ]--
r 57         int N0 = Integer.
--[ 2021.09.21.11.19.18.333.0 ]--
r 57         int N0 = Integer.p
--[ 2021.09.21.11.19.19.097.0 ]--
r 57         int N0 = Integer.parseInt
--[ 2021.09.21.11.19.19.108.0 ]--
r 57         int N0 = Integer.parseInt()
--[ 2021.09.21.11.19.22.781.0 ]--
r 57         int N0 = Integer.parseInt(s)
--[ 2021.09.21.11.19.22.901.0 ]--
r 57         int N0 = Integer.parseInt(sg)
--[ 2021.09.21.11.19.23.565.0 ]--
r 57         int N0 = Integer.parseInt(s)
--[ 2021.09.21.11.19.23.679.0 ]--
r 57         int N0 = Integer.parseInt()
--[ 2021.09.21.11.19.23.959.0 ]--
r 57         int N0 = Integer.parseInt(a)
--[ 2021.09.21.11.19.24.286.0 ]--
r 57         int N0 = Integer.parseInt(ar)
--[ 2021.09.21.11.19.24.362.0 ]--
r 57         int N0 = Integer.parseInt(arg)
--[ 2021.09.21.11.19.24.525.0 ]--
r 57         int N0 = Integer.parseInt(args)
--[ 2021.09.21.11.19.25.360.0 ]--
r 57         int N0 = Integer.parseInt(args[])
--[ 2021.09.21.11.19.25.551.0 ]--
r 57         int N0 = Integer.parseInt(args[0])
--[ 2021.09.21.11.19.27.136.0 ]--
r 57         int N0 = Integer.parseInt(args[0]);
--[ 2021.09.21.11.19.30.931.0 ]--
+ 58         
--[ 2021.09.21.11.19.31.749.0 ]--
r 58         int N0 = Integer.parseInt(args[0]);
--[ 2021.09.21.11.19.32.415.0 ]--
+ 59         
--[ 2021.09.21.11.19.33.050.0 ]--
r 59         int N0 = Integer.parseInt(args[0]);
--[ 2021.09.21.11.19.35.350.0 ]--
r 59         int N0 = Integer.parseInt(args[]);
--[ 2021.09.21.11.19.35.473.0 ]--
r 59         int N0 = Integer.parseInt(args[2]);
--[ 2021.09.21.11.19.36.109.0 ]--
r 58         int N0 = Integer.parseInt(args[]);
--[ 2021.09.21.11.19.36.253.0 ]--
r 58         int N0 = Integer.parseInt(args[1]);
--[ 2021.09.21.11.19.39.837.0 ]--
r 58         int N = Integer.parseInt(args[1]);
--[ 2021.09.21.11.19.39.961.0 ]--
r 58         int N1 = Integer.parseInt(args[1]);
--[ 2021.09.21.11.19.40.621.0 ]--
r 59         int N = Integer.parseInt(args[2]);
--[ 2021.09.21.11.19.40.743.0 ]--
r 59         int N2 = Integer.parseInt(args[2]);
--[ 2021.09.21.11.19.43.103.0 ]--
r 59         int N = Integer.parseInt(args[2]);
--[ 2021.09.21.11.19.43.233.0 ]--
r 59         int  = Integer.parseInt(args[2]);
--[ 2021.09.21.11.19.43.928.0 ]--
r 59         int T = Integer.parseInt(args[2]);
--[ 2021.09.21.11.19.47.977.0 ]--
r 61 
--[ 2021.09.21.11.20.41.337.0 ]--
:/src/HexBoard.java
- 7
--[ 2021.09.21.11.20.58.064.0 ]--
- 11
--[ 2021.09.21.11.21.28.909.0 ]--
:/src/HexBoardStats.java
r 36         return -1.;
--[ 2021.09.21.11.21.29.045.0 ]--
r 36         return -1;
--[ 2021.09.21.11.21.29.180.0 ]--
r 36         return -;
--[ 2021.09.21.11.21.29.317.0 ]--
r 36         return ;
--[ 2021.09.21.11.21.41.041.0 ]--
r 36         return t;
--[ 2021.09.21.11.21.41.117.0 ]--
r 36         return th;
--[ 2021.09.21.11.21.41.226.0 ]--
r 36         return thi;
--[ 2021.09.21.11.21.41.667.0 ]--
r 36         return this;
--[ 2021.09.21.11.21.41.985.0 ]--
r 36         return this.;
--[ 2021.09.21.11.21.42.515.0 ]--
r 36         return this.p;
--[ 2021.09.21.11.21.43.265.0 ]--
r 36         return this.prob;
--[ 2021.09.21.11.21.45.801.0 ]--
r 36         return this.prob[];
--[ 2021.09.21.11.22.51.811.0 ]--
r 36         return this.prob[n];
--[ 2021.09.21.11.22.52.510.0 ]--
r 36         return this.prob[n-];
--[ 2021.09.21.11.22.53.651.0 ]--
r 36         return this.prob[n-N];
--[ 2021.09.21.11.22.54.543.0 ]--
r 36         return this.prob[n-N0];
--[ 2021.09.21.11.23.00.326.0 ]--
r 40         return -1.;
--[ 2021.09.21.11.23.00.476.0 ]--
r 40         return -1;
--[ 2021.09.21.11.23.00.628.0 ]--
r 40         return -;
--[ 2021.09.21.11.23.00.772.0 ]--
r 40         return ;
--[ 2021.09.21.11.23.01.333.0 ]--
r 40         return t;
--[ 2021.09.21.11.23.01.491.0 ]--
r 40         return th;
--[ 2021.09.21.11.23.01.548.0 ]--
r 40         return thi;
--[ 2021.09.21.11.23.02.077.0 ]--
r 40         return this;
--[ 2021.09.21.11.23.02.356.0 ]--
r 40         return this.;
--[ 2021.09.21.11.23.03.081.0 ]--
r 40         return this.p;
--[ 2021.09.21.11.23.03.232.0 ]--
r 40         return this.pr;
--[ 2021.09.21.11.23.03.319.0 ]--
r 40         return this.pro;
--[ 2021.09.21.11.23.04.272.0 ]--
r 40         return this.prob;
--[ 2021.09.21.11.23.05.197.0 ]--
r 40         return this.probn;
--[ 2021.09.21.11.23.05.737.0 ]--
r 40         return this.probn-;
--[ 2021.09.21.11.23.07.136.0 ]--
r 40         return this.probn;
--[ 2021.09.21.11.23.07.469.0 ]--
r 40         return this.prob;
--[ 2021.09.21.11.23.08.588.0 ]--
r 40         return this.prob[];
--[ 2021.09.21.11.23.09.316.0 ]--
r 40         return this.prob[n];
--[ 2021.09.21.11.23.09.649.0 ]--
r 40         return this.prob[n-];
--[ 2021.09.21.11.23.10.116.0 ]--
r 40         return this.prob[n-N];
--[ 2021.09.21.11.23.10.912.0 ]--
r 40         return this.prob[n-N0];
--[ 2021.09.21.11.23.16.115.0 ]--
r 40         return 1this.prob[n-N0];
--[ 2021.09.21.11.23.17.014.0 ]--
r 40         return 1 this.prob[n-N0];
--[ 2021.09.21.11.23.17.197.0 ]--
r 40         return 1 -this.prob[n-N0];
--[ 2021.09.21.11.23.17.325.0 ]--
r 40         return 1 - this.prob[n-N0];
--[ 2021.09.21.11.23.58.714.0 ]--
r 40         return 1. - this.prob[n-N0];
--[ 2021.09.21.11.23.59.067.0 ]--
r 40         return 1.0 - this.prob[n-N0];
--[ 2021.09.21.11.26.11.765.0 ]--
- 61
--[ 2021.09.21.11.26.35.850.0 ]--
+ 61         
--[ 2021.09.21.11.26.36.644.0 ]--
r 61         h
--[ 2021.09.21.11.26.36.940.0 ]--
r 61         hb
--[ 2021.09.21.11.26.37.110.0 ]--
r 61         hbs
--[ 2021.09.21.11.26.37.237.0 ]--
r 61         hbs.
--[ 2021.09.21.11.26.38.057.0 ]--
r 61         hbs.p
--[ 2021.09.21.11.26.38.219.0 ]--
r 61         hbs.pr
--[ 2021.09.21.11.26.38.532.0 ]--
r 61         hbs.pri
--[ 2021.09.21.11.26.38.598.0 ]--
r 61         hbs.prin
--[ 2021.09.21.11.26.38.676.0 ]--
r 61         hbs.print
--[ 2021.09.21.11.26.39.456.0 ]--
r 61         hbs.printR
--[ 2021.09.21.11.26.39.792.0 ]--
r 61         hbs.printRe
--[ 2021.09.21.11.26.40.159.0 ]--
r 61         hbs.printRep
--[ 2021.09.21.11.26.40.301.0 ]--
r 61         hbs.printRepo
--[ 2021.09.21.11.26.40.423.0 ]--
r 61         hbs.printRepor
--[ 2021.09.21.11.26.40.620.0 ]--
r 61         hbs.printReport
--[ 2021.09.21.11.26.41.007.0 ]--
r 61         hbs.printReport()
--[ 2021.09.21.11.26.42.510.0 ]--
r 61         hbs.printReport();
--[ 2021.09.21.11.26.45.085.0 ]--
+ 55     
--[ 2021.09.21.11.26.46.391.0 ]--
+ 55     
--[ 2021.09.21.11.26.47.520.0 ]--
r 56     p
--[ 2021.09.21.11.26.47.626.0 ]--
r 56     pr
--[ 2021.09.21.11.26.47.772.0 ]--
r 56     pri
--[ 2021.09.21.11.26.48.330.0 ]--
r 56     private
--[ 2021.09.21.11.26.48.342.0 ]--
r 56     private 
--[ 2021.09.21.11.26.48.994.0 ]--
r 56     private s
--[ 2021.09.21.11.26.49.280.0 ]--
r 56     private st
--[ 2021.09.21.11.26.49.373.0 ]--
r 56     private sta
--[ 2021.09.21.11.26.49.662.0 ]--
r 56     private stat
--[ 2021.09.21.11.26.50.063.0 ]--
r 56     private static
--[ 2021.09.21.11.26.50.091.0 ]--
r 56     private static 
--[ 2021.09.21.11.26.51.236.0 ]--
r 56     private static v
--[ 2021.09.21.11.26.51.307.0 ]--
r 56     private static vo
--[ 2021.09.21.11.26.51.374.0 ]--
r 56     private static voi
--[ 2021.09.21.11.26.51.488.0 ]--
r 56     private static void
--[ 2021.09.21.11.26.52.182.0 ]--
r 56     private static void 
--[ 2021.09.21.11.26.52.643.0 ]--
r 56     private static void p
--[ 2021.09.21.11.26.52.948.0 ]--
r 56     private static void pr
--[ 2021.09.21.11.26.52.961.0 ]--
r 56     private static void pri
--[ 2021.09.21.11.26.53.640.0 ]--
r 56     private static void printReport
--[ 2021.09.21.11.26.54.517.0 ]--
r 56     private static void printReport()
--[ 2021.09.21.11.26.55.956.0 ]--
r 56     private static void printReport() 
--[ 2021.09.21.11.26.56.125.0 ]--
r 56     private static void printReport() {}
--[ 2021.09.21.11.26.56.472.0 ]--
+ 56     private static void printReport() {
r 57     }
--[ 2021.09.21.11.26.56.495.0 ]--
+ 57         
--[ 2021.09.21.11.27.27.342.0 ]--
r 56     private  void printReport() {
--[ 2021.09.21.11.27.27.820.0 ]--
r 56     private void printReport() {
--[ 2021.09.21.11.27.42.381.0 ]--
r 55 
r 57 
--[ 2021.09.21.11.27.53.423.0 ]--
r 57     
--[ 2021.09.21.11.27.53.917.0 ]--
r 57         
--[ 2021.09.21.11.28.01.947.0 ]--
r 57         S
--[ 2021.09.21.11.28.03.333.0 ]--
r 57         St
--[ 2021.09.21.11.28.03.545.0 ]--
r 57         Std
--[ 2021.09.21.11.28.04.124.0 ]--
r 57         StdOut
--[ 2021.09.21.11.28.06.077.0 ]--
r 57         StdOut.
--[ 2021.09.21.11.28.06.838.0 ]--
r 57         StdOut.println
--[ 2021.09.21.11.28.06.843.0 ]--
r 57         StdOut.println()
--[ 2021.09.21.11.28.06.847.0 ]--
r 57         StdOut.println();
--[ 2021.09.21.11.28.09.351.0 ]--
r 57         StdOut.println("");
--[ 2021.09.21.11.28.09.907.0 ]--
r 57         StdOut.println("t");
--[ 2021.09.21.11.28.10.694.0 ]--
r 57         StdOut.println("");
--[ 2021.09.21.11.28.11.028.0 ]--
r 57         StdOut.println("T");
--[ 2021.09.21.11.28.11.508.0 ]--
r 57         StdOut.println("T ");
--[ 2021.09.21.11.28.11.910.0 ]--
r 57         StdOut.println("T =");
--[ 2021.09.21.11.28.12.044.0 ]--
r 57         StdOut.println("T = ");
--[ 2021.09.21.11.28.24.644.0 ]--
+ 58         
--[ 2021.09.21.11.28.25.536.0 ]--
r 58         s
--[ 2021.09.21.11.28.25.692.0 ]--
r 58         sy
--[ 2021.09.21.11.28.25.839.0 ]--
r 58         sys
--[ 2021.09.21.11.28.26.318.0 ]--
r 58         sy
--[ 2021.09.21.11.28.26.443.0 ]--
r 58         s
--[ 2021.09.21.11.28.26.716.0 ]--
r 58         sS
--[ 2021.09.21.11.28.27.066.0 ]--
r 58         s
--[ 2021.09.21.11.28.27.185.0 ]--
r 58         
--[ 2021.09.21.11.28.27.389.0 ]--
r 58         S
--[ 2021.09.21.11.28.28.087.0 ]--
r 58         Sy
--[ 2021.09.21.11.28.29.781.0 ]--
r 58         System
--[ 2021.09.21.11.28.30.013.0 ]--
r 58         System.
--[ 2021.09.21.11.28.31.020.0 ]--
r 58         System.out
--[ 2021.09.21.11.28.31.332.0 ]--
r 58         System.out.
--[ 2021.09.21.11.28.31.566.0 ]--
r 58         System.out.p
--[ 2021.09.21.11.28.31.988.0 ]--
r 58         System.out.println
--[ 2021.09.21.11.28.31.999.0 ]--
r 58         System.out.println()
--[ 2021.09.21.11.28.32.008.0 ]--
r 58         System.out.println();
--[ 2021.09.21.11.28.48.665.0 ]--
r 58         
--[ 2021.09.21.11.28.49.051.0 ]--
- 58
--[ 2021.09.21.11.28.54.338.0 ]--
r 57         StdOut.println("T = " );
--[ 2021.09.21.11.28.54.779.0 ]--
r 57         StdOut.println("T = " +);
--[ 2021.09.21.11.28.55.036.0 ]--
r 57         StdOut.println("T = " + );
--[ 2021.09.21.11.28.59.154.0 ]--
r 57         StdOut.println("T = " + t);
--[ 2021.09.21.11.28.59.383.0 ]--
r 57         StdOut.println("T = " + th);
--[ 2021.09.21.11.28.59.460.0 ]--
r 57         StdOut.println("T = " + thi);
--[ 2021.09.21.11.28.59.742.0 ]--
r 57         StdOut.println("T = " + this);
--[ 2021.09.21.11.29.00.082.0 ]--
r 57         StdOut.println("T = " + this.);
--[ 2021.09.21.11.29.00.854.0 ]--
r 57         StdOut.println("T = " + this.T);
--[ 2021.09.21.11.29.06.672.0 ]--
+ 58         
--[ 2021.09.21.11.29.08.058.0 ]--
r 58         StdOut.println("T = " + this.T);
--[ 2021.09.21.11.29.19.481.0 ]--
+ 58         
--[ 2021.09.21.11.29.28.229.0 ]--
r 57         StdOut.println("T = " + thisT);
--[ 2021.09.21.11.29.28.385.0 ]--
r 57         StdOut.println("T = " + thiT);
--[ 2021.09.21.11.29.28.539.0 ]--
r 57         StdOut.println("T = " + thT);
--[ 2021.09.21.11.29.28.683.0 ]--
r 57         StdOut.println("T = " + tT);
--[ 2021.09.21.11.29.28.876.0 ]--
r 57         StdOut.println("T = " + T);
--[ 2021.09.21.11.29.38.643.0 ]--
r 57         StdOut.println("T = " + tT);
--[ 2021.09.21.11.29.38.814.0 ]--
r 57         StdOut.println("T = " + thT);
--[ 2021.09.21.11.29.38.936.0 ]--
r 57         StdOut.println("T = " + thiT);
--[ 2021.09.21.11.29.39.845.0 ]--
r 57         StdOut.println("T = " + thisT);
--[ 2021.09.21.11.29.40.041.0 ]--
r 57         StdOut.println("T = " + this.T);
--[ 2021.09.21.11.30.15.571.0 ]--
r 57         StdOut.println("T = " + thisT);
--[ 2021.09.21.11.30.15.778.0 ]--
r 57         StdOut.println("T = " + thiT);
--[ 2021.09.21.11.30.15.931.0 ]--
r 57         StdOut.println("T = " + thT);
--[ 2021.09.21.11.30.16.090.0 ]--
r 57         StdOut.println("T = " + tT);
--[ 2021.09.21.11.30.16.374.0 ]--
r 57         StdOut.println("T = " + T);
--[ 2021.09.21.11.30.20.818.0 ]--
r 58         f
--[ 2021.09.21.11.30.20.978.0 ]--
r 58         fo
--[ 2021.09.21.11.30.21.071.0 ]--
r 58         for
--[ 2021.09.21.11.30.21.184.0 ]--
r 58         for 
--[ 2021.09.21.11.30.21.627.0 ]--
r 58         for ()
--[ 2021.09.21.11.30.22.131.0 ]--
r 58         for (i)
--[ 2021.09.21.11.30.22.892.0 ]--
r 58         for (in)
--[ 2021.09.21.11.30.22.953.0 ]--
r 58         for (int)
--[ 2021.09.21.11.30.23.727.0 ]--
r 58         for (int )
--[ 2021.09.21.11.30.24.049.0 ]--
r 58         for (int i)
--[ 2021.09.21.11.30.24.285.0 ]--
r 58         for (int i )
--[ 2021.09.21.11.30.24.791.0 ]--
r 58         for (int i)
--[ 2021.09.21.11.30.24.987.0 ]--
r 58         for (int i=)
--[ 2021.09.21.11.30.25.713.0 ]--
r 58         for (int i=0)
--[ 2021.09.21.11.30.26.035.0 ]--
r 58         for (int i=0 )
--[ 2021.09.21.11.30.26.579.0 ]--
r 58         for (int i=0)
--[ 2021.09.21.11.30.26.863.0 ]--
r 58         for (int i=0;)
--[ 2021.09.21.11.30.26.981.0 ]--
r 58         for (int i=0; )
--[ 2021.09.21.11.30.27.301.0 ]--
r 58         for (int i=0; i)
--[ 2021.09.21.11.30.27.940.0 ]--
r 58         for (int i=0; i<)
--[ 2021.09.21.11.30.33.110.0 ]--
r 58         for (int i=; i<)
--[ 2021.09.21.11.30.33.257.0 ]--
r 58         for (int i; i<)
--[ 2021.09.21.11.30.33.380.0 ]--
r 58         for (int ; i<)
--[ 2021.09.21.11.30.34.011.0 ]--
r 58         for (int N; i<)
--[ 2021.09.21.11.30.34.803.0 ]--
r 58         for (int N=; i<)
--[ 2021.09.21.11.30.35.636.0 ]--
r 58         for (int N=N; i<)
--[ 2021.09.21.11.30.36.512.0 ]--
+ 58         for (int N=N\
r 59         ; i<)
--[ 2021.09.21.11.30.37.314.0 ]--
- 58
r 58         for (int N=N\; i<)
--[ 2021.09.21.11.30.37.437.0 ]--
r 58         for (int N=N; i<)
--[ 2021.09.21.11.30.38.427.0 ]--
r 58         for (int N=N0; i<)
--[ 2021.09.21.11.30.39.847.0 ]--
r 58         for (int N=N0; <)
--[ 2021.09.21.11.30.40.716.0 ]--
r 58         for (int N=N0; N<)
--[ 2021.09.21.11.30.42.962.0 ]--
r 58         for (int N=N0; N<N)
--[ 2021.09.21.11.30.44.194.0 ]--
r 58         for (int N=N0; N<N1)
--[ 2021.09.21.11.30.45.419.0 ]--
r 58         for (int N=N0; N<N1;)
--[ 2021.09.21.11.30.45.516.0 ]--
r 58         for (int N=N0; N<N1; )
--[ 2021.09.21.11.30.46.530.0 ]--
r 58         for (int N=N0; N<N1; N)
--[ 2021.09.21.11.30.47.254.0 ]--
r 58         for (int N=N0; N<N1; N+)
--[ 2021.09.21.11.30.47.418.0 ]--
r 58         for (int N=N0; N<N1; N++)
--[ 2021.09.21.11.30.48.469.0 ]--
r 58         for (int N=N0; N<N1; N++) 
--[ 2021.09.21.11.30.48.765.0 ]--
r 58         for (int N=N0; N<N1; N++) {
--[ 2021.09.21.11.30.48.958.0 ]--
+ 59 
+ 60 }
--[ 2021.09.21.11.30.48.977.0 ]--
r 60         }
--[ 2021.09.21.11.30.49.000.0 ]--
r 59             
--[ 2021.09.21.11.31.28.184.0 ]--
r 61         
--[ 2021.09.21.11.31.28.889.0 ]--
- 61
--[ 2021.09.21.11.31.29.202.0 ]--
r 60         
--[ 2021.09.21.11.31.30.283.0 ]--
r 60         }
--[ 2021.09.21.11.31.30.306.0 ]--
r 59 
--[ 2021.09.21.11.31.31.538.0 ]--
r 59     
--[ 2021.09.21.11.31.32.012.0 ]--
r 59         
--[ 2021.09.21.11.31.32.313.0 ]--
r 59             
--[ 2021.09.21.11.31.33.098.0 ]--
r 59             StdOut.println("T = " + this.T);
--[ 2021.09.21.11.32.12.657.0 ]--
r 59             StdOut.println("T = " + this.);
--[ 2021.09.21.11.32.12.792.0 ]--
r 59             StdOut.println("T = " + this);
--[ 2021.09.21.11.32.12.947.0 ]--
r 59             StdOut.println("T = " + thi);
--[ 2021.09.21.11.32.13.100.0 ]--
r 59             StdOut.println("T = " + th);
--[ 2021.09.21.11.32.13.242.0 ]--
r 59             StdOut.println("T = " + t);
--[ 2021.09.21.11.32.13.384.0 ]--
r 59             StdOut.println("T = " + );
--[ 2021.09.21.11.32.14.156.0 ]--
r 59             StdOut.println("T = " + N);
--[ 2021.09.21.11.32.16.197.0 ]--
r 59             StdOut.println(" = " + N);
--[ 2021.09.21.11.32.16.687.0 ]--
r 59             StdOut.println("N = " + N);
--[ 2021.09.21.11.32.23.844.0 ]--
r 59             StdOut.println("N = " + N );
--[ 2021.09.21.11.32.24.299.0 ]--
r 59             StdOut.println("N = " + N +);
--[ 2021.09.21.11.32.24.738.0 ]--
r 59             StdOut.println("N = " + N + );
--[ 2021.09.21.11.32.38.213.0 ]--
r 59             StdOut.println("N = " + N + "");
--[ 2021.09.21.11.32.39.037.0 ]--
r 59             StdOut.println("N = " + N + " ");
--[ 2021.09.21.11.32.49.931.0 ]--
r 59             StdOut.printl("N = " + N + " ");
--[ 2021.09.21.11.32.50.051.0 ]--
r 59             StdOut.print("N = " + N + " ");
--[ 2021.09.21.11.32.54.932.0 ]--
+ 60             
--[ 2021.09.21.11.33.05.912.0 ]--
r 60             StdOut.print("N = " + N + " ");
--[ 2021.09.21.11.33.12.314.0 ]--
+ 61             
--[ 2021.09.21.11.33.12.706.0 ]--
r 61             StdOut.print("N = " + N + " ");
--[ 2021.09.21.11.33.15.569.0 ]--
r 61             StdOut.print("N = " +  + " ");
--[ 2021.09.21.11.33.16.193.0 ]--
r 61             StdOut.print("N = " + T + " ");
--[ 2021.09.21.11.33.16.946.0 ]--
r 61             StdOut.print("N = " +  + " ");
--[ 2021.09.21.11.33.26.340.0 ]--
r 61             StdOut.print("N = " + N + " ");
--[ 2021.09.21.11.33.35.225.0 ]--
r 60             StdOut.print("N = " +  + " ");
--[ 2021.09.21.11.33.35.522.0 ]--
r 60             StdOut.print("N = " + g + " ");
--[ 2021.09.21.11.33.35.780.0 ]--
r 60             StdOut.print("N = " + ge + " ");
--[ 2021.09.21.11.33.37.622.0 ]--
r 60             StdOut.print("N = " + getP1WinProbabilityEstimate + " ");
--[ 2021.09.21.11.33.37.631.0 ]--
r 60             StdOut.print("N = " + getP1WinProbabilityEstimate() + " ");
--[ 2021.09.21.11.33.40.051.0 ]--
r 61             StdOut.print("N = " +  + " ");
--[ 2021.09.21.11.33.40.570.0 ]--
r 61             StdOut.print("N = " + g + " ");
--[ 2021.09.21.11.33.42.681.0 ]--
r 61             StdOut.print("N = " + getP2WinProbabilityEstimate + " ");
--[ 2021.09.21.11.33.42.693.0 ]--
r 61             StdOut.print("N = " + getP2WinProbabilityEstimate() + " ");
--[ 2021.09.21.11.33.51.484.0 ]--
r 60             StdOut.print("N = " + getP1WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.33.54.565.0 ]--
r 61             StdOut.print("N = " + getP2WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.09.984.0 ]--
r 60             StdOut.print(" = " + getP1WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.10.716.0 ]--
r 60             StdOut.print("P = " + getP1WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.11.202.0 ]--
r 60             StdOut.print("P1 = " + getP1WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.12.498.0 ]--
r 61             StdOut.print(" = " + getP2WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.12.955.0 ]--
r 61             StdOut.print("P = " + getP2WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.13.265.0 ]--
r 61             StdOut.print("P2 = " + getP2WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.32.030.0 ]--
+ 61             
--[ 2021.09.21.11.34.32.744.0 ]--
r 61             StdOut.print("P1 = " + getP1WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.38.220.0 ]--
r 61             StdOut.print("P1  " + getP1WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.38.354.0 ]--
r 61             StdOut.print("P1 " + getP1WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.38.499.0 ]--
r 61             StdOut.print("P " + getP1WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.38.650.0 ]--
r 61             StdOut.print(" " + getP1WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.39.531.0 ]--
r 61             StdOut.print("( " + getP1WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.40.403.0 ]--
r 61             StdOut.print("(" + getP1WinProbabilityEstimate(N) + " ");
--[ 2021.09.21.11.34.43.068.0 ]--
r 61             StdOut.print("(" + getP1WinProbabilityEstimate(N) +  " ");
--[ 2021.09.21.11.34.43.459.0 ]--
r 61             StdOut.print("(" + getP1WinProbabilityEstimate(N) + + " ");
--[ 2021.09.21.11.34.45.515.0 ]--
r 61             StdOut.print("(" + getP1WinProbabilityEstimate(N) + "+ " ");
--[ 2021.09.21.11.34.47.315.0 ]--
r 61             StdOut.print("(" + getP1WinProbabilityEstimate(N) + ")+ " ");
--[ 2021.09.21.11.34.47.810.0 ]--
r 61             StdOut.print("(" + getP1WinProbabilityEstimate(N) + ")"+ " ");
--[ 2021.09.21.11.34.48.231.0 ]--
r 61             StdOut.print("(" + getP1WinProbabilityEstimate(N) + ")" + " ");
--[ 2021.09.21.11.35.00.039.0 ]--
r 61             StdOut.print("(" +  + ")" + " ");
--[ 2021.09.21.11.35.07.650.0 ]--
r 61             StdOut.print("(" + T + ")" + " ");
--[ 2021.09.21.11.35.25.425.0 ]--
r 61             StdOut.print("(" +  + ")" + " ");
--[ 2021.09.21.11.35.25.884.0 ]--
r 61             StdOut.print("(" + getP1WinProbabilityEstimate(N) + ")" + " ");
--[ 2021.09.21.11.35.28.139.0 ]--
r 61             StdOut.print("(" + getP1WinProbabilityEstimate(N)* + ")" + " ");
--[ 2021.09.21.11.35.28.610.0 ]--
r 61             StdOut.print("(" + getP1WinProbabilityEstimate(N)*T + ")" + " ");
--[ 2021.09.21.11.35.44.116.0 ]--
+ 63             
--[ 2021.09.21.11.35.44.992.0 ]--
r 63             StdOut.print("(" + getP1WinProbabilityEstimate(N)*T + ")" + " ");
--[ 2021.09.21.11.35.48.850.0 ]--
r 63             StdOut.print("(" + getPWinProbabilityEstimate(N)*T + ")" + " ");
--[ 2021.09.21.11.35.48.945.0 ]--
r 63             StdOut.print("(" + getP2WinProbabilityEstimate(N)*T + ")" + " ");
--[ 2021.09.21.11.35.50.173.0 ]--
r 63             StdOut.print("(" + getP2WinProbabilityEstimateWinProbabilityEstimate(N)*T + ")" + " ");
--[ 2021.09.21.11.35.50.178.0 ]--
r 63             StdOut.print("(" + getP2WinProbabilityEstimate()WinProbabilityEstimate(N)*T + ")" + " ");
--[ 2021.09.21.11.35.51.421.0 ]--
r 63             StdOut.print("(" + getP2WinProbabilityEstimate(N)*T + ")" + " ");
--[ 2021.09.21.11.41.29.738.0 ]--
+ 36         
--[ 2021.09.21.11.41.30.477.0 ]--
r 36         i
--[ 2021.09.21.11.41.30.810.0 ]--
r 36         if
--[ 2021.09.21.11.41.30.821.0 ]--
r 36         if 
--[ 2021.09.21.11.41.31.425.0 ]--
r 36         if ()
--[ 2021.09.21.11.41.32.633.0 ]--
r 36         if () 
--[ 2021.09.21.11.41.33.118.0 ]--
r 36         if () {
--[ 2021.09.21.11.41.33.451.0 ]--
r 36         if () { 
--[ 2021.09.21.11.41.34.040.0 ]--
r 36         if () { t
--[ 2021.09.21.11.41.34.222.0 ]--
r 36         if () { th
--[ 2021.09.21.11.41.34.286.0 ]--
r 36         if () { thr
--[ 2021.09.21.11.41.34.516.0 ]--
r 36         if () { thre
--[ 2021.09.21.11.41.35.220.0 ]--
r 36         if () { thr
--[ 2021.09.21.11.41.35.417.0 ]--
r 36         if () { thro
--[ 2021.09.21.11.41.35.506.0 ]--
r 36         if () { throw
--[ 2021.09.21.11.41.35.977.0 ]--
r 36         if () { throw 
--[ 2021.09.21.11.41.36.112.0 ]--
r 36         if () { throw n
--[ 2021.09.21.11.41.36.255.0 ]--
r 36         if () { throw ne
--[ 2021.09.21.11.41.36.404.0 ]--
r 36         if () { throw new
--[ 2021.09.21.11.41.36.496.0 ]--
r 36         if () { throw new 
--[ 2021.09.21.11.41.37.818.0 ]--
r 36         if () { throw new java.lang.IndexOutOfBoundsException
--[ 2021.09.21.11.41.39.170.0 ]--
r 36         if () { throw new java.lang.IndexOutOfBoundsException()
--[ 2021.09.21.11.41.40.823.0 ]--
r 36         if () { throw new java.lang.IndexOutOfBoundsException("")
--[ 2021.09.21.11.41.45.978.0 ]--
r 36         if () { throw new java.lang.IndexOutOfBoundsException("");
--[ 2021.09.21.11.41.47.202.0 ]--
r 36         if () { throw new java.lang.IndexOutOfBoundsException(""); 
--[ 2021.09.21.11.41.47.458.0 ]--
r 36         if () { throw new java.lang.IndexOutOfBoundsException(""); }
--[ 2021.09.21.11.42.23.990.0 ]--
r 36         if ( < N0 or N > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
--[ 2021.09.21.11.42.27.024.0 ]--
r 36         if ( < N0 o N > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
--[ 2021.09.21.11.42.27.127.0 ]--
r 36         if ( < N0  N > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
--[ 2021.09.21.11.42.27.881.0 ]--
r 36         if ( < N0 | N > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
--[ 2021.09.21.11.42.28.003.0 ]--
r 36         if ( < N0 || N > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
--[ 2021.09.21.11.42.30.711.0 ]--
r 36         if (n < N0 || N > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
--[ 2021.09.21.11.42.32.460.0 ]--
r 36         if (n < N0 ||  > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
--[ 2021.09.21.11.42.32.497.0 ]--
r 36         if (n < N0 || n > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
--[ 2021.09.21.11.42.38.689.0 ]--
+ 41         
--[ 2021.09.21.11.42.39.378.0 ]--
r 41         if (n < N0 || n > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
--[ 2021.09.21.11.43.16.847.0 ]--
r 41         
--[ 2021.09.21.11.43.17.238.0 ]--
- 41
--[ 2021.09.21.11.43.19.575.0 ]--
r 41         return 1.0 - this.prob[n-N0;
--[ 2021.09.21.11.43.20.083.0 ]--
r 41         return 1.0 - this.prob[n-N;
--[ 2021.09.21.11.43.20.135.0 ]--
r 41         return 1.0 - this.prob[n-;
--[ 2021.09.21.11.43.20.148.0 ]--
r 41         return 1.0 - this.prob[n;
--[ 2021.09.21.11.43.20.173.0 ]--
r 41         return 1.0 - this.prob[;
--[ 2021.09.21.11.43.20.199.0 ]--
r 41         return 1.0 - this.prob;
--[ 2021.09.21.11.43.20.227.0 ]--
r 41         return 1.0 - this.pro;
--[ 2021.09.21.11.43.20.258.0 ]--
r 41         return 1.0 - this.pr;
--[ 2021.09.21.11.43.20.415.0 ]--
r 41         return 1.0 - this.p;
--[ 2021.09.21.11.43.20.560.0 ]--
r 41         return 1.0 - this.;
--[ 2021.09.21.11.43.20.719.0 ]--
r 41         return 1.0 - this;
--[ 2021.09.21.11.43.20.863.0 ]--
r 41         return 1.0 - thi;
--[ 2021.09.21.11.43.21.015.0 ]--
r 41         return 1.0 - th;
--[ 2021.09.21.11.43.21.175.0 ]--
r 41         return 1.0 - t;
--[ 2021.09.21.11.43.21.326.0 ]--
r 41         return 1.0 - ;
--[ 2021.09.21.11.43.21.855.0 ]--
r 41         return 1.0 - g;
--[ 2021.09.21.11.43.22.167.0 ]--
r 41         return 1.0 - ge;
--[ 2021.09.21.11.43.23.184.0 ]--
r 41         return 1.0 - getP1WinProbabilityEstimate;
--[ 2021.09.21.11.43.23.188.0 ]--
r 41         return 1.0 - getP1WinProbabilityEstimate();
--[ 2021.09.21.11.43.25.608.0 ]--
r 41         return 1.0 - getP1WinProbabilityEstimate(n);
--[ 2021.09.21.11.57.13.735.0 ]--
DisposeComponent
--[ 2021.09.21.14.17.12.719.0 ]--
NewLogger: P01_Hex
Version: 1.5
--[ 2021.09.21.14.17.12.769.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2021.09.21.14.17.12.773.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.09.21.14.17.12.776.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.09.21.14.17.12.780.0 ]--
InitFile: /.cos265


--[ 2021.09.21.14.17.12.782.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.21.14.17.12.787.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    int[][] board;

    public HexBoard(int N) {
        if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= 0");}
        board = new int[N][N];
    }

    public int getPlayer(int row, int col) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        return this.board[row][col];
    }
    
    public boolean isSet(int row, int col) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        if (this.board[row][col] == 0) {return false;}
        return true;
    }

    public boolean isOnWinningPath(int row, int col) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        return false;
    }

    public void setTile(int row, int col, int player) {
        if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
        if (this.isSet(row,col)) {throw new java.lang.IllegalArgumentException("Tile is already set");}
        this.board[row][col] = player;
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        int count = 0;
        for (int row=0; row<this.board.length; row++) {
            for (int col=0; col<this.board.length; col++) {
                if (!this.isSet(row, col)) {count++;}
            }
        }
        return count;
    }


}

--[ 2021.09.21.14.17.12.790.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    private int N0 = -1;
    private int N1 = -1;
    private int T = -1;
    double prob[];
    public HexBoardStats(int N0, int N1, int T) {
        if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument(s)"); }
        this.N0 = N0;
        this.N1 = N1;
        this.T = T;
        this.prob = new double[N1-N0+1];
        for (int i=N0; i<=N1; i++) {
            for (int j=0; j<T; j++) {
                prob[i-N0] += playAGame(i) == 1 ? 1:0;
            }
            prob[i-N0] = prob[i-N0]/T;
        }
    }

    public int getN0() { return this.N0; }

    public int getN1() { return this.N1; }

    public int getT() { return this.T; }

    public double getP1WinProbabilityEstimate(int n) {
        if (n < N0 || n > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
        return this.prob[n-N0];
    }

    public double getP2WinProbabilityEstimate(int n) {
        return 1.0 - getP1WinProbabilityEstimate(n);
    }

    private static int playAGame(int N) {
        HexBoard board = new HexBoard(N);
        int player = 1;
        while(!board.hasPlayer1Won() && !board.hasPlayer2Won()) {
            int row = StdRandom.uniform(N);
            int col = StdRandom.uniform(N);
            if (board.isSet(row, col)) { continue; }
            board.setTile(row, col, player);
            player = player == 1 ? 2:1;
        }
        return board.hasPlayer1Won() ? 1:0;
    }

    private void printReport() {
        StdOut.println("T = " + T);
        for (int N=N0; N<N1; N++) {
            StdOut.print("N = " + N + " ");
            StdOut.print("P1 = " + getP1WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP1WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.print("P2 = " + getP2WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP2WinProbabilityEstimate(N)*T + ")" + " ");
        }
    }

    public static void main(String[] args) {
        int N0 = Integer.parseInt(args[0]);
        int N1 = Integer.parseInt(args[1]);
        int T = Integer.parseInt(args[2]);
        HexBoardStats hbs = new HexBoardStats(10,15,10);
        hbs.printReport();
    }
}

--[ 2021.09.21.14.18.03.050.0 ]--
:/src/HexBoard.java
+ 36         
--[ 2021.09.21.14.18.12.335.0 ]--
r 36         Q
--[ 2021.09.21.14.18.12.539.0 ]--
r 36         Qu
--[ 2021.09.21.14.18.13.401.0 ]--
r 36         Qui
--[ 2021.09.21.14.18.13.481.0 ]--
r 36         Quic
--[ 2021.09.21.14.18.14.256.0 ]--
r 36         QuickFindUF
--[ 2021.09.21.14.18.14.981.0 ]--
r 36         QuickFindUF 
--[ 2021.09.21.14.18.15.363.0 ]--
r 36         QuickFindUF u
--[ 2021.09.21.14.18.15.466.0 ]--
r 36         QuickFindUF uf
--[ 2021.09.21.14.18.15.573.0 ]--
r 36         QuickFindUF uf 
--[ 2021.09.21.14.18.16.386.0 ]--
r 36         QuickFindUF uf =
--[ 2021.09.21.14.18.16.515.0 ]--
r 36         QuickFindUF uf = 
--[ 2021.09.21.14.18.17.957.0 ]--
r 36         QuickFindUF uf = n
--[ 2021.09.21.14.18.18.079.0 ]--
r 36         QuickFindUF uf = ne
--[ 2021.09.21.14.18.18.294.0 ]--
r 36         QuickFindUF uf = new
--[ 2021.09.21.14.18.18.397.0 ]--
r 36         QuickFindUF uf = new 
--[ 2021.09.21.14.18.19.553.0 ]--
r 36         QuickFindUF uf = new QuickFindUF
--[ 2021.09.21.14.18.19.582.0 ]--
r 36         QuickFindUF uf = new QuickFindUF()
--[ 2021.09.21.14.18.23.491.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(t)
--[ 2021.09.21.14.18.23.764.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(thi)
--[ 2021.09.21.14.18.23.889.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this)
--[ 2021.09.21.14.18.24.477.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.)
--[ 2021.09.21.14.18.25.484.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board)
--[ 2021.09.21.14.18.25.999.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.)
--[ 2021.09.21.14.18.26.764.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length)
--[ 2021.09.21.14.18.27.923.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length )
--[ 2021.09.21.14.18.29.350.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length *)
--[ 2021.09.21.14.18.29.541.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * )
--[ 2021.09.21.14.18.30.107.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * t)
--[ 2021.09.21.14.18.30.220.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * th)
--[ 2021.09.21.14.18.30.275.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * thi)
--[ 2021.09.21.14.18.30.749.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this)
--[ 2021.09.21.14.18.31.084.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this.)
--[ 2021.09.21.14.18.31.459.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this.v)
--[ 2021.09.21.14.18.32.000.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this.)
--[ 2021.09.21.14.18.32.474.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this.b)
--[ 2021.09.21.14.18.32.967.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this.board)
--[ 2021.09.21.14.18.33.715.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this.board.)
--[ 2021.09.21.14.18.34.247.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this.board.l)
--[ 2021.09.21.14.18.34.527.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this.board.length)
--[ 2021.09.21.14.18.36.665.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this.board.length )
--[ 2021.09.21.14.18.37.826.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this.board.length +)
--[ 2021.09.21.14.18.38.031.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this.board.length + )
--[ 2021.09.21.14.18.39.201.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this.board.length + 4)
--[ 2021.09.21.14.18.41.595.0 ]--
r 36         QuickFindUF uf = new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.18.45.334.0 ]--
+ 37         
--[ 2021.09.21.14.18.52.241.0 ]--
r 37         i
--[ 2021.09.21.14.18.52.351.0 ]--
r 37         if
--[ 2021.09.21.14.18.53.816.0 ]--
r 37         if 
--[ 2021.09.21.14.18.54.381.0 ]--
r 37         if ()
--[ 2021.09.21.14.19.22.250.0 ]--
r 37         if 
--[ 2021.09.21.14.19.22.394.0 ]--
r 37         if
--[ 2021.09.21.14.19.22.532.0 ]--
r 37         i
--[ 2021.09.21.14.19.22.699.0 ]--
r 37         
--[ 2021.09.21.14.19.23.335.0 ]--
r 37         u
--[ 2021.09.21.14.19.23.423.0 ]--
r 37         uf
--[ 2021.09.21.14.19.23.859.0 ]--
r 37         uf.
--[ 2021.09.21.14.19.24.543.0 ]--
r 37         uf.c
--[ 2021.09.21.14.19.24.592.0 ]--
r 37         uf.co
--[ 2021.09.21.14.19.24.658.0 ]--
r 37         uf.con
--[ 2021.09.21.14.19.25.113.0 ]--
r 37         uf.connected
--[ 2021.09.21.14.19.25.122.0 ]--
r 37         uf.connected()
--[ 2021.09.21.14.19.43.210.0 ]--
r 37         uf.connected();
--[ 2021.09.21.14.20.19.080.0 ]--
r 6     pint[][] board;
--[ 2021.09.21.14.20.19.248.0 ]--
r 6     puint[][] board;
--[ 2021.09.21.14.20.20.081.0 ]--
r 6     publicint[][] board;
--[ 2021.09.21.14.20.20.091.0 ]--
r 6     public int[][] board;
--[ 2021.09.21.14.20.28.675.0 ]--
r 6     publicint[][] board;
--[ 2021.09.21.14.20.28.777.0 ]--
r 6     publiint[][] board;
--[ 2021.09.21.14.20.28.943.0 ]--
r 6     publint[][] board;
--[ 2021.09.21.14.20.29.081.0 ]--
r 6     pubint[][] board;
--[ 2021.09.21.14.20.29.419.0 ]--
r 6     puint[][] board;
--[ 2021.09.21.14.20.29.646.0 ]--
r 6     pint[][] board;
--[ 2021.09.21.14.20.29.912.0 ]--
r 6     int[][] board;
--[ 2021.09.21.14.20.56.611.0 ]--
r 6     pint[][] board;
--[ 2021.09.21.14.20.56.735.0 ]--
r 6     print[][] board;
--[ 2021.09.21.14.20.56.837.0 ]--
r 6     priint[][] board;
--[ 2021.09.21.14.20.57.691.0 ]--
r 6     privateint[][] board;
--[ 2021.09.21.14.20.57.701.0 ]--
r 6     private int[][] board;
--[ 2021.09.21.14.21.18.072.0 ]--
r 6     private int[[] board;
--[ 2021.09.21.14.21.18.361.0 ]--
r 6     private int[] board;
--[ 2021.09.21.14.21.18.505.0 ]--
r 6     private in[] board;
--[ 2021.09.21.14.21.19.552.0 ]--
r 6     private int[] board;
--[ 2021.09.21.14.21.22.520.0 ]--
r 10         board = new int[N[N];
--[ 2021.09.21.14.21.22.737.0 ]--
r 10         board = new int[[N];
--[ 2021.09.21.14.21.23.052.0 ]--
r 10         board = new int[N];
--[ 2021.09.21.14.21.30.425.0 ]--
r 15         return this.board[row]col];
--[ 2021.09.21.14.21.31.745.0 ]--
r 15         return this.board[rowcol];
--[ 2021.09.21.14.21.32.515.0 ]--
r 15         return this.board[row,col];
--[ 2021.09.21.14.21.34.291.0 ]--
r 15         return this.board[trow,col];
--[ 2021.09.21.14.21.34.384.0 ]--
r 15         return this.board[torow,col];
--[ 2021.09.21.14.21.34.987.0 ]--
r 15         return this.board[toIrow,col];
--[ 2021.09.21.14.21.35.137.0 ]--
r 15         return this.board[toInrow,col];
--[ 2021.09.21.14.21.35.376.0 ]--
r 15         return this.board[toIndrow,col];
--[ 2021.09.21.14.21.35.839.0 ]--
r 15         return this.board[toInderow,col];
--[ 2021.09.21.14.21.36.508.0 ]--
r 15         return this.board[toIndexrow,col];
--[ 2021.09.21.14.21.36.822.0 ]--
r 15         return this.board[toIndex(row,col];
--[ 2021.09.21.14.21.39.783.0 ]--
r 15         return this.board[toIndex(row,col)];
--[ 2021.09.21.14.21.45.173.0 ]--
r 55     
--[ 2021.09.21.14.21.46.824.0 ]--
r 55     p
--[ 2021.09.21.14.21.46.951.0 ]--
r 55     pr
--[ 2021.09.21.14.21.47.045.0 ]--
r 55     pri
--[ 2021.09.21.14.21.47.197.0 ]--
r 55     priv
--[ 2021.09.21.14.21.47.941.0 ]--
r 55     priva
--[ 2021.09.21.14.21.48.086.0 ]--
r 55     privat
--[ 2021.09.21.14.21.48.468.0 ]--
r 55     private
--[ 2021.09.21.14.21.48.616.0 ]--
r 55     private 
--[ 2021.09.21.14.21.50.271.0 ]--
r 55     private s
--[ 2021.09.21.14.21.50.567.0 ]--
r 55     private st
--[ 2021.09.21.14.21.50.688.0 ]--
r 55     private sta
--[ 2021.09.21.14.21.50.807.0 ]--
r 55     private stat
--[ 2021.09.21.14.21.51.437.0 ]--
r 55     private static
--[ 2021.09.21.14.21.51.447.0 ]--
r 55     private static 
--[ 2021.09.21.14.21.54.856.0 ]--
r 55     private static t
--[ 2021.09.21.14.21.55.103.0 ]--
r 55     private static to
--[ 2021.09.21.14.21.55.984.0 ]--
r 55     private static toI
--[ 2021.09.21.14.21.56.189.0 ]--
r 55     private static toIn
--[ 2021.09.21.14.21.56.340.0 ]--
r 55     private static toInd
--[ 2021.09.21.14.21.56.528.0 ]--
r 55     private static toInde
--[ 2021.09.21.14.21.56.844.0 ]--
r 55     private static toIndex
--[ 2021.09.21.14.21.57.510.0 ]--
r 55     private static toIndex()
--[ 2021.09.21.14.21.58.760.0 ]--
r 55     private static toIndex(i)
--[ 2021.09.21.14.21.58.837.0 ]--
r 55     private static toIndex(in)
--[ 2021.09.21.14.21.58.903.0 ]--
r 55     private static toIndex(int)
--[ 2021.09.21.14.21.59.202.0 ]--
r 55     private static toIndex(int )
--[ 2021.09.21.14.21.59.536.0 ]--
r 55     private static toIndex(int o)
--[ 2021.09.21.14.21.59.848.0 ]--
r 55     private static toIndex(int )
--[ 2021.09.21.14.21.59.936.0 ]--
r 55     private static toIndex(int r)
--[ 2021.09.21.14.22.00.097.0 ]--
r 55     private static toIndex(int ro)
--[ 2021.09.21.14.22.00.434.0 ]--
r 55     private static toIndex(int row)
--[ 2021.09.21.14.22.00.688.0 ]--
r 55     private static toIndex(int row,)
--[ 2021.09.21.14.22.01.325.0 ]--
r 55     private static toIndex(int row, )
--[ 2021.09.21.14.22.01.534.0 ]--
r 55     private static toIndex(int row, c)
--[ 2021.09.21.14.22.01.573.0 ]--
r 55     private static toIndex(int row, co)
--[ 2021.09.21.14.22.01.742.0 ]--
r 55     private static toIndex(int row, col)
--[ 2021.09.21.14.22.04.761.0 ]--
r 55     private static toIndex(int row, icol)
--[ 2021.09.21.14.22.04.909.0 ]--
r 55     private static toIndex(int row, incol)
--[ 2021.09.21.14.22.04.947.0 ]--
r 55     private static toIndex(int row, intcol)
--[ 2021.09.21.14.22.05.157.0 ]--
r 55     private static toIndex(int row, int col)
--[ 2021.09.21.14.22.06.545.0 ]--
r 55     private static toIndex(int row, int col) 
--[ 2021.09.21.14.22.06.871.0 ]--
r 55     private static toIndex(int row, int col) {}
--[ 2021.09.21.14.22.07.032.0 ]--
+ 55     private static toIndex(int row, int col) {
r 56     }
--[ 2021.09.21.14.22.07.065.0 ]--
+ 56         
--[ 2021.09.21.14.22.12.548.0 ]--
r 56         r
--[ 2021.09.21.14.22.12.686.0 ]--
r 56         re
--[ 2021.09.21.14.22.12.927.0 ]--
r 56         ret
--[ 2021.09.21.14.22.13.714.0 ]--
r 56         return
--[ 2021.09.21.14.22.13.721.0 ]--
r 56         return;
--[ 2021.09.21.14.22.15.757.0 ]--
r 55     private static  toIndex(int row, int col) {
--[ 2021.09.21.14.22.15.995.0 ]--
r 55     private static i toIndex(int row, int col) {
--[ 2021.09.21.14.22.16.094.0 ]--
r 55     private static in toIndex(int row, int col) {
--[ 2021.09.21.14.22.16.284.0 ]--
r 55     private static int toIndex(int row, int col) {
--[ 2021.09.21.14.22.18.402.0 ]--
r 56         return ;
--[ 2021.09.21.14.22.19.336.0 ]--
r 56         return r;
--[ 2021.09.21.14.22.19.713.0 ]--
r 56         return ;
--[ 2021.09.21.14.22.20.089.0 ]--
r 56         return ();
--[ 2021.09.21.14.22.20.550.0 ]--
r 56         return (r);
--[ 2021.09.21.14.22.20.702.0 ]--
r 56         return (ro);
--[ 2021.09.21.14.22.21.035.0 ]--
r 56         return (row);
--[ 2021.09.21.14.22.22.493.0 ]--
r 56         return (row*);
--[ 2021.09.21.14.22.23.431.0 ]--
r 56         return (row*5);
--[ 2021.09.21.14.22.24.123.0 ]--
r 56         return (row*);
--[ 2021.09.21.14.22.25.237.0 ]--
r 56         return (row*N);
--[ 2021.09.21.14.22.32.399.0 ]--
r 56         return (row*N) ;
--[ 2021.09.21.14.22.32.914.0 ]--
r 56         return (row*N) *;
--[ 2021.09.21.14.22.33.687.0 ]--
r 56         return (row*N) ;
--[ 2021.09.21.14.22.35.351.0 ]--
r 56         return (row*N) +;
--[ 2021.09.21.14.22.36.451.0 ]--
r 56         return (row*N) + ;
--[ 2021.09.21.14.22.36.896.0 ]--
r 56         return (row*N) + c;
--[ 2021.09.21.14.22.37.062.0 ]--
r 56         return (row*N) + co;
--[ 2021.09.21.14.22.37.232.0 ]--
r 56         return (row*N) + col;
--[ 2021.09.21.14.22.43.224.0 ]--
r 56         return (row*) + col;
--[ 2021.09.21.14.22.43.962.0 ]--
r 56         return (row*t) + col;
--[ 2021.09.21.14.22.44.102.0 ]--
r 56         return (row*th) + col;
--[ 2021.09.21.14.22.44.215.0 ]--
r 56         return (row*thi) + col;
--[ 2021.09.21.14.22.44.445.0 ]--
r 56         return (row*this) + col;
--[ 2021.09.21.14.22.44.632.0 ]--
r 56         return (row*this.) + col;
--[ 2021.09.21.14.22.45.808.0 ]--
r 56         return (row*this.board) + col;
--[ 2021.09.21.14.22.46.085.0 ]--
r 56         return (row*this.board.) + col;
--[ 2021.09.21.14.22.46.901.0 ]--
r 56         return (row*this.board.length) + col;
--[ 2021.09.21.14.22.49.714.0 ]--
r 56         return (row* this.board.length) + col;
--[ 2021.09.21.14.22.50.196.0 ]--
r 56         return (row * this.board.length) + col;
--[ 2021.09.21.14.23.35.574.0 ]--
r 56         return (row * .board.length) + col;
--[ 2021.09.21.14.23.36.225.0 ]--
r 56         return (row * board.length) + col;
--[ 2021.09.21.14.23.41.068.0 ]--
r 56         return (row * .board.length) + col;
--[ 2021.09.21.14.23.42.507.0 ]--
r 56         return (row * this.board.length) + col;
--[ 2021.09.21.14.23.44.489.0 ]--
r 55     private  int toIndex(int row, int col) {
--[ 2021.09.21.14.23.44.929.0 ]--
r 55     private int toIndex(int row, int col) {
--[ 2021.09.21.14.23.48.081.0 ]--
r 55     private static int toIndex(int row, int col) {
--[ 2021.09.21.14.24.16.129.0 ]--
r 55     private  int toIndex(int row, int col) {
--[ 2021.09.21.14.24.16.851.0 ]--
r 55     private int toIndex(int row, int col) {
--[ 2021.09.21.14.24.32.264.0 ]--
r 20         if (this.board[toIndex(row,col)] == 0) {return false;}
--[ 2021.09.21.14.24.43.190.0 ]--
r 32         this.board[toIndex(row,col)] = player;
--[ 2021.09.21.14.25.01.504.0 ]--
r 37 //        uf.connected();
--[ 2021.09.21.14.25.52.761.0 ]--
+ 33         
--[ 2021.09.21.14.26.08.605.0 ]--
r 37         
--[ 2021.09.21.14.26.11.378.0 ]--
+ 7     
--[ 2021.09.21.14.26.12.095.0 ]--
r 7     QuickFindUF uf = new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.26.22.425.0 ]--
r 7     
--[ 2021.09.21.14.26.22.921.0 ]--
- 7
--[ 2021.09.21.14.26.29.274.0 ]--
+ 7     
--[ 2021.09.21.14.26.29.680.0 ]--
r 7     QuickFindUF uf = new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.26.33.154.0 ]--
r 7     QuickFindUF uf; = new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.26.36.040.0 ]--
r 7     QuickFindUF uf; =new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.26.36.169.0 ]--
r 7     QuickFindUF uf; new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.26.36.321.0 ]--
r 7     QuickFindUF uf;new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.26.39.544.0 ]--
r 7     QuickFindUF uf;
--[ 2021.09.21.14.26.42.480.0 ]--
+ 12         
--[ 2021.09.21.14.26.43.337.0 ]--
r 12         new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.27.04.387.0 ]--
r 12         unew QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.27.04.516.0 ]--
r 12         ufnew QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.27.04.883.0 ]--
r 12         uf.new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.27.05.295.0 ]--
r 12         uf. new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.27.05.785.0 ]--
r 12         uf.new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.27.07.104.0 ]--
r 12         ufnew QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.27.07.520.0 ]--
r 12         uf new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.27.07.835.0 ]--
r 12         uf =new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.27.07.913.0 ]--
r 12         uf = new QuickFindUF(this.board.length * this.board.length + 4);
--[ 2021.09.21.14.27.13.064.0 ]--
r 7     pQuickFindUF uf;
--[ 2021.09.21.14.27.13.247.0 ]--
r 7     prQuickFindUF uf;
--[ 2021.09.21.14.27.13.645.0 ]--
r 7     priQuickFindUF uf;
--[ 2021.09.21.14.27.13.797.0 ]--
r 7     privQuickFindUF uf;
--[ 2021.09.21.14.27.14.293.0 ]--
r 7     privaQuickFindUF uf;
--[ 2021.09.21.14.27.14.473.0 ]--
r 7     privatQuickFindUF uf;
--[ 2021.09.21.14.27.14.589.0 ]--
r 7     privateQuickFindUF uf;
--[ 2021.09.21.14.27.14.708.0 ]--
r 7     private QuickFindUF uf;
--[ 2021.09.21.14.27.46.524.0 ]--
:/src/HexBoardStats.java
r 14     pdouble prob[];
--[ 2021.09.21.14.27.46.653.0 ]--
r 14     prdouble prob[];
--[ 2021.09.21.14.27.47.138.0 ]--
r 14     pridouble prob[];
--[ 2021.09.21.14.27.47.173.0 ]--
r 14     privdouble prob[];
--[ 2021.09.21.14.27.47.788.0 ]--
r 14     privatedouble prob[];
--[ 2021.09.21.14.27.47.802.0 ]--
r 14     private double prob[];
--[ 2021.09.21.14.28.55.104.0 ]--
:/src/HexBoard.java
r 35         u
--[ 2021.09.21.14.28.55.162.0 ]--
r 35         uf
--[ 2021.09.21.14.28.55.649.0 ]--
r 35         uf.
--[ 2021.09.21.14.28.57.509.0 ]--
r 35         uf.u
--[ 2021.09.21.14.28.58.030.0 ]--
r 35         uf.union
--[ 2021.09.21.14.28.58.037.0 ]--
r 35         uf.union()
--[ 2021.09.21.14.28.58.043.0 ]--
r 35         uf.union();
--[ 2021.09.21.14.29.25.549.0 ]--
+ 35         
--[ 2021.09.21.14.29.27.798.0 ]--
r 35         i
--[ 2021.09.21.14.29.27.903.0 ]--
r 35         if
--[ 2021.09.21.14.29.28.436.0 ]--
r 35         if()
--[ 2021.09.21.14.29.29.522.0 ]--
r 35         if ()
--[ 2021.09.21.14.30.31.257.0 ]--
r 35         if (this.board[toIndex(row,col)] = player)
--[ 2021.09.21.14.30.34.561.0 ]--
r 35         if (this.board[toIndex(row,col)] == player)
--[ 2021.09.21.14.30.37.154.0 ]--
r 35         if (this.board[toIndex(row,col)] == player) 
--[ 2021.09.21.14.30.37.342.0 ]--
r 35         if (this.board[toIndex(row,col)] == player) {
--[ 2021.09.21.14.30.38.711.0 ]--
+ 37         
--[ 2021.09.21.14.30.39.648.0 ]--
r 37         }
--[ 2021.09.21.14.30.39.677.0 ]--
r 36             uf.union();
--[ 2021.09.21.14.34.19.192.0 ]--
+ 38         
--[ 2021.09.21.14.34.20.304.0 ]--
+ 38         if (this.board[toIndex(row,col)] == player) {
+ 39             uf.union();
r 40         }
--[ 2021.09.21.14.34.21.358.0 ]--
+ 41         
--[ 2021.09.21.14.34.22.010.0 ]--
+ 41         if (this.board[toIndex(row,col)] == player) {
+ 42             uf.union();
r 43         }
--[ 2021.09.21.14.34.22.663.0 ]--
+ 44         
--[ 2021.09.21.14.34.23.234.0 ]--
+ 44         if (this.board[toIndex(row,col)] == player) {
+ 45             uf.union();
r 46         }
--[ 2021.09.21.14.34.23.750.0 ]--
+ 47         
--[ 2021.09.21.14.34.24.210.0 ]--
+ 47         if (this.board[toIndex(row,col)] == player) {
+ 48             uf.union();
r 49         }
--[ 2021.09.21.14.34.24.723.0 ]--
+ 50         
--[ 2021.09.21.14.34.25.242.0 ]--
+ 50         if (this.board[toIndex(row,col)] == player) {
+ 51             uf.union();
r 52         }
--[ 2021.09.21.14.34.38.088.0 ]--
r 36             uf.union(this.board[toIndex(row,col)]);
--[ 2021.09.21.14.34.50.753.0 ]--
r 36             uf.union(this.boardtoIndex(row,col)]);
--[ 2021.09.21.14.34.51.249.0 ]--
r 36             uf.union(this.boartoIndex(row,col)]);
--[ 2021.09.21.14.34.51.280.0 ]--
r 36             uf.union(this.boatoIndex(row,col)]);
--[ 2021.09.21.14.34.51.310.0 ]--
r 36             uf.union(this.botoIndex(row,col)]);
--[ 2021.09.21.14.34.51.341.0 ]--
r 36             uf.union(this.btoIndex(row,col)]);
--[ 2021.09.21.14.34.51.373.0 ]--
r 36             uf.union(this.toIndex(row,col)]);
--[ 2021.09.21.14.34.51.540.0 ]--
r 36             uf.union(thistoIndex(row,col)]);
--[ 2021.09.21.14.34.51.738.0 ]--
r 36             uf.union(thitoIndex(row,col)]);
--[ 2021.09.21.14.34.51.906.0 ]--
r 36             uf.union(thtoIndex(row,col)]);
--[ 2021.09.21.14.34.52.079.0 ]--
r 36             uf.union(ttoIndex(row,col)]);
--[ 2021.09.21.14.34.52.468.0 ]--
r 36             uf.union(toIndex(row,col)]);
--[ 2021.09.21.14.34.56.744.0 ]--
r 36             uf.union(toIndex(row,col));
--[ 2021.09.21.14.34.59.020.0 ]--
r 36             uf.union(toIndex(row,col),);
--[ 2021.09.21.14.34.59.282.0 ]--
r 36             uf.union(toIndex(row,col), );
--[ 2021.09.21.14.35.03.984.0 ]--
r 36             uf.union(toIndex(row,col), this.board[toIndex(row,col)]);
--[ 2021.09.21.14.35.05.696.0 ]--
r 36             uf.union(toIndex(row,col), this.board[toIndex(row,col));
--[ 2021.09.21.14.35.08.323.0 ]--
r 36             uf.union(toIndex(row,col), this.boardtoIndex(row,col));
--[ 2021.09.21.14.35.08.466.0 ]--
r 36             uf.union(toIndex(row,col), this.boartoIndex(row,col));
--[ 2021.09.21.14.35.08.608.0 ]--
r 36             uf.union(toIndex(row,col), this.boatoIndex(row,col));
--[ 2021.09.21.14.35.08.778.0 ]--
r 36             uf.union(toIndex(row,col), this.botoIndex(row,col));
--[ 2021.09.21.14.35.08.931.0 ]--
r 36             uf.union(toIndex(row,col), this.btoIndex(row,col));
--[ 2021.09.21.14.35.09.082.0 ]--
r 36             uf.union(toIndex(row,col), this.toIndex(row,col));
--[ 2021.09.21.14.35.09.234.0 ]--
r 36             uf.union(toIndex(row,col), thistoIndex(row,col));
--[ 2021.09.21.14.35.09.379.0 ]--
r 36             uf.union(toIndex(row,col), thitoIndex(row,col));
--[ 2021.09.21.14.35.09.539.0 ]--
r 36             uf.union(toIndex(row,col), thtoIndex(row,col));
--[ 2021.09.21.14.35.09.715.0 ]--
r 36             uf.union(toIndex(row,col), ttoIndex(row,col));
--[ 2021.09.21.14.35.10.061.0 ]--
r 36             uf.union(toIndex(row,col), toIndex(row,col));
--[ 2021.09.21.14.35.18.985.0 ]--
r 39             uf.union(toIndex(row,col), toIndex(row,col));
--[ 2021.09.21.14.35.22.055.0 ]--
r 42             uf.union(toIndex(row,col), toIndex(row,col));
--[ 2021.09.21.14.35.24.699.0 ]--
r 45             uf.union(toIndex(row,col), toIndex(row,col));
--[ 2021.09.21.14.35.29.168.0 ]--
r 48             uf.union(toIndex(row,col), toIndex(row,col));
--[ 2021.09.21.14.35.32.233.0 ]--
r 51             uf.union(toIndex(row,col), toIndex(row,col));
--[ 2021.09.21.14.36.13.020.0 ]--
r 56 
--[ 2021.09.21.14.36.16.844.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.14.36.36.427.0 ]--
r 35         if (this.board[toIndex(row,col)+] == player) {
--[ 2021.09.21.14.36.36.763.0 ]--
r 35         if (this.board[toIndex(row,col)+1] == player) {
--[ 2021.09.21.14.36.40.337.0 ]--
r 35         if (this.board[toIndex(row,col) +1] == player) {
--[ 2021.09.21.14.36.40.836.0 ]--
r 35         if (this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.36.45.466.0 ]--
r 38         if (this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.36.48.689.0 ]--
r 41         if (this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.36.51.854.0 ]--
r 44         if (this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.36.54.780.0 ]--
r 47         if (this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.36.57.865.0 ]--
r 50         if (this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.37.02.104.0 ]--
r 38         if (this.board[toIndex(row,col)  1] == player) {
--[ 2021.09.21.14.37.02.379.0 ]--
r 38         if (this.board[toIndex(row,col) - 1] == player) {
--[ 2021.09.21.14.37.13.403.0 ]--
r 41         if (this.board[toIndex(row,col) + ] == player) {
--[ 2021.09.21.14.37.13.857.0 ]--
r 41         if (this.board[toIndex(row,col) + 3] == player) {
--[ 2021.09.21.14.37.14.982.0 ]--
r 44         if (this.board[toIndex(row,col) + ] == player) {
--[ 2021.09.21.14.37.15.296.0 ]--
r 44         if (this.board[toIndex(row,col) + 3] == player) {
--[ 2021.09.21.14.37.16.714.0 ]--
r 44         if (this.board[toIndex(row,col)  3] == player) {
--[ 2021.09.21.14.37.17.092.0 ]--
r 44         if (this.board[toIndex(row,col) - 3] == player) {
--[ 2021.09.21.14.37.24.663.0 ]--
r 47         if (this.board[toIndex(row,col) + ] == player) {
--[ 2021.09.21.14.37.25.194.0 ]--
r 47         if (this.board[toIndex(row,col) + 4] == player) {
--[ 2021.09.21.14.37.27.234.0 ]--
r 50         if (this.board[toIndex(row,col) + ] == player) {
--[ 2021.09.21.14.37.27.469.0 ]--
r 50         if (this.board[toIndex(row,col) + 4] == player) {
--[ 2021.09.21.14.37.28.355.0 ]--
r 50         if (this.board[toIndex(row,col)  4] == player) {
--[ 2021.09.21.14.37.28.592.0 ]--
r 50         if (this.board[toIndex(row,col) - 4] == player) {
--[ 2021.09.21.14.37.56.960.0 ]--
r 36             uf.union(toIndex(row,col), toIndex(row,col) );
--[ 2021.09.21.14.37.57.213.0 ]--
r 36             uf.union(toIndex(row,col), toIndex(row,col) +);
--[ 2021.09.21.14.37.57.444.0 ]--
r 36             uf.union(toIndex(row,col), toIndex(row,col) + );
--[ 2021.09.21.14.37.58.141.0 ]--
r 36             uf.union(toIndex(row,col), toIndex(row,col) + 1);
--[ 2021.09.21.14.38.00.321.0 ]--
r 39             uf.union(toIndex(row,col), toIndex(row,col) );
--[ 2021.09.21.14.38.00.965.0 ]--
r 39             uf.union(toIndex(row,col), toIndex(row,col) -);
--[ 2021.09.21.14.38.01.221.0 ]--
r 39             uf.union(toIndex(row,col), toIndex(row,col) - );
--[ 2021.09.21.14.38.01.371.0 ]--
r 39             uf.union(toIndex(row,col), toIndex(row,col) - 1);
--[ 2021.09.21.14.38.03.318.0 ]--
r 42             uf.union(toIndex(row,col), toIndex(row,col) );
--[ 2021.09.21.14.38.05.497.0 ]--
r 42             uf.union(toIndex(row,col), toIndex(row,col) +);
--[ 2021.09.21.14.38.06.578.0 ]--
r 42             uf.union(toIndex(row,col), toIndex(row,col) + );
--[ 2021.09.21.14.38.06.749.0 ]--
r 42             uf.union(toIndex(row,col), toIndex(row,col) + 3);
--[ 2021.09.21.14.38.09.200.0 ]--
r 45             uf.union(toIndex(row,col), toIndex(row,col) );
--[ 2021.09.21.14.38.13.041.0 ]--
r 45             uf.union(toIndex(row,col), toIndex(row,col) -);
--[ 2021.09.21.14.38.13.369.0 ]--
r 45             uf.union(toIndex(row,col), toIndex(row,col) -3);
--[ 2021.09.21.14.38.15.453.0 ]--
r 45             uf.union(toIndex(row,col), toIndex(row,col) - 3);
--[ 2021.09.21.14.38.17.226.0 ]--
r 48             uf.union(toIndex(row,col), toIndex(row,col) );
--[ 2021.09.21.14.38.18.729.0 ]--
r 48             uf.union(toIndex(row,col), toIndex(row,col) +);
--[ 2021.09.21.14.38.19.100.0 ]--
r 48             uf.union(toIndex(row,col), toIndex(row,col) + );
--[ 2021.09.21.14.38.21.089.0 ]--
r 48             uf.union(toIndex(row,col), toIndex(row,col) + 4);
--[ 2021.09.21.14.38.23.476.0 ]--
r 51             uf.union(toIndex(row,col), toIndex(row,col) );
--[ 2021.09.21.14.38.24.425.0 ]--
r 51             uf.union(toIndex(row,col), toIndex(row,col) -);
--[ 2021.09.21.14.38.24.764.0 ]--
r 51             uf.union(toIndex(row,col), toIndex(row,col) - );
--[ 2021.09.21.14.38.24.899.0 ]--
r 51             uf.union(toIndex(row,col), toIndex(row,col) - 4);
--[ 2021.09.21.14.38.41.032.0 ]--
r 35         if ( this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.38.41.843.0 ]--
r 35         if (  this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.38.43.763.0 ]--
r 35         if ( & this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.38.43.905.0 ]--
r 35         if ( && this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.38.51.989.0 ]--
r 35         if ( &&this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.38.52.150.0 ]--
r 35         if ( &this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.38.52.301.0 ]--
r 35         if ( this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.38.52.450.0 ]--
r 35         if (this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.38.58.567.0 ]--
+ 78     
--[ 2021.09.21.14.38.58.669.0 ]--
+ 78     
--[ 2021.09.21.14.38.59.389.0 ]--
r 79     p
--[ 2021.09.21.14.38.59.552.0 ]--
r 79     pr
--[ 2021.09.21.14.38.59.585.0 ]--
r 79     pri
--[ 2021.09.21.14.38.59.915.0 ]--
r 79     priv
--[ 2021.09.21.14.39.00.484.0 ]--
r 79     priva
--[ 2021.09.21.14.39.00.588.0 ]--
r 79     privat
--[ 2021.09.21.14.39.00.811.0 ]--
r 79     private
--[ 2021.09.21.14.39.01.008.0 ]--
r 79     private 
--[ 2021.09.21.14.39.02.003.0 ]--
r 79     private b
--[ 2021.09.21.14.39.02.106.0 ]--
r 79     private bo
--[ 2021.09.21.14.39.02.233.0 ]--
r 79     private boo
--[ 2021.09.21.14.39.02.527.0 ]--
r 79     private bool
--[ 2021.09.21.14.39.02.818.0 ]--
r 79     private boolean
--[ 2021.09.21.14.39.03.384.0 ]--
r 79     private boolean 
--[ 2021.09.21.14.39.03.956.0 ]--
r 79     private boolean i
--[ 2021.09.21.14.39.04.022.0 ]--
r 79     private boolean is
--[ 2021.09.21.14.39.04.655.0 ]--
r 79     private boolean isV
--[ 2021.09.21.14.39.05.022.0 ]--
r 79     private boolean isVa
--[ 2021.09.21.14.39.05.189.0 ]--
r 79     private boolean isVal
--[ 2021.09.21.14.39.05.332.0 ]--
r 79     private boolean isVali
--[ 2021.09.21.14.39.05.886.0 ]--
r 79     private boolean isValie
--[ 2021.09.21.14.39.06.197.0 ]--
r 79     private boolean isVali
--[ 2021.09.21.14.39.06.264.0 ]--
r 79     private boolean isValid
--[ 2021.09.21.14.39.08.196.0 ]--
r 79     private boolean isValidS
--[ 2021.09.21.14.39.08.749.0 ]--
r 79     private boolean isValidSp
--[ 2021.09.21.14.39.09.086.0 ]--
r 79     private boolean isValidSpa
--[ 2021.09.21.14.39.09.725.0 ]--
r 79     private boolean isValidSp
--[ 2021.09.21.14.39.09.858.0 ]--
r 79     private boolean isValidS
--[ 2021.09.21.14.39.10.003.0 ]--
r 79     private boolean isValid
--[ 2021.09.21.14.39.10.458.0 ]--
r 79     private boolean isValidH
--[ 2021.09.21.14.39.10.607.0 ]--
r 79     private boolean isValidHe
--[ 2021.09.21.14.39.10.961.0 ]--
r 79     private boolean isValidHex
--[ 2021.09.21.14.39.12.227.0 ]--
r 79     private boolean isValidHex*
--[ 2021.09.21.14.39.12.810.0 ]--
r 79     private boolean isValidHex
--[ 2021.09.21.14.39.13.226.0 ]--
r 79     private boolean isValidHex()
--[ 2021.09.21.14.40.07.089.0 ]--
r 79     private boolean isValidHex(i)
--[ 2021.09.21.14.40.07.175.0 ]--
r 79     private boolean isValidHex(in)
--[ 2021.09.21.14.40.07.229.0 ]--
r 79     private boolean isValidHex(int)
--[ 2021.09.21.14.40.07.365.0 ]--
r 79     private boolean isValidHex(int )
--[ 2021.09.21.14.40.11.217.0 ]--
r 79     private boolean isValidHex(int n)
--[ 2021.09.21.14.40.13.050.0 ]--
r 79     private boolean isValidHex(int n) 
--[ 2021.09.21.14.40.13.609.0 ]--
r 79     private boolean isValidHex(int n) {}
--[ 2021.09.21.14.40.13.819.0 ]--
+ 79     private boolean isValidHex(int n) {
r 80     }
--[ 2021.09.21.14.40.13.861.0 ]--
+ 80         
--[ 2021.09.21.14.40.16.293.0 ]--
r 80         i
--[ 2021.09.21.14.40.16.332.0 ]--
r 80         if
--[ 2021.09.21.14.40.16.461.0 ]--
r 80         if 
--[ 2021.09.21.14.40.17.467.0 ]--
r 80         if ()
--[ 2021.09.21.14.40.18.872.0 ]--
r 80         if (n)
--[ 2021.09.21.14.40.20.456.0 ]--
r 80         if (n )
--[ 2021.09.21.14.40.23.658.0 ]--
r 80         if (n <)
--[ 2021.09.21.14.40.24.388.0 ]--
r 80         if (n )
--[ 2021.09.21.14.40.25.216.0 ]--
r 80         if (n >)
--[ 2021.09.21.14.40.26.028.0 ]--
r 80         if (n >=)
--[ 2021.09.21.14.40.26.426.0 ]--
r 80         if (n >=0)
--[ 2021.09.21.14.40.27.706.0 ]--
r 80         if (n >= 0)
--[ 2021.09.21.14.40.28.937.0 ]--
r 80         if (n >= 0 )
--[ 2021.09.21.14.40.29.667.0 ]--
r 80         if (n >= 0 &)
--[ 2021.09.21.14.40.29.795.0 ]--
r 80         if (n >= 0 &&)
--[ 2021.09.21.14.40.30.093.0 ]--
r 80         if (n >= 0 && )
--[ 2021.09.21.14.40.37.177.0 ]--
r 80         if (n >= 0 && n)
--[ 2021.09.21.14.40.37.795.0 ]--
r 80         if (n >= 0 && n )
--[ 2021.09.21.14.41.46.717.0 ]--
r 11         board = new int[N*];
--[ 2021.09.21.14.41.47.754.0 ]--
r 11         board = new int[N*N];
--[ 2021.09.21.14.42.44.596.0 ]--
r 80         if (n >= 0 && n <)
--[ 2021.09.21.14.42.45.196.0 ]--
r 80         if (n >= 0 && n < )
--[ 2021.09.21.14.43.41.972.0 ]--
r 11         board = new int[N*N+];
--[ 2021.09.21.14.43.42.433.0 ]--
r 11         board = new int[N*N+4];
--[ 2021.09.21.14.43.43.767.0 ]--
r 78 
--[ 2021.09.21.14.45.52.593.0 ]--
+ 12         
--[ 2021.09.21.14.45.53.908.0 ]--
r 12         b
--[ 2021.09.21.14.45.54.449.0 ]--
r 12         bo
--[ 2021.09.21.14.45.55.284.0 ]--
r 12         boa
--[ 2021.09.21.14.45.55.569.0 ]--
r 12         boar
--[ 2021.09.21.14.45.55.796.0 ]--
r 12         board
--[ 2021.09.21.14.45.59.522.0 ]--
r 12         board[]
--[ 2021.09.21.14.46.40.868.0 ]--
r 12         board[N]
--[ 2021.09.21.14.46.42.998.0 ]--
r 12         board[N*]
--[ 2021.09.21.14.46.43.467.0 ]--
r 12         board[N*N]
--[ 2021.09.21.14.46.48.272.0 ]--
r 12         board[N*N+]
--[ 2021.09.21.14.46.56.220.0 ]--
r 12         board[N*N]
--[ 2021.09.21.14.46.56.399.0 ]--
r 12         board[N*]
--[ 2021.09.21.14.46.56.598.0 ]--
r 12         board[N]
--[ 2021.09.21.14.46.56.875.0 ]--
r 12         board[]
--[ 2021.09.21.14.46.58.779.0 ]--
r 12         board[t]
--[ 2021.09.21.14.46.58.944.0 ]--
r 12         board[th]
--[ 2021.09.21.14.47.01.255.0 ]--
r 12         board[board.length]
--[ 2021.09.21.14.47.01.276.0 ]--
r 12         board[board;]
--[ 2021.09.21.14.47.01.286.0 ]--
r 12         board[board.length]
--[ 2021.09.21.14.47.09.317.0 ]--
r 12         board[board.length] 
--[ 2021.09.21.14.47.09.503.0 ]--
r 12         board[board.length] =
--[ 2021.09.21.14.47.09.883.0 ]--
r 12         board[board.length] = 
--[ 2021.09.21.14.47.14.667.0 ]--
r 12         board[board.length-] = 
--[ 2021.09.21.14.47.14.777.0 ]--
r 12         board[board.length-1] = 
--[ 2021.09.21.14.47.38.708.0 ]--
r 12         board[board.length-1] = 1
--[ 2021.09.21.14.47.40.085.0 ]--
r 12         board[board.length-1] = 1;
--[ 2021.09.21.14.47.41.091.0 ]--
+ 13         
--[ 2021.09.21.14.47.45.701.0 ]--
r 13         board[board.length-1] = 1;
--[ 2021.09.21.14.47.46.874.0 ]--
+ 14         
--[ 2021.09.21.14.47.47.452.0 ]--
r 14         board[board.length-1] = 1;
--[ 2021.09.21.14.47.48.197.0 ]--
+ 15         
--[ 2021.09.21.14.47.48.691.0 ]--
r 15         board[board.length-1] = 1;
--[ 2021.09.21.14.47.50.278.0 ]--
r 15         board[board.length-1] = ;
--[ 2021.09.21.14.47.50.526.0 ]--
r 15         board[board.length-1] = 2;
--[ 2021.09.21.14.47.51.149.0 ]--
r 14         board[board.length-1] = ;
--[ 2021.09.21.14.47.51.308.0 ]--
r 14         board[board.length-1] = 2;
--[ 2021.09.21.14.47.52.987.0 ]--
r 14         board[board.length-] = 2;
--[ 2021.09.21.14.47.53.316.0 ]--
r 14         board[board.length-2] = 2;
--[ 2021.09.21.14.47.53.967.0 ]--
r 14         board[board.length-] = 2;
--[ 2021.09.21.14.47.54.294.0 ]--
r 14         board[board.length-3] = 2;
--[ 2021.09.21.14.47.55.697.0 ]--
r 15         board[board.length-] = 2;
--[ 2021.09.21.14.47.55.815.0 ]--
r 15         board[board.length-4] = 2;
--[ 2021.09.21.14.47.57.502.0 ]--
r 13         board[board.length-] = 1;
--[ 2021.09.21.14.47.57.645.0 ]--
r 13         board[board.length-2] = 1;
--[ 2021.09.21.14.48.10.906.0 ]--
r 13         board[board.length-2] = ;
--[ 2021.09.21.14.48.11.017.0 ]--
r 13         board[board.length-2] = 2;
--[ 2021.09.21.14.48.11.740.0 ]--
r 14         board[board.length-3] = ;
--[ 2021.09.21.14.48.11.852.0 ]--
r 14         board[board.length-3] = 1;
--[ 2021.09.21.14.51.48.530.0 ]--
r 84         if (n >= 0 && n < t)
--[ 2021.09.21.14.51.48.868.0 ]--
r 84         if (n >= 0 && n < th)
--[ 2021.09.21.14.51.49.125.0 ]--
r 84         if (n >= 0 && n < thi)
--[ 2021.09.21.14.51.49.847.0 ]--
r 84         if (n >= 0 && n < this)
--[ 2021.09.21.14.51.50.525.0 ]--
r 84         if (n >= 0 && n < this.)
--[ 2021.09.21.14.51.51.565.0 ]--
r 84         if (n >= 0 && n < this.b)
--[ 2021.09.21.14.51.52.867.0 ]--
r 84         if (n >= 0 && n < this.board)
--[ 2021.09.21.14.51.53.221.0 ]--
r 84         if (n >= 0 && n < this.board.)
--[ 2021.09.21.14.51.53.490.0 ]--
r 84         if (n >= 0 && n < this.board.l)
--[ 2021.09.21.14.51.54.247.0 ]--
r 84         if (n >= 0 && n < this.board.length)
--[ 2021.09.21.14.52.14.765.0 ]--
r 84         if (n >= 0 && n < this.board.length-)
--[ 2021.09.21.14.52.14.891.0 ]--
r 84         if (n >= 0 && n < this.board.length-4)
--[ 2021.09.21.14.52.16.622.0 ]--
r 84         if (n >= 0 && n < this.board.length -4)
--[ 2021.09.21.14.52.17.014.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4)
--[ 2021.09.21.14.52.19.140.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4);
--[ 2021.09.21.14.52.23.763.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4)
--[ 2021.09.21.14.52.24.180.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) 
--[ 2021.09.21.14.52.24.971.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) {
--[ 2021.09.21.14.52.26.724.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { 
--[ 2021.09.21.14.52.26.816.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { r
--[ 2021.09.21.14.52.26.994.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { re
--[ 2021.09.21.14.52.27.233.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { ret
--[ 2021.09.21.14.52.27.278.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { retu
--[ 2021.09.21.14.52.27.425.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { retur
--[ 2021.09.21.14.52.27.538.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { return
--[ 2021.09.21.14.52.27.648.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { return 
--[ 2021.09.21.14.52.28.027.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { return t
--[ 2021.09.21.14.52.28.177.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { return tr
--[ 2021.09.21.14.52.28.273.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { return tru
--[ 2021.09.21.14.52.28.423.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { return true
--[ 2021.09.21.14.52.29.391.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { return true;
--[ 2021.09.21.14.52.30.469.0 ]--
r 84         if (n >= 0 && n < this.board.length - 4) { return true;}
--[ 2021.09.21.14.52.31.306.0 ]--
+ 85         
--[ 2021.09.21.14.52.31.871.0 ]--
r 85         r
--[ 2021.09.21.14.52.32.055.0 ]--
r 85         re
--[ 2021.09.21.14.52.32.234.0 ]--
r 85         reu
--[ 2021.09.21.14.52.32.324.0 ]--
r 85         reut
--[ 2021.09.21.14.52.32.631.0 ]--
r 85         reutr
--[ 2021.09.21.14.52.32.893.0 ]--
r 85         reut
--[ 2021.09.21.14.52.33.569.0 ]--
r 85         return
--[ 2021.09.21.14.52.33.577.0 ]--
r 85         return 
--[ 2021.09.21.14.52.34.195.0 ]--
r 85         return f
--[ 2021.09.21.14.52.34.977.0 ]--
r 85         return false
--[ 2021.09.21.14.52.35.468.0 ]--
r 85         return false;
--[ 2021.09.21.14.52.54.199.0 ]--
r 39         if (ithis.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.52.54.384.0 ]--
r 39         if (isthis.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.52.55.259.0 ]--
r 39         if (isValidHexthis.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.52.55.271.0 ]--
r 39         if (isValidHex()this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.53.07.403.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col) + 1])this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.54.29.563.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col) + 1]) this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.54.31.261.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col) + 1]) &this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.54.31.437.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col) + 1]) &&this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.54.31.745.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col) + 1]) && this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.55.57.597.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col) + ]) && this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.55.57.799.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col) +]) && this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.55.57.920.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col) ]) && this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.55.58.080.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row,col) + 1] == player) {
--[ 2021.09.21.14.56.00.897.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row,col) + ] == player) {
--[ 2021.09.21.14.56.01.072.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row,col) +] == player) {
--[ 2021.09.21.14.56.01.360.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row,col) ] == player) {
--[ 2021.09.21.14.56.01.584.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row,col)] == player) {
--[ 2021.09.21.14.56.19.069.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row ,col)] == player) {
--[ 2021.09.21.14.56.19.756.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row =,col)] == player) {
--[ 2021.09.21.14.56.20.087.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row = ,col)] == player) {
--[ 2021.09.21.14.56.20.517.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row =,col)] == player) {
--[ 2021.09.21.14.56.20.660.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row ,col)] == player) {
--[ 2021.09.21.14.56.22.388.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row,col)] == player) {
--[ 2021.09.21.14.56.30.556.0 ]--
r 39         if (isValidHex(this.board[toIndex(row ,col)]) && this.board[toIndex(row,col)] == player) {
--[ 2021.09.21.14.56.31.061.0 ]--
r 39         if (isValidHex(this.board[toIndex(row +,col)]) && this.board[toIndex(row,col)] == player) {
--[ 2021.09.21.14.56.31.280.0 ]--
r 39         if (isValidHex(this.board[toIndex(row + ,col)]) && this.board[toIndex(row,col)] == player) {
--[ 2021.09.21.14.56.31.805.0 ]--
r 39         if (isValidHex(this.board[toIndex(row +,col)]) && this.board[toIndex(row,col)] == player) {
--[ 2021.09.21.14.56.31.975.0 ]--
r 39         if (isValidHex(this.board[toIndex(row ,col)]) && this.board[toIndex(row,col)] == player) {
--[ 2021.09.21.14.56.32.105.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row,col)] == player) {
--[ 2021.09.21.14.56.32.272.0 ]--
r 39         if (isValidHex(this.board[toIndex(ro,col)]) && this.board[toIndex(row,col)] == player) {
--[ 2021.09.21.14.56.33.307.0 ]--
r 39         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row,col)] == player) {
--[ 2021.09.21.14.56.33.726.0 ]--
r 39         if (isValidHex(this.board[toIndex(row+,col)]) && this.board[toIndex(row,col)] == player) {
--[ 2021.09.21.14.56.33.998.0 ]--
r 39         if (isValidHex(this.board[toIndex(row+1,col)]) && this.board[toIndex(row,col)] == player) {
--[ 2021.09.21.14.56.38.597.0 ]--
r 39         if (isValidHex(this.board[toIndex(row+1,col)]) && this.board[toIndex(row+,col)] == player) {
--[ 2021.09.21.14.56.38.799.0 ]--
r 39         if (isValidHex(this.board[toIndex(row+1,col)]) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.14.57.03.803.0 ]--
r 43             uf.union(toIndex(row-,col), toIndex(row,col) - 1);
--[ 2021.09.21.14.57.04.244.0 ]--
r 43             uf.union(toIndex(row,col), toIndex(row,col) - 1);
--[ 2021.09.21.14.57.13.429.0 ]--
r 40             uf.union(toIndex(row,col), toIndex(row,col) + );
--[ 2021.09.21.14.57.13.581.0 ]--
r 40             uf.union(toIndex(row,col), toIndex(row,col) +);
--[ 2021.09.21.14.57.13.706.0 ]--
r 40             uf.union(toIndex(row,col), toIndex(row,col) );
--[ 2021.09.21.14.57.13.885.0 ]--
r 40             uf.union(toIndex(row,col), toIndex(row,col));
--[ 2021.09.21.14.57.17.268.0 ]--
r 40             uf.union(toIndex(row,col), toIndex(row+,col));
--[ 2021.09.21.14.57.17.469.0 ]--
r 40             uf.union(toIndex(row,col), toIndex(row+1,col));
--[ 2021.09.21.14.57.23.269.0 ]--
r 43             uf.union(toIndex(row,col), toIndex(row-,col) - 1);
--[ 2021.09.21.14.57.23.642.0 ]--
r 43             uf.union(toIndex(row,col), toIndex(row-1,col) - 1);
--[ 2021.09.21.14.57.27.293.0 ]--
r 43             uf.union(toIndex(row,col), toIndex(row-1,col));
--[ 2021.09.21.14.57.36.884.0 ]--
r 42         if (isValidHex(this.board[toIndex(row+1,col)]) &&this.board[toIndex(row,col) - 1] == player) {
--[ 2021.09.21.14.57.50.019.0 ]--
r 42         if (isValidHex(this.board[toIndex(row+1,col)]) && this.board[toIndex(row,col) - 1] == player) {
--[ 2021.09.21.14.57.52.763.0 ]--
r 42         if (isValidHex(this.board[toIndex(row1,col)]) && this.board[toIndex(row,col) - 1] == player) {
--[ 2021.09.21.14.57.53.111.0 ]--
r 42         if (isValidHex(this.board[toIndex(row-1,col)]) && this.board[toIndex(row,col) - 1] == player) {
--[ 2021.09.21.14.57.57.469.0 ]--
r 42         if (isValidHex(this.board[toIndex(row-1,col)]) && this.board[toIndex(ro,col) - 1] == player) {
--[ 2021.09.21.14.57.57.657.0 ]--
r 42         if (isValidHex(this.board[toIndex(row-1,col)]) && this.board[toIndex(ro-,col) - 1] == player) {
--[ 2021.09.21.14.57.59.952.0 ]--
r 42         if (isValidHex(this.board[toIndex(row-1,col)]) && this.board[toIndex(ro,col) - 1] == player) {
--[ 2021.09.21.14.58.00.315.0 ]--
r 42         if (isValidHex(this.board[toIndex(row-1,col)]) && this.board[toIndex(row,col) - 1] == player) {
--[ 2021.09.21.14.58.00.689.0 ]--
r 42         if (isValidHex(this.board[toIndex(row-1,col)]) && this.board[toIndex(row-,col) - 1] == player) {
--[ 2021.09.21.14.58.01.300.0 ]--
r 42         if (isValidHex(this.board[toIndex(row-1,col)]) && this.board[toIndex(row-1,col) - 1] == player) {
--[ 2021.09.21.14.58.04.757.0 ]--
r 42         if (isValidHex(this.board[toIndex(row-1,col)]) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.14.58.16.408.0 ]--
r 45         if (isValidHex(this.board[toIndex(row-1,col)]) && this.board[toIndex(row-1,col)] == player) {
r 46             uf.union(toIndex(row,col), toIndex(row-1,col));
--[ 2021.09.21.14.58.19.341.0 ]--
r 45         if (isValidHex(this.board[toIndex(row-,col)]) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.14.58.19.546.0 ]--
r 45         if (isValidHex(this.board[toIndex(row,col)]) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.14.58.21.421.0 ]--
r 45         if (isValidHex(this.board[toIndex(row,col+)]) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.14.58.21.658.0 ]--
r 45         if (isValidHex(this.board[toIndex(row,col+1)]) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.14.58.24.178.0 ]--
r 45         if (isValidHex(this.board[toIndex(row,col+1)]) && this.board[toIndex(row-1,col+)] == player) {
--[ 2021.09.21.14.58.24.335.0 ]--
r 45         if (isValidHex(this.board[toIndex(row,col+1)]) && this.board[toIndex(row-1,col+1)] == player) {
--[ 2021.09.21.14.58.26.389.0 ]--
r 45         if (isValidHex(this.board[toIndex(row,col+1)]) && this.board[toIndex(row-,col+1)] == player) {
--[ 2021.09.21.14.58.26.523.0 ]--
r 45         if (isValidHex(this.board[toIndex(row,col+1)]) && this.board[toIndex(row,col+1)] == player) {
--[ 2021.09.21.14.58.28.443.0 ]--
r 46             uf.union(toIndex(row,col), toIndex(row-1,col+));
--[ 2021.09.21.14.58.29.870.0 ]--
r 46             uf.union(toIndex(row,col), toIndex(row-1,col+1));
--[ 2021.09.21.14.58.33.364.0 ]--
r 46             uf.union(toIndex(row,col), toIndex(row-,col+1));
--[ 2021.09.21.14.58.33.502.0 ]--
r 46             uf.union(toIndex(row,col), toIndex(row,col+1));
--[ 2021.09.21.14.58.53.119.0 ]--
r 48         if (isValidHex(this.board[toIndex(row,col+1)]) && this.board[toIndex(row,col+1)] == player) {
r 49             uf.union(toIndex(row,col), toIndex(row,col+1));
--[ 2021.09.21.14.58.55.647.0 ]--
r 48         if (isValidHex(this.board[toIndex(row,col1)]) && this.board[toIndex(row,col+1)] == player) {
--[ 2021.09.21.14.58.56.080.0 ]--
r 48         if (isValidHex(this.board[toIndex(row,col-1)]) && this.board[toIndex(row,col+1)] == player) {
--[ 2021.09.21.14.58.57.868.0 ]--
r 49             uf.union(toIndex(row,col), toIndex(row,col1));
--[ 2021.09.21.14.58.57.987.0 ]--
r 49             uf.union(toIndex(row,col), toIndex(row,col-1));
--[ 2021.09.21.14.59.00.941.0 ]--
r 48         if (isValidHex(this.board[toIndex(row,col-1)]) && this.board[toIndex(row,col1)] == player) {
--[ 2021.09.21.14.59.01.026.0 ]--
r 48         if (isValidHex(this.board[toIndex(row,col-1)]) && this.board[toIndex(row,col-1)] == player) {
--[ 2021.09.21.14.59.07.989.0 ]--
r 51         if (isValidHex(this.board[toIndex(row,col+1)]) && this.board[toIndex(row,col+1)] == player) {
r 52             uf.union(toIndex(row,col), toIndex(row,col+1));
--[ 2021.09.21.14.59.12.899.0 ]--
r 54         if (isValidHex(this.board[toIndex(row,col+1)]) && this.board[toIndex(row,col+1)] == player) {
r 55             uf.union(toIndex(row,col), toIndex(row,col+1));
--[ 2021.09.21.14.59.19.590.0 ]--
r 51         if (isValidHex(this.board[toIndex(row+,col+1)]) && this.board[toIndex(row,col+1)] == player) {
--[ 2021.09.21.14.59.19.749.0 ]--
r 51         if (isValidHex(this.board[toIndex(row+1,col+1)]) && this.board[toIndex(row,col+1)] == player) {
--[ 2021.09.21.14.59.22.477.0 ]--
r 51         if (isValidHex(this.board[toIndex(row+1,col1)]) && this.board[toIndex(row,col+1)] == player) {
--[ 2021.09.21.14.59.23.105.0 ]--
r 51         if (isValidHex(this.board[toIndex(row+1,col-1)]) && this.board[toIndex(row,col+1)] == player) {
--[ 2021.09.21.14.59.30.051.0 ]--
r 51         if (isValidHex(this.board[toIndex(row+1,col-1)]) && this.board[toIndex(row+,col+1)] == player) {
--[ 2021.09.21.14.59.30.391.0 ]--
r 51         if (isValidHex(this.board[toIndex(row+1,col-1)]) && this.board[toIndex(row+1,col+1)] == player) {
--[ 2021.09.21.14.59.32.804.0 ]--
r 51         if (isValidHex(this.board[toIndex(row+1,col-1)]) && this.board[toIndex(row+1,col1)] == player) {
--[ 2021.09.21.14.59.33.033.0 ]--
r 51         if (isValidHex(this.board[toIndex(row+1,col-1)]) && this.board[toIndex(row+1,col-1)] == player) {
--[ 2021.09.21.14.59.34.940.0 ]--
r 52             uf.union(toIndex(row,col), toIndex(row,col1));
--[ 2021.09.21.14.59.35.370.0 ]--
r 52             uf.union(toIndex(row,col), toIndex(row,col-1));
--[ 2021.09.21.14.59.38.645.0 ]--
r 52             uf.union(toIndex(row,col), toIndex(row+,col-1));
--[ 2021.09.21.14.59.38.869.0 ]--
r 52             uf.union(toIndex(row,col), toIndex(row+1,col-1));
--[ 2021.09.21.14.59.42.733.0 ]--
r 54         if (isValidHex(this.board[toIndex(row-,col+1)]) && this.board[toIndex(row,col+1)] == player) {
--[ 2021.09.21.14.59.42.861.0 ]--
r 54         if (isValidHex(this.board[toIndex(row-1,col+1)]) && this.board[toIndex(row,col+1)] == player) {
--[ 2021.09.21.14.59.45.628.0 ]--
r 55             uf.union(toIndex(row,col), toIndex(row-,col+1));
--[ 2021.09.21.14.59.45.757.0 ]--
r 55             uf.union(toIndex(row,col), toIndex(row-1,col+1));
--[ 2021.09.21.14.59.51.309.0 ]--
r 54         if (isValidHex(this.board[toIndex(row-1,col+1)]) && this.board[toIndex(row-,col+1)] == player) {
--[ 2021.09.21.14.59.51.358.0 ]--
r 54         if (isValidHex(this.board[toIndex(row-1,col+1)]) && this.board[toIndex(row-1,col+1)] == player) {
--[ 2021.09.21.15.01.40.103.0 ]--
+ 57         
--[ 2021.09.21.15.03.10.880.0 ]--
r 57         i
--[ 2021.09.21.15.03.11.005.0 ]--
r 57         if
--[ 2021.09.21.15.03.11.216.0 ]--
r 57         if 
--[ 2021.09.21.15.03.15.791.0 ]--
r 57         if ()
--[ 2021.09.21.15.03.16.488.0 ]--
r 57         if (p)
--[ 2021.09.21.15.03.16.745.0 ]--
r 57         if (pl)
--[ 2021.09.21.15.03.16.956.0 ]--
r 57         if (pla)
--[ 2021.09.21.15.03.17.053.0 ]--
r 57         if (play)
--[ 2021.09.21.15.03.17.611.0 ]--
r 57         if (player)
--[ 2021.09.21.15.03.23.544.0 ]--
r 57         if (player )
--[ 2021.09.21.15.03.24.095.0 ]--
r 57         if (player -)
--[ 2021.09.21.15.03.24.248.0 ]--
r 57         if (player -=)
--[ 2021.09.21.15.03.24.953.0 ]--
r 57         if (player -)
--[ 2021.09.21.15.03.25.196.0 ]--
r 57         if (player )
--[ 2021.09.21.15.03.25.776.0 ]--
r 57         if (player =)
--[ 2021.09.21.15.03.26.056.0 ]--
r 57         if (player =1)
--[ 2021.09.21.15.03.26.414.0 ]--
r 57         if (player =)
--[ 2021.09.21.15.03.27.041.0 ]--
r 57         if (player ==)
--[ 2021.09.21.15.03.27.585.0 ]--
r 57         if (player == )
--[ 2021.09.21.15.03.27.880.0 ]--
r 57         if (player == 1)
--[ 2021.09.21.15.03.30.729.0 ]--
r 57         if (player == 1) 
--[ 2021.09.21.15.03.30.919.0 ]--
r 57         if (player == 1) {
--[ 2021.09.21.15.03.31.353.0 ]--
+ 58 
+ 59 }
--[ 2021.09.21.15.03.31.365.0 ]--
r 59         }
--[ 2021.09.21.15.03.31.396.0 ]--
r 58             
--[ 2021.09.21.15.03.38.550.0 ]--
r 59         } 
--[ 2021.09.21.15.03.38.736.0 ]--
r 59         } e
--[ 2021.09.21.15.03.38.894.0 ]--
r 59         } el
--[ 2021.09.21.15.03.39.050.0 ]--
r 59         } els
--[ 2021.09.21.15.03.39.249.0 ]--
r 59         } else
--[ 2021.09.21.15.03.40.865.0 ]--
r 59         } else 
--[ 2021.09.21.15.03.41.144.0 ]--
r 59         } else {
--[ 2021.09.21.15.03.41.442.0 ]--
+ 60 
+ 61 }
--[ 2021.09.21.15.03.41.459.0 ]--
r 61         }
--[ 2021.09.21.15.03.41.490.0 ]--
r 60             
--[ 2021.09.21.15.03.47.558.0 ]--
r 59         } els {
--[ 2021.09.21.15.03.47.695.0 ]--
r 59         } el {
--[ 2021.09.21.15.03.48.782.0 ]--
r 59         } eli {
--[ 2021.09.21.15.03.48.861.0 ]--
r 59         } elif {
--[ 2021.09.21.15.03.49.326.0 ]--
r 59         } elif  {
--[ 2021.09.21.15.03.49.559.0 ]--
r 59         } elif () {
--[ 2021.09.21.15.03.50.450.0 ]--
r 59         } elif  {
--[ 2021.09.21.15.03.50.575.0 ]--
r 59         } elif {
--[ 2021.09.21.15.03.50.727.0 ]--
r 59         } eli {
--[ 2021.09.21.15.03.50.879.0 ]--
r 59         } el {
--[ 2021.09.21.15.03.51.480.0 ]--
r 59         } els {
--[ 2021.09.21.15.03.51.657.0 ]--
r 59         } else {
--[ 2021.09.21.15.03.51.768.0 ]--
r 59         } else  {
--[ 2021.09.21.15.03.51.876.0 ]--
r 59         } else i {
--[ 2021.09.21.15.03.52.014.0 ]--
r 59         } else if {
--[ 2021.09.21.15.04.09.766.0 ]--
r 59         } else if  {
--[ 2021.09.21.15.04.10.049.0 ]--
r 59         } else if () {
--[ 2021.09.21.15.04.10.618.0 ]--
r 59         } else if  {
--[ 2021.09.21.15.04.10.766.0 ]--
r 59         } else if {
--[ 2021.09.21.15.04.10.912.0 ]--
r 59         } else i {
--[ 2021.09.21.15.04.11.063.0 ]--
r 59         } else  {
--[ 2021.09.21.15.04.11.224.0 ]--
r 59         } else {
--[ 2021.09.21.15.04.15.135.0 ]--
r 58             i
--[ 2021.09.21.15.04.15.242.0 ]--
r 58             if
--[ 2021.09.21.15.04.15.830.0 ]--
r 58             if 
--[ 2021.09.21.15.04.16.080.0 ]--
r 58             if ()
--[ 2021.09.21.15.04.16.877.0 ]--
r 58             if (c)
--[ 2021.09.21.15.04.16.950.0 ]--
r 58             if (co)
--[ 2021.09.21.15.04.17.121.0 ]--
r 58             if (col)
--[ 2021.09.21.15.04.17.773.0 ]--
r 58             if (col )
--[ 2021.09.21.15.04.18.146.0 ]--
r 58             if (col =)
--[ 2021.09.21.15.04.18.246.0 ]--
r 58             if (col ==)
--[ 2021.09.21.15.04.18.438.0 ]--
r 58             if (col == )
--[ 2021.09.21.15.04.19.668.0 ]--
r 58             if (col == 0)
--[ 2021.09.21.15.04.22.198.0 ]--
r 58             if (col == 0) 
--[ 2021.09.21.15.04.23.277.0 ]--
r 58             if (col == 0) {
--[ 2021.09.21.15.04.24.536.0 ]--
+ 59 
+ 60 }
--[ 2021.09.21.15.04.24.551.0 ]--
r 60             }
--[ 2021.09.21.15.04.24.582.0 ]--
r 59                 
--[ 2021.09.21.15.04.24.874.0 ]--
r 59                 }
--[ 2021.09.21.15.04.24.901.0 ]--
r 59             }
--[ 2021.09.21.15.04.28.270.0 ]--
r 59             } 
--[ 2021.09.21.15.04.28.457.0 ]--
r 59             } e
--[ 2021.09.21.15.04.29.059.0 ]--
r 59             } es
--[ 2021.09.21.15.04.29.366.0 ]--
r 59             } e
--[ 2021.09.21.15.04.29.580.0 ]--
r 59             } el
--[ 2021.09.21.15.04.29.609.0 ]--
r 59             } els
--[ 2021.09.21.15.04.29.909.0 ]--
r 59             } else
--[ 2021.09.21.15.04.30.326.0 ]--
r 59             } else 
--[ 2021.09.21.15.04.30.474.0 ]--
r 59             } else i
--[ 2021.09.21.15.04.30.555.0 ]--
r 59             } else if
--[ 2021.09.21.15.04.30.988.0 ]--
r 59             } else if 
--[ 2021.09.21.15.04.31.358.0 ]--
r 59             } else if ()
--[ 2021.09.21.15.04.37.140.0 ]--
r 59             } else if (c)
--[ 2021.09.21.15.04.37.260.0 ]--
r 59             } else if (co)
--[ 2021.09.21.15.04.37.460.0 ]--
r 59             } else if (col)
--[ 2021.09.21.15.04.37.613.0 ]--
r 59             } else if (col )
--[ 2021.09.21.15.04.38.390.0 ]--
r 59             } else if (col =)
--[ 2021.09.21.15.04.38.551.0 ]--
r 59             } else if (col ==)
--[ 2021.09.21.15.04.38.718.0 ]--
r 59             } else if (col == )
--[ 2021.09.21.15.05.34.681.0 ]--
+ 8     
--[ 2021.09.21.15.05.35.816.0 ]--
r 8     p
--[ 2021.09.21.15.05.35.927.0 ]--
r 8     pr
--[ 2021.09.21.15.05.36.009.0 ]--
r 8     pri
--[ 2021.09.21.15.05.36.435.0 ]--
r 8     private
--[ 2021.09.21.15.05.36.457.0 ]--
r 8     private 
--[ 2021.09.21.15.05.36.828.0 ]--
r 8     private  
--[ 2021.09.21.15.05.37.260.0 ]--
r 8     private 
--[ 2021.09.21.15.05.37.378.0 ]--
r 8     private i
--[ 2021.09.21.15.05.37.485.0 ]--
r 8     private in
--[ 2021.09.21.15.05.37.547.0 ]--
r 8     private int
--[ 2021.09.21.15.05.38.228.0 ]--
r 8     private int 
--[ 2021.09.21.15.05.38.824.0 ]--
r 8     private int N
--[ 2021.09.21.15.05.40.323.0 ]--
r 8     private int N;
--[ 2021.09.21.15.05.44.664.0 ]--
+ 18         
--[ 2021.09.21.15.05.45.126.0 ]--
r 18         t
--[ 2021.09.21.15.05.45.237.0 ]--
r 18         th
--[ 2021.09.21.15.05.45.282.0 ]--
r 18         thi
--[ 2021.09.21.15.05.45.501.0 ]--
r 18         this
--[ 2021.09.21.15.05.46.086.0 ]--
r 18         this.
--[ 2021.09.21.15.05.48.863.0 ]--
r 18         this.N
--[ 2021.09.21.15.05.49.370.0 ]--
r 18         this.N 
--[ 2021.09.21.15.05.49.713.0 ]--
r 18         this.N =
--[ 2021.09.21.15.05.49.856.0 ]--
r 18         this.N = 
--[ 2021.09.21.15.05.51.479.0 ]--
r 18         this.N = N
--[ 2021.09.21.15.05.52.328.0 ]--
r 18         this.N = N;
--[ 2021.09.21.15.05.56.262.0 ]--
r 61             } else if (col == N)
--[ 2021.09.21.15.05.56.673.0 ]--
r 61             } else if (col == N-)
--[ 2021.09.21.15.05.56.943.0 ]--
r 61             } else if (col == N-1)
--[ 2021.09.21.15.06.01.606.0 ]--
r 61             } else if (col == N-1){
--[ 2021.09.21.15.06.03.127.0 ]--
r 61             } else if (col == N-1) {
--[ 2021.09.21.15.06.06.528.0 ]--
+ 61                 
--[ 2021.09.21.15.06.08.850.0 ]--
+ 63                 
--[ 2021.09.21.15.06.14.663.0 ]--
r 61                 u
--[ 2021.09.21.15.06.14.777.0 ]--
r 61                 uf
--[ 2021.09.21.15.06.14.968.0 ]--
r 61                 uf.
--[ 2021.09.21.15.06.15.735.0 ]--
r 61                 uf.union
--[ 2021.09.21.15.06.15.742.0 ]--
r 61                 uf.union()
--[ 2021.09.21.15.06.15.747.0 ]--
r 61                 uf.union();
--[ 2021.09.21.15.06.17.380.0 ]--
r 61                 uf.union(t);
--[ 2021.09.21.15.06.17.495.0 ]--
r 61                 uf.union(to);
--[ 2021.09.21.15.06.18.165.0 ]--
r 61                 uf.union(toIndex);
--[ 2021.09.21.15.06.18.194.0 ]--
r 61                 uf.union(toIndex());
--[ 2021.09.21.15.06.19.013.0 ]--
r 61                 uf.union(toIndex(r));
--[ 2021.09.21.15.06.19.115.0 ]--
r 61                 uf.union(toIndex(ro));
--[ 2021.09.21.15.06.20.648.0 ]--
r 61                 uf.union(toIndex(row, col));
--[ 2021.09.21.15.06.22.558.0 ]--
r 61                 uf.union(toIndex(row, col),);
--[ 2021.09.21.15.06.22.917.0 ]--
r 61                 uf.union(toIndex(row, col), );
--[ 2021.09.21.15.06.27.382.0 ]--
r 63                 uf.union(toIndex(row, col), );
--[ 2021.09.21.15.06.30.910.0 ]--
r 66             i
--[ 2021.09.21.15.06.31.080.0 ]--
r 66             if
--[ 2021.09.21.15.06.31.164.0 ]--
r 66             if 
--[ 2021.09.21.15.06.32.048.0 ]--
r 66             if ()
--[ 2021.09.21.15.06.33.084.0 ]--
r 66             if (r)
--[ 2021.09.21.15.06.33.209.0 ]--
r 66             if (ro)
--[ 2021.09.21.15.06.33.808.0 ]--
r 66             if (row)
--[ 2021.09.21.15.06.34.007.0 ]--
r 66             if (row )
--[ 2021.09.21.15.06.34.647.0 ]--
r 66             if (row =)
--[ 2021.09.21.15.06.34.832.0 ]--
r 66             if (row = )
--[ 2021.09.21.15.06.35.231.0 ]--
r 66             if (row =)
--[ 2021.09.21.15.06.35.839.0 ]--
r 66             if (row ==)
--[ 2021.09.21.15.06.35.983.0 ]--
r 66             if (row == )
--[ 2021.09.21.15.06.36.636.0 ]--
r 66             if (row == 0)
--[ 2021.09.21.15.06.36.839.0 ]--
r 66             if (row == 0 )
--[ 2021.09.21.15.06.37.822.0 ]--
r 66             if (row == 0)
--[ 2021.09.21.15.06.38.746.0 ]--
r 66             if (row == 0) 
--[ 2021.09.21.15.06.39.174.0 ]--
r 66             if (row == 0) {
--[ 2021.09.21.15.06.39.398.0 ]--
+ 67 
+ 68 }
--[ 2021.09.21.15.06.39.429.0 ]--
r 68             }
--[ 2021.09.21.15.06.39.447.0 ]--
r 67                 
--[ 2021.09.21.15.06.40.259.0 ]--
r 67                 uf.union(toIndex(row, col), );
--[ 2021.09.21.15.06.41.646.0 ]--
r 68             } 
--[ 2021.09.21.15.06.41.849.0 ]--
r 68             } e
--[ 2021.09.21.15.06.42.110.0 ]--
r 68             } el
--[ 2021.09.21.15.06.42.251.0 ]--
r 68             } els
--[ 2021.09.21.15.06.42.437.0 ]--
r 68             } else
--[ 2021.09.21.15.06.43.275.0 ]--
r 68             } else 
--[ 2021.09.21.15.06.43.415.0 ]--
r 68             } else i
--[ 2021.09.21.15.06.43.483.0 ]--
r 68             } else if
--[ 2021.09.21.15.06.43.709.0 ]--
r 68             } else if 
--[ 2021.09.21.15.06.44.062.0 ]--
r 68             } else if ()
--[ 2021.09.21.15.06.45.037.0 ]--
r 68             } else if (c)
--[ 2021.09.21.15.06.45.133.0 ]--
r 68             } else if (co)
--[ 2021.09.21.15.06.45.521.0 ]--
r 68             } else if (col)
--[ 2021.09.21.15.06.45.737.0 ]--
r 68             } else if (col )
--[ 2021.09.21.15.06.46.357.0 ]--
r 68             } else if (col =)
--[ 2021.09.21.15.06.46.486.0 ]--
r 68             } else if (col ==)
--[ 2021.09.21.15.06.46.637.0 ]--
r 68             } else if (col == )
--[ 2021.09.21.15.06.47.160.0 ]--
r 68             } else if (col == N)
--[ 2021.09.21.15.06.47.842.0 ]--
r 68             } else if (col == N-)
--[ 2021.09.21.15.06.48.804.0 ]--
r 68             } else if (col == N-1)
--[ 2021.09.21.15.06.49.906.0 ]--
r 68             } else if (col == N-1) 
--[ 2021.09.21.15.06.50.255.0 ]--
r 68             } else if (col == N-1) {
--[ 2021.09.21.15.06.50.522.0 ]--
+ 69 
+ 70 }
--[ 2021.09.21.15.06.50.556.0 ]--
r 70             }
--[ 2021.09.21.15.06.50.576.0 ]--
r 69                 
--[ 2021.09.21.15.06.51.344.0 ]--
r 69                 uf.union(toIndex(row, col), );
--[ 2021.09.21.15.07.02.750.0 ]--
r 68             } else if (r == N-1) {
--[ 2021.09.21.15.07.02.958.0 ]--
r 68             } else if (ro == N-1) {
--[ 2021.09.21.15.07.03.227.0 ]--
r 68             } else if (row == N-1) {
--[ 2021.09.21.15.07.37.336.0 ]--
r 61                 uf.union(toIndex(row, col), t);
--[ 2021.09.21.15.07.37.474.0 ]--
r 61                 uf.union(toIndex(row, col), th);
--[ 2021.09.21.15.07.37.554.0 ]--
r 61                 uf.union(toIndex(row, col), thi);
--[ 2021.09.21.15.07.37.876.0 ]--
r 61                 uf.union(toIndex(row, col), this);
--[ 2021.09.21.15.07.38.095.0 ]--
r 61                 uf.union(toIndex(row, col), this.);
--[ 2021.09.21.15.07.38.798.0 ]--
r 61                 uf.union(toIndex(row, col), this.b);
--[ 2021.09.21.15.07.39.222.0 ]--
r 61                 uf.union(toIndex(row, col), this.bo);
--[ 2021.09.21.15.07.39.933.0 ]--
r 61                 uf.union(toIndex(row, col), this.board);
--[ 2021.09.21.15.07.41.511.0 ]--
r 61                 uf.union(toIndex(row, col), this.board[]);
--[ 2021.09.21.15.07.44.006.0 ]--
r 61                 uf.union(toIndex(row, col), this.board[b]);
--[ 2021.09.21.15.07.44.207.0 ]--
r 61                 uf.union(toIndex(row, col), this.board[bo]);
--[ 2021.09.21.15.07.44.783.0 ]--
r 61                 uf.union(toIndex(row, col), this.board[board]);
--[ 2021.09.21.15.07.45.041.0 ]--
r 61                 uf.union(toIndex(row, col), this.board[board.]);
--[ 2021.09.21.15.07.46.006.0 ]--
r 61                 uf.union(toIndex(row, col), this.board[board.length]);
--[ 2021.09.21.15.07.47.754.0 ]--
r 61                 uf.union(toIndex(row, col), this.board[board.length-]);
--[ 2021.09.21.15.07.47.877.0 ]--
r 61                 uf.union(toIndex(row, col), this.board[board.length-1]);
--[ 2021.09.21.15.07.52.101.0 ]--
r 63                 uf.union(toIndex(row, col), t);
--[ 2021.09.21.15.07.52.191.0 ]--
r 63                 uf.union(toIndex(row, col), th);
--[ 2021.09.21.15.07.52.308.0 ]--
r 63                 uf.union(toIndex(row, col), thi);
--[ 2021.09.21.15.07.52.710.0 ]--
r 63                 uf.union(toIndex(row, col), th);
--[ 2021.09.21.15.07.52.833.0 ]--
r 63                 uf.union(toIndex(row, col), t);
--[ 2021.09.21.15.07.52.973.0 ]--
r 63                 uf.union(toIndex(row, col), );
--[ 2021.09.21.15.07.55.319.0 ]--
r 61                 uf.union(toIndex(row, col), 
--[ 2021.09.21.15.07.57.645.0 ]--
r 61                 uf.union(toIndex(row, col), this.board[board.length-1]);
--[ 2021.09.21.15.08.01.522.0 ]--
r 63                 uf.union(toIndex(row, col), this.board[board.length-1]););
--[ 2021.09.21.15.08.03.556.0 ]--
r 63                 uf.union(toIndex(row, col), this.board[board.length-]););
--[ 2021.09.21.15.08.03.864.0 ]--
r 63                 uf.union(toIndex(row, col), this.board[board.length-3]););
--[ 2021.09.21.15.08.22.717.0 ]--
r 63                 uf.union(toIndex(row, col), this.board[board.length-3]));
--[ 2021.09.21.15.08.23.166.0 ]--
r 63                 uf.union(toIndex(row, col), this.board[board.length-3]);
--[ 2021.09.21.15.08.26.444.0 ]--
r 67                 uf.union(toIndex(row, col), )
--[ 2021.09.21.15.08.26.583.0 ]--
r 67                 uf.union(toIndex(row, col), 
--[ 2021.09.21.15.08.27.256.0 ]--
r 67                 uf.union(toIndex(row, col), this.board[board.length-1]);
--[ 2021.09.21.15.08.29.039.0 ]--
r 69                 uf.union(toIndex(row, col), )
--[ 2021.09.21.15.08.29.160.0 ]--
r 69                 uf.union(toIndex(row, col), 
--[ 2021.09.21.15.08.29.672.0 ]--
r 69                 uf.union(toIndex(row, col), this.board[board.length-1]);
--[ 2021.09.21.15.08.32.573.0 ]--
r 69                 uf.union(toIndex(row, col), this.board[board.length-]);
--[ 2021.09.21.15.08.32.767.0 ]--
r 69                 uf.union(toIndex(row, col), this.board[board.length-4]);
--[ 2021.09.21.15.08.34.056.0 ]--
r 67                 uf.union(toIndex(row, col), this.board[board.length-]);
--[ 2021.09.21.15.08.34.116.0 ]--
r 67                 uf.union(toIndex(row, col), this.board[board.length-2]);
--[ 2021.09.21.15.08.40.834.0 ]--
r 67                 uf.union(toIndex(row, col), this.board[board.length-]);
--[ 2021.09.21.15.08.41.047.0 ]--
r 67                 uf.union(toIndex(row, col), this.board[board.length-4]);
--[ 2021.09.21.15.08.42.151.0 ]--
r 69                 uf.union(toIndex(row, col), this.board[board.length-]);
--[ 2021.09.21.15.08.42.271.0 ]--
r 69                 uf.union(toIndex(row, col), this.board[board.length-2]);
--[ 2021.09.21.15.10.12.715.0 ]--
r 76         uf.connected();
--[ 2021.09.21.15.10.14.250.0 ]--
- 75
--[ 2021.09.21.15.11.10.487.0 ]--
r 75         uf.connected(this.board[board.length-4]);
--[ 2021.09.21.15.11.16.525.0 ]--
r 75         uf.connected(,this.board[board.length-4]);
--[ 2021.09.21.15.11.16.875.0 ]--
r 75         uf.connected(, this.board[board.length-4]);
--[ 2021.09.21.15.11.18.113.0 ]--
r 75         uf.connected(this.board[board.length-4], this.board[board.length-4]);
--[ 2021.09.21.15.11.19.381.0 ]--
r 75         uf.connected(this.board[board.length-], this.board[board.length-4]);
--[ 2021.09.21.15.11.19.711.0 ]--
r 75         uf.connected(this.board[board.length-2], this.board[board.length-4]);
--[ 2021.09.21.15.11.25.374.0 ]--
+ 80         
--[ 2021.09.21.15.11.26.239.0 ]--
r 80         uf.connected(this.board[board.length-2], this.board[board.length-4]);
--[ 2021.09.21.15.11.28.485.0 ]--
r 80         uf.connected(this.board[board.length-2], this.board[board.length-4])
--[ 2021.09.21.15.11.30.752.0 ]--
r 80         iuf.connected(this.board[board.length-2], this.board[board.length-4])
--[ 2021.09.21.15.11.30.863.0 ]--
r 80         ifuf.connected(this.board[board.length-2], this.board[board.length-4])
--[ 2021.09.21.15.11.31.011.0 ]--
r 80         if uf.connected(this.board[board.length-2], this.board[board.length-4])
--[ 2021.09.21.15.11.31.680.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])
--[ 2021.09.21.15.11.33.822.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4]))
--[ 2021.09.21.15.11.35.095.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) 
--[ 2021.09.21.15.11.36.134.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) {
--[ 2021.09.21.15.11.36.694.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { 
--[ 2021.09.21.15.11.37.032.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { r
--[ 2021.09.21.15.11.37.226.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { re
--[ 2021.09.21.15.11.37.497.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { ret
--[ 2021.09.21.15.11.37.900.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { return
--[ 2021.09.21.15.11.37.922.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { return 
--[ 2021.09.21.15.11.38.560.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { return t
--[ 2021.09.21.15.11.38.777.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { return tr
--[ 2021.09.21.15.11.38.816.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { return tru
--[ 2021.09.21.15.11.39.257.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { return tru''
--[ 2021.09.21.15.11.39.760.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { return tru
--[ 2021.09.21.15.11.40.384.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { return true
--[ 2021.09.21.15.11.40.595.0 ]--
+ 81         
--[ 2021.09.21.15.11.40.631.0 ]--
r 81                 
--[ 2021.09.21.15.11.41.107.0 ]--
- 81
--[ 2021.09.21.15.11.42.178.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { return true;
--[ 2021.09.21.15.11.42.521.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { return true; 
--[ 2021.09.21.15.11.42.919.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { return true; }
--[ 2021.09.21.15.11.50.501.0 ]--
r 75         if (uf.connected(this.board[board.length-2], this.board[board.length-4])) { return true; }
--[ 2021.09.21.15.11.55.287.0 ]--
r 75         if (uf.connected(this.board[board.length-2], this.board[board.length-])) { return true; }
--[ 2021.09.21.15.11.55.547.0 ]--
r 75         if (uf.connected(this.board[board.length-2], this.board[board.length-3])) { return true; }
--[ 2021.09.21.15.11.58.269.0 ]--
r 75         if (uf.connected(this.board[board.length-], this.board[board.length-3])) { return true; }
--[ 2021.09.21.15.11.58.298.0 ]--
r 75         if (uf.connected(this.board[board.length-1], this.board[board.length-3])) { return true; }
--[ 2021.09.21.15.13.43.133.0 ]--
+ 34         
--[ 2021.09.21.15.13.50.230.0 ]--
- 34
--[ 2021.09.21.15.13.57.516.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.15.14.785.0 ]--
r 22         if (row >= this.board.length || row < 0 || col >= this.board.length || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.15.354.0 ]--
r 27         if (row >= this.board.length || row < 0 || col >= this.board.length || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.16.387.0 ]--
r 33         if (row >= this.board.length || row < 0 || col >= this.board.length || col <0  ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.18.038.0 ]--
r 33         if (row >= this.board.length || row < 0 || col >= this.board.length || col <0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.19.177.0 ]--
r 33         if (row >= this.board.length || row < 0 || col >= this.board.length || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.21.515.0 ]--
r 38         if (row >= this.board.length || row < 0 || col >= this.board.length || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.35.238.0 ]--
r 22         if (row >= this.board.length- || row < 0 || col >= this.board.length || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.36.082.0 ]--
r 22         if (row >= this.board.length-4 || row < 0 || col >= this.board.length || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.38.593.0 ]--
r 22         if (row >= this.board.length-4 || row < 0 || col >= this.board.length- || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.38.751.0 ]--
r 22         if (row >= this.board.length-4 || row < 0 || col >= this.board.length-4 || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.42.087.0 ]--
r 27         if (row >= this.board.length || row < 0 || col >= this.board.length- || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.42.172.0 ]--
r 27         if (row >= this.board.length || row < 0 || col >= this.board.length-4 || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.45.534.0 ]--
r 33         if (row >= this.board.length || row < 0 || col >= this.board.length- || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.45.605.0 ]--
r 33         if (row >= this.board.length || row < 0 || col >= this.board.length-4 || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.48.009.0 ]--
r 38         if (row >= this.board.length || row < 0 || col >= this.board.length- || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.48.096.0 ]--
r 38         if (row >= this.board.length || row < 0 || col >= this.board.length-4 || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.52.647.0 ]--
r 38         if (row >= this.board.length- || row < 0 || col >= this.board.length-4 || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.52.808.0 ]--
r 38         if (row >= this.board.length-4 || row < 0 || col >= this.board.length-4 || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.55.784.0 ]--
r 33         if (row >= this.board.length- || row < 0 || col >= this.board.length-4 || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.55.887.0 ]--
r 33         if (row >= this.board.length-4 || row < 0 || col >= this.board.length-4 || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.58.642.0 ]--
r 27         if (row >= this.board.length- || row < 0 || col >= this.board.length-4 || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.15.59.038.0 ]--
r 27         if (row >= this.board.length-4 || row < 0 || col >= this.board.length-4 || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.16.05.741.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.17.23.448.0 ]--
r 27         if (row >= N || row < 0 || col >= this.board.length-4 || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.17.30.255.0 ]--
r 27         if (row >= N || row < 0 || col >= N || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.17.34.013.0 ]--
r 22         if (row >= N || row < 0 || col >= this.board.length-4 || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.17.38.556.0 ]--
r 22         if (row >= N || row < 0 || col >= N || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.17.45.886.0 ]--
r 33         if (row >= N || row < 0 || col >= this.board.length-4 || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.17.50.193.0 ]--
r 33         if (row >= N || row < 0 || col >= N || col < 0 ) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.31.264.0 ]--
r 22         if (!) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.32.002.0 ]--
r 22         if (!i) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.32.886.0 ]--
r 22         if (!isValidHex) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.32.892.0 ]--
r 22         if (!isValidHex()) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.33.842.0 ]--
r 22         if (!isValidHex(t)) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.33.923.0 ]--
r 22         if (!isValidHex(to)) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.34.518.0 ]--
r 22         if (!isValidHex(toIndex)) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.34.524.0 ]--
r 22         if (!isValidHex(toIndex())) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.35.623.0 ]--
r 22         if (!isValidHex(toIndex(r))) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.35.748.0 ]--
r 22         if (!isValidHex(toIndex(ro))) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.37.439.0 ]--
r 22         if (!isValidHex(toIndex(row, col))) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.47.942.0 ]--
r 27         if (!isValidHex(toIndex(row, col))) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.50.808.0 ]--
r 33         if (!isValidHex(toIndex(row, col))) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.18.54.751.0 ]--
r 38         if (!isValidHex(toIndex(row, col))) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.19.21.020.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.20.13.519.0 ]--
r 99         if (n >= 0 && n < this.board.length - ) { return true;}
--[ 2021.09.21.15.20.13.686.0 ]--
r 99         if (n >= 0 && n < this.board.length -) { return true;}
--[ 2021.09.21.15.20.13.863.0 ]--
r 99         if (n >= 0 && n < this.board.length ) { return true;}
--[ 2021.09.21.15.20.14.315.0 ]--
r 99         if (n >= 0 && n < this.board.length) { return true;}
--[ 2021.09.21.15.20.27.742.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.20.33.772.0 ]--
r 99         if (n >= 0 && n < this.board.length - 4) { return true;}
--[ 2021.09.21.15.21.22.306.0 ]--
r 99         if (n >= 0 && n < this.board.length - 4) { return true; }
--[ 2021.09.21.15.21.43.033.0 ]--
r 100         return t;
--[ 2021.09.21.15.21.43.734.0 ]--
r 100         return tre;
--[ 2021.09.21.15.21.43.759.0 ]--
r 100         return treu;
--[ 2021.09.21.15.21.44.609.0 ]--
r 100         return tre;
--[ 2021.09.21.15.21.44.819.0 ]--
r 100         return tr;
--[ 2021.09.21.15.21.45.596.0 ]--
r 100         return tru;
--[ 2021.09.21.15.21.45.721.0 ]--
r 100         return true;
--[ 2021.09.21.15.21.47.971.0 ]--
r 99         if (n >= 0 && n < this.board.length - 4) { return f; }
--[ 2021.09.21.15.21.48.864.0 ]--
r 99         if (n >= 0 && n < this.board.length - 4) { return f''; }
--[ 2021.09.21.15.21.49.813.0 ]--
r 99         if (n >= 0 && n < this.board.length - 4) { return f; }
--[ 2021.09.21.15.21.50.516.0 ]--
r 99         if (n >= 0 && n < this.board.length - 4) { return fa; }
--[ 2021.09.21.15.21.51.535.0 ]--
r 99         if (n >= 0 && n < this.board.length - 4) { return false; }
--[ 2021.09.21.15.21.55.303.0 ]--
r 99         if (n > 0 && n < this.board.length - 4) { return false; }
--[ 2021.09.21.15.21.55.454.0 ]--
r 99         if (n  0 && n < this.board.length - 4) { return false; }
--[ 2021.09.21.15.21.59.463.0 ]--
r 99         if (n < 0 && n < this.board.length - 4) { return false; }
--[ 2021.09.21.15.22.03.359.0 ]--
r 99         if (n < 0 & n < this.board.length - 4) { return false; }
--[ 2021.09.21.15.22.03.524.0 ]--
r 99         if (n < 0  n < this.board.length - 4) { return false; }
--[ 2021.09.21.15.22.04.363.0 ]--
r 99         if (n < 0 | n < this.board.length - 4) { return false; }
--[ 2021.09.21.15.22.04.577.0 ]--
r 99         if (n < 0 || n < this.board.length - 4) { return false; }
--[ 2021.09.21.15.22.07.258.0 ]--
r 99         if (n < 0 || n  this.board.length - 4) { return false; }
--[ 2021.09.21.15.22.07.848.0 ]--
r 99         if (n < 0 || n > this.board.length - 4) { return false; }
--[ 2021.09.21.15.22.08.536.0 ]--
r 99         if (n < 0 || n >= this.board.length - 4) { return false; }
--[ 2021.09.21.15.22.13.510.0 ]--
r 98     private boolean isNValidHex(int n) {
--[ 2021.09.21.15.22.13.929.0 ]--
r 98     private boolean isNoValidHex(int n) {
--[ 2021.09.21.15.22.14.374.0 ]--
r 98     private boolean isNotValidHex(int n) {
--[ 2021.09.21.15.22.19.986.0 ]--
r 98     private boolean isValidHex(int n) {
--[ 2021.09.21.15.22.44.566.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.22.57.009.0 ]--
r 22         if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.22.58.202.0 ]--
r 22         if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.22.59.137.0 ]--
r 27         if (!isValidHex(toIndex(row, col))) {throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.23.00.258.0 ]--
r 27         if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.23.02.578.0 ]--
r 33         if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.23.03.721.0 ]--
r 38         if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range");}
--[ 2021.09.21.15.23.04.865.0 ]--
r 38         if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.23.06.633.0 ]--
r 33         if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.23.13.298.0 ]--
r 28         if (this.board[toIndex(row,col)] == 0) {return false; }
--[ 2021.09.21.15.23.15.354.0 ]--
r 28         if (this.board[toIndex(row,col)] == 0) { return false; }
--[ 2021.09.21.15.23.30.664.0 ]--
r 27         if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range1"); }
--[ 2021.09.21.15.23.33.976.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.23.38.495.0 ]--
r 27         if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.23.46.619.0 ]--
r 39         if (this.isSet(row,col)) { throw new java.lang.IllegalArgumentException("Tile is already set");}
--[ 2021.09.21.15.23.47.810.0 ]--
r 39         if (this.isSet(row,col)) { throw new java.lang.IllegalArgumentException("Tile is already set"); }
--[ 2021.09.21.15.23.56.850.0 ]--
+ 27         
--[ 2021.09.21.15.23.58.411.0 ]--
r 27         S
--[ 2021.09.21.15.23.59.000.0 ]--
r 27         Sy
--[ 2021.09.21.15.23.59.526.0 ]--
r 27         System
--[ 2021.09.21.15.23.59.722.0 ]--
r 27         System.
--[ 2021.09.21.15.24.00.394.0 ]--
r 27         System.out
--[ 2021.09.21.15.24.01.594.0 ]--
r 27         System.out.
--[ 2021.09.21.15.24.02.023.0 ]--
r 27         System.out.p
--[ 2021.09.21.15.24.02.332.0 ]--
r 27         System.out.println
--[ 2021.09.21.15.24.02.347.0 ]--
r 27         System.out.println()
--[ 2021.09.21.15.24.02.357.0 ]--
r 27         System.out.println();
--[ 2021.09.21.15.24.03.586.0 ]--
r 27         System.out.println(r);
--[ 2021.09.21.15.24.03.696.0 ]--
r 27         System.out.println(ro);
--[ 2021.09.21.15.24.04.188.0 ]--
r 27         System.out.println(row);
--[ 2021.09.21.15.24.04.559.0 ]--
r 27         System.out.println(row,);
--[ 2021.09.21.15.24.04.600.0 ]--
r 27         System.out.println(row, );
--[ 2021.09.21.15.24.05.110.0 ]--
r 27         System.out.println(row, c);
--[ 2021.09.21.15.24.05.169.0 ]--
r 27         System.out.println(row, co);
--[ 2021.09.21.15.24.05.741.0 ]--
r 27         System.out.println(row, col);
--[ 2021.09.21.15.24.09.855.0 ]--
r 27         System.out.println(row col);
--[ 2021.09.21.15.24.11.023.0 ]--
r 27         System.out.println(row  col);
--[ 2021.09.21.15.24.11.685.0 ]--
r 27         System.out.println(row + col);
--[ 2021.09.21.15.24.23.232.0 ]--
r 27         System.out.println(row + co);
--[ 2021.09.21.15.24.23.737.0 ]--
r 27         System.out.println(row + c);
--[ 2021.09.21.15.24.23.762.0 ]--
r 27         System.out.println(row + );
--[ 2021.09.21.15.24.23.937.0 ]--
r 27         System.out.println(row +);
--[ 2021.09.21.15.24.24.094.0 ]--
r 27         System.out.println(row );
--[ 2021.09.21.15.24.24.250.0 ]--
r 27         System.out.println(row);
--[ 2021.09.21.15.24.24.401.0 ]--
r 27         System.out.println(ro);
--[ 2021.09.21.15.24.24.546.0 ]--
r 27         System.out.println(r);
--[ 2021.09.21.15.24.24.828.0 ]--
r 27         System.out.println();
--[ 2021.09.21.15.24.26.550.0 ]--
r 27         System.out.println(t);
--[ 2021.09.21.15.24.26.653.0 ]--
r 27         System.out.println(to);
--[ 2021.09.21.15.24.27.157.0 ]--
r 27         System.out.println(toIndex);
--[ 2021.09.21.15.24.27.174.0 ]--
r 27         System.out.println(toIndex());
--[ 2021.09.21.15.24.28.248.0 ]--
r 27         System.out.println(toIndex(r));
--[ 2021.09.21.15.24.28.313.0 ]--
r 27         System.out.println(toIndex(ro));
--[ 2021.09.21.15.24.29.934.0 ]--
r 27         System.out.println(toIndex(row, col));
--[ 2021.09.21.15.24.33.969.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.25.43.133.0 ]--
r 100         if (c) { return false; }
--[ 2021.09.21.15.25.44.553.0 ]--
r 100         if (n < 0 || n >= this.board.length - 4) { return false; }
--[ 2021.09.21.15.25.52.727.0 ]--
r 28         if (n < 0 || n >= this.board.length - 4) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.02.118.0 ]--
r 28         if (r) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.02.207.0 ]--
r 28         if (ro) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.03.173.0 ]--
r 28         if (row) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.04.123.0 ]--
r 28         if (row ) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.06.630.0 ]--
r 28         if (row >) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.09.360.0 ]--
r 28         if (row ) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.10.174.0 ]--
r 28         if (row <) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.10.544.0 ]--
r 28         if (row < ) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.10.715.0 ]--
r 28         if (row < 0) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.11.202.0 ]--
r 28         if (row < 0 ) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.11.897.0 ]--
r 28         if (row < 0 |) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.12.059.0 ]--
r 28         if (row < 0 ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.12.218.0 ]--
r 28         if (row < 0 || ) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.12.994.0 ]--
r 28         if (row < 0 || c) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.13.084.0 ]--
r 28         if (row < 0 || co) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.13.245.0 ]--
r 28         if (row < 0 || col) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.13.374.0 ]--
r 28         if (row < 0 || col ) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.15.800.0 ]--
r 28         if (row < 0 || col >) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.16.711.0 ]--
r 28         if (row < 0 || col >=) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.16.954.0 ]--
r 28         if (row < 0 || col >= ) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.17.689.0 ]--
r 28         if (row < 0 || col >= N) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.31.626.0 ]--
r 28         if (row < 0 || col >= N ) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.33.176.0 ]--
r 28         if (row < 0 || col >= N |) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.33.585.0 ]--
r 28         if (row < 0 || col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.36.841.0 ]--
r 28         if (row < 0 || rcol >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.36.975.0 ]--
r 28         if (row < 0 || rocol >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.37.820.0 ]--
r 28         if (row < 0 || rowcol >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.37.905.0 ]--
r 28         if (row < 0 || row col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.39.600.0 ]--
r 28         if (row < 0 || row >col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.40.458.0 ]--
r 28         if (row < 0 || row >=col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.40.695.0 ]--
r 28         if (row < 0 || row >= col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.41.393.0 ]--
r 28         if (row < 0 || row >= Ncol >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.41.622.0 ]--
r 28         if (row < 0 || row >= N col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.42.498.0 ]--
r 28         if (row < 0 || row >= N |col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.42.628.0 ]--
r 28         if (row < 0 || row >= N ||col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.43.105.0 ]--
r 28         if (row < 0 || row >= N || col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.44.172.0 ]--
r 28         if (row < 0 || row >= N || ccol >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.44.292.0 ]--
r 28         if (row < 0 || row >= N || cocol >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.44.452.0 ]--
r 28         if (row < 0 || row >= N || colcol >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.45.167.0 ]--
r 28         if (row < 0 || row >= N || col col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.47.473.0 ]--
r 28         if (row < 0 || row >= N || col <col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.49.073.0 ]--
r 28         if (row < 0 || row >= N || col < col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.49.187.0 ]--
r 28         if (row < 0 || row >= N || col < 0col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.49.362.0 ]--
r 28         if (row < 0 || row >= N || col < 0 col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.50.449.0 ]--
r 28         if (row < 0 || row >= N || col < 0 |col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.50.585.0 ]--
r 28         if (row < 0 || row >= N || col < 0 ||col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.50.853.0 ]--
r 28         if (row < 0 || row >= N || col < 0 || col >= N ||) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.54.057.0 ]--
r 28         if (row < 0 || row >= N || col < 0 || col >= N |) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.54.188.0 ]--
r 28         if (row < 0 || row >= N || col < 0 || col >= N ) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.54.356.0 ]--
r 28         if (row < 0 || row >= N || col < 0 || col >= N) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.15.26.58.953.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.27.08.228.0 ]--
- 27
--[ 2021.09.21.15.27.55.065.0 ]--
r 13         board[N-1] = 1;
--[ 2021.09.21.15.27.57.151.0 ]--
r 13         board[N*-1] = 1;
--[ 2021.09.21.15.27.58.615.0 ]--
r 13         board[N*N-1] = 1;
--[ 2021.09.21.15.28.03.882.0 ]--
r 13         board[N*N1] = 1;
--[ 2021.09.21.15.28.04.450.0 ]--
r 13         board[N*N+1] = 1;
--[ 2021.09.21.15.28.05.735.0 ]--
r 13         board[N*N+] = 1;
--[ 2021.09.21.15.28.06.389.0 ]--
r 13         board[N*N+0] = 1;
--[ 2021.09.21.15.28.13.940.0 ]--
r 14         board[N*N+0] = 2;
--[ 2021.09.21.15.28.15.295.0 ]--
r 14         board[N*N+] = 2;
--[ 2021.09.21.15.28.15.573.0 ]--
r 14         board[N*N+1] = 2;
--[ 2021.09.21.15.28.19.487.0 ]--
r 15         board[N*N+03] = 1;
--[ 2021.09.21.15.28.20.631.0 ]--
r 15         board[N*N+3] = 1;
--[ 2021.09.21.15.28.24.505.0 ]--
r 16         board[N*N+04] = 2;
--[ 2021.09.21.15.28.26.275.0 ]--
r 16         board[N*N+4] = 2;
--[ 2021.09.21.15.28.33.630.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.28.54.432.0 ]--
r 15         board[N*N+] = 1;
--[ 2021.09.21.15.28.54.763.0 ]--
r 15         board[N*N+2] = 1;
--[ 2021.09.21.15.28.55.393.0 ]--
r 16         board[N*N+] = 2;
--[ 2021.09.21.15.28.55.515.0 ]--
r 16         board[N*N+3] = 2;
--[ 2021.09.21.15.28.58.984.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.30.33.208.0 ]--
r 28         if (this.board[toIndex(row,col)] ) { return false; }
--[ 2021.09.21.15.30.33.530.0 ]--
r 28         if (this.board[toIndex(row,col)]) { return false; }
--[ 2021.09.21.15.30.44.140.0 ]--
r 28         if (this.board[toIndex(row,col)] == 0) { return false; }
--[ 2021.09.21.15.30.51.934.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.31.01.052.0 ]--
r 28         if (this.board[toIndex(row, col)] == 0) { return false; }
--[ 2021.09.21.15.31.05.668.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.31.31.093.0 ]--
r 95         return (row * this.board.length ) + col;
--[ 2021.09.21.15.31.31.260.0 ]--
r 95         return (row * this.board.length -) + col;
--[ 2021.09.21.15.31.31.604.0 ]--
r 95         return (row * this.board.length -4) + col;
--[ 2021.09.21.15.31.33.009.0 ]--
r 95         return (row * this.board.length - 4) + col;
--[ 2021.09.21.15.31.40.569.0 ]--
r 86         for (int row=0; row<this.board.length ; row++) {
--[ 2021.09.21.15.31.41.082.0 ]--
r 86         for (int row=0; row<this.board.length -; row++) {
--[ 2021.09.21.15.31.43.872.0 ]--
r 86         for (int row=0; row<this.board.length - ; row++) {
--[ 2021.09.21.15.31.44.226.0 ]--
r 86         for (int row=0; row<this.board.length - 4; row++) {
--[ 2021.09.21.15.31.45.188.0 ]--
r 87             for (int col=0; col<this.board.length ; col++) {
--[ 2021.09.21.15.31.45.793.0 ]--
r 87             for (int col=0; col<this.board.length -; col++) {
--[ 2021.09.21.15.31.46.242.0 ]--
r 87             for (int col=0; col<this.board.length - ; col++) {
--[ 2021.09.21.15.31.46.524.0 ]--
r 87             for (int col=0; col<this.board.length - 4; col++) {
--[ 2021.09.21.15.32.21.997.0 ]--
r 95         return (row * N) + col;
--[ 2021.09.21.15.32.33.030.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.33.32.809.0 ]--
r 17         uf = new QuickFindUF(this.board.length * N + 4);
--[ 2021.09.21.15.33.36.025.0 ]--
r 17         uf = new QuickFindUF(N * N + 4);
--[ 2021.09.21.15.33.40.225.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.34.16.445.0 ]--
r 86         for (int row=0; row<N; row++) {
--[ 2021.09.21.15.34.20.803.0 ]--
r 87             for (int col=0; col<N; col++) {
--[ 2021.09.21.15.34.27.994.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.35.55.957.0 ]--
r 75         if (uf.connected(this.board[N], this.board[board.length-3])) { return true; }
--[ 2021.09.21.15.35.56.579.0 ]--
r 75         if (uf.connected(this.board[N*], this.board[board.length-3])) { return true; }
--[ 2021.09.21.15.35.56.919.0 ]--
r 75         if (uf.connected(this.board[N*N], this.board[board.length-3])) { return true; }
--[ 2021.09.21.15.35.58.166.0 ]--
r 75         if (uf.connected(this.board[N*N+], this.board[board.length-3])) { return true; }
--[ 2021.09.21.15.35.58.494.0 ]--
r 75         if (uf.connected(this.board[N*N+0], this.board[board.length-3])) { return true; }
--[ 2021.09.21.15.36.06.234.0 ]--
r 75         if (uf.connected(this.board[N*N+0], this.board[N*N+0])) { return true; }
--[ 2021.09.21.15.36.07.467.0 ]--
r 75         if (uf.connected(this.board[N*N+0], this.board[N*N+])) { return true; }
--[ 2021.09.21.15.36.07.690.0 ]--
r 75         if (uf.connected(this.board[N*N+0], this.board[N*N+2])) { return true; }
--[ 2021.09.21.15.36.12.376.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[N*N+0])) { return true; }
--[ 2021.09.21.15.36.13.191.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[N*N+0+])) { return true; }
--[ 2021.09.21.15.36.13.482.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[N*N+0+3])) { return true; }
--[ 2021.09.21.15.36.15.241.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[N*N++3])) { return true; }
--[ 2021.09.21.15.36.15.323.0 ]--
r 80         if (uf.connected(this.board[board.length-2], this.board[N*N+3])) { return true; }
--[ 2021.09.21.15.36.19.353.0 ]--
r 80         if (uf.connected(this.board[N*N+0], this.board[N*N+3])) { return true; }
--[ 2021.09.21.15.36.20.208.0 ]--
r 80         if (uf.connected(this.board[N*N+], this.board[N*N+3])) { return true; }
--[ 2021.09.21.15.36.20.553.0 ]--
r 80         if (uf.connected(this.board[N*N+1], this.board[N*N+3])) { return true; }
--[ 2021.09.21.15.36.24.308.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.36.54.258.0 ]--
r 99         if (n < 0 || n >= N - 4) { return false; }
--[ 2021.09.21.15.36.55.024.0 ]--
r 99         if (n < 0 || n >= N* - 4) { return false; }
--[ 2021.09.21.15.36.55.890.0 ]--
r 99         if (n < 0 || n >= N*N - 4) { return false; }
--[ 2021.09.21.15.36.57.961.0 ]--
r 99         if (n < 0 || n >= N*N  4) { return false; }
--[ 2021.09.21.15.36.58.170.0 ]--
r 99         if (n < 0 || n >= N*N 4) { return false; }
--[ 2021.09.21.15.37.00.617.0 ]--
r 99         if (n < 0 || n >= N*N +4) { return false; }
--[ 2021.09.21.15.37.00.944.0 ]--
r 99         if (n < 0 || n >= N*N + 4) { return false; }
--[ 2021.09.21.15.37.02.793.0 ]--
r 99         if (n < 0 || n >= N*N+ 4) { return false; }
--[ 2021.09.21.15.37.03.427.0 ]--
r 99         if (n < 0 || n >= N*N+4) { return false; }
--[ 2021.09.21.15.37.19.898.0 ]--
r 61                 uf.union(toIndex(row, col), this.board[N*N+0]);
--[ 2021.09.21.15.37.26.702.0 ]--
r 63                 uf.union(toIndex(row, col), this.board[N*N+2]);
--[ 2021.09.21.15.37.33.052.0 ]--
r 67                 uf.union(toIndex(row, col), this.board[N*N+3]);
--[ 2021.09.21.15.37.39.596.0 ]--
r 69                 uf.union(toIndex(row, col), this.board[N*N+1]);
--[ 2021.09.21.15.37.49.897.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.38.21.754.0 ]--
r 75         if (!uf.connected(this.board[N*N+0], this.board[N*N+2])) { return true; }
--[ 2021.09.21.15.38.23.985.0 ]--
r 76         return t;
--[ 2021.09.21.15.38.24.195.0 ]--
r 76         return tr;
--[ 2021.09.21.15.38.24.341.0 ]--
r 76         return tru;
--[ 2021.09.21.15.38.24.502.0 ]--
r 76         return true;
--[ 2021.09.21.15.38.26.645.0 ]--
r 75         if (!uf.connected(this.board[N*N+0], this.board[N*N+2])) { return f; }
--[ 2021.09.21.15.38.27.177.0 ]--
r 75         if (!uf.connected(this.board[N*N+0], this.board[N*N+2])) { return fa; }
--[ 2021.09.21.15.38.27.437.0 ]--
r 75         if (!uf.connected(this.board[N*N+0], this.board[N*N+2])) { return fal; }
--[ 2021.09.21.15.38.27.507.0 ]--
r 75         if (!uf.connected(this.board[N*N+0], this.board[N*N+2])) { return fals; }
--[ 2021.09.21.15.38.27.726.0 ]--
r 75         if (!uf.connected(this.board[N*N+0], this.board[N*N+2])) { return falsew; }
--[ 2021.09.21.15.38.28.544.0 ]--
r 75         if (!uf.connected(this.board[N*N+0], this.board[N*N+2])) { return false; }
--[ 2021.09.21.15.38.29.988.0 ]--
r 80         if (uf.connected(this.board[N*N+1], this.board[N*N+3])) { return f; }
--[ 2021.09.21.15.38.30.919.0 ]--
r 80         if (uf.connected(this.board[N*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.38.33.076.0 ]--
r 81         return t;
--[ 2021.09.21.15.38.34.069.0 ]--
r 81         return true;
--[ 2021.09.21.15.38.36.378.0 ]--
r 80         if (!uf.connected(this.board[N*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.38.40.679.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.39.08.385.0 ]--
+ 38         
--[ 2021.09.21.15.39.09.508.0 ]--
r 38         S
--[ 2021.09.21.15.39.09.694.0 ]--
r 38         Sy
--[ 2021.09.21.15.39.10.442.0 ]--
r 38         System
--[ 2021.09.21.15.39.10.687.0 ]--
r 38         System.
--[ 2021.09.21.15.39.11.362.0 ]--
r 38         System
--[ 2021.09.21.15.39.11.460.0 ]--
r 38         Syste
--[ 2021.09.21.15.39.11.598.0 ]--
r 38         Syst
--[ 2021.09.21.15.39.11.748.0 ]--
r 38         Sys
--[ 2021.09.21.15.39.11.901.0 ]--
r 38         Sy
--[ 2021.09.21.15.39.12.084.0 ]--
r 38         S
--[ 2021.09.21.15.39.12.578.0 ]--
r 38         ST
--[ 2021.09.21.15.39.13.128.0 ]--
r 38         S
--[ 2021.09.21.15.39.13.295.0 ]--
r 38         St
--[ 2021.09.21.15.39.13.672.0 ]--
r 38         Std
--[ 2021.09.21.15.39.14.241.0 ]--
r 38         StdOut
--[ 2021.09.21.15.39.14.476.0 ]--
r 38         StdOut.
--[ 2021.09.21.15.39.15.335.0 ]--
r 38         StdOut.println
--[ 2021.09.21.15.39.15.350.0 ]--
r 38         StdOut.println()
--[ 2021.09.21.15.39.15.358.0 ]--
r 38         StdOut.println();
--[ 2021.09.21.15.39.16.043.0 ]--
r 38         StdOut.println(r);
--[ 2021.09.21.15.39.16.554.0 ]--
r 38         StdOut.println(ro);
--[ 2021.09.21.15.39.17.034.0 ]--
r 38         StdOut.println(row);
--[ 2021.09.21.15.39.19.161.0 ]--
r 38         StdOut.println(row );
--[ 2021.09.21.15.39.20.009.0 ]--
r 38         StdOut.println(row +);
--[ 2021.09.21.15.39.20.306.0 ]--
r 38         StdOut.println(row + );
--[ 2021.09.21.15.39.20.714.0 ]--
r 38         StdOut.println(row + "");
--[ 2021.09.21.15.39.20.942.0 ]--
r 38         StdOut.println(row + " ");
--[ 2021.09.21.15.39.22.253.0 ]--
r 38         StdOut.println(row + " " );
--[ 2021.09.21.15.39.22.886.0 ]--
r 38         StdOut.println(row + " " +);
--[ 2021.09.21.15.39.23.036.0 ]--
r 38         StdOut.println(row + " " + );
--[ 2021.09.21.15.39.23.666.0 ]--
r 38         StdOut.println(row + " " + c);
--[ 2021.09.21.15.39.23.765.0 ]--
r 38         StdOut.println(row + " " + co);
--[ 2021.09.21.15.39.23.944.0 ]--
r 38         StdOut.println(row + " " + col);
--[ 2021.09.21.15.39.27.933.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.40.18.841.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.42.30.819.0 ]--
+ 76         
--[ 2021.09.21.15.42.38.229.0 ]--
r 76         S
--[ 2021.09.21.15.42.38.629.0 ]--
r 76         St
--[ 2021.09.21.15.42.39.508.0 ]--
r 76         Std
--[ 2021.09.21.15.42.40.490.0 ]--
r 76         StdOut
--[ 2021.09.21.15.42.40.885.0 ]--
r 76         StdOut.
--[ 2021.09.21.15.42.41.630.0 ]--
r 76         StdOut.println
--[ 2021.09.21.15.42.41.644.0 ]--
r 76         StdOut.println()
--[ 2021.09.21.15.42.41.655.0 ]--
r 76         StdOut.println();
--[ 2021.09.21.15.42.50.834.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { return false; });
--[ 2021.09.21.15.42.54.053.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { return false; );
--[ 2021.09.21.15.42.54.190.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { return false;);
--[ 2021.09.21.15.42.54.330.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { return false);
--[ 2021.09.21.15.42.54.825.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { return fals);
--[ 2021.09.21.15.42.54.854.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { return fal);
--[ 2021.09.21.15.42.54.885.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { return fa);
--[ 2021.09.21.15.42.54.917.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { return f);
--[ 2021.09.21.15.42.54.947.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { return );
--[ 2021.09.21.15.42.54.976.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { return);
--[ 2021.09.21.15.42.55.007.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { retur);
--[ 2021.09.21.15.42.55.036.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { retu);
--[ 2021.09.21.15.42.55.069.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { ret);
--[ 2021.09.21.15.42.55.098.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { re);
--[ 2021.09.21.15.42.55.126.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { r);
--[ 2021.09.21.15.42.55.156.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) { );
--[ 2021.09.21.15.42.55.189.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) {);
--[ 2021.09.21.15.42.55.542.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])) );
--[ 2021.09.21.15.42.56.021.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2])));
--[ 2021.09.21.15.42.59.601.0 ]--
r 76         StdOut.println(uf.connected(this.board[N*N+0], this.board[N*N+2]));
--[ 2021.09.21.15.43.03.390.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.43.45.941.0 ]--
r 15         board[N*N+2] = ;
--[ 2021.09.21.15.43.46.247.0 ]--
r 15         board[N*N+2] = 3;
--[ 2021.09.21.15.43.47.342.0 ]--
r 16         board[N*N+3] = ;
--[ 2021.09.21.15.43.47.746.0 ]--
r 16         board[N*N+3] = 4;
--[ 2021.09.21.15.44.10.181.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.45.17.221.0 ]--
r 101         if (n < 0 || n >= N*N) { return false; }
--[ 2021.09.21.15.45.21.181.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.46.19.412.0 ]--
r 42         if (isValidHex(this.boardtoIndex(row+1,col)]) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.15.46.19.642.0 ]--
r 42         if (isValidHex(this.boartoIndex(row+1,col)]) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.15.46.19.823.0 ]--
r 42         if (isValidHex(this.boatoIndex(row+1,col)]) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.15.46.20.031.0 ]--
r 42         if (isValidHex(this.botoIndex(row+1,col)]) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.15.46.20.222.0 ]--
r 42         if (isValidHex(this.btoIndex(row+1,col)]) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.15.46.20.393.0 ]--
r 42         if (isValidHex(this.toIndex(row+1,col)]) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.15.46.20.582.0 ]--
r 42         if (isValidHex(thistoIndex(row+1,col)]) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.15.46.20.758.0 ]--
r 42         if (isValidHex(thitoIndex(row+1,col)]) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.15.46.20.951.0 ]--
r 42         if (isValidHex(thtoIndex(row+1,col)]) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.15.46.21.175.0 ]--
r 42         if (isValidHex(ttoIndex(row+1,col)]) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.15.46.21.375.0 ]--
r 42         if (isValidHex(toIndex(row+1,col)]) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.15.46.33.491.0 ]--
r 42         if (isValidHex(toIndex(row+1,col)) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.15.46.39.353.0 ]--
r 45         if (isValidHex(toIndex(row-1,col)]) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.15.46.40.839.0 ]--
r 45         if (isValidHex(toIndex(row-1,col)) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.15.46.46.915.0 ]--
r 48         if (isValidHex(toIndex(row,col+1)]) && this.board[toIndex(row,col+1)] == player) {
--[ 2021.09.21.15.46.48.959.0 ]--
r 48         if (isValidHex(toIndex(row,col+1)) && this.board[toIndex(row,col+1)] == player) {
--[ 2021.09.21.15.46.53.363.0 ]--
r 51         if (isValidHex(toIndex(row,col-1)]) && this.board[toIndex(row,col-1)] == player) {
--[ 2021.09.21.15.46.54.816.0 ]--
r 51         if (isValidHex(toIndex(row,col-1)) && this.board[toIndex(row,col-1)] == player) {
--[ 2021.09.21.15.46.58.227.0 ]--
r 54         if (isValidHex(toIndex(row+1,col-1)]) && this.board[toIndex(row+1,col-1)] == player) {
--[ 2021.09.21.15.46.59.552.0 ]--
r 54         if (isValidHex(toIndex(row+1,col-1)) && this.board[toIndex(row+1,col-1)] == player) {
--[ 2021.09.21.15.47.03.116.0 ]--
r 57         if (isValidHex(toIndex(row-1,col+1)]) && this.board[toIndex(row-1,col+1)] == player) {
--[ 2021.09.21.15.47.05.824.0 ]--
r 57         if (isValidHex(toIndex(row-1,col+1)) && this.board[toIndex(row-1,col+1)] == player) {
--[ 2021.09.21.15.47.16.307.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.47.39.402.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.48.19.638.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.48.36.798.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.48.53.656.0 ]--
- 76
--[ 2021.09.21.15.48.57.887.0 ]--
- 38
--[ 2021.09.21.15.49.03.114.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.49.26.443.0 ]--
r 15         board[N*N+2] = ;
--[ 2021.09.21.15.49.26.620.0 ]--
r 15         board[N*N+2] = 1;
--[ 2021.09.21.15.49.27.390.0 ]--
r 16         board[N*N+3] = ;
--[ 2021.09.21.15.49.27.645.0 ]--
r 16         board[N*N+3] = 2;
--[ 2021.09.21.15.49.31.675.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.49.35.989.0 ]--
r 16         board[N*N+3] = ;
--[ 2021.09.21.15.49.36.198.0 ]--
r 16         board[N*N+3] = 4;
--[ 2021.09.21.15.49.37.149.0 ]--
r 15         board[N*N+2] = ;
--[ 2021.09.21.15.49.37.620.0 ]--
r 15         board[N*N+2] = 3;
--[ 2021.09.21.15.49.55.376.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.52.11.046.0 ]--
r 17         uf = new QuickFindUF(N *N + 4);
--[ 2021.09.21.15.52.12.182.0 ]--
r 17         uf = new QuickFindUF(N *N +4);
--[ 2021.09.21.15.52.12.684.0 ]--
r 17         uf = new QuickFindUF(N *N+4);
--[ 2021.09.21.15.52.14.005.0 ]--
r 17         uf = new QuickFindUF(N*N+4);
--[ 2021.09.21.15.54.52.668.0 ]--
r 61                 uf.union(toIndex(row, col), tN*N+0]);
--[ 2021.09.21.15.54.52.788.0 ]--
r 61                 uf.union(toIndex(row, col), toN*N+0]);
--[ 2021.09.21.15.54.53.425.0 ]--
r 61                 uf.union(toIndex(row, col), toIndexN*N+0]);
--[ 2021.09.21.15.54.53.440.0 ]--
r 61                 uf.union(toIndex(row, col), toIndex()N*N+0]);
--[ 2021.09.21.15.54.57.367.0 ]--
r 61                 uf.union(toIndex(row, col), toIndex()N*N+0);
--[ 2021.09.21.15.55.00.076.0 ]--
r 61                 uf.union(toIndex(row, col), toIndex());
--[ 2021.09.21.15.55.02.115.0 ]--
r 61                 uf.union(toIndex(row, col), toIndex(N*N+0));
--[ 2021.09.21.15.55.12.223.0 ]--
r 61                 uf.union(toIndex(row, col), toIndex(N*N+0);
--[ 2021.09.21.15.55.14.366.0 ]--
r 61                 uf.union(toIndex(row, col), toIndexN*N+0);
--[ 2021.09.21.15.55.14.708.0 ]--
r 61                 uf.union(toIndex(row, col), toIndeN*N+0);
--[ 2021.09.21.15.55.14.919.0 ]--
r 61                 uf.union(toIndex(row, col), toIndN*N+0);
--[ 2021.09.21.15.55.15.100.0 ]--
r 61                 uf.union(toIndex(row, col), toInN*N+0);
--[ 2021.09.21.15.55.15.276.0 ]--
r 61                 uf.union(toIndex(row, col), toIN*N+0);
--[ 2021.09.21.15.55.15.446.0 ]--
r 61                 uf.union(toIndex(row, col), toN*N+0);
--[ 2021.09.21.15.55.15.757.0 ]--
r 61                 uf.union(toIndex(row, col), tN*N+0);
--[ 2021.09.21.15.55.16.053.0 ]--
r 61                 uf.union(toIndex(row, col), N*N+0);
--[ 2021.09.21.15.55.16.485.0 ]--
r 61                 uf.union(toIndex(row, col),N*N+0);
--[ 2021.09.21.15.55.19.575.0 ]--
r 63                 uf.union(toIndex(row, col), this.boardN*N+2]);
--[ 2021.09.21.15.55.19.782.0 ]--
r 63                 uf.union(toIndex(row, col), this.boarN*N+2]);
--[ 2021.09.21.15.55.19.966.0 ]--
r 63                 uf.union(toIndex(row, col), this.boaN*N+2]);
--[ 2021.09.21.15.55.20.149.0 ]--
r 63                 uf.union(toIndex(row, col), this.boN*N+2]);
--[ 2021.09.21.15.55.20.333.0 ]--
r 63                 uf.union(toIndex(row, col), this.bN*N+2]);
--[ 2021.09.21.15.55.20.508.0 ]--
r 63                 uf.union(toIndex(row, col), this.N*N+2]);
--[ 2021.09.21.15.55.20.748.0 ]--
r 63                 uf.union(toIndex(row, col), thisN*N+2]);
--[ 2021.09.21.15.55.20.972.0 ]--
r 63                 uf.union(toIndex(row, col), thiN*N+2]);
--[ 2021.09.21.15.55.22.096.0 ]--
r 63                 uf.union(toIndex(row, col), thN*N+2]);
--[ 2021.09.21.15.55.22.309.0 ]--
r 63                 uf.union(toIndex(row, col), tN*N+2]);
--[ 2021.09.21.15.55.22.566.0 ]--
r 63                 uf.union(toIndex(row, col), N*N+2]);
--[ 2021.09.21.15.55.23.662.0 ]--
r 63                 uf.union(toIndex(row, col), N*N+2);
--[ 2021.09.21.15.55.26.694.0 ]--
r 67                 uf.union(toIndex(row, col), N*N+3]);
--[ 2021.09.21.15.55.29.078.0 ]--
r 69                 uf.union(toIndex(row, col), N*N+1]);
--[ 2021.09.21.15.55.30.806.0 ]--
r 69                 uf.union(toIndex(row, col), N*N+1);
--[ 2021.09.21.15.55.32.149.0 ]--
r 67                 uf.union(toIndex(row, col), N*N+3);
--[ 2021.09.21.15.55.37.843.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.55.46.771.0 ]--
r 75         if (!uf.connected(this.boardN*N+0], this.board[N*N+2])) { return false; }
--[ 2021.09.21.15.55.46.965.0 ]--
r 75         if (!uf.connected(this.boarN*N+0], this.board[N*N+2])) { return false; }
--[ 2021.09.21.15.55.47.141.0 ]--
r 75         if (!uf.connected(this.boaN*N+0], this.board[N*N+2])) { return false; }
--[ 2021.09.21.15.55.47.309.0 ]--
r 75         if (!uf.connected(this.boN*N+0], this.board[N*N+2])) { return false; }
--[ 2021.09.21.15.55.47.485.0 ]--
r 75         if (!uf.connected(this.bN*N+0], this.board[N*N+2])) { return false; }
--[ 2021.09.21.15.55.47.677.0 ]--
r 75         if (!uf.connected(this.N*N+0], this.board[N*N+2])) { return false; }
--[ 2021.09.21.15.55.47.854.0 ]--
r 75         if (!uf.connected(thisN*N+0], this.board[N*N+2])) { return false; }
--[ 2021.09.21.15.55.48.013.0 ]--
r 75         if (!uf.connected(thiN*N+0], this.board[N*N+2])) { return false; }
--[ 2021.09.21.15.55.48.189.0 ]--
r 75         if (!uf.connected(thN*N+0], this.board[N*N+2])) { return false; }
--[ 2021.09.21.15.55.48.398.0 ]--
r 75         if (!uf.connected(tN*N+0], this.board[N*N+2])) { return false; }
--[ 2021.09.21.15.55.48.637.0 ]--
r 75         if (!uf.connected(N*N+0], this.board[N*N+2])) { return false; }
--[ 2021.09.21.15.55.50.288.0 ]--
r 75         if (!uf.connected(N*N+0, this.board[N*N+2])) { return false; }
--[ 2021.09.21.15.55.51.807.0 ]--
r 75         if (!uf.connected(N*N+0, this.boardN*N+2])) { return false; }
--[ 2021.09.21.15.55.52.308.0 ]--
r 75         if (!uf.connected(N*N+0, this.boarN*N+2])) { return false; }
--[ 2021.09.21.15.55.52.336.0 ]--
r 75         if (!uf.connected(N*N+0, this.boaN*N+2])) { return false; }
--[ 2021.09.21.15.55.52.365.0 ]--
r 75         if (!uf.connected(N*N+0, this.boN*N+2])) { return false; }
--[ 2021.09.21.15.55.52.390.0 ]--
r 75         if (!uf.connected(N*N+0, this.bN*N+2])) { return false; }
--[ 2021.09.21.15.55.52.421.0 ]--
r 75         if (!uf.connected(N*N+0, this.N*N+2])) { return false; }
--[ 2021.09.21.15.55.52.454.0 ]--
r 75         if (!uf.connected(N*N+0, thisN*N+2])) { return false; }
--[ 2021.09.21.15.55.52.482.0 ]--
r 75         if (!uf.connected(N*N+0, thiN*N+2])) { return false; }
--[ 2021.09.21.15.55.52.509.0 ]--
r 75         if (!uf.connected(N*N+0, thN*N+2])) { return false; }
--[ 2021.09.21.15.55.52.541.0 ]--
r 75         if (!uf.connected(N*N+0, tN*N+2])) { return false; }
--[ 2021.09.21.15.55.52.766.0 ]--
r 75         if (!uf.connected(N*N+0, N*N+2])) { return false; }
--[ 2021.09.21.15.55.53.989.0 ]--
r 75         if (!uf.connected(N*N+0, N*N+2]) { return false; }
--[ 2021.09.21.15.55.56.191.0 ]--
r 80         if (!uf.connected(this.boardN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.55.56.695.0 ]--
r 80         if (!uf.connected(this.boarN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.55.56.719.0 ]--
r 80         if (!uf.connected(this.boaN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.55.56.750.0 ]--
r 80         if (!uf.connected(this.boN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.55.56.778.0 ]--
r 80         if (!uf.connected(this.bN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.55.56.804.0 ]--
r 80         if (!uf.connected(this.N*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.55.56.834.0 ]--
r 80         if (!uf.connected(thisN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.55.56.866.0 ]--
r 80         if (!uf.connected(thiN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.55.56.899.0 ]--
r 80         if (!uf.connected(thN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.55.56.930.0 ]--
r 80         if (!uf.connected(tN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.55.56.957.0 ]--
r 80         if (!uf.connected(N*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.55.57.435.0 ]--
r 80         if (!uf.connectedN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.55.59.137.0 ]--
r 80         if (!uf.connected(this.board[N*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.00.408.0 ]--
r 80         if (!uf.connected(this.boardN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.00.909.0 ]--
r 80         if (!uf.connected(this.boarN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.00.936.0 ]--
r 80         if (!uf.connected(this.boaN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.00.966.0 ]--
r 80         if (!uf.connected(this.boN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.00.993.0 ]--
r 80         if (!uf.connected(this.bN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.01.025.0 ]--
r 80         if (!uf.connected(this.N*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.01.054.0 ]--
r 80         if (!uf.connected(thisN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.01.085.0 ]--
r 80         if (!uf.connected(thiN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.01.286.0 ]--
r 80         if (!uf.connected(thN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.01.486.0 ]--
r 80         if (!uf.connected(tN*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.01.816.0 ]--
r 80         if (!uf.connected(N*N+1], this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.03.229.0 ]--
r 80         if (!uf.connected(N*N+1] this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.04.208.0 ]--
r 80         if (!uf.connected(N*N+1 this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.04.802.0 ]--
r 80         if (!uf.connected(N*N+1, this.board[N*N+3])) { return false; }
--[ 2021.09.21.15.56.07.383.0 ]--
r 80         if (!uf.connected(N*N+1, this.board[N*N+3)) { return false; }
--[ 2021.09.21.15.56.08.352.0 ]--
r 80         if (!uf.connected(N*N+1, this.boardN*N+3)) { return false; }
--[ 2021.09.21.15.56.08.851.0 ]--
r 80         if (!uf.connected(N*N+1, this.boarN*N+3)) { return false; }
--[ 2021.09.21.15.56.08.883.0 ]--
r 80         if (!uf.connected(N*N+1, this.boaN*N+3)) { return false; }
--[ 2021.09.21.15.56.08.917.0 ]--
r 80         if (!uf.connected(N*N+1, this.boN*N+3)) { return false; }
--[ 2021.09.21.15.56.08.941.0 ]--
r 80         if (!uf.connected(N*N+1, this.bN*N+3)) { return false; }
--[ 2021.09.21.15.56.08.976.0 ]--
r 80         if (!uf.connected(N*N+1, this.N*N+3)) { return false; }
--[ 2021.09.21.15.56.09.020.0 ]--
r 80         if (!uf.connected(N*N+1, thisN*N+3)) { return false; }
--[ 2021.09.21.15.56.09.222.0 ]--
r 80         if (!uf.connected(N*N+1, thiN*N+3)) { return false; }
--[ 2021.09.21.15.56.09.438.0 ]--
r 80         if (!uf.connected(N*N+1, thN*N+3)) { return false; }
--[ 2021.09.21.15.56.09.629.0 ]--
r 80         if (!uf.connected(N*N+1, tN*N+3)) { return false; }
--[ 2021.09.21.15.56.09.899.0 ]--
r 80         if (!uf.connected(N*N+1, N*N+3)) { return false; }
--[ 2021.09.21.15.56.14.900.0 ]--
r 75         if (!uf.connected(N*N+0, N*N+2) { return false; }
--[ 2021.09.21.15.56.18.008.0 ]--
UpdateTree (AD): 0 1
- /out/production/P01_Hex/HexBoard.class

--[ 2021.09.21.15.56.18.012.0 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@eaa10ea
--[ 2021.09.21.15.56.24.198.0 ]--
r 75         if (!uf.connected(N*N+0, N*N+2)) { return false; }
--[ 2021.09.21.15.56.24.203.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2021.09.21.15.56.24.210.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2021.09.21.15.56.24.217.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2021.09.21.15.56.24.224.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2021.09.21.15.56.24.231.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2021.09.21.15.56.28.359.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P01_Hex/HexBoard.class

--[ 2021.09.21.15.56.28.363.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.15.58.51.188.0 ]--
+ 9     
--[ 2021.09.21.15.58.52.111.0 ]--
r 9     p
--[ 2021.09.21.15.58.52.243.0 ]--
r 9     pr
--[ 2021.09.21.15.58.52.345.0 ]--
r 9     pri
--[ 2021.09.21.15.58.52.582.0 ]--
r 9     priv
--[ 2021.09.21.15.58.53.001.0 ]--
r 9     private
--[ 2021.09.21.15.58.53.024.0 ]--
r 9     private 
--[ 2021.09.21.15.58.55.494.0 ]--
r 9     private i
--[ 2021.09.21.15.58.55.584.0 ]--
r 9     private in
--[ 2021.09.21.15.58.55.648.0 ]--
r 9     private int
--[ 2021.09.21.15.58.56.038.0 ]--
r 9     private int 
--[ 2021.09.21.15.59.00.552.0 ]--
r 9     private int l
--[ 2021.09.21.15.59.00.928.0 ]--
r 9     private int le
--[ 2021.09.21.15.59.05.438.0 ]--
r 9     private int lef
--[ 2021.09.21.15.59.05.728.0 ]--
r 9     private int left
--[ 2021.09.21.15.59.05.940.0 ]--
r 9     private int left 
--[ 2021.09.21.15.59.07.583.0 ]--
r 9     private int left
--[ 2021.09.21.15.59.10.118.0 ]--
r 9     private int lef
--[ 2021.09.21.15.59.10.625.0 ]--
r 9     private int le
--[ 2021.09.21.15.59.10.655.0 ]--
r 9     private int l
--[ 2021.09.21.15.59.10.686.0 ]--
r 9     private int 
--[ 2021.09.21.15.59.10.715.0 ]--
r 9     private int
--[ 2021.09.21.15.59.10.742.0 ]--
r 9     private in
--[ 2021.09.21.15.59.10.772.0 ]--
r 9     private i
--[ 2021.09.21.15.59.10.802.0 ]--
r 9     private 
--[ 2021.09.21.15.59.10.836.0 ]--
r 9     private
--[ 2021.09.21.15.59.10.861.0 ]--
r 9     privat
--[ 2021.09.21.15.59.10.894.0 ]--
r 9     priva
--[ 2021.09.21.15.59.11.104.0 ]--
r 9     priv
--[ 2021.09.21.15.59.11.294.0 ]--
r 9     pri
--[ 2021.09.21.15.59.11.463.0 ]--
r 9     pr
--[ 2021.09.21.15.59.11.629.0 ]--
r 9     p
--[ 2021.09.21.15.59.11.800.0 ]--
r 9     
--[ 2021.09.21.15.59.12.022.0 ]--
- 9
--[ 2021.09.21.16.00.06.998.0 ]--
r 34         return t;
--[ 2021.09.21.16.00.07.386.0 ]--
r 34         return tr;
--[ 2021.09.21.16.00.07.884.0 ]--
r 34         return true;
--[ 2021.09.21.16.01.18.750.0 ]--
r 65         } else  {
--[ 2021.09.21.16.01.18.934.0 ]--
r 65         } else i {
--[ 2021.09.21.16.01.19.092.0 ]--
r 65         } else if {
--[ 2021.09.21.16.01.19.858.0 ]--
r 65         } else if  {
--[ 2021.09.21.16.01.20.466.0 ]--
r 65         } else if () {
--[ 2021.09.21.16.01.21.106.0 ]--
r 65         } else if (p) {
--[ 2021.09.21.16.01.21.320.0 ]--
r 65         } else if (pl) {
--[ 2021.09.21.16.01.21.690.0 ]--
r 65         } else if (player) {
--[ 2021.09.21.16.01.22.246.0 ]--
r 65         } else if (player ) {
--[ 2021.09.21.16.01.22.954.0 ]--
r 65         } else if (player =) {
--[ 2021.09.21.16.01.23.113.0 ]--
r 65         } else if (player ==) {
--[ 2021.09.21.16.01.23.459.0 ]--
r 65         } else if (player == ) {
--[ 2021.09.21.16.01.23.726.0 ]--
r 65         } else if (player == 2) {
--[ 2021.09.21.16.01.28.396.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.16.01.59.856.0 ]--
r 34         return f;
--[ 2021.09.21.16.02.00.017.0 ]--
r 34         return fa;
--[ 2021.09.21.16.02.00.384.0 ]--
r 34         return fal;
--[ 2021.09.21.16.02.00.592.0 ]--
r 34         return fals;
--[ 2021.09.21.16.02.01.063.0 ]--
r 34         return false;
--[ 2021.09.21.16.02.50.240.0 ]--
r 15         board[N*N+2] = ;
--[ 2021.09.21.16.02.50.327.0 ]--
r 15         board[N*N+2] = 1;
--[ 2021.09.21.16.02.51.151.0 ]--
r 16         board[N*N+3] = ;
--[ 2021.09.21.16.02.51.296.0 ]--
r 16         board[N*N+3] = 2;
--[ 2021.09.21.16.02.54.986.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.16.03.06.828.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.16.06.17.541.0 ]--
r 99         if (n < 0 || n >= N*N+) { return false; }
--[ 2021.09.21.16.06.17.850.0 ]--
r 99         if (n < 0 || n >= N*N+4) { return false; }
--[ 2021.09.21.16.06.21.779.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.16.07.09.643.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.16.07.19.834.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.16.08.42.007.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.16.43.42.985.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.16.44.34.647.0 ]--
DisposeComponent
--[ 2021.09.21.17.59.04.628.0 ]--
NewLogger: P01_Hex
Version: 1.5
--[ 2021.09.21.17.59.04.670.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2021.09.21.17.59.04.676.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.09.21.17.59.04.680.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.09.21.17.59.04.684.0 ]--
InitFile: /.cos265


--[ 2021.09.21.17.59.04.688.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.21.17.59.04.699.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    private int[] board;
    private QuickFindUF uf;
    private int N;

    public HexBoard(int N) {
        if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= 0");}
        board = new int[N*N+4];
        board[N*N+0] = 1;
        board[N*N+1] = 2;
        board[N*N+2] = 1;
        board[N*N+3] = 2;
        uf = new QuickFindUF(N*N+4);
        this.N = N;
    }

    public int getPlayer(int row, int col) {
        if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return this.board[toIndex(row,col)];
    }
    
    public boolean isSet(int row, int col) {
        if (row < 0 || row >= N || col < 0 || col >= N) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.board[toIndex(row, col)] == 0) { return false; }
        return true;
    }

    public boolean isOnWinningPath(int row, int col) {
        if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return false;
    }

    public void setTile(int row, int col, int player) {
        if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.isSet(row,col)) { throw new java.lang.IllegalArgumentException("Tile is already set"); }
        this.board[toIndex(row,col)] = player;
        if (isValidHex(toIndex(row+1,col)) && this.board[toIndex(row+1,col)] == player) {
            uf.union(toIndex(row,col), toIndex(row+1,col));
        }
        if (isValidHex(toIndex(row-1,col)) && this.board[toIndex(row-1,col)] == player) {
            uf.union(toIndex(row,col), toIndex(row-1,col));
        }
        if (isValidHex(toIndex(row,col+1)) && this.board[toIndex(row,col+1)] == player) {
            uf.union(toIndex(row,col), toIndex(row,col+1));
        }
        if (isValidHex(toIndex(row,col-1)) && this.board[toIndex(row,col-1)] == player) {
            uf.union(toIndex(row,col), toIndex(row,col-1));
        }
        if (isValidHex(toIndex(row+1,col-1)) && this.board[toIndex(row+1,col-1)] == player) {
            uf.union(toIndex(row,col), toIndex(row+1,col-1));
        }
        if (isValidHex(toIndex(row-1,col+1)) && this.board[toIndex(row-1,col+1)] == player) {
            uf.union(toIndex(row,col), toIndex(row-1,col+1));
        }
        if (player == 1) {
            if (col == 0) {
                uf.union(toIndex(row, col),N*N+0);
            } else if (col == N-1) {
                uf.union(toIndex(row, col), N*N+2);
            }
        } else if (player == 2) {
            if (row == 0) {
                uf.union(toIndex(row, col), N*N+3);
            } else if (row == N-1) {
                uf.union(toIndex(row, col), N*N+1);
            }
        }
    }

    public boolean hasPlayer1Won() {
        if (!uf.connected(N*N+0, N*N+2)) { return false; }
        return true;
    }

    public boolean hasPlayer2Won() {
        if (!uf.connected(N*N+1, N*N+3)) { return false; }
        return true;
    }

    public int numberOfUnsetTiles() {
        int count = 0;
        for (int row=0; row<N; row++) {
            for (int col=0; col<N; col++) {
                if (!this.isSet(row, col)) {count++;}
            }
        }
        return count;
    }

    private int toIndex(int row, int col) {
        return (row * N) + col;
    }

    private boolean isValidHex(int n) {
        if (n < 0 || n >= N*N+4) { return false; }
        return true;
    }
}

--[ 2021.09.21.17.59.04.703.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    private int N0 = -1;
    private int N1 = -1;
    private int T = -1;
    private double prob[];
    public HexBoardStats(int N0, int N1, int T) {
        if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument(s)"); }
        this.N0 = N0;
        this.N1 = N1;
        this.T = T;
        this.prob = new double[N1-N0+1];
        for (int i=N0; i<=N1; i++) {
            for (int j=0; j<T; j++) {
                prob[i-N0] += playAGame(i) == 1 ? 1:0;
            }
            prob[i-N0] = prob[i-N0]/T;
        }
    }

    public int getN0() { return this.N0; }

    public int getN1() { return this.N1; }

    public int getT() { return this.T; }

    public double getP1WinProbabilityEstimate(int n) {
        if (n < N0 || n > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
        return this.prob[n-N0];
    }

    public double getP2WinProbabilityEstimate(int n) {
        return 1.0 - getP1WinProbabilityEstimate(n);
    }

    private static int playAGame(int N) {
        HexBoard board = new HexBoard(N);
        int player = 1;
        while(!board.hasPlayer1Won() && !board.hasPlayer2Won()) {
            int row = StdRandom.uniform(N);
            int col = StdRandom.uniform(N);
            if (board.isSet(row, col)) { continue; }
            board.setTile(row, col, player);
            player = player == 1 ? 2:1;
        }
        return board.hasPlayer1Won() ? 1:0;
    }

    private void printReport() {
        StdOut.println("T = " + T);
        for (int N=N0; N<N1; N++) {
            StdOut.print("N = " + N + " ");
            StdOut.print("P1 = " + getP1WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP1WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.print("P2 = " + getP2WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP2WinProbabilityEstimate(N)*T + ")" + " ");
        }
    }

    public static void main(String[] args) {
        int N0 = Integer.parseInt(args[0]);
        int N1 = Integer.parseInt(args[1]);
        int T = Integer.parseInt(args[2]);
        HexBoardStats hbs = new HexBoardStats(10,15,10);
        hbs.printReport();
    }
}

--[ 2021.09.21.17.59.47.366.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.18.00.45.702.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.18.01.50.049.0 ]--
:/src/HexBoard.java
+ 75         
--[ 2021.09.21.18.01.52.188.0 ]--
r 75         f
--[ 2021.09.21.18.01.53.422.0 ]--
r 75         
--[ 2021.09.21.18.01.53.889.0 ]--
r 75         u
--[ 2021.09.21.18.01.54.089.0 ]--
r 75         uf
--[ 2021.09.21.18.01.54.753.0 ]--
r 75         u
--[ 2021.09.21.18.01.54.921.0 ]--
r 75         
--[ 2021.09.21.18.01.56.750.0 ]--
r 75         S
--[ 2021.09.21.18.01.57.305.0 ]--
r 75         St
--[ 2021.09.21.18.01.57.530.0 ]--
r 75         Std
--[ 2021.09.21.18.01.58.141.0 ]--
r 75         StdOut
--[ 2021.09.21.18.01.58.370.0 ]--
r 75         StdOut.
--[ 2021.09.21.18.01.59.376.0 ]--
r 75         StdOut.println
--[ 2021.09.21.18.01.59.394.0 ]--
r 75         StdOut.println()
--[ 2021.09.21.18.01.59.401.0 ]--
r 75         StdOut.println();
--[ 2021.09.21.18.02.00.582.0 ]--
r 75         StdOut.println(f);
--[ 2021.09.21.18.02.00.592.0 ]--
r 75         StdOut.println(fi);
--[ 2021.09.21.18.02.00.696.0 ]--
r 75         StdOut.println(fin);
--[ 2021.09.21.18.02.00.906.0 ]--
r 75         StdOut.println(find);
--[ 2021.09.21.18.02.01.334.0 ]--
r 75         StdOut.println(find.);
--[ 2021.09.21.18.02.05.742.0 ]--
r 75         StdOut.println(find);
--[ 2021.09.21.18.02.06.031.0 ]--
r 75         StdOut.println(fin);
--[ 2021.09.21.18.02.06.191.0 ]--
r 75         StdOut.println(fi);
--[ 2021.09.21.18.02.06.379.0 ]--
r 75         StdOut.println(f);
--[ 2021.09.21.18.02.06.660.0 ]--
r 75         StdOut.println();
--[ 2021.09.21.18.02.07.257.0 ]--
r 75         StdOut.println(u);
--[ 2021.09.21.18.02.07.410.0 ]--
r 75         StdOut.println(uf);
--[ 2021.09.21.18.02.07.737.0 ]--
r 75         StdOut.println(uf.);
--[ 2021.09.21.18.02.08.429.0 ]--
r 75         StdOut.println(uf.f);
--[ 2021.09.21.18.02.09.093.0 ]--
r 75         StdOut.println(uf.find);
--[ 2021.09.21.18.02.09.105.0 ]--
r 75         StdOut.println(uf.find());
--[ 2021.09.21.18.02.14.455.0 ]--
r 75         StdOut.println(uf.find(N));
--[ 2021.09.21.18.02.15.252.0 ]--
r 75         StdOut.println(uf.find(N*));
--[ 2021.09.21.18.02.16.068.0 ]--
r 75         StdOut.println(uf.find(N*N));
--[ 2021.09.21.18.02.18.113.0 ]--
r 75         StdOut.println(uf.find(N*N ));
--[ 2021.09.21.18.02.18.490.0 ]--
r 75         StdOut.println(uf.find(N*N +));
--[ 2021.09.21.18.02.18.793.0 ]--
r 75         StdOut.println(uf.find(N*N + ));
--[ 2021.09.21.18.02.20.784.0 ]--
r 75         StdOut.println(uf.find(N*N + ""));
--[ 2021.09.21.18.02.21.066.0 ]--
r 75         StdOut.println(uf.find(N*N + " "));
--[ 2021.09.21.18.02.22.937.0 ]--
r 75         StdOut.println(uf.find(N*N + " " ));
--[ 2021.09.21.18.02.23.464.0 ]--
r 75         StdOut.println(uf.find(N*N + " " +));
--[ 2021.09.21.18.02.23.847.0 ]--
r 75         StdOut.println(uf.find(N*N + " " + ));
--[ 2021.09.21.18.02.25.126.0 ]--
r 75         StdOut.println(uf.find(N*N + " " + N));
--[ 2021.09.21.18.02.27.236.0 ]--
r 75         StdOut.println(uf.find(N*N + " " + N*));
--[ 2021.09.21.18.02.27.829.0 ]--
r 75         StdOut.println(uf.find(N*N + " " + N*N));
--[ 2021.09.21.18.02.30.706.0 ]--
r 75         StdOut.println(uf.find(N*N + " " + N*N+));
--[ 2021.09.21.18.02.31.383.0 ]--
r 75         StdOut.println(uf.find(N*N + " " + N*N+2));
--[ 2021.09.21.18.02.40.447.0 ]--
r 75         StdOut.println(uf.find(N*N + " "  N*N+2));
--[ 2021.09.21.18.02.40.585.0 ]--
r 75         StdOut.println(uf.find(N*N + " " N*N+2));
--[ 2021.09.21.18.02.40.720.0 ]--
r 75         StdOut.println(uf.find(N*N + "  N*N+2));
--[ 2021.09.21.18.02.41.098.0 ]--
r 75         StdOut.println(uf.find(N*N + " N*N+2));
--[ 2021.09.21.18.02.41.207.0 ]--
r 75         StdOut.println(uf.find(N*N +  N*N+2));
--[ 2021.09.21.18.02.41.359.0 ]--
r 75         StdOut.println(uf.find(N*N + N*N+2));
--[ 2021.09.21.18.02.41.553.0 ]--
r 75         StdOut.println(uf.find(N*N  N*N+2));
--[ 2021.09.21.18.02.41.884.0 ]--
r 75         StdOut.println(uf.find(N*N N*N+2));
--[ 2021.09.21.18.02.43.109.0 ]--
r 75         StdOut.println(uf.find(N*N, N*N+2));
--[ 2021.09.21.18.02.48.872.0 ]--
r 75         StdOut.println(uf.find(N*N,N*N+2));
--[ 2021.09.21.18.02.49.069.0 ]--
r 75         StdOut.println(uf.find(N*NN*N+2));
--[ 2021.09.21.18.02.50.958.0 ]--
r 75         StdOut.println(uf.find(N*N)N*N+2));
--[ 2021.09.21.18.02.51.290.0 ]--
r 75         StdOut.println(uf.find(N*N))N*N+2));
--[ 2021.09.21.18.02.51.976.0 ]--
+ 75         StdOut.println(uf.find(N*N))
r 76         N*N+2));
--[ 2021.09.21.18.02.52.025.0 ]--
r 76     N*N+2));
--[ 2021.09.21.18.02.53.712.0 ]--
r 76         N*N+2));
--[ 2021.09.21.18.02.54.890.0 ]--
r 76         SN*N+2));
--[ 2021.09.21.18.02.56.181.0 ]--
r 76         StN*N+2));
--[ 2021.09.21.18.02.56.995.0 ]--
r 76         StdN*N+2));
--[ 2021.09.21.18.02.58.673.0 ]--
r 76         StdON*N+2));
--[ 2021.09.21.18.02.58.973.0 ]--
r 76         StdOuN*N+2));
--[ 2021.09.21.18.02.59.332.0 ]--
r 76         StdOutN*N+2));
--[ 2021.09.21.18.02.59.609.0 ]--
r 76         StdOut.N*N+2));
--[ 2021.09.21.18.02.59.929.0 ]--
r 76         StdOut. N*N+2));
--[ 2021.09.21.18.03.01.920.0 ]--
r 76         StdOut.p N*N+2));
--[ 2021.09.21.18.03.03.808.0 ]--
r 76         StdOut.println N*N+2));
--[ 2021.09.21.18.03.03.817.0 ]--
r 76         StdOut.println() N*N+2));
--[ 2021.09.21.18.03.03.829.0 ]--
r 76         StdOut.println(); N*N+2));
--[ 2021.09.21.18.03.06.897.0 ]--
r 76         StdOut.println() N*N+2));
--[ 2021.09.21.18.03.07.057.0 ]--
r 76         StdOut.println( N*N+2));
--[ 2021.09.21.18.03.08.182.0 ]--
r 76         StdOut.println(N*N+2));
--[ 2021.09.21.18.03.11.508.0 ]--
r 76         StdOut.println(uN*N+2));
--[ 2021.09.21.18.03.11.791.0 ]--
r 76         StdOut.println(ufN*N+2));
--[ 2021.09.21.18.03.12.018.0 ]--
r 76         StdOut.println(uf.N*N+2));
--[ 2021.09.21.18.03.12.831.0 ]--
r 76         StdOut.println(uf.findN*N+2));
--[ 2021.09.21.18.03.12.841.0 ]--
r 76         StdOut.println(uf.find()N*N+2));
--[ 2021.09.21.18.03.14.391.0 ]--
r 76         StdOut.println(uf.find(N*N+2));
--[ 2021.09.21.18.03.18.105.0 ]--
r 75         StdOut.println(uf.find(N*N));
--[ 2021.09.21.18.03.23.744.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.18.07.54.595.0 ]--
+ 72         
--[ 2021.09.21.18.07.56.252.0 ]--
r 72         S
--[ 2021.09.21.18.07.57.345.0 ]--
r 72         St
--[ 2021.09.21.18.07.57.965.0 ]--
r 72         Std
--[ 2021.09.21.18.07.58.570.0 ]--
r 72         StdOut
--[ 2021.09.21.18.07.58.814.0 ]--
r 72         StdOut.
--[ 2021.09.21.18.07.59.573.0 ]--
r 72         StdOut.println
--[ 2021.09.21.18.07.59.581.0 ]--
r 72         StdOut.println()
--[ 2021.09.21.18.07.59.588.0 ]--
r 72         StdOut.println();
--[ 2021.09.21.18.08.00.744.0 ]--
r 72         StdOut.println("");
--[ 2021.09.21.18.08.03.459.0 ]--
r 72         StdOut.println("m");
--[ 2021.09.21.18.08.03.568.0 ]--
r 72         StdOut.println("me");
--[ 2021.09.21.18.08.03.720.0 ]--
r 72         StdOut.println("meo");
--[ 2021.09.21.18.08.03.875.0 ]--
r 72         StdOut.println("meow");
--[ 2021.09.21.18.08.05.649.0 ]--
r 72         StdOut.println("meow" );
--[ 2021.09.21.18.08.06.591.0 ]--
r 72         StdOut.println("meow" +);
--[ 2021.09.21.18.08.07.002.0 ]--
r 72         StdOut.println("meow" + );
--[ 2021.09.21.18.08.09.163.0 ]--
r 72         StdOut.println("meow" + u);
--[ 2021.09.21.18.08.09.367.0 ]--
r 72         StdOut.println("meow" + uf);
--[ 2021.09.21.18.08.09.558.0 ]--
r 72         StdOut.println("meow" + uf.);
--[ 2021.09.21.18.08.10.247.0 ]--
r 72         StdOut.println("meow" + uf.f);
--[ 2021.09.21.18.08.10.840.0 ]--
r 72         StdOut.println("meow" + uf.find);
--[ 2021.09.21.18.08.10.856.0 ]--
r 72         StdOut.println("meow" + uf.find());
--[ 2021.09.21.18.08.13.109.0 ]--
r 72         StdOut.println("meow" + uf.find(t));
--[ 2021.09.21.18.08.13.337.0 ]--
r 72         StdOut.println("meow" + uf.find(to));
--[ 2021.09.21.18.08.13.974.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex));
--[ 2021.09.21.18.08.13.987.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex()));
--[ 2021.09.21.18.08.15.218.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex(r)));
--[ 2021.09.21.18.08.15.805.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex(row)));
--[ 2021.09.21.18.08.16.874.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex(row,)));
--[ 2021.09.21.18.08.18.031.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex(row, )));
--[ 2021.09.21.18.08.18.285.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex(row, c)));
--[ 2021.09.21.18.08.18.863.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex(row, col)));
--[ 2021.09.21.18.08.25.369.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.18.09.38.764.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.18.10.25.958.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.18.10.53.040.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.18.13.00.684.0 ]--
r 61                 uf.union(utoIndex(row, col),N*N+0);
--[ 2021.09.21.18.13.01.101.0 ]--
r 61                 uf.union(uftoIndex(row, col),N*N+0);
--[ 2021.09.21.18.13.03.865.0 ]--
r 61                 uf.union(uf.findtoIndex(row, col),N*N+0);
--[ 2021.09.21.18.13.03.897.0 ]--
r 61                 uf.union(uf;toIndex(row, col),N*N+0);
--[ 2021.09.21.18.13.03.927.0 ]--
r 61                 uf.union(uf.findtoIndex(row, col),N*N+0);
--[ 2021.09.21.18.13.03.939.0 ]--
r 61                 uf.union(uf.find()toIndex(row, col),N*N+0);
--[ 2021.09.21.18.13.03.996.0 ]--
r 61                 uf.union(uf.find(), toIndex(row, col),N*N+0);
--[ 2021.09.21.18.13.05.633.0 ]--
r 61                 uf.union(uf.find() toIndex(row, col),N*N+0);
--[ 2021.09.21.18.13.05.868.0 ]--
r 61                 uf.union(uf.find( toIndex(row, col),N*N+0);
--[ 2021.09.21.18.13.07.194.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col),N*N+0);
--[ 2021.09.21.18.13.10.478.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col)),N*N+0);
--[ 2021.09.21.18.13.18.099.0 ]--
r 63                 uf.union(toIndex(row, col)), N*N+2);
--[ 2021.09.21.18.13.21.494.0 ]--
r 63                 uf.union(utoIndex(row, col)), N*N+2);
--[ 2021.09.21.18.13.21.719.0 ]--
r 63                 uf.union(uftoIndex(row, col)), N*N+2);
--[ 2021.09.21.18.13.21.937.0 ]--
r 63                 uf.union(uf.toIndex(row, col)), N*N+2);
--[ 2021.09.21.18.13.22.340.0 ]--
r 63                 uf.union(uf.ftoIndex(row, col)), N*N+2);
--[ 2021.09.21.18.13.23.883.0 ]--
r 63                 uf.union(uf.fitoIndex(row, col)), N*N+2);
--[ 2021.09.21.18.13.24.055.0 ]--
r 63                 uf.union(uf.fintoIndex(row, col)), N*N+2);
--[ 2021.09.21.18.13.24.214.0 ]--
r 63                 uf.union(uf.findtoIndex(row, col)), N*N+2);
--[ 2021.09.21.18.13.24.695.0 ]--
r 63                 uf.union(uf.find(toIndex(row, col)), N*N+2);
--[ 2021.09.21.18.13.31.737.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.18.13.55.420.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col)),uN*N+0);
--[ 2021.09.21.18.13.55.928.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col)),ufN*N+0);
--[ 2021.09.21.18.13.56.391.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col)),uf.N*N+0);
--[ 2021.09.21.18.13.56.687.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col)),uf.fN*N+0);
--[ 2021.09.21.18.13.56.849.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col)),uf.fiN*N+0);
--[ 2021.09.21.18.13.57.003.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col)),uf.finN*N+0);
--[ 2021.09.21.18.13.57.663.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col)),uf.findN*N+0);
--[ 2021.09.21.18.13.58.427.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col)),uf.find(N*N+0);
--[ 2021.09.21.18.14.00.934.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col)),uf.find(N*N+0));
--[ 2021.09.21.18.14.04.736.0 ]--
r 63                 uf.union(uf.find(toIndex(row, col)), N*N+2));
--[ 2021.09.21.18.14.07.119.0 ]--
r 63                 uf.union(uf.find(toIndex(row, col)), uN*N+2));
--[ 2021.09.21.18.14.07.234.0 ]--
r 63                 uf.union(uf.find(toIndex(row, col)), ufN*N+2));
--[ 2021.09.21.18.14.07.456.0 ]--
r 63                 uf.union(uf.find(toIndex(row, col)), uf.N*N+2));
--[ 2021.09.21.18.14.07.729.0 ]--
r 63                 uf.union(uf.find(toIndex(row, col)), uf.fN*N+2));
--[ 2021.09.21.18.14.07.898.0 ]--
r 63                 uf.union(uf.find(toIndex(row, col)), uf.fiN*N+2));
--[ 2021.09.21.18.14.08.027.0 ]--
r 63                 uf.union(uf.find(toIndex(row, col)), uf.finN*N+2));
--[ 2021.09.21.18.14.08.181.0 ]--
r 63                 uf.union(uf.find(toIndex(row, col)), uf.findN*N+2));
--[ 2021.09.21.18.14.08.583.0 ]--
r 63                 uf.union(uf.find(toIndex(row, col)), uf.find(N*N+2));
--[ 2021.09.21.18.14.13.264.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.18.14.36.339.0 ]--
- 76
r 76 
--[ 2021.09.21.18.14.36.853.0 ]--
- 76
--[ 2021.09.21.18.14.43.597.0 ]--
+ 76 
--[ 2021.09.21.18.14.43.738.0 ]--
+ 76         StdOut.println(uf.find(N*N));
r 77         StdOut.println(uf.find(N*N+2));
--[ 2021.09.21.18.14.44.044.0 ]--
r 63                 uf.union(uf.find(toIndex(row, col)), N*N+2));
--[ 2021.09.21.18.14.44.393.0 ]--
r 63                 uf.union(uf.find(toIndex(row, col)), N*N+2);
--[ 2021.09.21.18.14.45.062.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col)),uf.find(N*N+0);
--[ 2021.09.21.18.14.45.123.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col)),N*N+0);
--[ 2021.09.21.18.14.45.183.0 ]--
r 63                 uf.union(toIndex(row, col)), N*N+2);
--[ 2021.09.21.18.14.45.241.0 ]--
r 63                 uf.union(toIndex(row, col), N*N+2);
--[ 2021.09.21.18.14.45.304.0 ]--
r 61                 uf.union(uf.find(toIndex(row, col),N*N+0);
--[ 2021.09.21.18.14.45.364.0 ]--
r 61                 uf.union(uf.find( toIndex(row, col),N*N+0);
--[ 2021.09.21.18.14.45.623.0 ]--
r 61                 uf.union(uf.find(), toIndex(row, col),N*N+0);
--[ 2021.09.21.18.14.46.155.0 ]--
r 61                 uf.union(uftoIndex(row, col),N*N+0);
--[ 2021.09.21.18.14.46.184.0 ]--
r 61                 uf.union(toIndex(row, col),N*N+0);
--[ 2021.09.21.18.14.46.242.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex(row, c)));
--[ 2021.09.21.18.14.46.274.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex(row)));
--[ 2021.09.21.18.14.46.307.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex(r)));
--[ 2021.09.21.18.14.46.616.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex()));
--[ 2021.09.21.18.14.47.152.0 ]--
r 72         StdOut.println("meow" + uf.find(to));
--[ 2021.09.21.18.14.47.467.0 ]--
r 72         StdOut.println("meow" + uf.find());
--[ 2021.09.21.18.14.48.525.0 ]--
r 72         StdOut.println("meow" + uf.find(to));
--[ 2021.09.21.18.14.48.768.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex()));
--[ 2021.09.21.18.14.48.994.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex(r)));
--[ 2021.09.21.18.14.49.299.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex(row)));
--[ 2021.09.21.18.14.49.552.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex(row, c)));
--[ 2021.09.21.18.14.49.799.0 ]--
r 72         StdOut.println("meow" + uf.find(toIndex(row, col)));
--[ 2021.09.21.18.14.50.339.0 ]--
r 61                 uf.union(uftoIndex(row, col),N*N+0);
--[ 2021.09.21.18.14.51.194.0 ]--
r 61                 uf.union(toIndex(row, col),N*N+0);
--[ 2021.09.21.18.15.05.288.0 ]--
- 76
r 76 
--[ 2021.09.21.18.15.06.224.0 ]--
- 76
--[ 2021.09.21.18.15.08.258.0 ]--
+ 77         
--[ 2021.09.21.18.15.09.524.0 ]--
+ 77                 StdOut.println(uf.find(N*N));
r 78         StdOut.println(uf.find(N*N+2));
--[ 2021.09.21.18.15.09.554.0 ]--
r 77         StdOut.println(uf.find(N*N));
--[ 2021.09.21.18.15.15.155.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.18.17.55.399.0 ]--
r 102         if (n < 0 || n >= N*N+) { return false; }
--[ 2021.09.21.18.17.55.552.0 ]--
r 102         if (n < 0 || n >= N*N) { return false; }
--[ 2021.09.21.18.18.01.390.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.18.59.00.748.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.18.59.56.899.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.19.47.10.326.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.19.47.43.775.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.19.51.07.488.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.19.51.15.125.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.19.54.28.423.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.19.54.43.726.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.19.58.10.496.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.19.58.18.791.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.19.58.30.996.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.19.59.17.504.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.19.59.36.888.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.19.59.52.362.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.00.28.872.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.00.49.395.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.01.04.069.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.01.26.590.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.01.43.758.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.01.55.578.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.02.02.713.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.02.17.369.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.02.48.619.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.02.57.858.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.03.21.499.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.07.40.383.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.07.56.067.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.20.10.49.831.0 ]--
- 77
r 77 
--[ 2021.09.21.20.10.50.819.0 ]--
- 77
--[ 2021.09.21.22.21.56.207.0 ]--
NewLogger: P01_Hex
Version: 1.5
--[ 2021.09.21.22.21.56.264.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2021.09.21.22.21.56.268.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.09.21.22.21.56.271.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.09.21.22.21.56.275.0 ]--
InitFile: /.cos265


--[ 2021.09.21.22.21.56.278.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.21.22.21.56.281.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    private int[] board;
    private QuickFindUF uf;
    private int N;

    public HexBoard(int N) {
        if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= 0");}
        board = new int[N*N+4];
        board[N*N+0] = 1;
        board[N*N+1] = 2;
        board[N*N+2] = 1;
        board[N*N+3] = 2;
        uf = new QuickFindUF(N*N+4);
        this.N = N;
    }

    public int getPlayer(int row, int col) {
        if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return this.board[toIndex(row,col)];
    }
    
    public boolean isSet(int row, int col) {
        if (row < 0 || row >= N || col < 0 || col >= N) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.board[toIndex(row, col)] == 0) { return false; }
        return true;
    }

    public boolean isOnWinningPath(int row, int col) {
        if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return false;
    }

    public void setTile(int row, int col, int player) {
        if (!isValidHex(toIndex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.isSet(row,col)) { throw new java.lang.IllegalArgumentException("Tile is already set"); }
        this.board[toIndex(row,col)] = player;
        if (isValidHex(toIndex(row+1,col)) && this.board[toIndex(row+1,col)] == player) {
            uf.union(toIndex(row,col), toIndex(row+1,col));
        }
        if (isValidHex(toIndex(row-1,col)) && this.board[toIndex(row-1,col)] == player) {
            uf.union(toIndex(row,col), toIndex(row-1,col));
        }
        if (isValidHex(toIndex(row,col+1)) && this.board[toIndex(row,col+1)] == player) {
            uf.union(toIndex(row,col), toIndex(row,col+1));
        }
        if (isValidHex(toIndex(row,col-1)) && this.board[toIndex(row,col-1)] == player) {
            uf.union(toIndex(row,col), toIndex(row,col-1));
        }
        if (isValidHex(toIndex(row+1,col-1)) && this.board[toIndex(row+1,col-1)] == player) {
            uf.union(toIndex(row,col), toIndex(row+1,col-1));
        }
        if (isValidHex(toIndex(row-1,col+1)) && this.board[toIndex(row-1,col+1)] == player) {
            uf.union(toIndex(row,col), toIndex(row-1,col+1));
        }
        if (player == 1) {
            if (col == 0) {
                uf.union(toIndex(row, col),N*N+0);
            } else if (col == N-1) {
                uf.union(toIndex(row, col), N*N+2);
            }
        } else if (player == 2) {
            if (row == 0) {
                uf.union(toIndex(row, col), N*N+3);
            } else if (row == N-1) {
                uf.union(toIndex(row, col), N*N+1);
            }
        }
        StdOut.println("meow" + uf.find(toIndex(row, col)));
    }

    public boolean hasPlayer1Won() {
        if (!uf.connected(N*N+0, N*N+2)) { return false; }
        return true;
    }

    public boolean hasPlayer2Won() {
        if (!uf.connected(N*N+1, N*N+3)) { return false; }
        return true;
    }

    public int numberOfUnsetTiles() {
        int count = 0;
        for (int row=0; row<N; row++) {
            for (int col=0; col<N; col++) {
                if (!this.isSet(row, col)) {count++;}
            }
        }
        return count;
    }

    private int toIndex(int row, int col) {
        return (row * N) + col;
    }

    private boolean isValidHex(int n) {
        if (n < 0 || n >= N*N) { return false; }
        return true;
    }
}

--[ 2021.09.21.22.21.56.284.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    private int N0 = -1;
    private int N1 = -1;
    private int T = -1;
    private double prob[];
    public HexBoardStats(int N0, int N1, int T) {
        if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument(s)"); }
        this.N0 = N0;
        this.N1 = N1;
        this.T = T;
        this.prob = new double[N1-N0+1];
        for (int i=N0; i<=N1; i++) {
            for (int j=0; j<T; j++) {
                prob[i-N0] += playAGame(i) == 1 ? 1:0;
            }
            prob[i-N0] = prob[i-N0]/T;
        }
    }

    public int getN0() { return this.N0; }

    public int getN1() { return this.N1; }

    public int getT() { return this.T; }

    public double getP1WinProbabilityEstimate(int n) {
        if (n < N0 || n > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
        return this.prob[n-N0];
    }

    public double getP2WinProbabilityEstimate(int n) {
        return 1.0 - getP1WinProbabilityEstimate(n);
    }

    private static int playAGame(int N) {
        HexBoard board = new HexBoard(N);
        int player = 1;
        while(!board.hasPlayer1Won() && !board.hasPlayer2Won()) {
            int row = StdRandom.uniform(N);
            int col = StdRandom.uniform(N);
            if (board.isSet(row, col)) { continue; }
            board.setTile(row, col, player);
            player = player == 1 ? 2:1;
        }
        return board.hasPlayer1Won() ? 1:0;
    }

    private void printReport() {
        StdOut.println("T = " + T);
        for (int N=N0; N<N1; N++) {
            StdOut.print("N = " + N + " ");
            StdOut.print("P1 = " + getP1WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP1WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.print("P2 = " + getP2WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP2WinProbabilityEstimate(N)*T + ")" + " ");
        }
    }

    public static void main(String[] args) {
        int N0 = Integer.parseInt(args[0]);
        int N1 = Integer.parseInt(args[1]);
        int T = Integer.parseInt(args[2]);
        HexBoardStats hbs = new HexBoardStats(10,15,10);
        hbs.printReport();
    }
}

--[ 2021.09.21.22.24.56.428.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.25.07.443.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.25.19.105.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.26.23.521.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.28.17.127.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.32.34.671.0 ]--
UpdateTree (AD): 1 0
+ /src/QFUF.java

--[ 2021.09.21.22.32.34.674.0 ]--
InitFile: /src/QFUF.java


--[ 2021.09.21.22.32.34.716.0 ]--
:/src/QFUF.java
+ 1 package PACKAGE_NAME;public class QFUF {
r 2 }
--[ 2021.09.21.22.32.34.732.0 ]--
r 1 public class QFUF {
--[ 2021.09.21.22.32.37.391.0 ]--
+ 1 /****************************************************************************
+ 2  *  Compilation:  javac QuickFindUF.java
+ 3  *  Execution:  java QuickFindUF < input.txt
+ 4  *  Dependencies: StdIn.java StdOut.java
+ 5  *
+ 6  *  Quick-find algorithm.
+ 7  *
+ 8  ****************************************************************************/
+ 9 
+ 10 /**
+ 11  *  The <tt>QuickFindUF</tt> class represents a union-find data structure.
+ 12  *  It supports the <em>union</em> and <em>find</em> operations, along with
+ 13  *  methods for determinig whether two objects are in the same component
+ 14  *  and the total number of components.
+ 15  *  <p>
+ 16  *  This implementation uses quick find.
+ 17  *  Initializing a data structure with <em>N</em> objects takes linear time.
+ 18  *  Afterwards, <em>find</em>, <em>connected</em>, and <em>count</em>
+ 19  *  takes constant time but <em>union</em> takes linear time.
+ 20  *  <p>
+ 21  *  For additional documentation, see <a href="http://algs4.cs.princeton.edu/15uf">Section 1.5</a> of
+ 22  *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
+ 23  *     
+ 24  *  @author Robert Sedgewick
+ 25  *  @author Kevin Wayne
+ 26  */
+ 27 public class QuickFindUF {
+ 28     private int[] id;    // id[i] = component identifier of i
+ 29     private int count;   // number of components
+ 30 
+ 31     /**
+ 32      * Initializes an empty union-find data structure with N isolated components 0 through N-1.
+ 33      * @throws java.lang.IllegalArgumentException if N < 0
+ 34      * @param N the number of objects
+ 35      */
+ 36     public QuickFindUF(int N) {
+ 37         count = N;
+ 38         id = new int[N];
+ 39         for (int i = 0; i < N; i++)
+ 40             id[i] = i;
+ 41     }
+ 42 
+ 43     /**
+ 44      * Returns the number of components.
+ 45      * @return the number of components (between 1 and N)
+ 46      */
+ 47     public int count() {
+ 48         return count;
+ 49     }
+ 50 
+ 51     /**
+ 52      * Returns the component identifier for the component containing site <tt>p</tt>.
+ 53      * @param p the integer representing one site
+ 54      * @return the component identifier for the component containing site <tt>p</tt>
+ 55      * @throws java.lang.IndexOutOfBoundsException unless 0 <= p < N
+ 56      */
+ 57     public int find(int p) {
+ 58         validate(p);
+ 59         return id[p];
+ 60     }
+ 61 
+ 62     // validate that p is a valid index
+ 63     private void validate(int p) {
+ 64         int N = id.length;
+ 65         if (p < 0 || p >= N) {
+ 66             throw new IndexOutOfBoundsException("index " + p + " is not between 0 and " + N);
+ 67         }
+ 68     }
+ 69 
+ 70     /**
+ 71      * Are the two sites <tt>p</tt> and <tt>q/tt> in the same component?
+ 72      * @param p the integer representing one site
+ 73      * @param q the integer representing the other site
+ 74      * @return <tt>true</tt> if the two sites <tt>p</tt> and <tt>q</tt> are in
+ 75      *    the same component, and <tt>false</tt> otherwise
+ 76      * @throws java.lang.IndexOutOfBoundsException unless both 0 <= p < N and 0 <= q < N
+ 77      */
+ 78     public boolean connected(int p, int q) {
+ 79         validate(p);
+ 80         validate(q);
+ 81         return id[p] == id[q];
+ 82     }
+ 83   
+ 84     /**
+ 85      * Merges the component containing site<tt>p</tt> with the component
+ 86      * containing site <tt>q</tt>.
+ 87      * @param p the integer representing one site
+ 88      * @param q the integer representing the other site
+ 89      * @throws java.lang.IndexOutOfBoundsException unless both 0 <= p < N and 0 <= q < N
+ 90      */
+ 91     public void union(int p, int q) {
+ 92         if (connected(p, q)) return;
+ 93         int pid = id[p];
+ 94         for (int i = 0; i < id.length; i++)
+ 95             if (id[i] == pid) id[i] = id[q]; 
+ 96         count--;
+ 97     }
+ 98 
+ 99     /**
+ 100      * Reads in a sequence of pairs of integers (between 0 and N-1) from standard input, 
+ 101      * where each integer represents some object;
+ 102      * if the objects are in different components, merge the two components
+ 103      * and print the pair to standard output.
+ 104      */
+ 105     public static void main(String[] args) {
+ 106         int N = StdIn.readInt();
+ 107         QuickFindUF uf = new QuickFindUF(N);
+ 108         while (!StdIn.isEmpty()) {
+ 109             int p = StdIn.readInt();
+ 110             int q = StdIn.readInt();
+ 111             if (uf.connected(p, q)) continue;
+ 112             uf.union(p, q);
+ 113             StdOut.println(p + " " + q);
+ 114         }
+ 115         StdOut.println(uf.count() + " components");
+ 116     }
r 117 
--[ 2021.09.21.22.32.37.458.0 ]--
r 23  *
r 83 
r 95             if (id[i] == pid) id[i] = id[q];
--[ 2021.09.21.22.32.41.785.0 ]--
r 27 public class QuicFindUF {
--[ 2021.09.21.22.32.41.870.0 ]--
r 27 public class QuiFindUF {
--[ 2021.09.21.22.32.42.007.0 ]--
r 27 public class QuFindUF {
--[ 2021.09.21.22.32.42.398.0 ]--
r 27 public class QFindUF {
--[ 2021.09.21.22.32.43.221.0 ]--
r 27 public class QFinUF {
--[ 2021.09.21.22.32.43.357.0 ]--
r 27 public class QFiUF {
--[ 2021.09.21.22.32.43.501.0 ]--
r 27 public class QFUF {
--[ 2021.09.21.22.32.43.639.0 ]--
r 27 public class QUF {
--[ 2021.09.21.22.32.44.619.0 ]--
r 27 public class QFUF {
--[ 2021.09.21.22.32.45.570.0 ]--
r 100      * Reads in a sequence of pairs of integers (between 0 and N-1) from standard input,
--[ 2021.09.21.22.32.52.862.0 ]--
r 36     public QF(int N) {
--[ 2021.09.21.22.32.53.984.0 ]--
r 36     public QFU(int N) {
--[ 2021.09.21.22.32.54.038.0 ]--
r 36     public QFUF(int N) {
--[ 2021.09.21.22.32.54.119.0 ]--
r 36     public QFUF (int N) {
--[ 2021.09.21.22.32.54.156.0 ]--
r 36     public QFUF(int N) {
--[ 2021.09.21.22.34.09.812.0 ]--
:/src/HexBoard.java
r 7     private QF uf;
--[ 2021.09.21.22.34.10.422.0 ]--
r 7     private QFU uf;
--[ 2021.09.21.22.34.10.463.0 ]--
r 7     private QFUF uf;
--[ 2021.09.21.22.34.10.562.0 ]--
r 7     private QFUF  uf;
--[ 2021.09.21.22.34.10.603.0 ]--
r 7     private QFUF uf;
--[ 2021.09.21.22.34.14.474.0 ]--
r 17         uf = new QuF(N*N+4);
--[ 2021.09.21.22.34.15.091.0 ]--
r 17         uf = new QuFU(N*N+4);
--[ 2021.09.21.22.34.15.137.0 ]--
r 17         uf = new QuFUF(N*N+4);
--[ 2021.09.21.22.34.15.241.0 ]--
r 17         uf = new QuFUF (N*N+4);
--[ 2021.09.21.22.34.15.368.0 ]--
r 17         uf = new QuFUF(N*N+4);
--[ 2021.09.21.22.34.17.730.0 ]--
r 17         uf = new QFUF(N*N+4);
--[ 2021.09.21.22.34.24.249.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.34.33.624.0 ]--
:/src/QFUF.java
+ 98     
--[ 2021.09.21.22.34.33.698.0 ]--
+ 98     
--[ 2021.09.21.22.34.34.365.0 ]--
r 99     p
--[ 2021.09.21.22.34.34.655.0 ]--
r 99     pu
--[ 2021.09.21.22.34.34.904.0 ]--
r 99     pub
--[ 2021.09.21.22.34.35.077.0 ]--
r 99     publ
--[ 2021.09.21.22.34.35.304.0 ]--
r 99     publi
--[ 2021.09.21.22.34.35.422.0 ]--
r 99     public
--[ 2021.09.21.22.34.35.494.0 ]--
r 99     public 
--[ 2021.09.21.22.34.36.627.0 ]--
r 99     public S
--[ 2021.09.21.22.34.36.860.0 ]--
r 99     public St
--[ 2021.09.21.22.34.36.961.0 ]--
r 99     public Str
--[ 2021.09.21.22.34.37.076.0 ]--
r 99     public Stri
--[ 2021.09.21.22.34.37.141.0 ]--
r 99     public Strin
--[ 2021.09.21.22.34.37.197.0 ]--
r 99     public String
--[ 2021.09.21.22.34.37.260.0 ]--
r 99     public String 
--[ 2021.09.21.22.34.37.331.0 ]--
r 99     public String
--[ 2021.09.21.22.34.37.489.0 ]--
r 99     public Strin
--[ 2021.09.21.22.34.38.217.0 ]--
r 99     public String
--[ 2021.09.21.22.34.38.412.0 ]--
r 99     public String 
--[ 2021.09.21.22.34.38.596.0 ]--
r 99     public String t
--[ 2021.09.21.22.34.38.692.0 ]--
r 99     public String to
--[ 2021.09.21.22.34.38.867.0 ]--
r 99     public String toS
--[ 2021.09.21.22.34.39.082.0 ]--
r 99     public String toSt
--[ 2021.09.21.22.34.39.139.0 ]--
r 99     public String toStr
--[ 2021.09.21.22.34.39.202.0 ]--
r 99     public String toStri
--[ 2021.09.21.22.34.39.250.0 ]--
r 99     public String toStrin
--[ 2021.09.21.22.34.39.325.0 ]--
r 99     public String toString
--[ 2021.09.21.22.34.39.373.0 ]--
r 99     public String toString 
--[ 2021.09.21.22.34.39.442.0 ]--
r 99     public String toString
--[ 2021.09.21.22.34.40.209.0 ]--
r 99     public String toString()
--[ 2021.09.21.22.34.40.282.0 ]--
r 99     public String toString() 
--[ 2021.09.21.22.34.40.395.0 ]--
r 99     public String toString()
--[ 2021.09.21.22.34.40.813.0 ]--
r 99     public String toString() 
--[ 2021.09.21.22.34.40.993.0 ]--
r 99     public String toString() {
--[ 2021.09.21.22.34.41.045.0 ]--
r 99     public String toString() {}
--[ 2021.09.21.22.34.41.779.0 ]--
+ 99     public String toString() {
r 100     }
--[ 2021.09.21.22.34.41.811.0 ]--
+ 100         
--[ 2021.09.21.22.34.42.300.0 ]--
r 100         r
--[ 2021.09.21.22.34.42.355.0 ]--
r 100         re
--[ 2021.09.21.22.34.42.485.0 ]--
r 100         ret
--[ 2021.09.21.22.34.42.558.0 ]--
r 100         retu
--[ 2021.09.21.22.34.42.668.0 ]--
r 100         retur
--[ 2021.09.21.22.34.42.728.0 ]--
r 100         return
--[ 2021.09.21.22.34.48.058.0 ]--
r 100         return 
--[ 2021.09.21.22.34.48.263.0 ]--
r 100         return A
--[ 2021.09.21.22.34.48.520.0 ]--
r 100         return Ar
--[ 2021.09.21.22.34.48.634.0 ]--
r 100         return Arr
--[ 2021.09.21.22.34.48.725.0 ]--
r 100         return Arra
--[ 2021.09.21.22.34.48.822.0 ]--
r 100         return Array
--[ 2021.09.21.22.34.48.914.0 ]--
r 100         return Arrays
--[ 2021.09.21.22.34.48.960.0 ]--
r 100         return Arrays 
--[ 2021.09.21.22.34.49.004.0 ]--
r 100         return Arrays
--[ 2021.09.21.22.34.49.154.0 ]--
r 100         return Arrays.
--[ 2021.09.21.22.34.49.587.0 ]--
r 100         return Arrays.t
--[ 2021.09.21.22.34.49.655.0 ]--
r 100         return Arrays.to
--[ 2021.09.21.22.34.49.977.0 ]--
r 100         return Arrays.toS
--[ 2021.09.21.22.34.50.213.0 ]--
r 100         return Arrays.toSt
--[ 2021.09.21.22.34.50.270.0 ]--
r 100         return Arrays.toStr
--[ 2021.09.21.22.34.50.338.0 ]--
r 100         return Arrays.toStri
--[ 2021.09.21.22.34.50.384.0 ]--
r 100         return Arrays.toStrin
--[ 2021.09.21.22.34.50.457.0 ]--
r 100         return Arrays.toString
--[ 2021.09.21.22.34.50.520.0 ]--
r 100         return Arrays.toString 
--[ 2021.09.21.22.34.50.573.0 ]--
r 100         return Arrays.toString
--[ 2021.09.21.22.34.51.809.0 ]--
r 100         return Arrays.toString()
--[ 2021.09.21.22.34.51.882.0 ]--
r 100         return Arrays.toString() 
--[ 2021.09.21.22.34.52.000.0 ]--
r 100         return Arrays.toString()
--[ 2021.09.21.22.34.53.020.0 ]--
r 100         return Arrays.toString(i)
--[ 2021.09.21.22.34.53.317.0 ]--
r 100         return Arrays.toString(id)
--[ 2021.09.21.22.34.53.371.0 ]--
r 100         return Arrays.toString(id )
--[ 2021.09.21.22.34.53.463.0 ]--
r 100         return Arrays.toString(id)
--[ 2021.09.21.22.34.55.112.0 ]--
r 100         return Arrays.toString(id);
--[ 2021.09.21.22.34.55.165.0 ]--
r 100         return Arrays.toString(id); 
--[ 2021.09.21.22.34.55.210.0 ]--
r 100         return Arrays.toString(id);
--[ 2021.09.21.22.35.01.995.0 ]--
+ 9 
--[ 2021.09.21.22.35.02.307.0 ]--
r 10 i
--[ 2021.09.21.22.35.02.379.0 ]--
r 10 im
--[ 2021.09.21.22.35.02.534.0 ]--
r 10 imp
--[ 2021.09.21.22.35.02.549.0 ]--
r 10 impo
--[ 2021.09.21.22.35.03.450.0 ]--
r 10 import
--[ 2021.09.21.22.35.03.476.0 ]--
r 10 import 
--[ 2021.09.21.22.35.04.450.0 ]--
r 10 import J
--[ 2021.09.21.22.35.04.687.0 ]--
r 10 import Ja
--[ 2021.09.21.22.35.04.841.0 ]--
r 10 import Jav
--[ 2021.09.21.22.35.04.949.0 ]--
r 10 import Java
--[ 2021.09.21.22.35.05.682.0 ]--
r 10 import Java.
--[ 2021.09.21.22.35.05.938.0 ]--
r 10 import Java.i
--[ 2021.09.21.22.35.06.042.0 ]--
r 10 import Java.it
--[ 2021.09.21.22.35.06.685.0 ]--
r 10 import Java.i
--[ 2021.09.21.22.35.06.802.0 ]--
r 10 import Java.
--[ 2021.09.21.22.35.07.180.0 ]--
r 10 import Java
--[ 2021.09.21.22.35.07.301.0 ]--
r 10 import Jav
--[ 2021.09.21.22.35.07.417.0 ]--
r 10 import Ja
--[ 2021.09.21.22.35.07.569.0 ]--
r 10 import J
--[ 2021.09.21.22.35.07.751.0 ]--
r 10 import 
--[ 2021.09.21.22.35.08.236.0 ]--
r 10 import j
--[ 2021.09.21.22.35.08.322.0 ]--
r 10 import ja
--[ 2021.09.21.22.35.08.494.0 ]--
r 10 import jav
--[ 2021.09.21.22.35.08.577.0 ]--
r 10 import java
--[ 2021.09.21.22.35.09.311.0 ]--
r 10 import java.
--[ 2021.09.21.22.35.09.610.0 ]--
r 10 import java.u
--[ 2021.09.21.22.35.09.742.0 ]--
r 10 import java.ut
--[ 2021.09.21.22.35.10.363.0 ]--
r 10 import java.util
--[ 2021.09.21.22.35.10.387.0 ]--
r 10 import java.util.
--[ 2021.09.21.22.35.11.086.0 ]--
r 10 import java.util.a
--[ 2021.09.21.22.35.12.292.0 ]--
r 10 import java.util.aA
--[ 2021.09.21.22.35.12.709.0 ]--
r 10 import java.util.aA\
--[ 2021.09.21.22.35.12.844.0 ]--
r 10 import java.util.aA\\
--[ 2021.09.21.22.35.12.961.0 ]--
r 10 import java.util.aA\\A
--[ 2021.09.21.22.35.13.203.0 ]--
r 10 import java.util.aA\\
--[ 2021.09.21.22.35.13.362.0 ]--
r 10 import java.util.aA\
--[ 2021.09.21.22.35.13.476.0 ]--
r 10 import java.util.aA
--[ 2021.09.21.22.35.13.617.0 ]--
r 10 import java.util.a
--[ 2021.09.21.22.35.13.745.0 ]--
r 10 import java.util.
--[ 2021.09.21.22.35.13.873.0 ]--
r 10 import java.util.A
--[ 2021.09.21.22.35.14.462.0 ]--
r 10 import java.util.Arrays
--[ 2021.09.21.22.35.15.830.0 ]--
r 10 import java.util.Arrays;
--[ 2021.09.21.22.35.20.187.0 ]--
r 99 
--[ 2021.09.21.22.35.51.320.0 ]--
:/src/HexBoard.java
r 72 //        StdOut.println("meow" + uf.find(toIndex(row, col)));
--[ 2021.09.21.22.35.53.880.0 ]--
+ 73 
--[ 2021.09.21.22.35.53.911.0 ]--
r 73         
--[ 2021.09.21.22.35.54.056.0 ]--
r 73         S
--[ 2021.09.21.22.35.54.276.0 ]--
r 73         St
--[ 2021.09.21.22.35.54.425.0 ]--
r 73         Std
--[ 2021.09.21.22.35.54.689.0 ]--
r 73         StdO
--[ 2021.09.21.22.35.54.775.0 ]--
r 73         StdOu
--[ 2021.09.21.22.35.54.902.0 ]--
r 73         StdOut
--[ 2021.09.21.22.35.56.369.0 ]--
r 73         StdOut.
--[ 2021.09.21.22.35.56.588.0 ]--
r 73         StdOut.p
--[ 2021.09.21.22.35.56.707.0 ]--
r 73         StdOut.pr
--[ 2021.09.21.22.35.56.772.0 ]--
r 73         StdOut.pri
--[ 2021.09.21.22.35.56.811.0 ]--
r 73         StdOut.prin
--[ 2021.09.21.22.35.56.899.0 ]--
r 73         StdOut.print
--[ 2021.09.21.22.35.57.103.0 ]--
r 73         StdOut.print()
--[ 2021.09.21.22.35.57.109.0 ]--
r 73         StdOut.print();
--[ 2021.09.21.22.35.57.885.0 ]--
r 73         StdOut.print()
--[ 2021.09.21.22.35.58.009.0 ]--
r 73         StdOut.print(
--[ 2021.09.21.22.35.58.513.0 ]--
r 73         StdOut.print
--[ 2021.09.21.22.35.58.729.0 ]--
r 73         StdOut.printl
--[ 2021.09.21.22.35.58.889.0 ]--
r 73         StdOut.println
--[ 2021.09.21.22.35.59.148.0 ]--
r 73         StdOut.println()
--[ 2021.09.21.22.35.59.235.0 ]--
r 73         StdOut.println() 
--[ 2021.09.21.22.35.59.322.0 ]--
r 73         StdOut.println()
--[ 2021.09.21.22.35.59.531.0 ]--
r 73         StdOut.println();
--[ 2021.09.21.22.35.59.666.0 ]--
r 73         StdOut.println(); 
--[ 2021.09.21.22.35.59.710.0 ]--
r 73         StdOut.println();
--[ 2021.09.21.22.36.04.087.0 ]--
r 73         StdOut.println(u);
--[ 2021.09.21.22.36.04.632.0 ]--
r 73         StdOut.println(uf);
--[ 2021.09.21.22.36.10.550.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.39.29.736.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.49.08.897.0 ]--
r 100     private boolean isValidHex(int n    ) {
--[ 2021.09.21.22.49.15.318.0 ]--
r 100     private boolean isValidHex(int n   ) {
--[ 2021.09.21.22.49.15.443.0 ]--
r 100     private boolean isValidHex(int n  ) {
--[ 2021.09.21.22.49.15.717.0 ]--
r 100     private boolean isValidHex(int n ) {
--[ 2021.09.21.22.49.15.874.0 ]--
r 100     private boolean isValidHex(int n) {
--[ 2021.09.21.22.49.16.043.0 ]--
r 100     private boolean isValidHex(int ) {
--[ 2021.09.21.22.49.16.895.0 ]--
r 100     private boolean isValidHex(int r) {
--[ 2021.09.21.22.49.17.107.0 ]--
r 100     private boolean isValidHex(int ro) {
--[ 2021.09.21.22.49.17.832.0 ]--
r 100     private boolean isValidHex(int row) {
--[ 2021.09.21.22.49.18.234.0 ]--
r 100     private boolean isValidHex(int row,m) {
--[ 2021.09.21.22.49.18.745.0 ]--
r 100     private boolean isValidHex(int row,) {
--[ 2021.09.21.22.49.18.901.0 ]--
r 100     private boolean isValidHex(int row, ) {
--[ 2021.09.21.22.49.19.310.0 ]--
r 100     private boolean isValidHex(int row, c) {
--[ 2021.09.21.22.49.19.474.0 ]--
r 100     private boolean isValidHex(int row, co) {
--[ 2021.09.21.22.49.19.638.0 ]--
r 100     private boolean isValidHex(int row, col) {
--[ 2021.09.21.22.49.22.839.0 ]--
r 100     private boolean isValidHex(int row, oicol) {
--[ 2021.09.21.22.49.22.902.0 ]--
r 100     private boolean isValidHex(int row, oimcol) {
--[ 2021.09.21.22.49.23.499.0 ]--
r 100     private boolean isValidHex(int row, oicol) {
--[ 2021.09.21.22.49.23.643.0 ]--
r 100     private boolean isValidHex(int row, ocol) {
--[ 2021.09.21.22.49.23.784.0 ]--
r 100     private boolean isValidHex(int row, col) {
--[ 2021.09.21.22.49.24.598.0 ]--
r 100     private boolean isValidHex(int row, icol) {
--[ 2021.09.21.22.49.24.695.0 ]--
r 100     private boolean isValidHex(int row, incol) {
--[ 2021.09.21.22.49.24.774.0 ]--
r 100     private boolean isValidHex(int row, intcol) {
--[ 2021.09.21.22.49.24.878.0 ]--
r 100     private boolean isValidHex(int row, int col) {
--[ 2021.09.21.22.49.30.005.0 ]--
r 101         if (n <  || n >= N*N) { return false; }
--[ 2021.09.21.22.49.30.148.0 ]--
r 101         if (n < || n >= N*N) { return false; }
--[ 2021.09.21.22.49.30.309.0 ]--
r 101         if (n  || n >= N*N) { return false; }
--[ 2021.09.21.22.49.30.456.0 ]--
r 101         if (n || n >= N*N) { return false; }
--[ 2021.09.21.22.49.30.579.0 ]--
r 101         if ( || n >= N*N) { return false; }
--[ 2021.09.21.22.49.31.130.0 ]--
r 101         if (r || n >= N*N) { return false; }
--[ 2021.09.21.22.49.31.349.0 ]--
r 101         if (ro || n >= N*N) { return false; }
--[ 2021.09.21.22.49.31.610.0 ]--
r 101         if (row || n >= N*N) { return false; }
--[ 2021.09.21.22.49.32.137.0 ]--
r 101         if (row  || n >= N*N) { return false; }
--[ 2021.09.21.22.49.33.908.0 ]--
r 101         if (row < || n >= N*N) { return false; }
--[ 2021.09.21.22.49.34.685.0 ]--
r 101         if (row <  || n >= N*N) { return false; }
--[ 2021.09.21.22.49.35.458.0 ]--
r 101         if (row < 0 || n >= N*N) { return false; }
--[ 2021.09.21.22.49.39.777.0 ]--
r 101         if (row < 0 ||  >= N*N) { return false; }
--[ 2021.09.21.22.49.39.880.0 ]--
r 101         if (row < 0 || r >= N*N) { return false; }
--[ 2021.09.21.22.49.40.085.0 ]--
r 101         if (row < 0 || ro >= N*N) { return false; }
--[ 2021.09.21.22.49.40.608.0 ]--
r 101         if (row < 0 || row >= N*N) { return false; }
--[ 2021.09.21.22.49.46.610.0 ]--
r 101         if ( ) { return false; }
--[ 2021.09.21.22.49.47.952.0 ]--
r 101         if (row < 0 || row >= N*N) { return false; }
--[ 2021.09.21.22.49.48.420.0 ]--
r 101         if ( ) { return false; }
--[ 2021.09.21.22.49.49.592.0 ]--
r 101         if (row < 0 || row >= N*N) { return false; }
--[ 2021.09.21.22.49.50.863.0 ]--
r 101         if (row < 0 || row >= N*N ) { return false; }
--[ 2021.09.21.22.49.51.242.0 ]--
r 101         if (row < 0 || row >= N*N |) { return false; }
--[ 2021.09.21.22.49.51.651.0 ]--
r 101         if (row < 0 || row >= N*N ||) { return false; }
--[ 2021.09.21.22.49.51.940.0 ]--
r 101         if (row < 0 || row >= N*N || ) { return false; }
--[ 2021.09.21.22.49.52.548.0 ]--
r 101         if (row < 0 || row >= N*N || row < 0 || row >= N*N) { return false; }
--[ 2021.09.21.22.49.55.246.0 ]--
r 101         if (row < 0 || row >= N*N || row < 0 || c >= N*N) { return false; }
--[ 2021.09.21.22.49.55.499.0 ]--
r 101         if (row < 0 || row >= N*N || row < 0 || co >= N*N) { return false; }
--[ 2021.09.21.22.49.55.669.0 ]--
r 101         if (row < 0 || row >= N*N || row < 0 || col >= N*N) { return false; }
--[ 2021.09.21.22.49.58.182.0 ]--
r 101         if (row < 0 || row >= N*N || c < 0 || col >= N*N) { return false; }
--[ 2021.09.21.22.49.58.369.0 ]--
r 101         if (row < 0 || row >= N*N || co < 0 || col >= N*N) { return false; }
--[ 2021.09.21.22.49.58.531.0 ]--
r 101         if (row < 0 || row >= N*N || col < 0 || col >= N*N) { return false; }
--[ 2021.09.21.22.50.09.746.0 ]--
r 38         if (!isValidHex(toIndexrow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.09.924.0 ]--
r 38         if (!isValidHex(toInderow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.10.134.0 ]--
r 38         if (!isValidHex(toIndrow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.10.314.0 ]--
r 38         if (!isValidHex(toInrow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.10.458.0 ]--
r 38         if (!isValidHex(toIrow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.10.618.0 ]--
r 38         if (!isValidHex(torow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.10.806.0 ]--
r 38         if (!isValidHex(trow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.11.144.0 ]--
r 38         if (!isValidHex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.12.230.0 ]--
r 38         if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.14.048.0 ]--
r 41         if (isValidHex(toIndex(row+1,col) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.22.50.17.094.0 ]--
r 41         if (isValidHex(row+1,col) && this.board[toIndex(row+1,col)] == player) {
--[ 2021.09.21.22.50.21.482.0 ]--
r 44         if (isValidHex(toIndexrow-1,col)) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.22.50.21.800.0 ]--
r 44         if (isValidHex(toInderow-1,col)) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.22.50.21.992.0 ]--
r 44         if (isValidHex(toIndrow-1,col)) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.22.50.22.160.0 ]--
r 44         if (isValidHex(toInrow-1,col)) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.22.50.22.335.0 ]--
r 44         if (isValidHex(toIrow-1,col)) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.22.50.22.519.0 ]--
r 44         if (isValidHex(torow-1,col)) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.22.50.22.810.0 ]--
r 44         if (isValidHex(trow-1,col)) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.22.50.23.161.0 ]--
r 44         if (isValidHex(row-1,col)) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.22.50.24.272.0 ]--
r 44         if (isValidHex(row-1,col) && this.board[toIndex(row-1,col)] == player) {
--[ 2021.09.21.22.50.26.896.0 ]--
r 47         if (isValidHex(toIndex(row,col+1) && this.board[toIndex(row,col+1)] == player) {
--[ 2021.09.21.22.50.30.891.0 ]--
r 47         if (isValidHex(row,col+1) && this.board[toIndex(row,col+1)] == player) {
--[ 2021.09.21.22.50.35.251.0 ]--
r 50         if (isValidHex(row,col-1)) && this.board[toIndex(row,col-1)] == player) {
--[ 2021.09.21.22.50.36.278.0 ]--
r 50         if (isValidHex(row,col-1) && this.board[toIndex(row,col-1)] == player) {
--[ 2021.09.21.22.50.38.917.0 ]--
r 53         if (isValidHex(row+1,col-1)) && this.board[toIndex(row+1,col-1)] == player) {
--[ 2021.09.21.22.50.40.415.0 ]--
r 53         if (isValidHex(row+1,col-1) && this.board[toIndex(row+1,col-1)] == player) {
--[ 2021.09.21.22.50.41.464.0 ]--
r 56         if (isValidHex(toIndex(row-1,col+1) && this.board[toIndex(row-1,col+1)] == player) {
--[ 2021.09.21.22.50.44.846.0 ]--
r 56         if (isValidHex(row-1,col+1) && this.board[toIndex(row-1,col+1)] == player) {
--[ 2021.09.21.22.50.55.421.0 ]--
r 22         if (!isValidHex(toIndexrow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.55.570.0 ]--
r 22         if (!isValidHex(toInderow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.55.747.0 ]--
r 22         if (!isValidHex(toIndrow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.55.891.0 ]--
r 22         if (!isValidHex(toInrow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.56.067.0 ]--
r 22         if (!isValidHex(toIrow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.56.229.0 ]--
r 22         if (!isValidHex(torow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.56.402.0 ]--
r 22         if (!isValidHex(trow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.56.595.0 ]--
r 22         if (!isValidHex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.50.58.310.0 ]--
r 22         if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.51.01.755.0 ]--
r 33         if (!isValidHex(toIndexrow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.51.02.247.0 ]--
r 33         if (!isValidHex(toInderow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.51.02.279.0 ]--
r 33         if (!isValidHex(toIndrow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.51.02.311.0 ]--
r 33         if (!isValidHex(toInrow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.51.02.335.0 ]--
r 33         if (!isValidHex(toIrow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.51.02.508.0 ]--
r 33         if (!isValidHex(torow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.51.02.666.0 ]--
r 33         if (!isValidHex(trow, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.51.02.931.0 ]--
r 33         if (!isValidHex(row, col))) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.51.04.333.0 ]--
r 33         if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.21.22.51.32.145.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.52.15.132.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.52.30.693.0 ]--
- 72
r 72 
--[ 2021.09.21.22.52.31.200.0 ]--
- 72
--[ 2021.09.21.22.52.37.265.0 ]--
r 7     private QFU uf;
--[ 2021.09.21.22.52.37.476.0 ]--
r 7     private QF uf;
--[ 2021.09.21.22.52.37.685.0 ]--
r 7     private Q uf;
--[ 2021.09.21.22.52.37.894.0 ]--
r 7     private  uf;
--[ 2021.09.21.22.52.38.709.0 ]--
r 7     private Q uf;
--[ 2021.09.21.22.52.40.558.0 ]--
r 7     private QuickFindUF uf;
--[ 2021.09.21.22.52.43.914.0 ]--
r 17         uf = new QFU(N*N+4);
--[ 2021.09.21.22.52.44.068.0 ]--
r 17         uf = new QF(N*N+4);
--[ 2021.09.21.22.52.44.244.0 ]--
r 17         uf = new Q(N*N+4);
--[ 2021.09.21.22.52.44.910.0 ]--
r 17         uf = new Qu(N*N+4);
--[ 2021.09.21.22.52.45.583.0 ]--
r 17         uf = new QuickFindUF(N*N+4);
--[ 2021.09.21.22.52.53.517.0 ]--
UpdateTree (AD): 0 1
- /src/QFUF.java

--[ 2021.09.21.22.53.39.092.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.54.50.675.0 ]--
+ 99         
--[ 2021.09.21.22.54.52.382.0 ]--
r 99         S
--[ 2021.09.21.22.54.54.134.0 ]--
r 99         StdOut
--[ 2021.09.21.22.54.54.162.0 ]--
+ 99         StdOut]
r 100         
--[ 2021.09.21.22.54.54.912.0 ]--
- 100
--[ 2021.09.21.22.54.55.060.0 ]--
r 99         StdOut
--[ 2021.09.21.22.54.55.979.0 ]--
r 99         StdOut.
--[ 2021.09.21.22.54.56.335.0 ]--
r 99         StdOut.p
--[ 2021.09.21.22.54.56.449.0 ]--
r 99         StdOut.pr
--[ 2021.09.21.22.54.57.017.0 ]--
r 99         StdOut.println
--[ 2021.09.21.22.54.57.024.0 ]--
r 99         StdOut.println()
--[ 2021.09.21.22.54.57.030.0 ]--
r 99         StdOut.println();
--[ 2021.09.21.22.54.58.702.0 ]--
r 99         StdOut.println(r);
--[ 2021.09.21.22.54.59.560.0 ]--
r 99         StdOut.println(row);
--[ 2021.09.21.22.55.00.521.0 ]--
r 99         StdOut.println(row );
--[ 2021.09.21.22.55.00.797.0 ]--
r 99         StdOut.println(row +);
--[ 2021.09.21.22.55.00.982.0 ]--
r 99         StdOut.println(row + );
--[ 2021.09.21.22.55.01.268.0 ]--
r 99         StdOut.println(row + "");
--[ 2021.09.21.22.55.02.123.0 ]--
r 99         StdOut.println(row + " ");
--[ 2021.09.21.22.55.03.356.0 ]--
r 99         StdOut.println(row + " " );
--[ 2021.09.21.22.55.03.694.0 ]--
r 99         StdOut.println(row + " " +);
--[ 2021.09.21.22.55.03.810.0 ]--
r 99         StdOut.println(row + " " + );
--[ 2021.09.21.22.55.04.833.0 ]--
r 99         StdOut.println(row + " " + c);
--[ 2021.09.21.22.55.05.068.0 ]--
r 99         StdOut.println(row + " " + co);
--[ 2021.09.21.22.55.05.236.0 ]--
r 99         StdOut.println(row + " " + col);
--[ 2021.09.21.22.55.11.551.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.56.16.546.0 ]--
r 100         if (row < 0 || row >= N* || col < 0 || col >= N*N) { return false; }
--[ 2021.09.21.22.56.16.869.0 ]--
r 100         if (row < 0 || row >= N || col < 0 || col >= N*N) { return false; }
--[ 2021.09.21.22.56.18.698.0 ]--
r 100         if (row < 0 || row >= N || col < 0 || col >= N*) { return false; }
--[ 2021.09.21.22.56.18.918.0 ]--
r 100         if (row < 0 || row >= N || col < 0 || col >= N) { return false; }
--[ 2021.09.21.22.56.26.987.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.57.06.763.0 ]--
+ 8     
--[ 2021.09.21.22.57.07.691.0 ]--
r 8     p
--[ 2021.09.21.22.57.07.803.0 ]--
r 8     pr
--[ 2021.09.21.22.57.07.901.0 ]--
r 8     pri
--[ 2021.09.21.22.57.08.579.0 ]--
r 8     private
--[ 2021.09.21.22.57.08.601.0 ]--
r 8     private 
--[ 2021.09.21.22.57.09.602.0 ]--
r 8     private Q
--[ 2021.09.21.22.57.10.257.0 ]--
r 8     private QuickFindUF
--[ 2021.09.21.22.57.10.878.0 ]--
r 8     private QuickFindUF 
--[ 2021.09.21.22.57.11.445.0 ]--
r 8     private QuickFindUF u
--[ 2021.09.21.22.57.11.649.0 ]--
r 8     private QuickFindUF uf
--[ 2021.09.21.22.57.12.077.0 ]--
r 8     private QuickFindUF uf2
--[ 2021.09.21.22.57.12.982.0 ]--
r 8     private QuickFindUF uf2;
--[ 2021.09.21.22.57.15.959.0 ]--
+ 9     
--[ 2021.09.21.22.57.16.323.0 ]--
r 9     private QuickFindUF uf2;
--[ 2021.09.21.22.57.17.757.0 ]--
r 9     private QuickFindUF uf;
--[ 2021.09.21.22.57.17.931.0 ]--
r 9     private QuickFindUF uf3;
--[ 2021.09.21.22.58.19.332.0 ]--
r 7     private QuickFindUF u;
r 8     private QuickFindUF u2;
r 9     private QuickFindUF u3;
r 19         u = new QuickFindUF(N*N+4);
r 44             u.union(toIndex(row,col), toIndex(row+1,col));
r 47             u.union(toIndex(row,col), toIndex(row-1,col));
r 50             u.union(toIndex(row,col), toIndex(row,col+1));
r 53             u.union(toIndex(row,col), toIndex(row,col-1));
r 56             u.union(toIndex(row,col), toIndex(row+1,col-1));
r 59             u.union(toIndex(row,col), toIndex(row-1,col+1));
r 63                 u.union(toIndex(row, col),N*N+0);
r 65                 u.union(toIndex(row, col), N*N+2);
r 69                 u.union(toIndex(row, col), N*N+3);
r 71                 u.union(toIndex(row, col), N*N+1);
r 77         if (!u.connected(N*N+0, N*N+2)) { return false; }
r 82         if (!u.connected(N*N+1, N*N+3)) { return false; }
--[ 2021.09.21.22.58.19.935.0 ]--
r 7     private QuickFindUF uf;
r 8     private QuickFindUF uf2;
r 9     private QuickFindUF uf3;
r 19         uf = new QuickFindUF(N*N+4);
r 44             uf.union(toIndex(row,col), toIndex(row+1,col));
r 47             uf.union(toIndex(row,col), toIndex(row-1,col));
r 50             uf.union(toIndex(row,col), toIndex(row,col+1));
r 53             uf.union(toIndex(row,col), toIndex(row,col-1));
r 56             uf.union(toIndex(row,col), toIndex(row+1,col-1));
r 59             uf.union(toIndex(row,col), toIndex(row-1,col+1));
r 63                 uf.union(toIndex(row, col),N*N+0);
r 65                 uf.union(toIndex(row, col), N*N+2);
r 69                 uf.union(toIndex(row, col), N*N+3);
r 71                 uf.union(toIndex(row, col), N*N+1);
r 77         if (!uf.connected(N*N+0, N*N+2)) { return false; }
r 82         if (!uf.connected(N*N+1, N*N+3)) { return false; }
--[ 2021.09.21.22.58.20.666.0 ]--
r 7     private QuickFindUF uf1;
r 8     private QuickFindUF uf12;
r 9     private QuickFindUF uf13;
r 19         uf1 = new QuickFindUF(N*N+4);
r 44             uf1.union(toIndex(row,col), toIndex(row+1,col));
r 47             uf1.union(toIndex(row,col), toIndex(row-1,col));
r 50             uf1.union(toIndex(row,col), toIndex(row,col+1));
r 53             uf1.union(toIndex(row,col), toIndex(row,col-1));
r 56             uf1.union(toIndex(row,col), toIndex(row+1,col-1));
r 59             uf1.union(toIndex(row,col), toIndex(row-1,col+1));
r 63                 uf1.union(toIndex(row, col),N*N+0);
r 65                 uf1.union(toIndex(row, col), N*N+2);
r 69                 uf1.union(toIndex(row, col), N*N+3);
r 71                 uf1.union(toIndex(row, col), N*N+1);
r 77         if (!uf1.connected(N*N+0, N*N+2)) { return false; }
r 82         if (!uf1.connected(N*N+1, N*N+3)) { return false; }
--[ 2021.09.21.22.58.28.332.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.22.58.38.647.0 ]--
- 101
--[ 2021.09.21.22.58.47.789.0 ]--
r 8     private QuickFindUF uf2;
--[ 2021.09.21.22.58.49.053.0 ]--
r 9     private QuickFindUF uf3;
--[ 2021.09.21.22.59.17.378.0 ]--
+ 20         
--[ 2021.09.21.22.59.17.819.0 ]--
r 20         uf1 = new QuickFindUF(N*N+4);
--[ 2021.09.21.22.59.18.369.0 ]--
+ 21         
--[ 2021.09.21.22.59.19.113.0 ]--
r 21         uf1 = new QuickFindUF(N*N+4);
--[ 2021.09.21.22.59.22.670.0 ]--
r 21         uf = new QuickFindUF(N*N+4);
--[ 2021.09.21.22.59.22.990.0 ]--
r 21         uf3 = new QuickFindUF(N*N+4);
--[ 2021.09.21.22.59.23.452.0 ]--
r 20         uf = new QuickFindUF(N*N+4);
--[ 2021.09.21.22.59.23.551.0 ]--
r 20         uf2 = new QuickFindUF(N*N+4);
--[ 2021.09.21.23.01.26.035.0 ]--
+ 47             
--[ 2021.09.21.23.01.26.771.0 ]--
r 47             uf1.union(toIndex(row,col), toIndex(row+1,col));
--[ 2021.09.21.23.01.31.779.0 ]--
r 47             
--[ 2021.09.21.23.01.32.233.0 ]--
- 47
--[ 2021.09.21.23.01.48.478.0 ]--
+ 66                 
--[ 2021.09.21.23.01.57.955.0 ]--
- 66
--[ 2021.09.21.23.02.07.077.0 ]--
+ 68                 
--[ 2021.09.21.23.02.16.798.0 ]--
r 68                 uf1.union(toIndex(row, col), N*N+2);
--[ 2021.09.21.23.02.20.243.0 ]--
r 68                 uf.union(toIndex(row, col), N*N+2);
--[ 2021.09.21.23.02.20.301.0 ]--
r 68                 uf2.union(toIndex(row, col), N*N+2);
--[ 2021.09.21.23.02.32.687.0 ]--
r 68                 
--[ 2021.09.21.23.02.33.023.0 ]--
r 68                 =
--[ 2021.09.21.23.02.33.218.0 ]--
r 68                 ==
--[ 2021.09.21.23.02.33.413.0 ]--
r 68                 ===
--[ 2021.09.21.23.02.33.527.0 ]--
r 68                 ==
--[ 2021.09.21.23.02.33.701.0 ]--
r 68                 =
--[ 2021.09.21.23.02.33.853.0 ]--
r 68                 
--[ 2021.09.21.23.02.34.031.0 ]--
- 68
--[ 2021.09.21.23.02.34.165.0 ]--
r 67                 uf1.union(toIndex(row, col), N*N+2)
--[ 2021.09.21.23.02.35.323.0 ]--
+ 67                 uf1.union(toIndex(row, col), N*N+2);
r 68                 ===
--[ 2021.09.21.23.02.35.901.0 ]--
r 68                 ==
--[ 2021.09.21.23.02.36.073.0 ]--
r 68                 =
--[ 2021.09.21.23.02.36.189.0 ]--
r 68                 
--[ 2021.09.21.23.02.36.358.0 ]--
- 68
--[ 2021.09.21.23.02.42.572.0 ]--
+ 74                 
--[ 2021.09.21.23.02.42.995.0 ]--
r 74                 uf2.union(toIndex(row, col), N*N+2);
--[ 2021.09.21.23.02.51.331.0 ]--
r 74                 uf2.union(toIndex(row, col), N*N+);
--[ 2021.09.21.23.02.51.389.0 ]--
r 74                 uf2.union(toIndex(row, col), N*N+1);
--[ 2021.09.21.23.02.58.830.0 ]--
+ 72                 
--[ 2021.09.21.23.02.59.868.0 ]--
r 72                 uf2.union(toIndex(row, col), N*N+2);
--[ 2021.09.21.23.03.04.699.0 ]--
r 72                 uf2.union(toIndex(row, col), N*N+);
--[ 2021.09.21.23.03.04.991.0 ]--
r 72                 uf2.union(toIndex(row, col), N*N+3);
--[ 2021.09.21.23.05.15.991.0 ]--
- 72
--[ 2021.09.21.23.05.19.396.0 ]--
+ 66                 
--[ 2021.09.21.23.05.24.298.0 ]--
r 66                 uf1.union(toIndex(row, col),N*N+0);
--[ 2021.09.21.23.05.29.644.0 ]--
r 66                 uf.union(toIndex(row, col),N*N+0);
--[ 2021.09.21.23.05.29.940.0 ]--
r 66                 uf2.union(toIndex(row, col),N*N+0);
--[ 2021.09.21.23.05.34.166.0 ]--
+ 69                 
--[ 2021.09.21.23.05.35.012.0 ]--
r 69                 uf1.union(toIndex(row, col), N*N+2);
--[ 2021.09.21.23.05.39.491.0 ]--
r 69                 uf.union(toIndex(row, col), N*N+2);
--[ 2021.09.21.23.05.39.597.0 ]--
r 69                 uf3.union(toIndex(row, col), N*N+2);
--[ 2021.09.21.23.05.42.736.0 ]--
+ 74                 
--[ 2021.09.21.23.05.44.243.0 ]--
r 74                 uf1.union(toIndex(row, col), N*N+2);
--[ 2021.09.21.23.05.46.747.0 ]--
r 74                 uf.union(toIndex(row, col), N*N+2);
--[ 2021.09.21.23.05.48.199.0 ]--
r 74                 uf3.union(toIndex(row, col), N*N+2);
--[ 2021.09.21.23.05.51.390.0 ]--
r 74                 uf3.union(toIndex(row, col), N*N+);
--[ 2021.09.21.23.05.51.611.0 ]--
r 74                 uf3.union(toIndex(row, col), N*N+3);
--[ 2021.09.21.23.06.36.644.0 ]--
+ 47             
--[ 2021.09.21.23.06.37.356.0 ]--
r 47             uf1.union(toIndex(row,col), toIndex(row+1,col));
--[ 2021.09.21.23.06.38.308.0 ]--
+ 48             
--[ 2021.09.21.23.06.38.917.0 ]--
r 48             uf1.union(toIndex(row,col), toIndex(row+1,col));
--[ 2021.09.21.23.06.41.389.0 ]--
r 48             uf.union(toIndex(row,col), toIndex(row+1,col));
--[ 2021.09.21.23.06.41.645.0 ]--
r 48             uf3.union(toIndex(row,col), toIndex(row+1,col));
--[ 2021.09.21.23.06.42.183.0 ]--
r 47             uf.union(toIndex(row,col), toIndex(row+1,col));
--[ 2021.09.21.23.06.42.324.0 ]--
r 47             uf2.union(toIndex(row,col), toIndex(row+1,col));
--[ 2021.09.21.23.06.48.788.0 ]--
+ 52             
--[ 2021.09.21.23.06.49.219.0 ]--
r 52             uf1.union(toIndex(row,col), toIndex(row-1,col));
--[ 2021.09.21.23.06.50.007.0 ]--
+ 53             
--[ 2021.09.21.23.06.50.387.0 ]--
r 53             uf1.union(toIndex(row,col), toIndex(row-1,col));
--[ 2021.09.21.23.06.52.867.0 ]--
r 53             uf.union(toIndex(row,col), toIndex(row-1,col));
--[ 2021.09.21.23.06.53.092.0 ]--
r 53             uf3.union(toIndex(row,col), toIndex(row-1,col));
--[ 2021.09.21.23.06.53.812.0 ]--
r 52             uf.union(toIndex(row,col), toIndex(row-1,col));
--[ 2021.09.21.23.06.53.884.0 ]--
r 52             uf2.union(toIndex(row,col), toIndex(row-1,col));
--[ 2021.09.21.23.06.58.712.0 ]--
+ 57             
--[ 2021.09.21.23.06.59.453.0 ]--
r 57             uf1.union(toIndex(row,col), toIndex(row,col+1));
--[ 2021.09.21.23.07.00.133.0 ]--
+ 58             
--[ 2021.09.21.23.07.00.764.0 ]--
r 58             uf1.union(toIndex(row,col), toIndex(row,col+1));
--[ 2021.09.21.23.07.03.198.0 ]--
r 58             uf.union(toIndex(row,col), toIndex(row,col+1));
--[ 2021.09.21.23.07.03.453.0 ]--
r 58             uf3.union(toIndex(row,col), toIndex(row,col+1));
--[ 2021.09.21.23.07.04.004.0 ]--
r 57             uf.union(toIndex(row,col), toIndex(row,col+1));
--[ 2021.09.21.23.07.04.087.0 ]--
r 57             uf2.union(toIndex(row,col), toIndex(row,col+1));
--[ 2021.09.21.23.07.07.375.0 ]--
+ 62             
--[ 2021.09.21.23.07.13.093.0 ]--
r 62             uf1.union(toIndex(row,col), toIndex(row,col-1));
--[ 2021.09.21.23.07.14.029.0 ]--
+ 63             
--[ 2021.09.21.23.07.14.376.0 ]--
r 63             uf1.union(toIndex(row,col), toIndex(row,col-1));
--[ 2021.09.21.23.07.16.843.0 ]--
r 63             uf.union(toIndex(row,col), toIndex(row,col-1));
--[ 2021.09.21.23.07.17.031.0 ]--
r 63             uf3.union(toIndex(row,col), toIndex(row,col-1));
--[ 2021.09.21.23.07.17.583.0 ]--
r 62             uf.union(toIndex(row,col), toIndex(row,col-1));
--[ 2021.09.21.23.07.17.684.0 ]--
r 62             uf2.union(toIndex(row,col), toIndex(row,col-1));
--[ 2021.09.21.23.07.23.508.0 ]--
+ 67             
--[ 2021.09.21.23.07.24.422.0 ]--
r 67             uf1.union(toIndex(row,col), toIndex(row+1,col-1));
--[ 2021.09.21.23.07.25.628.0 ]--
+ 68             
--[ 2021.09.21.23.07.26.003.0 ]--
r 68             uf1.union(toIndex(row,col), toIndex(row+1,col-1));
--[ 2021.09.21.23.07.28.469.0 ]--
r 68             uf.union(toIndex(row,col), toIndex(row+1,col-1));
--[ 2021.09.21.23.07.28.683.0 ]--
r 68             uf3.union(toIndex(row,col), toIndex(row+1,col-1));
--[ 2021.09.21.23.07.29.270.0 ]--
r 67             uf.union(toIndex(row,col), toIndex(row+1,col-1));
--[ 2021.09.21.23.07.29.330.0 ]--
r 67             uf2.union(toIndex(row,col), toIndex(row+1,col-1));
--[ 2021.09.21.23.07.35.266.0 ]--
+ 72             
--[ 2021.09.21.23.07.35.700.0 ]--
r 72             uf1.union(toIndex(row,col), toIndex(row-1,col+1));
--[ 2021.09.21.23.07.36.280.0 ]--
+ 73             
--[ 2021.09.21.23.07.36.873.0 ]--
r 73             uf1.union(toIndex(row,col), toIndex(row-1,col+1));
--[ 2021.09.21.23.07.40.084.0 ]--
r 73             uf.union(toIndex(row,col), toIndex(row-1,col+1));
--[ 2021.09.21.23.07.40.452.0 ]--
r 73             uf3.union(toIndex(row,col), toIndex(row-1,col+1));
--[ 2021.09.21.23.07.40.870.0 ]--
r 72             uf.union(toIndex(row,col), toIndex(row-1,col+1));
--[ 2021.09.21.23.07.40.935.0 ]--
r 72             uf2.union(toIndex(row,col), toIndex(row-1,col+1));
--[ 2021.09.21.23.08.05.040.0 ]--
+ 38         
--[ 2021.09.21.23.08.06.244.0 ]--
r 38         i
--[ 2021.09.21.23.08.06.696.0 ]--
r 38         if
--[ 2021.09.21.23.08.06.731.0 ]--
r 38         if 
--[ 2021.09.21.23.08.07.691.0 ]--
r 38         if ()
--[ 2021.09.21.23.08.32.982.0 ]--
r 38         if (!uf1.connected(N*N+0, N*N+2)) { return false; }
--[ 2021.09.21.23.08.35.429.0 ]--
r 39         return t;
--[ 2021.09.21.23.08.35.703.0 ]--
r 39         return tr;
--[ 2021.09.21.23.08.35.820.0 ]--
r 39         return tru;
--[ 2021.09.21.23.08.35.936.0 ]--
r 39         return true;
--[ 2021.09.21.23.08.39.972.0 ]--
r 38         if (!uf12.connected(N*N+0, N*N+2)) { return false; }
--[ 2021.09.21.23.08.41.993.0 ]--
r 38         if (!uf2.connected(N*N+0, N*N+2)) { return false; }
--[ 2021.09.21.23.09.05.267.0 ]--
r 38         if (!uf2.connected(N*N+0, N*N+2) ) { return false; }
--[ 2021.09.21.23.09.06.786.0 ]--
r 38         if (!uf2.connected(N*N+0, N*N+2) &) { return false; }
--[ 2021.09.21.23.09.06.949.0 ]--
r 38         if (!uf2.connected(N*N+0, N*N+2) &&) { return false; }
--[ 2021.09.21.23.09.07.270.0 ]--
r 38         if (!uf2.connected(N*N+0, N*N+2) && ) { return false; }
--[ 2021.09.21.23.09.12.112.0 ]--
r 38         if (!uf2.connected(N*N+0, N*N+2) && ) { return t; }
--[ 2021.09.21.23.09.12.373.0 ]--
r 38         if (!uf2.connected(N*N+0, N*N+2) && ) { return tr; }
--[ 2021.09.21.23.09.12.739.0 ]--
r 38         if (!uf2.connected(N*N+0, N*N+2) && ) { return tru; }
--[ 2021.09.21.23.09.12.846.0 ]--
r 38         if (!uf2.connected(N*N+0, N*N+2) && ) { return true; }
--[ 2021.09.21.23.09.18.626.0 ]--
r 38         if (uf2.connected(N*N+0, N*N+2) && ) { return true; }
--[ 2021.09.21.23.09.44.539.0 ]--
- 38
--[ 2021.09.21.23.10.16.333.0 ]--
+ 38         
--[ 2021.09.21.23.10.19.495.0 ]--
- 38
--[ 2021.09.21.23.10.20.265.0 ]--
+ 38         if (uf2.connected(N*N+0, N*N+2) && ) { return true; }
--[ 2021.09.21.23.10.25.990.0 ]--
r 38         if (uf2.connected(N*N+0, N*N+) && ) { return true; }
--[ 2021.09.21.23.10.26.189.0 ]--
r 38         if (uf2.connected(N*N+0, N*N) && ) { return true; }
--[ 2021.09.21.23.10.26.345.0 ]--
r 38         if (uf2.connected(N*N+0, N*) && ) { return true; }
--[ 2021.09.21.23.10.26.484.0 ]--
r 38         if (uf2.connected(N*N+0, N) && ) { return true; }
--[ 2021.09.21.23.10.26.756.0 ]--
r 38         if (uf2.connected(N*N+0, ) && ) { return true; }
--[ 2021.09.21.23.10.29.004.0 ]--
r 38         if (uf2.connected(N*N+0, t) && ) { return true; }
--[ 2021.09.21.23.10.29.136.0 ]--
r 38         if (uf2.connected(N*N+0, to) && ) { return true; }
--[ 2021.09.21.23.10.29.874.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex) && ) { return true; }
--[ 2021.09.21.23.10.29.885.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex()) && ) { return true; }
--[ 2021.09.21.23.10.30.706.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(r)) && ) { return true; }
--[ 2021.09.21.23.10.30.875.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(ro)) && ) { return true; }
--[ 2021.09.21.23.10.32.256.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && ) { return true; }
--[ 2021.09.21.23.10.54.684.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) &&) { return true; }
--[ 2021.09.21.23.10.54.829.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) &) { return true; }
--[ 2021.09.21.23.10.54.981.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) ) { return true; }
--[ 2021.09.21.23.10.56.747.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) &) { return true; }
--[ 2021.09.21.23.10.56.876.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) &&) { return true; }
--[ 2021.09.21.23.10.57.670.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && ) { return true; }
--[ 2021.09.21.23.10.58.229.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && u) { return true; }
--[ 2021.09.21.23.10.58.344.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf) { return true; }
--[ 2021.09.21.23.10.59.757.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf2) { return true; }
--[ 2021.09.21.23.11.00.698.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf) { return true; }
--[ 2021.09.21.23.11.01.337.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3) { return true; }
--[ 2021.09.21.23.11.02.100.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.) { return true; }
--[ 2021.09.21.23.11.03.041.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected) { return true; }
--[ 2021.09.21.23.11.03.052.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected()) { return true; }
--[ 2021.09.21.23.11.04.453.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(())) { return true; }
--[ 2021.09.21.23.11.07.132.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected()) { return true; }
--[ 2021.09.21.23.11.08.651.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N)) { return true; }
--[ 2021.09.21.23.11.09.919.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*)) { return true; }
--[ 2021.09.21.23.11.11.124.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N)) { return true; }
--[ 2021.09.21.23.11.12.218.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+)) { return true; }
--[ 2021.09.21.23.11.16.166.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2)) { return true; }
--[ 2021.09.21.23.11.18.525.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2,)) { return true; }
--[ 2021.09.21.23.11.18.795.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, )) { return true; }
--[ 2021.09.21.23.11.20.428.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, t)) { return true; }
--[ 2021.09.21.23.11.20.518.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, to)) { return true; }
--[ 2021.09.21.23.11.21.067.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex)) { return true; }
--[ 2021.09.21.23.11.21.083.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex())) { return true; }
--[ 2021.09.21.23.11.21.990.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(r))) { return true; }
--[ 2021.09.21.23.11.22.111.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(ro))) { return true; }
--[ 2021.09.21.23.11.23.480.0 ]--
r 38         if (uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) { return true; }
--[ 2021.09.21.23.11.27.364.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) { return true; }
--[ 2021.09.21.23.11.31.788.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col)))) { return true; }
--[ 2021.09.21.23.11.38.972.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) ) { return true; }
--[ 2021.09.21.23.11.39.919.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) |) { return true; }
--[ 2021.09.21.23.11.40.091.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) ||) { return true; }
--[ 2021.09.21.23.11.40.430.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || ) { return true; }
--[ 2021.09.21.23.11.41.332.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || ()) { return true; }
--[ 2021.09.21.23.11.42.995.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (u)) { return true; }
--[ 2021.09.21.23.11.43.095.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf)) { return true; }
--[ 2021.09.21.23.11.44.468.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2)) { return true; }
--[ 2021.09.21.23.11.45.421.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.)) { return true; }
--[ 2021.09.21.23.11.46.023.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.c)) { return true; }
--[ 2021.09.21.23.11.46.130.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.co)) { return true; }
--[ 2021.09.21.23.11.46.691.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected)) { return true; }
--[ 2021.09.21.23.11.46.701.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected())) { return true; }
--[ 2021.09.21.23.11.58.920.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N))) { return true; }
--[ 2021.09.21.23.12.01.063.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N&))) { return true; }
--[ 2021.09.21.23.12.01.412.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N))) { return true; }
--[ 2021.09.21.23.12.01.705.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*))) { return true; }
--[ 2021.09.21.23.12.02.571.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N))) { return true; }
--[ 2021.09.21.23.12.04.038.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+))) { return true; }
--[ 2021.09.21.23.12.04.326.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1))) { return true; }
--[ 2021.09.21.23.12.06.242.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1,))) { return true; }
--[ 2021.09.21.23.12.06.704.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, ))) { return true; }
--[ 2021.09.21.23.12.07.457.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, t))) { return true; }
--[ 2021.09.21.23.12.07.564.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, to))) { return true; }
--[ 2021.09.21.23.12.08.206.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex))) { return true; }
--[ 2021.09.21.23.12.08.214.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex()))) { return true; }
--[ 2021.09.21.23.12.09.289.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(r)))) { return true; }
--[ 2021.09.21.23.12.09.353.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(ro)))) { return true; }
--[ 2021.09.21.23.12.10.730.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)))) { return true; }
--[ 2021.09.21.23.12.14.740.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) )) { return true; }
--[ 2021.09.21.23.12.16.584.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) &)) { return true; }
--[ 2021.09.21.23.12.16.748.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) &&)) { return true; }
--[ 2021.09.21.23.12.17.058.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && )) { return true; }
--[ 2021.09.21.23.12.18.161.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && u)) { return true; }
--[ 2021.09.21.23.12.18.379.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf)) { return true; }
--[ 2021.09.21.23.12.20.256.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3)) { return true; }
--[ 2021.09.21.23.12.20.407.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.)) { return true; }
--[ 2021.09.21.23.12.21.148.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected)) { return true; }
--[ 2021.09.21.23.12.21.169.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected())) { return true; }
--[ 2021.09.21.23.12.23.915.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N))) { return true; }
--[ 2021.09.21.23.12.25.243.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*))) { return true; }
--[ 2021.09.21.23.12.25.711.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N))) { return true; }
--[ 2021.09.21.23.12.26.771.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+))) { return true; }
--[ 2021.09.21.23.12.27.234.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+4))) { return true; }
--[ 2021.09.21.23.12.27.994.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+))) { return true; }
--[ 2021.09.21.23.12.28.392.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+4))) { return true; }
--[ 2021.09.21.23.12.28.696.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+))) { return true; }
--[ 2021.09.21.23.12.28.811.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3))) { return true; }
--[ 2021.09.21.23.12.33.075.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3,))) { return true; }
--[ 2021.09.21.23.12.33.202.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, ))) { return true; }
--[ 2021.09.21.23.12.33.927.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, t))) { return true; }
--[ 2021.09.21.23.12.34.076.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, to))) { return true; }
--[ 2021.09.21.23.12.34.512.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex))) { return true; }
--[ 2021.09.21.23.12.34.541.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex()))) { return true; }
--[ 2021.09.21.23.12.35.107.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(r)))) { return true; }
--[ 2021.09.21.23.12.36.264.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return true; }
--[ 2021.09.21.23.12.41.714.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return f; }
--[ 2021.09.21.23.12.42.282.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return fa; }
--[ 2021.09.21.23.12.42.480.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return fal; }
--[ 2021.09.21.23.12.42.649.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return fals; }
--[ 2021.09.21.23.12.43.542.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.12.46.600.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.12.51.720.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && u!f3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.12.53.240.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.12.53.367.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && f3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.12.55.522.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && !f3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.12.55.983.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && !uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.13.00.611.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.13.04.248.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col)) && !uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.13.14.431.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.23.13.50.284.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) & !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col)) && !uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.13.50.698.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col))  !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col)) && !uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.13.51.600.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) | !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col)) && !uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.13.51.799.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) || !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col)) && !uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.01.010.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) || !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col)) & !uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.01.134.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) || !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col))  !uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.01.571.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) || !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col)) | !uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.01.787.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) || !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col)) || !uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.08.005.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.23.14.48.274.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) || !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col))  !uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.48.372.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) || !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col)) && !uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.48.721.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col))  !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col)) && !uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.48.880.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col)) && !uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.49.216.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && !uf3.connected(N*N+2, toIndex(row, col))) || (!uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.49.543.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && !uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.49.896.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && f3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.50.075.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && u!\f3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.50.272.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && u!f3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.50.528.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && u!\f3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.50.688.0 ]--
r 38         if ((!uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.51.031.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return false; }
--[ 2021.09.21.23.14.52.541.0 ]--
r 38         if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return true; }
--[ 2021.09.21.23.14.56.518.0 ]--
r 39         return tru;
--[ 2021.09.21.23.14.56.660.0 ]--
r 39         return tr;
--[ 2021.09.21.23.14.56.783.0 ]--
r 39         return t;
--[ 2021.09.21.23.14.56.927.0 ]--
r 39         return ;
--[ 2021.09.21.23.14.57.573.0 ]--
r 39         return f;
--[ 2021.09.21.23.14.58.468.0 ]--
r 39         return false;
--[ 2021.09.21.23.15.03.782.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.23.16.04.976.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.21.23.17.04.839.0 ]--
:/src/HexBoardStats.java
+ 65             
--[ 2021.09.21.23.17.05.252.0 ]--
r 65             S
--[ 2021.09.21.23.17.06.698.0 ]--
r 65             StdOut
--[ 2021.09.21.23.17.08.304.0 ]--
r 65             StdOut.
--[ 2021.09.21.23.17.08.814.0 ]--
r 65             StdOut.p
--[ 2021.09.21.23.17.09.053.0 ]--
r 65             StdOut.pr
--[ 2021.09.21.23.17.09.543.0 ]--
r 65             StdOut.println
--[ 2021.09.21.23.17.09.559.0 ]--
r 65             StdOut.println()
--[ 2021.09.21.23.17.09.567.0 ]--
r 65             StdOut.println();
--[ 2021.09.21.23.17.17.126.0 ]--
r 65             StdOut.println("");
--[ 2021.09.21.23.17.23.296.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.08.05.00.130.0 ]--
NewLogger: P01_Hex
Version: 1.5
--[ 2021.09.22.08.05.01.414.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2021.09.22.08.05.01.459.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    private int N0 = -1;
    private int N1 = -1;
    private int T = -1;
    private double prob[];
    public HexBoardStats(int N0, int N1, int T) {
        if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument(s)"); }
        this.N0 = N0;
        this.N1 = N1;
        this.T = T;
        this.prob = new double[N1-N0+1];
        for (int i=N0; i<=N1; i++) {
            for (int j=0; j<T; j++) {
                prob[i-N0] += playAGame(i) == 1 ? 1:0;
            }
            prob[i-N0] = prob[i-N0]/T;
        }
    }

    public int getN0() { return this.N0; }

    public int getN1() { return this.N1; }

    public int getT() { return this.T; }

    public double getP1WinProbabilityEstimate(int n) {
        if (n < N0 || n > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
        return this.prob[n-N0];
    }

    public double getP2WinProbabilityEstimate(int n) {
        return 1.0 - getP1WinProbabilityEstimate(n);
    }

    private static int playAGame(int N) {
        HexBoard board = new HexBoard(N);
        int player = 1;
        while(!board.hasPlayer1Won() && !board.hasPlayer2Won()) {
            int row = StdRandom.uniform(N);
            int col = StdRandom.uniform(N);
            if (board.isSet(row, col)) { continue; }
            board.setTile(row, col, player);
            player = player == 1 ? 2:1;
        }
        return board.hasPlayer1Won() ? 1:0;
    }

    private void printReport() {
        StdOut.println("T = " + T);
        for (int N=N0; N<N1; N++) {
            StdOut.print("N = " + N + " ");
            StdOut.print("P1 = " + getP1WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP1WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.print("P2 = " + getP2WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP2WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.println("");
        }
    }

    public static void main(String[] args) {
        int N0 = Integer.parseInt(args[0]);
        int N1 = Integer.parseInt(args[1]);
        int T = Integer.parseInt(args[2]);
        HexBoardStats hbs = new HexBoardStats(10,15,10);
        hbs.printReport();
    }
}

--[ 2021.09.22.08.05.01.500.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.22.08.05.01.545.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.09.22.08.05.01.592.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    private int[] board;
    private QuickFindUF uf1;
    private QuickFindUF uf2;
    private QuickFindUF uf3;
    private int N;

    public HexBoard(int N) {
        if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= 0");}
        board = new int[N*N+4];
        board[N*N+0] = 1;
        board[N*N+1] = 2;
        board[N*N+2] = 1;
        board[N*N+3] = 2;
        uf1 = new QuickFindUF(N*N+4);
        uf2 = new QuickFindUF(N*N+4);
        uf3 = new QuickFindUF(N*N+4);
        this.N = N;
    }

    public int getPlayer(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return this.board[toIndex(row,col)];
    }
    
    public boolean isSet(int row, int col) {
        if (row < 0 || row >= N || col < 0 || col >= N) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.board[toIndex(row, col)] == 0) { return false; }
        return true;
    }

    public boolean isOnWinningPath(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return true; }
        return false;
    }

    public void setTile(int row, int col, int player) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.isSet(row,col)) { throw new java.lang.IllegalArgumentException("Tile is already set"); }
        this.board[toIndex(row,col)] = player;
        if (isValidHex(row+1,col) && this.board[toIndex(row+1,col)] == player) {
            uf1.union(toIndex(row,col), toIndex(row+1,col));
            uf2.union(toIndex(row,col), toIndex(row+1,col));
            uf3.union(toIndex(row,col), toIndex(row+1,col));
        }
        if (isValidHex(row-1,col) && this.board[toIndex(row-1,col)] == player) {
            uf1.union(toIndex(row,col), toIndex(row-1,col));
            uf2.union(toIndex(row,col), toIndex(row-1,col));
            uf3.union(toIndex(row,col), toIndex(row-1,col));
        }
        if (isValidHex(row,col+1) && this.board[toIndex(row,col+1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row,col+1));
            uf2.union(toIndex(row,col), toIndex(row,col+1));
            uf3.union(toIndex(row,col), toIndex(row,col+1));
        }
        if (isValidHex(row,col-1) && this.board[toIndex(row,col-1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row,col-1));
            uf2.union(toIndex(row,col), toIndex(row,col-1));
            uf3.union(toIndex(row,col), toIndex(row,col-1));
        }
        if (isValidHex(row+1,col-1) && this.board[toIndex(row+1,col-1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row+1,col-1));
            uf2.union(toIndex(row,col), toIndex(row+1,col-1));
            uf3.union(toIndex(row,col), toIndex(row+1,col-1));
        }
        if (isValidHex(row-1,col+1) && this.board[toIndex(row-1,col+1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row-1,col+1));
            uf2.union(toIndex(row,col), toIndex(row-1,col+1));
            uf3.union(toIndex(row,col), toIndex(row-1,col+1));
        }
        if (player == 1) {
            if (col == 0) {
                uf1.union(toIndex(row, col),N*N+0);
                uf2.union(toIndex(row, col),N*N+0);
            } else if (col == N-1) {
                uf1.union(toIndex(row, col), N*N+2);
                uf3.union(toIndex(row, col), N*N+2);
            }
        } else if (player == 2) {
            if (row == 0) {
                uf1.union(toIndex(row, col), N*N+3);
                uf3.union(toIndex(row, col), N*N+3);
            } else if (row == N-1) {
                uf1.union(toIndex(row, col), N*N+1);
                uf2.union(toIndex(row, col), N*N+1);
            }
        }
    }

    public boolean hasPlayer1Won() {
        if (!uf1.connected(N*N+0, N*N+2)) { return false; }
        return true;
    }

    public boolean hasPlayer2Won() {
        if (!uf1.connected(N*N+1, N*N+3)) { return false; }
        return true;
    }

    public int numberOfUnsetTiles() {
        int count = 0;
        for (int row=0; row<N; row++) {
            for (int col=0; col<N; col++) {
                if (!this.isSet(row, col)) {count++;}
            }
        }
        return count;
    }

    private int toIndex(int row, int col) {
        return (row * N) + col;
    }

    private boolean isValidHex(int row, int col) {
        if (row < 0 || row >= N || col < 0 || col >= N) { return false; }
        return true;
    }
}

--[ 2021.09.22.08.05.01.636.0 ]--
InitFile: /.cos265


--[ 2021.09.22.08.05.01.682.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.09.22.08.06.35.732.0 ]--
UpdateTree (AD): 1 0
+ /.idea/runConfigurations.xml

--[ 2021.09.22.08.06.47.728.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.15.56.18.927.0 ]--
NewLogger: P01_Hex
Version: 1.5
--[ 2021.09.22.15.56.18.998.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2021.09.22.15.56.19.002.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.09.22.15.56.19.006.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.09.22.15.56.19.010.0 ]--
InitFile: /.cos265


--[ 2021.09.22.15.56.19.012.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.22.15.56.19.015.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    private int[] board;
    private QuickFindUF uf1;
    private QuickFindUF uf2;
    private QuickFindUF uf3;
    private int N;

    public HexBoard(int N) {
        if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= 0");}
        board = new int[N*N+4];
        board[N*N+0] = 1;
        board[N*N+1] = 2;
        board[N*N+2] = 1;
        board[N*N+3] = 2;
        uf1 = new QuickFindUF(N*N+4);
        uf2 = new QuickFindUF(N*N+4);
        uf3 = new QuickFindUF(N*N+4);
        this.N = N;
    }

    public int getPlayer(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return this.board[toIndex(row,col)];
    }
    
    public boolean isSet(int row, int col) {
        if (row < 0 || row >= N || col < 0 || col >= N) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.board[toIndex(row, col)] == 0) { return false; }
        return true;
    }

    public boolean isOnWinningPath(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return true; }
        return false;
    }

    public void setTile(int row, int col, int player) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.isSet(row,col)) { throw new java.lang.IllegalArgumentException("Tile is already set"); }
        this.board[toIndex(row,col)] = player;
        if (isValidHex(row+1,col) && this.board[toIndex(row+1,col)] == player) {
            uf1.union(toIndex(row,col), toIndex(row+1,col));
            uf2.union(toIndex(row,col), toIndex(row+1,col));
            uf3.union(toIndex(row,col), toIndex(row+1,col));
        }
        if (isValidHex(row-1,col) && this.board[toIndex(row-1,col)] == player) {
            uf1.union(toIndex(row,col), toIndex(row-1,col));
            uf2.union(toIndex(row,col), toIndex(row-1,col));
            uf3.union(toIndex(row,col), toIndex(row-1,col));
        }
        if (isValidHex(row,col+1) && this.board[toIndex(row,col+1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row,col+1));
            uf2.union(toIndex(row,col), toIndex(row,col+1));
            uf3.union(toIndex(row,col), toIndex(row,col+1));
        }
        if (isValidHex(row,col-1) && this.board[toIndex(row,col-1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row,col-1));
            uf2.union(toIndex(row,col), toIndex(row,col-1));
            uf3.union(toIndex(row,col), toIndex(row,col-1));
        }
        if (isValidHex(row+1,col-1) && this.board[toIndex(row+1,col-1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row+1,col-1));
            uf2.union(toIndex(row,col), toIndex(row+1,col-1));
            uf3.union(toIndex(row,col), toIndex(row+1,col-1));
        }
        if (isValidHex(row-1,col+1) && this.board[toIndex(row-1,col+1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row-1,col+1));
            uf2.union(toIndex(row,col), toIndex(row-1,col+1));
            uf3.union(toIndex(row,col), toIndex(row-1,col+1));
        }
        if (player == 1) {
            if (col == 0) {
                uf1.union(toIndex(row, col),N*N+0);
                uf2.union(toIndex(row, col),N*N+0);
            } else if (col == N-1) {
                uf1.union(toIndex(row, col), N*N+2);
                uf3.union(toIndex(row, col), N*N+2);
            }
        } else if (player == 2) {
            if (row == 0) {
                uf1.union(toIndex(row, col), N*N+3);
                uf3.union(toIndex(row, col), N*N+3);
            } else if (row == N-1) {
                uf1.union(toIndex(row, col), N*N+1);
                uf2.union(toIndex(row, col), N*N+1);
            }
        }
    }

    public boolean hasPlayer1Won() {
        if (!uf1.connected(N*N+0, N*N+2)) { return false; }
        return true;
    }

    public boolean hasPlayer2Won() {
        if (!uf1.connected(N*N+1, N*N+3)) { return false; }
        return true;
    }

    public int numberOfUnsetTiles() {
        int count = 0;
        for (int row=0; row<N; row++) {
            for (int col=0; col<N; col++) {
                if (!this.isSet(row, col)) {count++;}
            }
        }
        return count;
    }

    private int toIndex(int row, int col) {
        return (row * N) + col;
    }

    private boolean isValidHex(int row, int col) {
        if (row < 0 || row >= N || col < 0 || col >= N) { return false; }
        return true;
    }
}

--[ 2021.09.22.15.56.19.017.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    private int N0 = -1;
    private int N1 = -1;
    private int T = -1;
    private double prob[];
    public HexBoardStats(int N0, int N1, int T) {
        if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument(s)"); }
        this.N0 = N0;
        this.N1 = N1;
        this.T = T;
        this.prob = new double[N1-N0+1];
        for (int i=N0; i<=N1; i++) {
            for (int j=0; j<T; j++) {
                prob[i-N0] += playAGame(i) == 1 ? 1:0;
            }
            prob[i-N0] = prob[i-N0]/T;
        }
    }

    public int getN0() { return this.N0; }

    public int getN1() { return this.N1; }

    public int getT() { return this.T; }

    public double getP1WinProbabilityEstimate(int n) {
        if (n < N0 || n > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
        return this.prob[n-N0];
    }

    public double getP2WinProbabilityEstimate(int n) {
        return 1.0 - getP1WinProbabilityEstimate(n);
    }

    private static int playAGame(int N) {
        HexBoard board = new HexBoard(N);
        int player = 1;
        while(!board.hasPlayer1Won() && !board.hasPlayer2Won()) {
            int row = StdRandom.uniform(N);
            int col = StdRandom.uniform(N);
            if (board.isSet(row, col)) { continue; }
            board.setTile(row, col, player);
            player = player == 1 ? 2:1;
        }
        return board.hasPlayer1Won() ? 1:0;
    }

    private void printReport() {
        StdOut.println("T = " + T);
        for (int N=N0; N<N1; N++) {
            StdOut.print("N = " + N + " ");
            StdOut.print("P1 = " + getP1WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP1WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.print("P2 = " + getP2WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP2WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.println("");
        }
    }

    public static void main(String[] args) {
        int N0 = Integer.parseInt(args[0]);
        int N1 = Integer.parseInt(args[1]);
        int T = Integer.parseInt(args[2]);
        HexBoardStats hbs = new HexBoardStats(10,15,10);
        hbs.printReport();
    }
}

--[ 2021.09.22.15.56.30.503.0 ]--
UpdateTree (AD): 1 0
+ /.idea/runConfigurations.xml

--[ 2021.09.22.16.00.02.230.0 ]--
UpdateTree (AD): 0 1
- /.idea/runConfigurations.xml

--[ 2021.09.22.16.04.07.845.0 ]--
:/src/HexBoard.java
+ 116         
--[ 2021.09.22.16.04.42.233.0 ]--
r 31         if (!) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.22.16.04.43.436.0 ]--
r 31         if (!i) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.22.16.04.43.704.0 ]--
r 31         if (!is) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.22.16.04.45.708.0 ]--
r 31         if (!isValidHex) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.22.16.04.45.734.0 ]--
r 31         if (!isValidHex()) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.22.16.04.46.738.0 ]--
r 31         if (!isValidHex(r)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.22.16.04.48.093.0 ]--
r 31         if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.22.16.05.00.405.0 ]--
+ 116                 if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
r 117 
--[ 2021.09.22.16.05.00.449.0 ]--
r 116         if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
--[ 2021.09.22.16.05.01.799.0 ]--
- 117
--[ 2021.09.22.16.12.33.356.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.16.14.30.338.0 ]--
:/src/HexBoardStats.java
+ 73         
--[ 2021.09.22.16.14.45.638.0 ]--
r 73         Stopwatch runtime = new Stopwatch();
--[ 2021.09.22.16.14.48.912.0 ]--
+ 75         
--[ 2021.09.22.16.15.00.688.0 ]--
r 75         StdOut.println("elapsed time: " + runtime.elapsedTime());
--[ 2021.09.22.16.16.11.630.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(10,15,1);
--[ 2021.09.22.16.17.41.458.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,15,1);
--[ 2021.09.22.16.17.41.633.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(,15,1);
--[ 2021.09.22.16.17.42.607.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(5,15,1);
--[ 2021.09.22.16.17.44.348.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(,15,1);
--[ 2021.09.22.16.17.44.528.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(2,15,1);
--[ 2021.09.22.16.17.45.000.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(,15,1);
--[ 2021.09.22.16.17.45.220.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,15,1);
--[ 2021.09.22.16.17.46.784.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,1,1);
--[ 2021.09.22.16.17.53.643.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.16.18.26.322.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.16.19.48.756.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.16.20.44.673.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,15,1);
--[ 2021.09.22.16.20.45.409.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(,15,1);
--[ 2021.09.22.16.20.45.828.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(2,15,1);
--[ 2021.09.22.16.20.46.186.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(,15,1);
--[ 2021.09.22.16.20.46.546.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(5,15,1);
--[ 2021.09.22.16.20.46.896.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(,15,1);
--[ 2021.09.22.16.20.47.246.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(10,15,1);
--[ 2021.09.22.16.20.47.954.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(10,15,10);
--[ 2021.09.22.16.20.48.338.0 ]--
r 75         
--[ 2021.09.22.16.20.49.887.0 ]--
r 75         StdOut.println("elapsed time: " + runtime.elapsedTime());
--[ 2021.09.22.16.20.55.171.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.16.21.21.514.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,15,10);
--[ 2021.09.22.16.21.23.643.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,1,10);
--[ 2021.09.22.16.21.23.860.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,,10);
--[ 2021.09.22.16.21.24.101.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,2,10);
--[ 2021.09.22.16.21.26.176.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,2,1);
--[ 2021.09.22.16.21.30.887.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.16.21.38.549.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,2,10\);
--[ 2021.09.22.16.21.38.940.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,2,10);
--[ 2021.09.22.16.21.39.597.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,,10);
--[ 2021.09.22.16.21.39.962.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,15,10);
--[ 2021.09.22.16.21.40.610.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(10,15,10);
--[ 2021.09.22.16.21.40.995.0 ]--
r 75         
--[ 2021.09.22.16.21.42.945.0 ]--
r 75         StdOut.println("elapsed time: " + runtime.elapsedTime());
--[ 2021.09.22.16.23.25.188.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,15,10);
--[ 2021.09.22.16.23.31.976.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,1,10);
--[ 2021.09.22.16.23.32.321.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,,10);
--[ 2021.09.22.16.23.33.141.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,6,10);
--[ 2021.09.22.16.23.35.972.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(1,6,1);
--[ 2021.09.22.16.24.03.540.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.07.35.612.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(,6,1);
--[ 2021.09.22.18.07.35.807.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(2,6,1);
--[ 2021.09.22.18.07.37.936.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(2,,1);
--[ 2021.09.22.18.07.38.084.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(2,1,1);
--[ 2021.09.22.18.07.38.469.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(2,15,1);
--[ 2021.09.22.18.07.42.923.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(2,15,10);
--[ 2021.09.22.18.07.43.085.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(2,15,100);
--[ 2021.09.22.18.07.43.255.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(2,15,1000);
--[ 2021.09.22.18.07.43.405.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(2,15,10000);
--[ 2021.09.22.18.07.43.616.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(2,15,100000);
--[ 2021.09.22.18.07.49.204.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.14.16.976.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(2,15,10000);
--[ 2021.09.22.18.14.23.401.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(,15,10000);
--[ 2021.09.22.18.14.26.658.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(5,15,10000);
--[ 2021.09.22.18.14.29.292.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(5,1,10000);
--[ 2021.09.22.18.14.30.094.0 ]--
r 74         HexBoardStats hbs = new HexBoardStats(5,10,10000);
--[ 2021.09.22.18.14.34.297.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.15.58.911.0 ]--
+ 23                 
--[ 2021.09.22.18.16.01.732.0 ]--
+ 25                 
--[ 2021.09.22.18.16.10.556.0 ]--
+ 23                 Stopwatch runtime = new Stopwatch();
+ 24         HexBoardStats hbs = new HexBoardStats(5,10,10000);
r 25         StdOut.println("elapsed time: " + runtime.elapsedTime());
--[ 2021.09.22.18.16.10.582.0 ]--
r 24                 HexBoardStats hbs = new HexBoardStats(5,10,10000);
r 25                 StdOut.println("elapsed time: " + runtime.elapsedTime());
--[ 2021.09.22.18.16.14.582.0 ]--
- 24
r 24                 
--[ 2021.09.22.18.16.16.312.0 ]--
+ 26                 HexBoardStats hbs = new HexBoardStats(5,10,10000);
r 27                 StdOut.println("elapsed time: " + runtime.elapsedTime());
--[ 2021.09.22.18.16.18.149.0 ]--
- 26
--[ 2021.09.22.18.16.19.618.0 ]--
- 24
--[ 2021.09.22.18.16.25.991.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.20.12.592.0 ]--
- 23
--[ 2021.09.22.18.20.14.040.0 ]--
+ 22             
--[ 2021.09.22.18.20.14.484.0 ]--
+ 22                             Stopwatch runtime = new Stopwatch();
r 23 
--[ 2021.09.22.18.20.14.497.0 ]--
r 22             Stopwatch runtime = new Stopwatch();
--[ 2021.09.22.18.20.15.609.0 ]--
- 23
--[ 2021.09.22.18.20.18.158.0 ]--
- 25
--[ 2021.09.22.18.20.22.309.0 ]--
+ 26             prob[i-N0] = prob[i-N0]/T;                StdOut.println("elapsed time: " + runtime.elapsedTime());
r 27 
--[ 2021.09.22.18.20.24.310.0 ]--
- 26
r 26             prob[i-N0] = prob[i-N0]/T;
--[ 2021.09.22.18.20.27.324.0 ]--
+ 27         }                StdOut.println("elapsed time: " + runtime.elapsedTime());
r 28 
--[ 2021.09.22.18.20.28.757.0 ]--
- 27
r 27         }
--[ 2021.09.22.18.20.30.908.0 ]--
+ 27             
--[ 2021.09.22.18.20.32.507.0 ]--
+ 27                             StdOut.println("elapsed time: " + runtime.elapsedTime());
r 28 
--[ 2021.09.22.18.20.32.522.0 ]--
r 27             StdOut.println("elapsed time: " + runtime.elapsedTime());
--[ 2021.09.22.18.20.33.791.0 ]--
- 28
--[ 2021.09.22.18.20.40.746.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.24.20.100.0 ]--
r 27             StdOut.println("elapsed time : " + runtime.elapsedTime());
--[ 2021.09.22.18.24.20.327.0 ]--
r 27             StdOut.println("elapsed time f: " + runtime.elapsedTime());
--[ 2021.09.22.18.24.20.455.0 ]--
r 27             StdOut.println("elapsed time fo: " + runtime.elapsedTime());
--[ 2021.09.22.18.24.20.566.0 ]--
r 27             StdOut.println("elapsed time for: " + runtime.elapsedTime());
--[ 2021.09.22.18.24.20.720.0 ]--
r 27             StdOut.println("elapsed time for : " + runtime.elapsedTime());
--[ 2021.09.22.18.24.24.148.0 ]--
r 27             StdOut.println("elapsed time for ": " + runtime.elapsedTime());
--[ 2021.09.22.18.24.29.402.0 ]--
r 27             StdOut.println("elapsed time for " : " + runtime.elapsedTime());
--[ 2021.09.22.18.24.30.317.0 ]--
r 27             StdOut.println("elapsed time for " +: " + runtime.elapsedTime());
--[ 2021.09.22.18.24.30.822.0 ]--
r 27             StdOut.println("elapsed time for " + : " + runtime.elapsedTime());
--[ 2021.09.22.18.24.31.357.0 ]--
r 27             StdOut.println("elapsed time for " + +: " + runtime.elapsedTime());
--[ 2021.09.22.18.24.31.806.0 ]--
r 27             StdOut.println("elapsed time for " + + : " + runtime.elapsedTime());
--[ 2021.09.22.18.24.33.680.0 ]--
r 27             StdOut.println("elapsed time for " + + ": " + runtime.elapsedTime());
--[ 2021.09.22.18.24.36.086.0 ]--
r 27             StdOut.println("elapsed time for " +  + ": " + runtime.elapsedTime());
--[ 2021.09.22.18.24.38.814.0 ]--
r 27             StdOut.println("elapsed time for " + i + ": " + runtime.elapsedTime());
--[ 2021.09.22.18.24.46.749.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.24.58.868.0 ]--
- 77
--[ 2021.09.22.18.25.00.540.0 ]--
- 75
--[ 2021.09.22.18.25.04.186.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.29.17.244.0 ]--
r 61         for (int N=N0; N<=N1; N++) {
--[ 2021.09.22.18.29.22.922.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.29.41.904.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,1,10000);
--[ 2021.09.22.18.29.42.006.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,,10000);
--[ 2021.09.22.18.29.42.422.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,9,10000);
--[ 2021.09.22.18.29.46.390.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.30.46.802.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.31.32.467.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,,10000);
--[ 2021.09.22.18.31.32.827.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,0,10000);
--[ 2021.09.22.18.31.33.369.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,01,10000);
--[ 2021.09.22.18.31.34.853.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,0,10000);
--[ 2021.09.22.18.31.34.982.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,,10000);
--[ 2021.09.22.18.31.35.574.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,1,10000);
--[ 2021.09.22.18.31.36.373.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,10,10000);
--[ 2021.09.22.18.31.39.119.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(,10,10000);
--[ 2021.09.22.18.31.39.678.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(1,10,10000);
--[ 2021.09.22.18.31.40.709.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,10000);
--[ 2021.09.22.18.31.46.520.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,1000);
--[ 2021.09.22.18.32.32.177.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,10,1000);
--[ 2021.09.22.18.32.33.887.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,100,1000);
--[ 2021.09.22.18.32.39.595.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.32.53.423.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,10,1000);
--[ 2021.09.22.18.32.54.016.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,101,1000);
--[ 2021.09.22.18.32.59.542.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.33.37.559.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,101,100);
--[ 2021.09.22.18.33.46.271.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,11,100);
--[ 2021.09.22.18.33.48.440.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,11,100);
--[ 2021.09.22.18.33.52.487.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.33.57.569.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,1,100);
--[ 2021.09.22.18.33.57.824.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,100);
--[ 2021.09.22.18.34.01.423.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.34.16.517.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,1000);
--[ 2021.09.22.18.34.19.753.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.34.28.381.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,10000);
--[ 2021.09.22.18.34.31.944.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.34.41.058.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,100000);
--[ 2021.09.22.18.34.45.007.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.35.02.445.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,1000000);
--[ 2021.09.22.18.35.07.614.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.36.33.543.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,100000);
--[ 2021.09.22.18.36.33.695.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,10000);
--[ 2021.09.22.18.36.37.966.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.36.41.967.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,1000);
--[ 2021.09.22.18.36.45.099.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,10000);
--[ 2021.09.22.18.36.49.966.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(1,10,10000);
--[ 2021.09.22.18.36.50.135.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(,10,10000);
--[ 2021.09.22.18.36.59.773.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(,100,10000);
--[ 2021.09.22.18.37.01.632.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,100,10000);
--[ 2021.09.22.18.37.11.697.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,10,10000);
--[ 2021.09.22.18.37.11.838.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,1,10000);
--[ 2021.09.22.18.37.12.247.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,,10000);
--[ 2021.09.22.18.37.13.054.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,2,10000);
--[ 2021.09.22.18.37.13.415.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,25,10000);
--[ 2021.09.22.18.37.17.541.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.46.06.508.0 ]--
:/src/HexBoard.java
r 7     private W uf1;
--[ 2021.09.22.18.46.06.927.0 ]--
r 7     private We uf1;
--[ 2021.09.22.18.46.07.879.0 ]--
r 7     private WeightedQuickUnionUF uf1;
--[ 2021.09.22.18.46.12.354.0 ]--
r 8     private W uf2;
--[ 2021.09.22.18.46.12.661.0 ]--
r 8     private We uf2;
--[ 2021.09.22.18.46.13.190.0 ]--
r 8     private WeightedQuickUnionUF uf2;
--[ 2021.09.22.18.46.16.941.0 ]--
r 9     private W uf3;
--[ 2021.09.22.18.46.17.276.0 ]--
r 9     private We uf3;
--[ 2021.09.22.18.46.17.849.0 ]--
r 9     private WeightedQuickUnionUF uf3;
--[ 2021.09.22.18.46.28.343.0 ]--
r 19         uf1 = new WeightedQuickUnionUF(N*N+4);
--[ 2021.09.22.18.46.30.057.0 ]--
r 20         uf2 = new WeightedQuickUnionUF(N*N+4);
--[ 2021.09.22.18.46.31.537.0 ]--
r 21         uf3 = new WeightedQuickUnionUF(N*N+4);
--[ 2021.09.22.18.46.46.872.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.47.37.345.0 ]--
:/src/HexBoardStats.java
r 75         HexBoardStats hbs = new HexBoardStats(5,2,10000);
--[ 2021.09.22.18.47.37.694.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,,10000);
--[ 2021.09.22.18.47.38.305.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,1,10000);
--[ 2021.09.22.18.47.38.496.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(5,10,10000);
--[ 2021.09.22.18.47.40.693.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(,10,10000);
--[ 2021.09.22.18.47.40.825.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(1,10,10000);
--[ 2021.09.22.18.47.41.011.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,10000);
--[ 2021.09.22.18.47.44.830.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,1000);
--[ 2021.09.22.18.47.44.962.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,100);
--[ 2021.09.22.18.47.50.390.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.48.03.415.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,1000);
--[ 2021.09.22.18.48.06.882.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.48.13.748.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,10000);
--[ 2021.09.22.18.48.17.714.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.48.24.617.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,100000);
--[ 2021.09.22.18.48.27.987.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.48.46.959.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,1000000);
--[ 2021.09.22.18.48.50.790.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.18.49.30.864.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,100000);
--[ 2021.09.22.18.49.31.033.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,10000);
--[ 2021.09.22.18.49.31.259.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,10,1000);
--[ 2021.09.22.18.50.37.455.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(1,10,1000);
--[ 2021.09.22.18.50.37.591.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(,10,1000);
--[ 2021.09.22.18.50.38.177.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,10,1000);
--[ 2021.09.22.18.50.40.831.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,1,1000);
--[ 2021.09.22.18.50.41.287.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,15,1000);
--[ 2021.09.22.18.50.48.379.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,15,10000);
--[ 2021.09.22.18.50.48.498.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,15,100000);
--[ 2021.09.22.18.50.52.396.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.01.00.800.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(,15,100000);
--[ 2021.09.22.19.01.01.647.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(1,15,100000);
--[ 2021.09.22.19.01.01.771.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(10,15,100000);
--[ 2021.09.22.19.01.01.914.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,15,100000);
--[ 2021.09.22.19.01.03.511.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,1,100000);
--[ 2021.09.22.19.01.03.674.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,,100000);
--[ 2021.09.22.19.01.04.601.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,1,100000);
--[ 2021.09.22.19.01.04.881.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,10,100000);
--[ 2021.09.22.19.01.05.025.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,100,100000);
--[ 2021.09.22.19.01.07.036.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,100,10000);
--[ 2021.09.22.19.01.07.170.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,100,1000);
--[ 2021.09.22.19.01.11.986.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.01.13.285.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.01.17.964.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.01.26.817.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(1000,100,1000);
--[ 2021.09.22.19.01.27.570.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(1000,1000,1000);
--[ 2021.09.22.19.01.31.718.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.05.29.827.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(1000,100,1000);
--[ 2021.09.22.19.05.29.968.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(1000,00,1000);
--[ 2021.09.22.19.05.30.170.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(1000,500,1000);
--[ 2021.09.22.19.05.32.797.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(100,500,1000);
--[ 2021.09.22.19.05.32.946.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(00,500,1000);
--[ 2021.09.22.19.05.33.044.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(500,500,1000);
--[ 2021.09.22.19.05.37.929.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.06.04.744.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(00,500,1000);
--[ 2021.09.22.19.06.04.994.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(200,500,1000);
--[ 2021.09.22.19.06.07.064.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(200,00,1000);
--[ 2021.09.22.19.06.07.203.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(200,200,1000);
--[ 2021.09.22.19.06.11.283.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.06.48.570.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,200,1000);
--[ 2021.09.22.19.06.50.445.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,1,1000);
--[ 2021.09.22.19.06.50.841.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,15,1000);
--[ 2021.09.22.19.06.55.023.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,15,100);
--[ 2021.09.22.19.06.55.154.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,15,10);
--[ 2021.09.22.19.06.56.451.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,15,1);
--[ 2021.09.22.19.06.58.721.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,15,10);
--[ 2021.09.22.19.06.58.903.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,15,100);
--[ 2021.09.22.19.06.59.092.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,15,1000);
--[ 2021.09.22.19.06.59.289.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,15,10000);
--[ 2021.09.22.19.06.59.498.0 ]--
r 75         HexBoardStats hbs = new HexBoardStats(2,15,100000);
--[ 2021.09.22.19.07.04.340.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.09.16.587.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.10.37.300.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.11.23.503.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.12.10.693.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.12.28.219.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.12.41.383.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.12.56.985.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.13.11.822.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.13.31.148.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.14.28.996.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.22.00.353.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.23.04.038.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.23.24.128.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.23.51.457.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.24.27.973.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.25.09.388.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.22.19.27.46.410.0 ]--
DisposeComponent
--[ 2021.09.28.10.40.28.267.0 ]--
NewLogger: P01_Hex
Version: 1.5
--[ 2021.09.28.10.40.28.413.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2021.09.28.10.40.28.417.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.09.28.10.40.28.420.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.09.28.10.40.28.423.0 ]--
InitFile: /.cos265


--[ 2021.09.28.10.40.28.425.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.28.10.40.28.427.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    private int[] board;
    private WeightedQuickUnionUF uf1;
    private WeightedQuickUnionUF uf2;
    private WeightedQuickUnionUF uf3;
    private int N;

    public HexBoard(int N) {
        if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= 0");}
        board = new int[N*N+4];
        board[N*N+0] = 1;
        board[N*N+1] = 2;
        board[N*N+2] = 1;
        board[N*N+3] = 2;
        uf1 = new WeightedQuickUnionUF(N*N+4);
        uf2 = new WeightedQuickUnionUF(N*N+4);
        uf3 = new WeightedQuickUnionUF(N*N+4);
        this.N = N;
    }

    public int getPlayer(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return this.board[toIndex(row,col)];
    }
    
    public boolean isSet(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.board[toIndex(row, col)] == 0) { return false; }
        return true;
    }

    public boolean isOnWinningPath(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return true; }
        return false;
    }

    public void setTile(int row, int col, int player) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.isSet(row,col)) { throw new java.lang.IllegalArgumentException("Tile is already set"); }
        this.board[toIndex(row,col)] = player;
        if (isValidHex(row+1,col) && this.board[toIndex(row+1,col)] == player) {
            uf1.union(toIndex(row,col), toIndex(row+1,col));
            uf2.union(toIndex(row,col), toIndex(row+1,col));
            uf3.union(toIndex(row,col), toIndex(row+1,col));
        }
        if (isValidHex(row-1,col) && this.board[toIndex(row-1,col)] == player) {
            uf1.union(toIndex(row,col), toIndex(row-1,col));
            uf2.union(toIndex(row,col), toIndex(row-1,col));
            uf3.union(toIndex(row,col), toIndex(row-1,col));
        }
        if (isValidHex(row,col+1) && this.board[toIndex(row,col+1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row,col+1));
            uf2.union(toIndex(row,col), toIndex(row,col+1));
            uf3.union(toIndex(row,col), toIndex(row,col+1));
        }
        if (isValidHex(row,col-1) && this.board[toIndex(row,col-1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row,col-1));
            uf2.union(toIndex(row,col), toIndex(row,col-1));
            uf3.union(toIndex(row,col), toIndex(row,col-1));
        }
        if (isValidHex(row+1,col-1) && this.board[toIndex(row+1,col-1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row+1,col-1));
            uf2.union(toIndex(row,col), toIndex(row+1,col-1));
            uf3.union(toIndex(row,col), toIndex(row+1,col-1));
        }
        if (isValidHex(row-1,col+1) && this.board[toIndex(row-1,col+1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row-1,col+1));
            uf2.union(toIndex(row,col), toIndex(row-1,col+1));
            uf3.union(toIndex(row,col), toIndex(row-1,col+1));
        }
        if (player == 1) {
            if (col == 0) {
                uf1.union(toIndex(row, col),N*N+0);
                uf2.union(toIndex(row, col),N*N+0);
            } else if (col == N-1) {
                uf1.union(toIndex(row, col), N*N+2);
                uf3.union(toIndex(row, col), N*N+2);
            }
        } else if (player == 2) {
            if (row == 0) {
                uf1.union(toIndex(row, col), N*N+3);
                uf3.union(toIndex(row, col), N*N+3);
            } else if (row == N-1) {
                uf1.union(toIndex(row, col), N*N+1);
                uf2.union(toIndex(row, col), N*N+1);
            }
        }
    }

    public boolean hasPlayer1Won() {
        if (!uf1.connected(N*N+0, N*N+2)) { return false; }
        return true;
    }

    public boolean hasPlayer2Won() {
        if (!uf1.connected(N*N+1, N*N+3)) { return false; }
        return true;
    }

    public int numberOfUnsetTiles() {
        int count = 0;
        for (int row=0; row<N; row++) {
            for (int col=0; col<N; col++) {
                if (!this.isSet(row, col)) {count++;}
            }
        }
        return count;
    }

    private int toIndex(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return (row * N) + col;
    }

    private boolean isValidHex(int row, int col) {
        if (row < 0 || row >= N || col < 0 || col >= N) { return false; }
        return true;
    }
}

--[ 2021.09.28.10.40.28.430.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    private int N0 = -1;
    private int N1 = -1;
    private int T = -1;
    private double prob[];
    public HexBoardStats(int N0, int N1, int T) {
        if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument(s)"); }
        this.N0 = N0;
        this.N1 = N1;
        this.T = T;
        this.prob = new double[N1-N0+1];
        for (int i=N0; i<=N1; i++) {
            Stopwatch runtime = new Stopwatch();
            for (int j=0; j<T; j++) {
                prob[i-N0] += playAGame(i) == 1 ? 1:0;
            }
            prob[i-N0] = prob[i-N0]/T;
            StdOut.println("elapsed time for " + i + ": " + runtime.elapsedTime());
        }
    }

    public int getN0() { return this.N0; }

    public int getN1() { return this.N1; }

    public int getT() { return this.T; }

    public double getP1WinProbabilityEstimate(int n) {
        if (n < N0 || n > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
        return this.prob[n-N0];
    }

    public double getP2WinProbabilityEstimate(int n) {
        return 1.0 - getP1WinProbabilityEstimate(n);
    }

    private static int playAGame(int N) {
        HexBoard board = new HexBoard(N);
        int player = 1;
        while(!board.hasPlayer1Won() && !board.hasPlayer2Won()) {
            int row = StdRandom.uniform(N);
            int col = StdRandom.uniform(N);
            if (board.isSet(row, col)) { continue; }
            board.setTile(row, col, player);
            player = player == 1 ? 2:1;
        }
        return board.hasPlayer1Won() ? 1:0;
    }

    private void printReport() {
        StdOut.println("T = " + T);
        for (int N=N0; N<=N1; N++) {
            StdOut.print("N = " + N + " ");
            StdOut.print("P1 = " + getP1WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP1WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.print("P2 = " + getP2WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP2WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.println("");
        }
    }

    public static void main(String[] args) {
        int N0 = Integer.parseInt(args[0]);
        int N1 = Integer.parseInt(args[1]);
        int T = Integer.parseInt(args[2]);
        HexBoardStats hbs = new HexBoardStats(2,15,100000);
        hbs.printReport();
    }
}

--[ 2021.09.28.10.40.36.459.0 ]--
UpdateTree (AD): 1 0
+ /P01_Hex.zip

--[ 2021.09.28.10.43.55.894.0 ]--
DisposeComponent
--[ 2021.10.25.08.20.35.171.0 ]--
NewLogger: P01_Hex
Version: 1.5
--[ 2021.10.25.08.20.35.175.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/.DS_Store
/P01_Hex.iml
/P01_Hex.zip
/readme.html

--[ 2021.10.25.08.20.35.176.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.10.25.08.20.35.177.0 ]--
InitFile: /.cos265


--[ 2021.10.25.08.20.35.178.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.10.25.08.20.35.178.1 ]--
InitFile: /.DS_Store
   Bud1           
                                                           alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             . i d e alg1Scomp      +�    . i d e amoDDblob      �Q��A    . i d e amodDblob      �Q��A    . i d e aph1Scomp      �     . l o glg1Scomp     	:�    . l o gmoDDblob     ��Q��A    . l o gmodDblob     ��Q��A    . l o gph1Scomp     	@     o u tlg1Scomp     m�    o u tmoDDblob      �Q��A    o u tmodDblob      �Q��A    o u tph1Scomp     p     s r clg1Scomp     ��    s r cmoDDblob     ��Q��A    s r cmodDblob     ��Q��A    s r cph1Scomp     �     t e s t slg1Scomp     �    t e s t smoDDblob      �Q��A    t e s t smodDblob      �Q��A    t e s t sph1Scomp     �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.10.25.08.20.35.178.2 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    private int[] board;
    private WeightedQuickUnionUF uf1;
    private WeightedQuickUnionUF uf2;
    private WeightedQuickUnionUF uf3;
    private int N;

    public HexBoard(int N) {
        if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= 0");}
        board = new int[N*N+4];
        board[N*N+0] = 1;
        board[N*N+1] = 2;
        board[N*N+2] = 1;
        board[N*N+3] = 2;
        uf1 = new WeightedQuickUnionUF(N*N+4);
        uf2 = new WeightedQuickUnionUF(N*N+4);
        uf3 = new WeightedQuickUnionUF(N*N+4);
        this.N = N;
    }

    public int getPlayer(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return this.board[toIndex(row,col)];
    }
    
    public boolean isSet(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.board[toIndex(row, col)] == 0) { return false; }
        return true;
    }

    public boolean isOnWinningPath(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return true; }
        return false;
    }

    public void setTile(int row, int col, int player) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.isSet(row,col)) { throw new java.lang.IllegalArgumentException("Tile is already set"); }
        this.board[toIndex(row,col)] = player;
        if (isValidHex(row+1,col) && this.board[toIndex(row+1,col)] == player) {
            uf1.union(toIndex(row,col), toIndex(row+1,col));
            uf2.union(toIndex(row,col), toIndex(row+1,col));
            uf3.union(toIndex(row,col), toIndex(row+1,col));
        }
        if (isValidHex(row-1,col) && this.board[toIndex(row-1,col)] == player) {
            uf1.union(toIndex(row,col), toIndex(row-1,col));
            uf2.union(toIndex(row,col), toIndex(row-1,col));
            uf3.union(toIndex(row,col), toIndex(row-1,col));
        }
        if (isValidHex(row,col+1) && this.board[toIndex(row,col+1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row,col+1));
            uf2.union(toIndex(row,col), toIndex(row,col+1));
            uf3.union(toIndex(row,col), toIndex(row,col+1));
        }
        if (isValidHex(row,col-1) && this.board[toIndex(row,col-1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row,col-1));
            uf2.union(toIndex(row,col), toIndex(row,col-1));
            uf3.union(toIndex(row,col), toIndex(row,col-1));
        }
        if (isValidHex(row+1,col-1) && this.board[toIndex(row+1,col-1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row+1,col-1));
            uf2.union(toIndex(row,col), toIndex(row+1,col-1));
            uf3.union(toIndex(row,col), toIndex(row+1,col-1));
        }
        if (isValidHex(row-1,col+1) && this.board[toIndex(row-1,col+1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row-1,col+1));
            uf2.union(toIndex(row,col), toIndex(row-1,col+1));
            uf3.union(toIndex(row,col), toIndex(row-1,col+1));
        }
        if (player == 1) {
            if (col == 0) {
                uf1.union(toIndex(row, col),N*N+0);
                uf2.union(toIndex(row, col),N*N+0);
            } else if (col == N-1) {
                uf1.union(toIndex(row, col), N*N+2);
                uf3.union(toIndex(row, col), N*N+2);
            }
        } else if (player == 2) {
            if (row == 0) {
                uf1.union(toIndex(row, col), N*N+3);
                uf3.union(toIndex(row, col), N*N+3);
            } else if (row == N-1) {
                uf1.union(toIndex(row, col), N*N+1);
                uf2.union(toIndex(row, col), N*N+1);
            }
        }
    }

    public boolean hasPlayer1Won() {
        if (!uf1.connected(N*N+0, N*N+2)) { return false; }
        return true;
    }

    public boolean hasPlayer2Won() {
        if (!uf1.connected(N*N+1, N*N+3)) { return false; }
        return true;
    }

    public int numberOfUnsetTiles() {
        int count = 0;
        for (int row=0; row<N; row++) {
            for (int col=0; col<N; col++) {
                if (!this.isSet(row, col)) {count++;}
            }
        }
        return count;
    }

    private int toIndex(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return (row * N) + col;
    }

    private boolean isValidHex(int row, int col) {
        if (row < 0 || row >= N || col < 0 || col >= N) { return false; }
        return true;
    }
}

--[ 2021.10.25.08.20.35.179.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.25.08.20.35.179.1 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    private int N0 = -1;
    private int N1 = -1;
    private int T = -1;
    private double prob[];
    public HexBoardStats(int N0, int N1, int T) {
        if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument(s)"); }
        this.N0 = N0;
        this.N1 = N1;
        this.T = T;
        this.prob = new double[N1-N0+1];
        for (int i=N0; i<=N1; i++) {
            Stopwatch runtime = new Stopwatch();
            for (int j=0; j<T; j++) {
                prob[i-N0] += playAGame(i) == 1 ? 1:0;
            }
            prob[i-N0] = prob[i-N0]/T;
            StdOut.println("elapsed time for " + i + ": " + runtime.elapsedTime());
        }
    }

    public int getN0() { return this.N0; }

    public int getN1() { return this.N1; }

    public int getT() { return this.T; }

    public double getP1WinProbabilityEstimate(int n) {
        if (n < N0 || n > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
        return this.prob[n-N0];
    }

    public double getP2WinProbabilityEstimate(int n) {
        return 1.0 - getP1WinProbabilityEstimate(n);
    }

    private static int playAGame(int N) {
        HexBoard board = new HexBoard(N);
        int player = 1;
        while(!board.hasPlayer1Won() && !board.hasPlayer2Won()) {
            int row = StdRandom.uniform(N);
            int col = StdRandom.uniform(N);
            if (board.isSet(row, col)) { continue; }
            board.setTile(row, col, player);
            player = player == 1 ? 2:1;
        }
        return board.hasPlayer1Won() ? 1:0;
    }

    private void printReport() {
        StdOut.println("T = " + T);
        for (int N=N0; N<=N1; N++) {
            StdOut.print("N = " + N + " ");
            StdOut.print("P1 = " + getP1WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP1WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.print("P2 = " + getP2WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP2WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.println("");
        }
    }

    public static void main(String[] args) {
        int N0 = Integer.parseInt(args[0]);
        int N1 = Integer.parseInt(args[1]);
        int T = Integer.parseInt(args[2]);
        HexBoardStats hbs = new HexBoardStats(2,15,100000);
        hbs.printReport();
    }
}

--[ 2021.10.25.08.20.52.575.0 ]--
UpdateTree (AD): 1 0
+ /.idea/workspace.xml

--[ 2021.10.25.08.20.52.594.0 ]--
UpdateTree (AD): 1 0
+ /.idea/runConfigurations.xml

--[ 2021.10.25.08.20.52.603.0 ]--
UpdateTree (AD): 1 0
+ /.idea/vcs.xml

--[ 2021.10.25.08.20.56.130.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.21.03.486.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.21.53.491.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.23.10.120.0 ]--
UpdateTree (AD): 69 0
+ /out/production/P01_Hex/.donotlog
+ /out/production/P01_Hex/algs4.jar
+ /out/production/P01_Hex/stdlib.jar
+ /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/input-1-p1.txt
+ /out/production/P01_Hex/input-1-p2.txt
+ /out/production/P01_Hex/input-3-p1.txt
+ /out/production/P01_Hex/input-3-p2.txt
+ /out/production/P01_Hex/input-7-p2.txt
+ /out/production/P01_Hex/input-11-p2.txt
+ /out/production/P01_Hex/input-17-p1.txt
+ /out/production/P01_Hex/input-random-5.txt
+ /out/production/P01_Hex/HexBoardStats.class
+ /out/production/P01_Hex/input-random-13.txt
+ /out/production/P01_Hex/input-random-49.txt
+ /out/production/P01_Hex/input-random-99.txt
+ /out/production/P01_Hex/input-random-199.txt
+ /out/production/P01_Hex/input-1-nowinners.txt
+ /out/production/P01_Hex/input-zigzag-5-p1.txt
+ /out/production/P01_Hex/input-zigzag-5-p2.txt
+ /out/production/P01_Hex/input-zigzag-13-p1.txt
+ /out/production/P01_Hex/input-zigzag-17-p2.txt
+ /out/production/P01_Hex/input-zigzag-31-p2.txt
+ /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/InteractiveHexBoardVisualizer.class
+ /src/algs4.jar
+ /src/stdlib.jar
+ /src/HexBoard.java
+ /src/HexBoardStats.java
+ /src/HexBoardVisualizer.java
+ /src/InteractiveHexBoardVisualizer.java
+ /.log/history.log
+ /.idea/copyright/profiles_settings.xml
+ /.idea/libraries/src.xml
+ /.idea/libraries/algs4.xml
+ /.idea/libraries/stdlib.xml
+ /.idea/.name
+ /.idea/vcs.xml
+ /.idea/misc.xml
+ /.idea/.gitignore
+ /.idea/modules.xml
+ /.idea/compiler.xml
+ /.idea/workspace.xml
+ /.idea/uiDesigner.xml
+ /.idea/runConfigurations.xml
+ /tests/.donotlog
+ /tests/input-1-p1.txt
+ /tests/input-1-p2.txt
+ /tests/input-3-p1.txt
+ /tests/input-3-p2.txt
+ /tests/input-7-p2.txt
+ /tests/input-11-p2.txt
+ /tests/input-17-p1.txt
+ /tests/input-random-5.txt
+ /tests/input-random-13.txt
+ /tests/input-random-49.txt
+ /tests/input-random-99.txt
+ /tests/input-random-199.txt
+ /tests/input-1-nowinners.txt
+ /tests/input-zigzag-5-p1.txt
+ /tests/input-zigzag-5-p2.txt
+ /tests/input-zigzag-13-p1.txt
+ /tests/input-zigzag-17-p2.txt
+ /tests/input-zigzag-31-p2.txt
+ /.cos265
+ /.DS_Store
+ /P01_Hex.iml
+ /P01_Hex.zip
+ /readme.html

--[ 2021.10.25.08.23.10.121.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    private int[] board;
    private WeightedQuickUnionUF uf1;
    private WeightedQuickUnionUF uf2;
    private WeightedQuickUnionUF uf3;
    private int N;

    public HexBoard(int N) {
        if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= 0");}
        board = new int[N*N+4];
        board[N*N+0] = 1;
        board[N*N+1] = 2;
        board[N*N+2] = 1;
        board[N*N+3] = 2;
        uf1 = new WeightedQuickUnionUF(N*N+4);
        uf2 = new WeightedQuickUnionUF(N*N+4);
        uf3 = new WeightedQuickUnionUF(N*N+4);
        this.N = N;
    }

    public int getPlayer(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return this.board[toIndex(row,col)];
    }
    
    public boolean isSet(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.board[toIndex(row, col)] == 0) { return false; }
        return true;
    }

    public boolean isOnWinningPath(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return true; }
        return false;
    }

    public void setTile(int row, int col, int player) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.isSet(row,col)) { throw new java.lang.IllegalArgumentException("Tile is already set"); }
        this.board[toIndex(row,col)] = player;
        if (isValidHex(row+1,col) && this.board[toIndex(row+1,col)] == player) {
            uf1.union(toIndex(row,col), toIndex(row+1,col));
            uf2.union(toIndex(row,col), toIndex(row+1,col));
            uf3.union(toIndex(row,col), toIndex(row+1,col));
        }
        if (isValidHex(row-1,col) && this.board[toIndex(row-1,col)] == player) {
            uf1.union(toIndex(row,col), toIndex(row-1,col));
            uf2.union(toIndex(row,col), toIndex(row-1,col));
            uf3.union(toIndex(row,col), toIndex(row-1,col));
        }
        if (isValidHex(row,col+1) && this.board[toIndex(row,col+1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row,col+1));
            uf2.union(toIndex(row,col), toIndex(row,col+1));
            uf3.union(toIndex(row,col), toIndex(row,col+1));
        }
        if (isValidHex(row,col-1) && this.board[toIndex(row,col-1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row,col-1));
            uf2.union(toIndex(row,col), toIndex(row,col-1));
            uf3.union(toIndex(row,col), toIndex(row,col-1));
        }
        if (isValidHex(row+1,col-1) && this.board[toIndex(row+1,col-1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row+1,col-1));
            uf2.union(toIndex(row,col), toIndex(row+1,col-1));
            uf3.union(toIndex(row,col), toIndex(row+1,col-1));
        }
        if (isValidHex(row-1,col+1) && this.board[toIndex(row-1,col+1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row-1,col+1));
            uf2.union(toIndex(row,col), toIndex(row-1,col+1));
            uf3.union(toIndex(row,col), toIndex(row-1,col+1));
        }
        if (player == 1) {
            if (col == 0) {
                uf1.union(toIndex(row, col),N*N+0);
                uf2.union(toIndex(row, col),N*N+0);
            } else if (col == N-1) {
                uf1.union(toIndex(row, col), N*N+2);
                uf3.union(toIndex(row, col), N*N+2);
            }
        } else if (player == 2) {
            if (row == 0) {
                uf1.union(toIndex(row, col), N*N+3);
                uf3.union(toIndex(row, col), N*N+3);
            } else if (row == N-1) {
                uf1.union(toIndex(row, col), N*N+1);
                uf2.union(toIndex(row, col), N*N+1);
            }
        }
    }

    public boolean hasPlayer1Won() {
        if (!uf1.connected(N*N+0, N*N+2)) { return false; }
        return true;
    }

    public boolean hasPlayer2Won() {
        if (!uf1.connected(N*N+1, N*N+3)) { return false; }
        return true;
    }

    public int numberOfUnsetTiles() {
        int count = 0;
        for (int row=0; row<N; row++) {
            for (int col=0; col<N; col++) {
                if (!this.isSet(row, col)) {count++;}
            }
        }
        return count;
    }

    private int toIndex(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return (row * N) + col;
    }

    private boolean isValidHex(int row, int col) {
        if (row < 0 || row >= N || col < 0 || col >= N) { return false; }
        return true;
    }
}

--[ 2021.10.25.08.23.10.121.1 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    private int N0 = -1;
    private int N1 = -1;
    private int T = -1;
    private double prob[];
    public HexBoardStats(int N0, int N1, int T) {
        if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument(s)"); }
        this.N0 = N0;
        this.N1 = N1;
        this.T = T;
        this.prob = new double[N1-N0+1];
        for (int i=N0; i<=N1; i++) {
            Stopwatch runtime = new Stopwatch();
            for (int j=0; j<T; j++) {
                prob[i-N0] += playAGame(i) == 1 ? 1:0;
            }
            prob[i-N0] = prob[i-N0]/T;
            StdOut.println("elapsed time for " + i + ": " + runtime.elapsedTime());
        }
    }

    public int getN0() { return this.N0; }

    public int getN1() { return this.N1; }

    public int getT() { return this.T; }

    public double getP1WinProbabilityEstimate(int n) {
        if (n < N0 || n > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
        return this.prob[n-N0];
    }

    public double getP2WinProbabilityEstimate(int n) {
        return 1.0 - getP1WinProbabilityEstimate(n);
    }

    private static int playAGame(int N) {
        HexBoard board = new HexBoard(N);
        int player = 1;
        while(!board.hasPlayer1Won() && !board.hasPlayer2Won()) {
            int row = StdRandom.uniform(N);
            int col = StdRandom.uniform(N);
            if (board.isSet(row, col)) { continue; }
            board.setTile(row, col, player);
            player = player == 1 ? 2:1;
        }
        return board.hasPlayer1Won() ? 1:0;
    }

    private void printReport() {
        StdOut.println("T = " + T);
        for (int N=N0; N<=N1; N++) {
            StdOut.print("N = " + N + " ");
            StdOut.print("P1 = " + getP1WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP1WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.print("P2 = " + getP2WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP2WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.println("");
        }
    }

    public static void main(String[] args) {
        int N0 = Integer.parseInt(args[0]);
        int N1 = Integer.parseInt(args[1]);
        int T = Integer.parseInt(args[2]);
        HexBoardStats hbs = new HexBoardStats(2,15,100000);
        hbs.printReport();
    }
}

--[ 2021.10.25.08.23.10.122.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.10.25.08.23.10.122.1 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.10.25.08.23.10.122.2 ]--
InitFile: /.cos265


--[ 2021.10.25.08.23.10.122.3 ]--
InitFile: /.DS_Store
   Bud1           
                                                           alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             . i d e alg1Scomp      +�    . i d e amoDDblob      �Q��A    . i d e amodDblob      �Q��A    . i d e aph1Scomp      �     . l o glg1Scomp     	:�    . l o gmoDDblob     ��Q��A    . l o gmodDblob     ��Q��A    . l o gph1Scomp     	@     o u tlg1Scomp     m�    o u tmoDDblob      �Q��A    o u tmodDblob      �Q��A    o u tph1Scomp     p     s r clg1Scomp     ��    s r cmoDDblob     ��Q��A    s r cmodDblob     ��Q��A    s r cph1Scomp     �     t e s t slg1Scomp     �    t e s t smoDDblob      �Q��A    t e s t smodDblob      �Q��A    t e s t sph1Scomp     �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.10.25.08.23.10.122.4 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.25.08.23.38.639.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.26.13.234.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.26.40.254.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.27.09.665.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.27.17.443.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.27.43.492.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.44.26.679.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.44.40.824.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.44.45.653.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.45.52.602.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.47.31.458.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.47.57.125.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.48.07.626.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.48.14.116.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.51.24.723.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.51.43.539.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.51.48.744.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.52.45.763.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.08.59.01.135.0 ]--
DisposeComponent
--[ 2021.10.25.09.00.43.883.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.25.10.57.23.303.0 ]--
DisposeComponent
