--[ 2021.08.31.10.28.23.281.0 ]--
NewLogger: P00_JavaIntro
Version: 1.5
--[ 2021.08.31.10.28.23.306.0 ]--
InitTree:
/src/algs4.jar
/src/stdlib.jar
/src/HelloWorld.java
/src/BinarySearch.java
/src/BruteForceSearch.java
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/tinyT.txt
/tests/tinyW.txt
/tests/largeT.txt
/tests/largeW.txt
/.cos265
/readme.html
/P00_JavaIntro.iml

--[ 2021.08.31.10.28.23.316.0 ]--
InitFile: /src/BinarySearch.java
public class BinarySearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
    }
}

--[ 2021.08.31.10.28.23.321.0 ]--
InitFile: /src/BruteForceSearch.java
public class BruteForceSearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
    }
}

--[ 2021.08.31.10.28.23.325.0 ]--
InitFile: /.cos265


--[ 2021.08.31.10.28.23.328.0 ]--
InitFile: /src/HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        StdOut.println("Hello, World!");
    }
}

--[ 2021.08.31.10.28.23.330.0 ]--
InitFile: /P00_JavaIntro.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.08.31.10.28.27.581.0 ]--
UpdateTree (AD): 1 0
+ /.log/history.log

--[ 2021.08.31.10.35.45.382.0 ]--
:/src/HelloWorld.java
+ 3         
--[ 2021.08.31.10.35.48.532.0 ]--
- 3
--[ 2021.08.31.10.36.31.765.0 ]--
UpdateTree (AD): 10 0
+ /out/production/P00_JavaIntro/.donotlog
+ /out/production/P00_JavaIntro/algs4.jar
+ /out/production/P00_JavaIntro/tinyT.txt
+ /out/production/P00_JavaIntro/tinyW.txt
+ /out/production/P00_JavaIntro/largeT.txt
+ /out/production/P00_JavaIntro/largeW.txt
+ /out/production/P00_JavaIntro/stdlib.jar
+ /out/production/P00_JavaIntro/HelloWorld.class
+ /out/production/P00_JavaIntro/BinarySearch.class
+ /out/production/P00_JavaIntro/BruteForceSearch.class

--[ 2021.08.31.10.36.31.774.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.10.46.24.018.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.10.50.02.017.0 ]--
:/src/BruteForceSearch.java
+ 12         
--[ 2021.08.31.10.50.23.585.0 ]--
r 12         I
--[ 2021.08.31.10.50.23.761.0 ]--
r 12         In
--[ 2021.08.31.10.50.24.011.0 ]--
r 12         In 
--[ 2021.08.31.10.50.24.440.0 ]--
r 12         In i
--[ 2021.08.31.10.50.24.634.0 ]--
r 12         In in
--[ 2021.08.31.10.50.24.889.0 ]--
r 12         In in 
--[ 2021.08.31.10.50.25.539.0 ]--
r 12         In in =
--[ 2021.08.31.10.50.25.664.0 ]--
r 12         In in = 
--[ 2021.08.31.10.51.03.016.0 ]--
r 12         In in = n
--[ 2021.08.31.10.51.03.119.0 ]--
r 12         In in = ne
--[ 2021.08.31.10.51.03.198.0 ]--
r 12         In in = new
--[ 2021.08.31.10.51.03.346.0 ]--
r 12         In in = new 
--[ 2021.08.31.10.51.03.756.0 ]--
r 12         In in = new I
--[ 2021.08.31.10.51.03.988.0 ]--
r 12         In in = new IN
--[ 2021.08.31.10.51.04.833.0 ]--
r 12         In in = new I
--[ 2021.08.31.10.51.05.445.0 ]--
r 12         In in = new In
--[ 2021.08.31.10.51.05.476.0 ]--
r 12         In in = new In()
--[ 2021.08.31.10.51.08.225.0 ]--
r 12         In in = new In(a)
--[ 2021.08.31.10.51.08.388.0 ]--
r 12         In in = new In(ar)
--[ 2021.08.31.10.51.08.536.0 ]--
r 12         In in = new In(arg)
--[ 2021.08.31.10.51.08.731.0 ]--
r 12         In in = new In(args)
--[ 2021.08.31.10.51.09.331.0 ]--
r 12         In in = new In(args[])
--[ 2021.08.31.10.51.10.270.0 ]--
r 12         In in = new In(args[0])
--[ 2021.08.31.10.51.12.546.0 ]--
r 12         In in = new In(args[0]);
--[ 2021.08.31.10.51.44.886.0 ]--
+ 13         
--[ 2021.08.31.10.51.49.668.0 ]--
r 13         o
--[ 2021.08.31.10.51.49.686.0 ]--
r 13         oi
--[ 2021.08.31.10.51.49.784.0 ]--
r 13         oin
--[ 2021.08.31.10.51.50.887.0 ]--
r 13         oi
--[ 2021.08.31.10.51.51.052.0 ]--
r 13         o
--[ 2021.08.31.10.51.51.182.0 ]--
r 13         
--[ 2021.08.31.10.51.51.701.0 ]--
r 13         i
--[ 2021.08.31.10.51.51.790.0 ]--
r 13         in
--[ 2021.08.31.10.51.51.853.0 ]--
r 13         int
--[ 2021.08.31.10.51.52.529.0 ]--
r 13         int[]
--[ 2021.08.31.10.52.13.312.0 ]--
r 13         int[] 
--[ 2021.08.31.10.52.13.774.0 ]--
r 13         int[] w
--[ 2021.08.31.10.52.13.934.0 ]--
r 13         int[] wh
--[ 2021.08.31.10.52.14.014.0 ]--
r 13         int[] wht
--[ 2021.08.31.10.52.14.052.0 ]--
r 13         int[] whti
--[ 2021.08.31.10.52.14.603.0 ]--
r 13         int[] wht
--[ 2021.08.31.10.52.14.835.0 ]--
r 13         int[] wh
--[ 2021.08.31.10.52.15.047.0 ]--
r 13         int[] whi
--[ 2021.08.31.10.52.15.269.0 ]--
r 13         int[] whit
--[ 2021.08.31.10.52.15.392.0 ]--
r 13         int[] white
--[ 2021.08.31.10.52.15.551.0 ]--
r 13         int[] whitel
--[ 2021.08.31.10.52.15.709.0 ]--
r 13         int[] whiteli
--[ 2021.08.31.10.52.15.754.0 ]--
r 13         int[] whitelis
--[ 2021.08.31.10.52.15.844.0 ]--
r 13         int[] whitelist
--[ 2021.08.31.10.52.16.028.0 ]--
r 13         int[] whitelists
--[ 2021.08.31.10.52.16.471.0 ]--
r 13         int[] whitelist
--[ 2021.08.31.10.52.18.464.0 ]--
r 13         int[] whitelist 
--[ 2021.08.31.10.52.18.622.0 ]--
r 13         int[] whitelist =
--[ 2021.08.31.10.52.18.935.0 ]--
r 13         int[] whitelist = 
--[ 2021.08.31.10.52.32.727.0 ]--
r 13         int[] whitelist = i
--[ 2021.08.31.10.52.32.800.0 ]--
r 13         int[] whitelist = in
--[ 2021.08.31.10.52.33.109.0 ]--
r 13         int[] whitelist = in,.
--[ 2021.08.31.10.52.33.771.0 ]--
r 13         int[] whitelist = in,
--[ 2021.08.31.10.52.33.933.0 ]--
r 13         int[] whitelist = in
--[ 2021.08.31.10.52.34.609.0 ]--
r 13         int[] whitelist = in.
--[ 2021.08.31.10.52.36.506.0 ]--
r 13         int[] whitelist = in.r
--[ 2021.08.31.10.52.36.598.0 ]--
r 13         int[] whitelist = in.re
--[ 2021.08.31.10.52.36.749.0 ]--
r 13         int[] whitelist = in.rea
--[ 2021.08.31.10.52.36.939.0 ]--
r 13         int[] whitelist = in.read
--[ 2021.08.31.10.52.37.898.0 ]--
r 13         int[] whitelist = in.readAllInts
--[ 2021.08.31.10.52.37.905.0 ]--
r 13         int[] whitelist = in.readAllInts()
--[ 2021.08.31.10.52.39.764.0 ]--
r 13         int[] whitelist = in.readAllInts()''
--[ 2021.08.31.10.52.40.918.0 ]--
r 13         int[] whitelist = in.readAllInts()
--[ 2021.08.31.10.52.41.272.0 ]--
r 13         int[] whitelist = in.readAllInts();
--[ 2021.08.31.10.53.34.341.0 ]--
+ 14         
--[ 2021.08.31.10.53.34.484.0 ]--
+ 14         
--[ 2021.08.31.10.53.36.384.0 ]--
r 15         I
--[ 2021.08.31.10.53.36.890.0 ]--
r 15         In
--[ 2021.08.31.10.53.36.988.0 ]--
r 15         In 
--[ 2021.08.31.10.53.37.158.0 ]--
r 15         In t
--[ 2021.08.31.10.53.37.301.0 ]--
r 15         In te
--[ 2021.08.31.10.53.37.413.0 ]--
r 15         In tes
--[ 2021.08.31.10.53.37.477.0 ]--
r 15         In test
--[ 2021.08.31.10.53.37.925.0 ]--
r 15         In test 
--[ 2021.08.31.10.53.38.261.0 ]--
r 15         In test =
--[ 2021.08.31.10.53.38.367.0 ]--
r 15         In test = 
--[ 2021.08.31.10.53.39.431.0 ]--
r 15         In test = n
--[ 2021.08.31.10.53.39.589.0 ]--
r 15         In test = new
--[ 2021.08.31.10.53.39.677.0 ]--
r 15         In test = new 
--[ 2021.08.31.10.53.40.217.0 ]--
r 15         In test = new I
--[ 2021.08.31.10.53.40.440.0 ]--
r 15         In test = new In
--[ 2021.08.31.10.53.42.550.0 ]--
r 15         In test = new In()
--[ 2021.08.31.10.53.42.930.0 ]--
r 15         In test = new In(a)
--[ 2021.08.31.10.53.43.590.0 ]--
r 15         In test = new In(args)
--[ 2021.08.31.10.53.44.990.0 ]--
r 15         In test = new In(args[])
--[ 2021.08.31.10.53.45.821.0 ]--
r 15         In test = new In(args[1])
--[ 2021.08.31.10.53.47.830.0 ]--
r 15         In test = new In(args[1]);
--[ 2021.08.31.10.53.50.062.0 ]--
+ 16         
--[ 2021.08.31.10.53.55.306.0 ]--
r 16         int[] whitelist = in.readAllInts();
--[ 2021.08.31.10.54.00.105.0 ]--
r 16         int[] c = in.readAllInts();
--[ 2021.08.31.10.54.00.162.0 ]--
r 16         int[] ch = in.readAllInts();
--[ 2021.08.31.10.54.00.291.0 ]--
r 16         int[] che = in.readAllInts();
--[ 2021.08.31.10.54.00.515.0 ]--
r 16         int[] chec = in.readAllInts();
--[ 2021.08.31.10.54.00.655.0 ]--
r 16         int[] check = in.readAllInts();
--[ 2021.08.31.10.54.00.799.0 ]--
r 16         int[] checkl = in.readAllInts();
--[ 2021.08.31.10.54.00.960.0 ]--
r 16         int[] checkli = in.readAllInts();
--[ 2021.08.31.10.54.01.047.0 ]--
r 16         int[] checklis = in.readAllInts();
--[ 2021.08.31.10.54.01.160.0 ]--
r 16         int[] checklist = in.readAllInts();
--[ 2021.08.31.10.54.15.041.0 ]--
+ 17         
--[ 2021.08.31.10.54.15.257.0 ]--
+ 17         
--[ 2021.08.31.10.54.45.976.0 ]--
r 16         int[] checklist = t.readAllInts();
--[ 2021.08.31.10.54.46.113.0 ]--
r 16         int[] checklist = te.readAllInts();
--[ 2021.08.31.10.54.46.217.0 ]--
r 16         int[] checklist = tes.readAllInts();
--[ 2021.08.31.10.54.46.243.0 ]--
r 16         int[] checklist = test.readAllInts();
--[ 2021.08.31.10.55.38.211.0 ]--
r 14 
r 17 
--[ 2021.08.31.10.55.40.478.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.10.58.34.734.0 ]--
r 18         f
--[ 2021.08.31.10.58.35.116.0 ]--
r 18         fo
--[ 2021.08.31.10.58.35.183.0 ]--
r 18         foo
--[ 2021.08.31.10.58.35.613.0 ]--
r 18         fo
--[ 2021.08.31.10.58.35.779.0 ]--
r 18         for
--[ 2021.08.31.10.58.36.464.0 ]--
r 18         for 
--[ 2021.08.31.10.58.36.699.0 ]--
r 18         for ()
--[ 2021.08.31.10.58.37.214.0 ]--
r 18         for (i)
--[ 2021.08.31.10.58.37.369.0 ]--
r 18         for (in)
--[ 2021.08.31.10.58.37.497.0 ]--
r 18         for (int)
--[ 2021.08.31.10.58.38.333.0 ]--
r 18         for (int )
--[ 2021.08.31.10.58.38.474.0 ]--
r 18         for (int i)
--[ 2021.08.31.10.58.39.340.0 ]--
r 18         for (int i=)
--[ 2021.08.31.10.58.40.467.0 ]--
r 18         for (int i=0)
--[ 2021.08.31.10.58.41.111.0 ]--
r 18         for (int i=0;)
--[ 2021.08.31.10.58.41.442.0 ]--
r 18         for (int i=0; )
--[ 2021.08.31.10.58.41.661.0 ]--
r 18         for (int i=0; i)
--[ 2021.08.31.10.58.42.360.0 ]--
r 18         for (int i=0; i>)
--[ 2021.08.31.10.58.42.928.0 ]--
r 18         for (int i=0; i)
--[ 2021.08.31.10.58.43.600.0 ]--
r 18         for (int i=0; i<)
--[ 2021.08.31.10.58.50.423.0 ]--
r 18         for(int i=0; i<)
--[ 2021.08.31.10.58.57.893.0 ]--
r 18         for(int i=0; i<w)
--[ 2021.08.31.10.58.58.445.0 ]--
r 18         for(int i=0; i<)
--[ 2021.08.31.10.58.58.683.0 ]--
r 18         for(int i=0; i<c)
--[ 2021.08.31.10.58.58.778.0 ]--
r 18         for(int i=0; i<ch)
--[ 2021.08.31.10.58.59.352.0 ]--
r 18         for(int i=0; i<checklist)
--[ 2021.08.31.10.58.59.611.0 ]--
r 18         for(int i=0; i<checklist.)
--[ 2021.08.31.10.59.00.421.0 ]--
r 18         for(int i=0; i<checklist.length)
--[ 2021.08.31.10.59.02.747.0 ]--
r 18         for(int i=0; i<checklist.length;)
--[ 2021.08.31.10.59.03.384.0 ]--
r 18         for(int i=0; i<checklist.length; )
--[ 2021.08.31.10.59.03.858.0 ]--
r 18         for(int i=0; i<checklist.length; i)
--[ 2021.08.31.10.59.05.056.0 ]--
r 18         for(int i=0; i<checklist.length; i+)
--[ 2021.08.31.10.59.05.254.0 ]--
r 18         for(int i=0; i<checklist.length; i++)
--[ 2021.08.31.10.59.07.145.0 ]--
r 18         for(int i=0; i<checklist.length; i++) 
--[ 2021.08.31.10.59.09.147.0 ]--
r 18         for(int i=0; i<checklist.length; i++) {
--[ 2021.08.31.10.59.10.449.0 ]--
+ 19 
+ 20 }
--[ 2021.08.31.10.59.10.631.0 ]--
r 20         }
--[ 2021.08.31.10.59.10.664.0 ]--
r 19             
--[ 2021.08.31.10.59.22.325.0 ]--
r 19             s
--[ 2021.08.31.10.59.22.508.0 ]--
r 19             sd
--[ 2021.08.31.10.59.23.291.0 ]--
r 19             s
--[ 2021.08.31.10.59.23.624.0 ]--
r 19             st
--[ 2021.08.31.10.59.23.858.0 ]--
r 19             std
--[ 2021.08.31.10.59.24.766.0 ]--
r 19             st
--[ 2021.08.31.10.59.25.029.0 ]--
r 19             s
--[ 2021.08.31.10.59.25.052.0 ]--
r 19             
--[ 2021.08.31.10.59.25.688.0 ]--
r 19             S
--[ 2021.08.31.10.59.25.957.0 ]--
r 19             ST
--[ 2021.08.31.10.59.26.159.0 ]--
r 19             STD
--[ 2021.08.31.10.59.27.842.0 ]--
r 19             ST
--[ 2021.08.31.10.59.28.106.0 ]--
r 19             S
--[ 2021.08.31.10.59.28.310.0 ]--
r 19             Ss
--[ 2021.08.31.10.59.28.514.0 ]--
r 19             S
--[ 2021.08.31.10.59.28.589.0 ]--
r 19             
--[ 2021.08.31.10.59.28.659.0 ]--
r 19             s
--[ 2021.08.31.10.59.28.828.0 ]--
r 19             st
--[ 2021.08.31.10.59.29.021.0 ]--
r 19             std
--[ 2021.08.31.10.59.29.625.0 ]--
r 19             st
--[ 2021.08.31.10.59.29.926.0 ]--
r 19             s
--[ 2021.08.31.10.59.30.321.0 ]--
r 19             
--[ 2021.08.31.10.59.30.552.0 ]--
r 19             s
--[ 2021.08.31.10.59.31.192.0 ]--
r 19             st
--[ 2021.08.31.10.59.32.074.0 ]--
r 19             s
--[ 2021.08.31.10.59.32.245.0 ]--
r 19             
--[ 2021.08.31.10.59.32.536.0 ]--
r 19             S
--[ 2021.08.31.10.59.33.243.0 ]--
r 19             St
--[ 2021.08.31.10.59.33.792.0 ]--
r 19             Std
--[ 2021.08.31.10.59.34.643.0 ]--
r 19             StdOut
--[ 2021.08.31.10.59.35.028.0 ]--
r 19             StdOut;.
--[ 2021.08.31.10.59.35.475.0 ]--
r 19             StdOut;
--[ 2021.08.31.10.59.35.611.0 ]--
r 19             StdOut
--[ 2021.08.31.10.59.36.836.0 ]--
r 19             StdOut.
--[ 2021.08.31.10.59.37.140.0 ]--
r 19             StdOut.p
--[ 2021.08.31.10.59.41.027.0 ]--
r 19             StdOut.print
--[ 2021.08.31.10.59.41.036.0 ]--
r 19             StdOut.print()
--[ 2021.08.31.10.59.41.040.0 ]--
r 19             StdOut.print();
--[ 2021.08.31.10.59.47.587.0 ]--
r 19             StdOut.printl();
--[ 2021.08.31.10.59.47.898.0 ]--
r 19             StdOut.println();
--[ 2021.08.31.10.59.54.210.0 ]--
r 19             StdOut.println(w);
--[ 2021.08.31.10.59.54.333.0 ]--
r 19             StdOut.println(wh);
--[ 2021.08.31.10.59.54.434.0 ]--
r 19             StdOut.println(whi);
--[ 2021.08.31.10.59.54.485.0 ]--
r 19             StdOut.println(whit);
--[ 2021.08.31.10.59.54.860.0 ]--
r 19             StdOut.println(whitelist);
--[ 2021.08.31.10.59.55.724.0 ]--
r 19             StdOut.println(whitelist[]);
--[ 2021.08.31.10.59.56.084.0 ]--
r 19             StdOut.println(whitelist[i]);
--[ 2021.08.31.10.59.59.891.0 ]--
r 19             StdOut.print(whitelist[i]);
--[ 2021.08.31.11.00.04.644.0 ]--
+ 20             
--[ 2021.08.31.11.00.04.932.0 ]--
r 20             StdOut.print(whitelist[i]);
--[ 2021.08.31.11.00.11.712.0 ]--
r 20             StdOut.print("white"list[i]);
--[ 2021.08.31.11.00.12.886.0 ]--
r 20             StdOut.print(""list[i]);
--[ 2021.08.31.11.00.13.598.0 ]--
r 20             StdOut.print(" "list[i]);
--[ 2021.08.31.11.00.17.253.0 ]--
r 20             StdOut.print(" ");
--[ 2021.08.31.11.00.19.114.0 ]--
r 20             StdOut.print("  ");
--[ 2021.08.31.11.00.19.866.0 ]--
r 20             StdOut.print(" ");
--[ 2021.08.31.11.00.50.852.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.00.54.765.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.01.22.076.0 ]--
r 18         for(int i=0; i<wlist.length; i++) {
--[ 2021.08.31.11.01.22.814.0 ]--
r 18         for(int i=0; i<whitelistlist.length; i++) {
--[ 2021.08.31.11.01.26.747.0 ]--
UpdateTree (AD): 0 1
- /out/production/P00_JavaIntro/BruteForceSearch.class

--[ 2021.08.31.11.01.26.755.0 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@56245ecd
--[ 2021.08.31.11.01.36.562.0 ]--
r 18         for(int i=0; i<whitelist.length; i++) {
--[ 2021.08.31.11.01.36.564.0 ]--
UpdateTree (AD): 1 1
- /out/production/P00_JavaIntro/BruteForceSearch.class
+ /out/production/P00_JavaIntro/BruteForceSearch.class

--[ 2021.08.31.11.01.36.572.0 ]--
UpdateTree (AD): 1 1
- /out/production/P00_JavaIntro/BruteForceSearch.class
+ /out/production/P00_JavaIntro/BruteForceSearch.class

--[ 2021.08.31.11.01.40.400.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P00_JavaIntro/BruteForceSearch.class

--[ 2021.08.31.11.01.40.403.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.01.45.281.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.02.30.175.0 ]--
+ 21             
--[ 2021.08.31.11.02.31.545.0 ]--
- 21
--[ 2021.08.31.11.02.35.731.0 ]--
+ 19             
--[ 2021.08.31.11.02.37.570.0 ]--
r 19             i
--[ 2021.08.31.11.02.37.907.0 ]--
r 19             if
--[ 2021.08.31.11.02.38.659.0 ]--
r 19             if()
--[ 2021.08.31.11.02.38.891.0 ]--
r 19             if(r)
--[ 2021.08.31.11.02.39.064.0 ]--
r 19             if(ra)
--[ 2021.08.31.11.02.39.076.0 ]--
r 19             if(ran)
--[ 2021.08.31.11.02.39.303.0 ]--
r 19             if(rank)
--[ 2021.08.31.11.02.46.415.0 ]--
r 19             if(rank())
--[ 2021.08.31.11.02.48.800.0 ]--
r 19             if(rank(w))
--[ 2021.08.31.11.02.48.998.0 ]--
r 19             if(rank(wh))
--[ 2021.08.31.11.02.49.129.0 ]--
r 19             if(rank(whi))
--[ 2021.08.31.11.02.49.231.0 ]--
r 19             if(rank(whit))
--[ 2021.08.31.11.02.49.384.0 ]--
r 19             if(rank(white))
--[ 2021.08.31.11.02.50.089.0 ]--
r 19             if(rank(whitelist))
--[ 2021.08.31.11.02.52.946.0 ]--
r 19             if(rank(whitelis))
--[ 2021.08.31.11.02.53.291.0 ]--
r 19             if(rank(whiteli))
--[ 2021.08.31.11.02.53.807.0 ]--
r 19             if(rank(whitel))
--[ 2021.08.31.11.02.53.832.0 ]--
r 19             if(rank(white))
--[ 2021.08.31.11.02.53.866.0 ]--
r 19             if(rank(whit))
--[ 2021.08.31.11.02.53.886.0 ]--
r 19             if(rank(whi))
--[ 2021.08.31.11.02.53.915.0 ]--
r 19             if(rank(wh))
--[ 2021.08.31.11.02.53.942.0 ]--
r 19             if(rank(w))
--[ 2021.08.31.11.02.53.971.0 ]--
r 19             if(rank())
--[ 2021.08.31.11.02.54.002.0 ]--
r 19             if(rank)
--[ 2021.08.31.11.02.54.032.0 ]--
r 19             if(ran)
--[ 2021.08.31.11.02.55.079.0 ]--
r 19             if(rank)
--[ 2021.08.31.11.02.55.554.0 ]--
r 19             if(rank())
--[ 2021.08.31.11.02.56.031.0 ]--
r 19             if(rank(c))
--[ 2021.08.31.11.02.56.105.0 ]--
r 19             if(rank(ch))
--[ 2021.08.31.11.02.56.303.0 ]--
r 19             if(rank(che))
--[ 2021.08.31.11.02.56.361.0 ]--
r 19             if(rank(chek))
--[ 2021.08.31.11.02.56.881.0 ]--
r 19             if(rank(checklist))
--[ 2021.08.31.11.02.59.393.0 ]--
r 19             if(rank(checklist[]))
--[ 2021.08.31.11.03.00.417.0 ]--
r 19             if(rank(checklist[i]))
--[ 2021.08.31.11.03.07.289.0 ]--
r 19             if(rank(checklist[i],))
--[ 2021.08.31.11.03.07.462.0 ]--
r 19             if(rank(checklist[i], ))
--[ 2021.08.31.11.03.07.784.0 ]--
r 19             if(rank(checklist[i], w))
--[ 2021.08.31.11.03.07.926.0 ]--
r 19             if(rank(checklist[i], wh))
--[ 2021.08.31.11.03.07.991.0 ]--
r 19             if(rank(checklist[i], whi))
--[ 2021.08.31.11.03.08.408.0 ]--
r 19             if(rank(checklist[i], whitelist))
--[ 2021.08.31.11.03.10.850.0 ]--
r 19             if(rank(checklist[i], whitelist) )
--[ 2021.08.31.11.03.11.217.0 ]--
r 19             if(rank(checklist[i], whitelist) =)
--[ 2021.08.31.11.03.11.348.0 ]--
r 19             if(rank(checklist[i], whitelist) ==)
--[ 2021.08.31.11.03.11.885.0 ]--
r 19             if(rank(checklist[i], whitelist) == )
--[ 2021.08.31.11.03.12.214.0 ]--
r 19             if(rank(checklist[i], whitelist) == -)
--[ 2021.08.31.11.03.12.380.0 ]--
r 19             if(rank(checklist[i], whitelist) == -1)
--[ 2021.08.31.11.03.13.170.0 ]--
r 19             if(rank(checklist[i], whitelist) == -1) 
--[ 2021.08.31.11.03.13.648.0 ]--
r 19             if(rank(checklist[i], whitelist) == -1) }
--[ 2021.08.31.11.03.14.057.0 ]--
r 19             if(rank(checklist[i], whitelist) == -1) 
--[ 2021.08.31.11.03.14.354.0 ]--
+ 20                 
--[ 2021.08.31.11.03.14.363.0 ]--
r 20                 P
--[ 2021.08.31.11.03.14.372.0 ]--
r 20                 P{
--[ 2021.08.31.11.03.15.827.0 ]--
r 20                 
--[ 2021.08.31.11.03.16.214.0 ]--
- 20
--[ 2021.08.31.11.03.17.062.0 ]--
r 19             if(rank(checklist[i], whitelist) == -1) {
--[ 2021.08.31.11.03.17.355.0 ]--
+ 20 
+ 21 }
--[ 2021.08.31.11.03.17.376.0 ]--
r 21             }
--[ 2021.08.31.11.03.17.404.0 ]--
r 20                 
--[ 2021.08.31.11.03.24.298.0 ]--
r 18         for(int i=0; i<clist.length; i++) {
--[ 2021.08.31.11.03.24.438.0 ]--
r 18         for(int i=0; i<chlist.length; i++) {
--[ 2021.08.31.11.03.24.598.0 ]--
r 18         for(int i=0; i<chelist.length; i++) {
--[ 2021.08.31.11.03.24.723.0 ]--
r 18         for(int i=0; i<checlist.length; i++) {
--[ 2021.08.31.11.03.24.864.0 ]--
r 18         for(int i=0; i<checklist.length; i++) {
--[ 2021.08.31.11.04.20.515.0 ]--
r 22             StdOut.print(" ");
r 23             StdOut.print(whitelist[i]);
--[ 2021.08.31.11.04.21.633.0 ]--
r 22             StdOut.print(whitelist[i]);
r 23             StdOut.print(" ");
--[ 2021.08.31.11.04.22.297.0 ]--
r 22             StdOut.print(" ");
r 23             StdOut.print(whitelist[i]);
--[ 2021.08.31.11.04.22.580.0 ]--
r 22             StdOut.print(whitelist[i]);
r 23             StdOut.print(" ");
--[ 2021.08.31.11.04.22.853.0 ]--
r 22             StdOut.print(" ");
r 23             StdOut.print(whitelist[i]);
--[ 2021.08.31.11.04.23.092.0 ]--
r 22             StdOut.print(whitelist[i]);
r 23             StdOut.print(" ");
--[ 2021.08.31.11.04.23.307.0 ]--
r 22             StdOut.print(" ");
r 23             StdOut.print(whitelist[i]);
--[ 2021.08.31.11.04.23.532.0 ]--
r 22             StdOut.print(whitelist[i]);
r 23             StdOut.print(" ");
--[ 2021.08.31.11.04.31.741.0 ]--
- 22
r 22             
--[ 2021.08.31.11.04.33.091.0 ]--
+ 22             StdOut.print(whitelist[i]);
r 23             StdOut.print(" ");
--[ 2021.08.31.11.04.34.602.0 ]--
r 20                     
--[ 2021.08.31.11.04.35.215.0 ]--
+ 20                 StdOut.print(whitelist[i]);
r 21             StdOut.print(" ");    
--[ 2021.08.31.11.04.35.228.0 ]--
r 21                 StdOut.print(" ");    
--[ 2021.08.31.11.04.41.353.0 ]--
r 20                 StdOut.print(clist[i]);
--[ 2021.08.31.11.04.41.484.0 ]--
r 20                 StdOut.print(chlist[i]);
--[ 2021.08.31.11.04.41.560.0 ]--
r 20                 StdOut.print(chelist[i]);
--[ 2021.08.31.11.04.41.779.0 ]--
r 20                 StdOut.print(checlist[i]);
--[ 2021.08.31.11.04.41.895.0 ]--
r 20                 StdOut.print(checklist[i]);
--[ 2021.08.31.11.04.47.872.0 ]--
r 20                 StdOut.printl(checklist[i]);
--[ 2021.08.31.11.04.48.302.0 ]--
r 20                 StdOut.println(checklist[i]);
--[ 2021.08.31.11.04.56.073.0 ]--
r 21                     
--[ 2021.08.31.11.04.56.232.0 ]--
r 21                 
--[ 2021.08.31.11.04.56.411.0 ]--
- 21
--[ 2021.08.31.11.05.13.816.0 ]--
r 22             StdOut.print(" ");
r 23             StdOut.print(whitelist[i]);
--[ 2021.08.31.11.05.14.395.0 ]--
r 22             StdOut.print(whitelist[i]);
r 23             StdOut.print(" ");
--[ 2021.08.31.11.05.14.860.0 ]--
r 23         }
r 24             StdOut.print(" ");
--[ 2021.08.31.11.05.14.878.0 ]--
r 24         StdOut.print(" ");
--[ 2021.08.31.11.05.16.188.0 ]--
r 23             StdOut.print(" ");
r 24         }
--[ 2021.08.31.11.05.22.638.0 ]--
- 22
r 22             
--[ 2021.08.31.11.05.23.533.0 ]--
- 22
--[ 2021.08.31.11.05.36.612.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.05.38.473.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.12.51.350.0 ]--
+ 1 
--[ 2021.08.31.11.12.51.579.0 ]--
+ 1 
--[ 2021.08.31.11.12.54.680.0 ]--
r 1 i
--[ 2021.08.31.11.12.54.835.0 ]--
r 1 im
--[ 2021.08.31.11.12.54.953.0 ]--
r 1 imp
--[ 2021.08.31.11.12.55.057.0 ]--
r 1 impo
--[ 2021.08.31.11.12.55.129.0 ]--
r 1 impor
--[ 2021.08.31.11.12.55.340.0 ]--
r 1 import
--[ 2021.08.31.11.12.55.407.0 ]--
r 1 import 
--[ 2021.08.31.11.12.55.726.0 ]--
r 1 import J
--[ 2021.08.31.11.12.56.486.0 ]--
r 1 import Ja
--[ 2021.08.31.11.12.56.735.0 ]--
r 1 import Jaq
--[ 2021.08.31.11.12.57.259.0 ]--
r 1 import Ja
--[ 2021.08.31.11.12.57.381.0 ]--
r 1 import Jacv
--[ 2021.08.31.11.12.57.644.0 ]--
r 1 import Jacva
--[ 2021.08.31.11.12.57.817.0 ]--
r 1 import Jacv
--[ 2021.08.31.11.12.57.955.0 ]--
r 1 import Jac
--[ 2021.08.31.11.12.58.099.0 ]--
r 1 import Ja
--[ 2021.08.31.11.12.58.128.0 ]--
r 1 import Jav
--[ 2021.08.31.11.12.58.209.0 ]--
r 1 import Java
--[ 2021.08.31.11.12.59.884.0 ]--
r 1 import Java.
--[ 2021.08.31.11.13.00.074.0 ]--
r 1 import Java.u
--[ 2021.08.31.11.13.00.149.0 ]--
r 1 import Java.ut
--[ 2021.08.31.11.13.00.365.0 ]--
r 1 import Java.uti
--[ 2021.08.31.11.13.00.471.0 ]--
r 1 import Java.util
--[ 2021.08.31.11.13.00.735.0 ]--
r 1 import Java.util.
--[ 2021.08.31.11.13.01.193.0 ]--
r 1 import Java.util.A
--[ 2021.08.31.11.13.01.257.0 ]--
r 1 import Java.util.Ar
--[ 2021.08.31.11.13.01.993.0 ]--
r 1 import Java.util.Arr
--[ 2021.08.31.11.13.02.183.0 ]--
r 1 import Java.util.Arra
--[ 2021.08.31.11.13.02.554.0 ]--
r 1 import Java.util.Arr
--[ 2021.08.31.11.13.02.764.0 ]--
r 1 import Java.util.Arry
--[ 2021.08.31.11.13.03.073.0 ]--
r 1 import Java.util.Arr
--[ 2021.08.31.11.13.03.141.0 ]--
r 1 import Java.util.Arra
--[ 2021.08.31.11.13.03.211.0 ]--
r 1 import Java.util.Arrar
--[ 2021.08.31.11.13.03.307.0 ]--
r 1 import Java.util.Arraryu
--[ 2021.08.31.11.13.03.678.0 ]--
r 1 import Java.util.Arrary
--[ 2021.08.31.11.13.03.811.0 ]--
r 1 import Java.util.Arrar
--[ 2021.08.31.11.13.04.005.0 ]--
r 1 import Java.util.Arrary
--[ 2021.08.31.11.13.04.212.0 ]--
r 1 import Java.util.Arrar
--[ 2021.08.31.11.13.04.339.0 ]--
r 1 import Java.util.Arra
--[ 2021.08.31.11.13.04.492.0 ]--
r 1 import Java.util.Array
--[ 2021.08.31.11.13.04.560.0 ]--
r 1 import Java.util.Arrays
--[ 2021.08.31.11.13.05.982.0 ]--
r 1 import Java.util.Arrays''
--[ 2021.08.31.11.13.06.910.0 ]--
r 1 import Java.util.Arrays
--[ 2021.08.31.11.13.07.093.0 ]--
r 1 import Java.util.Arrays;
--[ 2021.08.31.11.13.25.608.0 ]--
+ 14         
--[ 2021.08.31.11.13.27.446.0 ]--
r 14         S
--[ 2021.08.31.11.13.27.518.0 ]--
r 14         St
--[ 2021.08.31.11.13.27.852.0 ]--
r 14         Sto
--[ 2021.08.31.11.13.27.915.0 ]--
r 14         Stop
--[ 2021.08.31.11.13.28.563.0 ]--
r 14         Stopwatch
--[ 2021.08.31.11.13.29.114.0 ]--
r 14         Stopwatch.
--[ 2021.08.31.11.13.30.092.0 ]--
r 14         Stopwatch
--[ 2021.08.31.11.13.30.575.0 ]--
r 14         Stopwatch 
--[ 2021.08.31.11.13.30.701.0 ]--
r 14         Stopwatch r
--[ 2021.08.31.11.13.30.791.0 ]--
r 14         Stopwatch ru
--[ 2021.08.31.11.13.31.144.0 ]--
r 14         Stopwatch run
--[ 2021.08.31.11.13.31.563.0 ]--
r 14         Stopwatch runt
--[ 2021.08.31.11.13.31.662.0 ]--
r 14         Stopwatch runti
--[ 2021.08.31.11.13.31.738.0 ]--
r 14         Stopwatch runtim
--[ 2021.08.31.11.13.31.793.0 ]--
r 14         Stopwatch runtime
--[ 2021.08.31.11.13.32.075.0 ]--
r 14         Stopwatch runtime 
--[ 2021.08.31.11.13.32.428.0 ]--
r 14         Stopwatch runtime =
--[ 2021.08.31.11.13.32.478.0 ]--
r 14         Stopwatch runtime = 
--[ 2021.08.31.11.13.32.779.0 ]--
r 14         Stopwatch runtime = n
--[ 2021.08.31.11.13.32.978.0 ]--
r 14         Stopwatch runtime = new
--[ 2021.08.31.11.13.33.077.0 ]--
r 14         Stopwatch runtime = new 
--[ 2021.08.31.11.13.33.724.0 ]--
r 14         Stopwatch runtime = new S
--[ 2021.08.31.11.13.34.001.0 ]--
r 14         Stopwatch runtime = new Stopwatch
--[ 2021.08.31.11.13.34.013.0 ]--
r 14         Stopwatch runtime = new Stopwatch()
--[ 2021.08.31.11.13.36.378.0 ]--
r 14         Stopwatch runtime = new Stopwatch();
--[ 2021.08.31.11.14.06.490.0 ]--
+ 15         
--[ 2021.08.31.11.14.08.762.0 ]--
- 15
--[ 2021.08.31.11.14.16.580.0 ]--
+ 26         
--[ 2021.08.31.11.14.17.888.0 ]--
+ 26         
--[ 2021.08.31.11.14.18.554.0 ]--
r 27         S
--[ 2021.08.31.11.14.18.831.0 ]--
r 27         St
--[ 2021.08.31.11.14.19.525.0 ]--
r 27         Std
--[ 2021.08.31.11.14.20.735.0 ]--
r 27         StdOut
--[ 2021.08.31.11.14.21.002.0 ]--
r 27         StdOut.
--[ 2021.08.31.11.14.21.374.0 ]--
r 27         StdOut.p
--[ 2021.08.31.11.14.21.998.0 ]--
r 27         StdOut.println
--[ 2021.08.31.11.14.22.004.0 ]--
r 27         StdOut.println()
--[ 2021.08.31.11.14.22.008.0 ]--
r 27         StdOut.println();
--[ 2021.08.31.11.14.23.990.0 ]--
r 27         StdOut.println(r);
--[ 2021.08.31.11.14.24.147.0 ]--
r 27         StdOut.println(ru);
--[ 2021.08.31.11.14.24.612.0 ]--
r 27         StdOut.println(runtime);
--[ 2021.08.31.11.14.27.643.0 ]--
r 27         StdOut.println(runtim);
--[ 2021.08.31.11.14.27.672.0 ]--
r 27         StdOut.println(runti);
--[ 2021.08.31.11.14.27.703.0 ]--
r 27         StdOut.println(runt);
--[ 2021.08.31.11.14.27.732.0 ]--
r 27         StdOut.println(run);
--[ 2021.08.31.11.14.27.762.0 ]--
r 27         StdOut.println(ru);
--[ 2021.08.31.11.14.27.803.0 ]--
r 27         StdOut.println(r);
--[ 2021.08.31.11.14.28.206.0 ]--
r 27         StdOut.println();
--[ 2021.08.31.11.14.29.246.0 ]--
r 27         StdOut.println("");
--[ 2021.08.31.11.14.30.146.0 ]--
r 27         StdOut.println("e");
--[ 2021.08.31.11.14.30.265.0 ]--
r 27         StdOut.println("el");
--[ 2021.08.31.11.14.30.331.0 ]--
r 27         StdOut.println("ela");
--[ 2021.08.31.11.14.31.008.0 ]--
r 27         StdOut.println("elap");
--[ 2021.08.31.11.14.31.640.0 ]--
r 27         StdOut.println("elaps");
--[ 2021.08.31.11.14.31.732.0 ]--
r 27         StdOut.println("elapse");
--[ 2021.08.31.11.14.31.896.0 ]--
r 27         StdOut.println("elapsed");
--[ 2021.08.31.11.14.32.089.0 ]--
r 27         StdOut.println("elapsed ");
--[ 2021.08.31.11.14.32.167.0 ]--
r 27         StdOut.println("elapsed t");
--[ 2021.08.31.11.14.32.281.0 ]--
r 27         StdOut.println("elapsed ti");
--[ 2021.08.31.11.14.32.360.0 ]--
r 27         StdOut.println("elapsed tim");
--[ 2021.08.31.11.14.32.424.0 ]--
r 27         StdOut.println("elapsed time");
--[ 2021.08.31.11.14.35.054.0 ]--
r 27         StdOut.println("elapsed time:");
--[ 2021.08.31.11.14.36.502.0 ]--
r 27         StdOut.println("elapsed time: ");
--[ 2021.08.31.11.14.38.270.0 ]--
r 27         StdOut.println("elapsed time: " );
--[ 2021.08.31.11.14.38.926.0 ]--
r 27         StdOut.println("elapsed time: " +);
--[ 2021.08.31.11.14.39.049.0 ]--
r 27         StdOut.println("elapsed time: " + );
--[ 2021.08.31.11.14.39.460.0 ]--
r 27         StdOut.println("elapsed time: " + r);
--[ 2021.08.31.11.14.39.515.0 ]--
r 27         StdOut.println("elapsed time: " + re);
--[ 2021.08.31.11.14.40.336.0 ]--
r 27         StdOut.println("elapsed time: " + r);
--[ 2021.08.31.11.14.40.769.0 ]--
r 27         StdOut.println("elapsed time: " + ru);
--[ 2021.08.31.11.14.41.096.0 ]--
r 27         StdOut.println("elapsed time: " + runtime);
--[ 2021.08.31.11.14.42.559.0 ]--
r 27         StdOut.println("elapsed time: " + runtime.);
--[ 2021.08.31.11.14.42.875.0 ]--
r 27         StdOut.println("elapsed time: " + runtime.e);
--[ 2021.08.31.11.14.43.536.0 ]--
r 27         StdOut.println("elapsed time: " + runtime.el);
--[ 2021.08.31.11.14.43.947.0 ]--
r 27         StdOut.println("elapsed time: " + runtime.elapsedTime);
--[ 2021.08.31.11.14.43.959.0 ]--
r 27         StdOut.println("elapsed time: " + runtime.elapsedTime());
--[ 2021.08.31.11.14.57.363.0 ]--
r 26 
--[ 2021.08.31.11.15.17.807.0 ]--
r 1 import ava.util.Arrays;
--[ 2021.08.31.11.15.18.198.0 ]--
r 1 import java.util.Arrays;
--[ 2021.08.31.11.15.27.364.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.15.29.037.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.17.41.886.0 ]--
+ 7         
--[ 2021.08.31.11.17.50.359.0 ]--
r 7         f
--[ 2021.08.31.11.17.50.544.0 ]--
r 7         fo
--[ 2021.08.31.11.17.50.656.0 ]--
r 7         for
--[ 2021.08.31.11.17.51.920.0 ]--
r 7         for()
--[ 2021.08.31.11.17.55.435.0 ]--
r 7         for(i)
--[ 2021.08.31.11.17.55.525.0 ]--
r 7         for(in)
--[ 2021.08.31.11.17.55.558.0 ]--
r 7         for(int)
--[ 2021.08.31.11.17.55.872.0 ]--
r 7         for(int )
--[ 2021.08.31.11.17.56.596.0 ]--
r 7         for(int i)
--[ 2021.08.31.11.17.56.973.0 ]--
r 7         for(int i=)
--[ 2021.08.31.11.17.57.182.0 ]--
r 7         for(int i=0)
--[ 2021.08.31.11.17.57.894.0 ]--
r 7         for(int i=0;)
--[ 2021.08.31.11.17.58.101.0 ]--
r 7         for(int i=0; )
--[ 2021.08.31.11.18.00.660.0 ]--
r 7         for(int i=0; i)
--[ 2021.08.31.11.18.01.270.0 ]--
r 7         for(int i=0; i<)
--[ 2021.08.31.11.18.01.498.0 ]--
r 7         for(int i=0; i<a)
--[ 2021.08.31.11.18.02.993.0 ]--
r 7         for(int i=0; i<a.)
--[ 2021.08.31.11.18.03.290.0 ]--
r 7         for(int i=0; i<a.l)
--[ 2021.08.31.11.18.03.392.0 ]--
r 7         for(int i=0; i<a.le)
--[ 2021.08.31.11.18.03.497.0 ]--
r 7         for(int i=0; i<a.len)
--[ 2021.08.31.11.18.04.035.0 ]--
r 7         for(int i=0; i<a.length)
--[ 2021.08.31.11.18.04.388.0 ]--
r 7         for(int i=0; i<a.length;)
--[ 2021.08.31.11.18.06.568.0 ]--
r 7         for(int i=0; i<a.length; )
--[ 2021.08.31.11.18.06.691.0 ]--
r 7         for(int i=0; i<a.length; i)
--[ 2021.08.31.11.18.08.256.0 ]--
r 7         for(int i=0; i<a.length; i+)
--[ 2021.08.31.11.18.08.398.0 ]--
r 7         for(int i=0; i<a.length; i++)
--[ 2021.08.31.11.18.09.638.0 ]--
r 7         for(int i=0; i<a.length; i++) 
--[ 2021.08.31.11.18.09.839.0 ]--
r 7         for(int i=0; i<a.length; i++) }
--[ 2021.08.31.11.18.10.197.0 ]--
r 7         for(int i=0; i<a.length; i++) 
--[ 2021.08.31.11.18.11.005.0 ]--
r 7         for(int i=0; i<a.length; i++) {
--[ 2021.08.31.11.18.11.235.0 ]--
+ 8 
+ 9 }
--[ 2021.08.31.11.18.11.242.0 ]--
r 9         }
--[ 2021.08.31.11.18.11.265.0 ]--
r 8             
--[ 2021.08.31.11.18.25.502.0 ]--
r 8             i
--[ 2021.08.31.11.18.25.588.0 ]--
r 8             if
--[ 2021.08.31.11.18.26.421.0 ]--
r 8             if()
--[ 2021.08.31.11.18.26.653.0 ]--
r 8             if(k)
--[ 2021.08.31.11.18.26.816.0 ]--
r 8             if(ke)
--[ 2021.08.31.11.18.26.979.0 ]--
r 8             if(key)
--[ 2021.08.31.11.18.27.918.0 ]--
r 8             if(key=)
--[ 2021.08.31.11.18.28.051.0 ]--
r 8             if(key==)
--[ 2021.08.31.11.18.28.924.0 ]--
r 8             if(key==a)
--[ 2021.08.31.11.18.29.408.0 ]--
r 8             if(key==a.)
--[ 2021.08.31.11.18.29.962.0 ]--
r 8             if(key==a)
--[ 2021.08.31.11.18.30.102.0 ]--
r 8             if(key==)
--[ 2021.08.31.11.18.30.884.0 ]--
r 8             if(key==a)
--[ 2021.08.31.11.18.31.072.0 ]--
r 8             if(key==aj)
--[ 2021.08.31.11.18.31.869.0 ]--
r 8             if(key==a)
--[ 2021.08.31.11.18.32.653.0 ]--
r 8             if(key==a[])
--[ 2021.08.31.11.18.33.319.0 ]--
r 8             if(key==a[i])
--[ 2021.08.31.11.18.36.885.0 ]--
r 8             if(key==a[i]) 
--[ 2021.08.31.11.18.37.212.0 ]--
r 8             if(key==a[i]) r
--[ 2021.08.31.11.18.37.356.0 ]--
r 8             if(key==a[i]) re
--[ 2021.08.31.11.18.37.464.0 ]--
r 8             if(key==a[i]) ret
--[ 2021.08.31.11.18.37.508.0 ]--
r 8             if(key==a[i]) retu
--[ 2021.08.31.11.18.38.367.0 ]--
r 8             if(key==a[i]) return
--[ 2021.08.31.11.18.38.383.0 ]--
r 8             if(key==a[i]) return 
--[ 2021.08.31.11.18.38.980.0 ]--
r 8             if(key==a[i]) return i
--[ 2021.08.31.11.18.39.443.0 ]--
r 8             if(key==a[i]) return i;
--[ 2021.08.31.11.19.35.890.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.19.37.988.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.24.03.070.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.35.20.034.0 ]--
:/src/BinarySearch.java
+ 12         
--[ 2021.08.31.11.35.36.118.0 ]--
+ 12         
--[ 2021.08.31.11.35.36.772.0 ]--
r 13         I
--[ 2021.08.31.11.35.36.863.0 ]--
r 13         In
--[ 2021.08.31.11.35.36.951.0 ]--
r 13         In 
--[ 2021.08.31.11.35.37.182.0 ]--
r 13         In i
--[ 2021.08.31.11.35.37.483.0 ]--
r 13         In in 
--[ 2021.08.31.11.35.38.315.0 ]--
r 13         In in
--[ 2021.08.31.11.35.38.409.0 ]--
r 13         In in1
--[ 2021.08.31.11.35.38.871.0 ]--
r 13         In in1 
--[ 2021.08.31.11.35.39.175.0 ]--
r 13         In in1 =
--[ 2021.08.31.11.35.39.268.0 ]--
r 13         In in1 = 
--[ 2021.08.31.11.35.40.392.0 ]--
r 13         In in1 = n
--[ 2021.08.31.11.35.40.484.0 ]--
r 13         In in1 = ne
--[ 2021.08.31.11.35.40.496.0 ]--
r 13         In in1 = new
--[ 2021.08.31.11.35.40.574.0 ]--
r 13         In in1 = new 
--[ 2021.08.31.11.35.41.049.0 ]--
r 13         In in1 = new I
--[ 2021.08.31.11.35.41.134.0 ]--
r 13         In in1 = new In
--[ 2021.08.31.11.35.41.693.0 ]--
r 13         In in1 = new In*
--[ 2021.08.31.11.35.41.997.0 ]--
r 13         In in1 = new In*a
--[ 2021.08.31.11.35.42.222.0 ]--
r 13         In in1 = new In*
--[ 2021.08.31.11.35.42.318.0 ]--
r 13         In in1 = new In
--[ 2021.08.31.11.35.42.743.0 ]--
r 13         In in1 = new In()
--[ 2021.08.31.11.35.42.862.0 ]--
r 13         In in1 = new In(a)
--[ 2021.08.31.11.35.43.013.0 ]--
r 13         In in1 = new In(ar)
--[ 2021.08.31.11.35.43.410.0 ]--
r 13         In in1 = new In(args)
--[ 2021.08.31.11.35.44.080.0 ]--
r 13         In in1 = new In(args[])
--[ 2021.08.31.11.35.44.374.0 ]--
r 13         In in1 = new In(args[0])
--[ 2021.08.31.11.35.45.743.0 ]--
r 13         In in1 = new In(args[0]);
--[ 2021.08.31.11.35.54.765.0 ]--
+ 14         
--[ 2021.08.31.11.35.56.162.0 ]--
r 14         i
--[ 2021.08.31.11.35.56.263.0 ]--
r 14         in
--[ 2021.08.31.11.35.56.273.0 ]--
r 14         int
--[ 2021.08.31.11.35.57.122.0 ]--
r 14         int[]
--[ 2021.08.31.11.35.58.767.0 ]--
r 14         int[] 
--[ 2021.08.31.11.36.00.327.0 ]--
r 14         int[] w
--[ 2021.08.31.11.36.00.452.0 ]--
r 14         int[] wh
--[ 2021.08.31.11.36.00.527.0 ]--
r 14         int[] whi
--[ 2021.08.31.11.36.00.555.0 ]--
r 14         int[] whit
--[ 2021.08.31.11.36.00.760.0 ]--
r 14         int[] white
--[ 2021.08.31.11.36.00.913.0 ]--
r 14         int[] whitel
--[ 2021.08.31.11.36.01.022.0 ]--
r 14         int[] whiteli
--[ 2021.08.31.11.36.01.078.0 ]--
r 14         int[] whitelis
--[ 2021.08.31.11.36.01.227.0 ]--
r 14         int[] whitelist
--[ 2021.08.31.11.36.01.433.0 ]--
r 14         int[] whitelist 
--[ 2021.08.31.11.36.02.241.0 ]--
r 14         int[] whitelist =
--[ 2021.08.31.11.36.03.017.0 ]--
r 14         int[] whitelist = 
--[ 2021.08.31.11.36.03.520.0 ]--
r 14         int[] whitelist = i
--[ 2021.08.31.11.36.03.591.0 ]--
r 14         int[] whitelist = in
--[ 2021.08.31.11.36.04.130.0 ]--
r 14         int[] whitelist = in1
--[ 2021.08.31.11.36.05.187.0 ]--
r 14         int[] whitelist = in1.
--[ 2021.08.31.11.36.05.585.0 ]--
r 14         int[] whitelist = in1.r
--[ 2021.08.31.11.36.05.620.0 ]--
r 14         int[] whitelist = in1.re
--[ 2021.08.31.11.36.05.797.0 ]--
r 14         int[] whitelist = in1.rea
--[ 2021.08.31.11.36.06.481.0 ]--
r 14         int[] whitelist = in1.readAllInts
--[ 2021.08.31.11.36.06.488.0 ]--
r 14         int[] whitelist = in1.readAllInts()
--[ 2021.08.31.11.36.07.000.0 ]--
r 14         int[] whitelist = in1.readAllInts()''
--[ 2021.08.31.11.36.07.537.0 ]--
r 14         int[] whitelist = in1.readAllInts()
--[ 2021.08.31.11.36.07.729.0 ]--
r 14         int[] whitelist = in1.readAllInts();
--[ 2021.08.31.11.36.08.140.0 ]--
+ 15         
--[ 2021.08.31.11.36.09.192.0 ]--
r 15         I
--[ 2021.08.31.11.36.09.262.0 ]--
r 15         In
--[ 2021.08.31.11.36.09.566.0 ]--
r 15         In 
--[ 2021.08.31.11.36.09.615.0 ]--
r 15         In i
--[ 2021.08.31.11.36.09.720.0 ]--
r 15         In in
--[ 2021.08.31.11.36.10.118.0 ]--
r 15         In in2
--[ 2021.08.31.11.36.10.553.0 ]--
r 15         In in2 
--[ 2021.08.31.11.36.10.785.0 ]--
r 15         In in2 -
--[ 2021.08.31.11.36.11.007.0 ]--
r 15         In in2 - 
--[ 2021.08.31.11.36.11.305.0 ]--
r 15         In in2 -
--[ 2021.08.31.11.36.11.441.0 ]--
r 15         In in2 
--[ 2021.08.31.11.36.11.595.0 ]--
r 15         In in2 -
--[ 2021.08.31.11.36.12.006.0 ]--
r 15         In in2 
--[ 2021.08.31.11.36.12.207.0 ]--
r 15         In in2 =
--[ 2021.08.31.11.36.12.440.0 ]--
r 15         In in2 = 
--[ 2021.08.31.11.36.12.622.0 ]--
r 15         In in2 = n
--[ 2021.08.31.11.36.12.747.0 ]--
r 15         In in2 = ne
--[ 2021.08.31.11.36.12.794.0 ]--
r 15         In in2 = new
--[ 2021.08.31.11.36.12.908.0 ]--
r 15         In in2 = new 
--[ 2021.08.31.11.36.13.335.0 ]--
r 15         In in2 = new
--[ 2021.08.31.11.36.13.609.0 ]--
r 15         In in2 = new 
--[ 2021.08.31.11.36.13.950.0 ]--
r 15         In in2 = new I
--[ 2021.08.31.11.36.14.244.0 ]--
r 15         In in2 = new In
--[ 2021.08.31.11.36.14.716.0 ]--
r 15         In in2 = new In*
--[ 2021.08.31.11.36.14.968.0 ]--
r 15         In in2 = new In*a
--[ 2021.08.31.11.36.15.088.0 ]--
r 15         In in2 = new In*ar
--[ 2021.08.31.11.36.15.292.0 ]--
r 15         In in2 = new In*a
--[ 2021.08.31.11.36.15.412.0 ]--
r 15         In in2 = new In*
--[ 2021.08.31.11.36.15.527.0 ]--
r 15         In in2 = new In
--[ 2021.08.31.11.36.15.918.0 ]--
r 15         In in2 = new In()
--[ 2021.08.31.11.36.16.174.0 ]--
r 15         In in2 = new In(a)
--[ 2021.08.31.11.36.16.294.0 ]--
r 15         In in2 = new In(ar)
--[ 2021.08.31.11.36.16.463.0 ]--
r 15         In in2 = new In(arg)
--[ 2021.08.31.11.36.16.889.0 ]--
r 15         In in2 = new In(args)
--[ 2021.08.31.11.36.17.956.0 ]--
r 15         In in2 = new In(args[])
--[ 2021.08.31.11.36.18.048.0 ]--
r 15         In in2 = new In(args[1])
--[ 2021.08.31.11.36.19.848.0 ]--
r 15         In in2 = new In(args[1]);
--[ 2021.08.31.11.36.20.730.0 ]--
+ 16         
--[ 2021.08.31.11.36.23.533.0 ]--
r 16         int[] whitelist = in1.readAllInts();
--[ 2021.08.31.11.36.27.327.0 ]--
r 16         int[] clist = in1.readAllInts();
--[ 2021.08.31.11.36.27.449.0 ]--
r 16         int[] chlist = in1.readAllInts();
--[ 2021.08.31.11.36.27.528.0 ]--
r 16         int[] chelist = in1.readAllInts();
--[ 2021.08.31.11.36.27.640.0 ]--
r 16         int[] cheklist = in1.readAllInts();
--[ 2021.08.31.11.36.27.692.0 ]--
r 16         int[] chekclist = in1.readAllInts();
--[ 2021.08.31.11.36.28.376.0 ]--
r 16         int[] cheklist = in1.readAllInts();
--[ 2021.08.31.11.36.28.494.0 ]--
r 16         int[] chelist = in1.readAllInts();
--[ 2021.08.31.11.36.28.543.0 ]--
r 16         int[] checlist = in1.readAllInts();
--[ 2021.08.31.11.36.28.659.0 ]--
r 16         int[] checklist = in1.readAllInts();
--[ 2021.08.31.11.36.30.011.0 ]--
+ 12         
--[ 2021.08.31.11.36.31.618.0 ]--
r 12         S
--[ 2021.08.31.11.36.31.691.0 ]--
r 12         St
--[ 2021.08.31.11.36.31.894.0 ]--
r 12         Sto
--[ 2021.08.31.11.36.31.964.0 ]--
r 12         Stop
--[ 2021.08.31.11.36.32.499.0 ]--
r 12         Stopwatch
--[ 2021.08.31.11.36.32.792.0 ]--
r 12         Stopwatch.
--[ 2021.08.31.11.36.33.289.0 ]--
r 12         Stopwatch
--[ 2021.08.31.11.36.33.522.0 ]--
r 12         Stopwatch 
--[ 2021.08.31.11.36.35.031.0 ]--
r 12         Stopwatch r
--[ 2021.08.31.11.36.35.138.0 ]--
r 12         Stopwatch ru
--[ 2021.08.31.11.36.35.288.0 ]--
r 12         Stopwatch run
--[ 2021.08.31.11.36.35.371.0 ]--
r 12         Stopwatch runt
--[ 2021.08.31.11.36.35.462.0 ]--
r 12         Stopwatch runti
--[ 2021.08.31.11.36.35.552.0 ]--
r 12         Stopwatch runtim
--[ 2021.08.31.11.36.35.585.0 ]--
r 12         Stopwatch runtime
--[ 2021.08.31.11.36.35.951.0 ]--
r 12         Stopwatch runtime 
--[ 2021.08.31.11.36.36.585.0 ]--
r 12         Stopwatch runtime =
--[ 2021.08.31.11.36.36.689.0 ]--
r 12         Stopwatch runtime = 
--[ 2021.08.31.11.36.36.927.0 ]--
r 12         Stopwatch runtime = n
--[ 2021.08.31.11.36.37.009.0 ]--
r 12         Stopwatch runtime = ne
--[ 2021.08.31.11.36.37.128.0 ]--
r 12         Stopwatch runtime = new
--[ 2021.08.31.11.36.37.270.0 ]--
r 12         Stopwatch runtime = new 
--[ 2021.08.31.11.36.37.792.0 ]--
r 12         Stopwatch runtime = new S
--[ 2021.08.31.11.36.38.044.0 ]--
r 12         Stopwatch runtime = new Stopwatch
--[ 2021.08.31.11.36.38.053.0 ]--
r 12         Stopwatch runtime = new Stopwatch()
--[ 2021.08.31.11.36.39.474.0 ]--
r 12         Stopwatch runtime = new Stopwatch();
--[ 2021.08.31.11.36.41.351.0 ]--
+ 18         
--[ 2021.08.31.11.36.42.291.0 ]--
+ 18         
--[ 2021.08.31.11.36.44.351.0 ]--
r 18         A
--[ 2021.08.31.11.36.44.446.0 ]--
r 18         Ar
--[ 2021.08.31.11.36.44.615.0 ]--
r 18         Arr
--[ 2021.08.31.11.36.44.790.0 ]--
r 18         Arra
--[ 2021.08.31.11.36.44.979.0 ]--
r 18         Array
--[ 2021.08.31.11.36.45.699.0 ]--
r 18         Arrays
--[ 2021.08.31.11.36.45.994.0 ]--
r 18         Arrays.
--[ 2021.08.31.11.36.46.142.0 ]--
r 18         Arrays.s
--[ 2021.08.31.11.36.46.265.0 ]--
r 18         Arrays.so
--[ 2021.08.31.11.36.46.300.0 ]--
r 18         Arrays.sor
--[ 2021.08.31.11.36.46.496.0 ]--
r 18         Arrays.sort
--[ 2021.08.31.11.36.46.591.0 ]--
r 18         Arrays.sorty
--[ 2021.08.31.11.36.46.988.0 ]--
r 18         Arrays.sorty()
--[ 2021.08.31.11.36.47.777.0 ]--
r 18         Arrays.sorty
--[ 2021.08.31.11.36.47.891.0 ]--
r 18         Arrays.sort
--[ 2021.08.31.11.36.48.006.0 ]--
r 18         Arrays.sor
--[ 2021.08.31.11.36.48.505.0 ]--
r 18         Arrays.sort
--[ 2021.08.31.11.36.50.243.0 ]--
r 18         Arrays.sort()
--[ 2021.08.31.11.36.50.470.0 ]--
r 18         Arrays.sort(w)
--[ 2021.08.31.11.36.50.651.0 ]--
r 18         Arrays.sort(wh)
--[ 2021.08.31.11.36.50.717.0 ]--
r 18         Arrays.sort(whi)
--[ 2021.08.31.11.36.51.010.0 ]--
r 18         Arrays.sort(whitelist)
--[ 2021.08.31.11.36.52.290.0 ]--
r 18         Arrays.sort(whitelist);
--[ 2021.08.31.11.36.52.594.0 ]--
+ 19         
--[ 2021.08.31.11.36.52.943.0 ]--
+ 19         
--[ 2021.08.31.11.36.54.815.0 ]--
r 20         f
--[ 2021.08.31.11.36.54.862.0 ]--
r 20         fo
--[ 2021.08.31.11.36.54.913.0 ]--
r 20         for
--[ 2021.08.31.11.36.56.378.0 ]--
r 20         for()
--[ 2021.08.31.11.36.56.990.0 ]--
r 20         for(i)
--[ 2021.08.31.11.36.57.084.0 ]--
r 20         for(in)
--[ 2021.08.31.11.36.57.193.0 ]--
r 20         for(int)
--[ 2021.08.31.11.36.57.937.0 ]--
r 20         for(int )
--[ 2021.08.31.11.36.59.221.0 ]--
r 20         for(int i)
--[ 2021.08.31.11.37.00.330.0 ]--
r 20         for(int i=)
--[ 2021.08.31.11.37.00.622.0 ]--
r 20         for(int i=0)
--[ 2021.08.31.11.37.01.197.0 ]--
r 20         for(int i=0;)
--[ 2021.08.31.11.37.01.558.0 ]--
r 20         for(int i=0; )
--[ 2021.08.31.11.37.01.807.0 ]--
r 20         for(int i=0; i)
--[ 2021.08.31.11.37.02.380.0 ]--
r 20         for(int i=0; i<)
--[ 2021.08.31.11.37.03.489.0 ]--
r 20         for(int i=0; i<c)
--[ 2021.08.31.11.37.03.561.0 ]--
r 20         for(int i=0; i<ch)
--[ 2021.08.31.11.37.03.668.0 ]--
r 20         for(int i=0; i<che)
--[ 2021.08.31.11.37.03.953.0 ]--
r 20         for(int i=0; i<chek)
--[ 2021.08.31.11.37.04.275.0 ]--
r 20         for(int i=0; i<checklist)
--[ 2021.08.31.11.37.04.746.0 ]--
r 20         for(int i=0; i<checklist.)
--[ 2021.08.31.11.37.05.002.0 ]--
r 20         for(int i=0; i<checklist.l)
--[ 2021.08.31.11.37.05.320.0 ]--
r 20         for(int i=0; i<checklist.length)
--[ 2021.08.31.11.37.06.393.0 ]--
r 20         for(int i=0; i<checklist.length;)
--[ 2021.08.31.11.37.06.584.0 ]--
r 20         for(int i=0; i<checklist.length; )
--[ 2021.08.31.11.37.07.055.0 ]--
r 20         for(int i=0; i<checklist.length; i)
--[ 2021.08.31.11.37.07.740.0 ]--
r 20         for(int i=0; i<checklist.length; i+)
--[ 2021.08.31.11.37.07.880.0 ]--
r 20         for(int i=0; i<checklist.length; i++)
--[ 2021.08.31.11.37.09.361.0 ]--
r 20         for(int i=0; i<checklist.length; i++){
--[ 2021.08.31.11.37.09.592.0 ]--
+ 21 
+ 22 }
--[ 2021.08.31.11.37.09.611.0 ]--
r 22         }
--[ 2021.08.31.11.37.09.641.0 ]--
r 21             
--[ 2021.08.31.11.37.12.087.0 ]--
r 21             i
--[ 2021.08.31.11.37.12.121.0 ]--
r 21             if
--[ 2021.08.31.11.37.12.808.0 ]--
r 21             if()
--[ 2021.08.31.11.37.12.985.0 ]--
r 21             if(r)
--[ 2021.08.31.11.37.13.118.0 ]--
r 21             if(ra)
--[ 2021.08.31.11.37.13.210.0 ]--
r 21             if(ran)
--[ 2021.08.31.11.37.13.522.0 ]--
r 21             if(rank)
--[ 2021.08.31.11.37.14.202.0 ]--
r 21             if(rank())
--[ 2021.08.31.11.37.14.551.0 ]--
r 21             if(rank(c))
--[ 2021.08.31.11.37.14.671.0 ]--
r 21             if(rank(ch))
--[ 2021.08.31.11.37.14.754.0 ]--
r 21             if(rank(che))
--[ 2021.08.31.11.37.14.902.0 ]--
r 21             if(rank(chek))
--[ 2021.08.31.11.37.14.950.0 ]--
r 21             if(rank(chekc))
--[ 2021.08.31.11.37.15.162.0 ]--
r 21             if(rank(chekcl))
--[ 2021.08.31.11.37.15.281.0 ]--
r 21             if(rank(chekcli))
--[ 2021.08.31.11.37.15.337.0 ]--
r 21             if(rank(chekclis))
--[ 2021.08.31.11.37.15.489.0 ]--
r 21             if(rank(chekclist))
--[ 2021.08.31.11.37.16.121.0 ]--
r 21             if(rank(chekclistp))
--[ 2021.08.31.11.37.16.650.0 ]--
r 21             if(rank(chekclist))
--[ 2021.08.31.11.37.17.344.0 ]--
r 21             if(rank(chekclist[]))
--[ 2021.08.31.11.37.17.565.0 ]--
r 21             if(rank(chekclist[9i]))
--[ 2021.08.31.11.37.18.097.0 ]--
r 21             if(rank(chekclist[9]))
--[ 2021.08.31.11.37.18.208.0 ]--
r 21             if(rank(chekclist[]))
--[ 2021.08.31.11.37.18.400.0 ]--
r 21             if(rank(chekclist[i]))
--[ 2021.08.31.11.37.21.612.0 ]--
r 21             if(rank(chekclist[i],))
--[ 2021.08.31.11.37.21.701.0 ]--
r 21             if(rank(chekclist[i], ))
--[ 2021.08.31.11.37.21.839.0 ]--
r 21             if(rank(chekclist[i], w))
--[ 2021.08.31.11.37.21.931.0 ]--
r 21             if(rank(chekclist[i], wh))
--[ 2021.08.31.11.37.21.995.0 ]--
r 21             if(rank(chekclist[i], whi))
--[ 2021.08.31.11.37.22.105.0 ]--
r 21             if(rank(chekclist[i], whit))
--[ 2021.08.31.11.37.22.264.0 ]--
r 21             if(rank(chekclist[i], white))
--[ 2021.08.31.11.37.22.676.0 ]--
r 21             if(rank(chekclist[i], whitelist))
--[ 2021.08.31.11.37.24.678.0 ]--
r 21             if(rank(chekclist[i], whitelist) )
--[ 2021.08.31.11.37.24.993.0 ]--
r 21             if(rank(chekclist[i], whitelist) =)
--[ 2021.08.31.11.37.25.112.0 ]--
r 21             if(rank(chekclist[i], whitelist) ==)
--[ 2021.08.31.11.37.25.191.0 ]--
r 21             if(rank(chekclist[i], whitelist) == )
--[ 2021.08.31.11.37.26.105.0 ]--
r 21             if(rank(chekclist[i], whitelist) == -)
--[ 2021.08.31.11.37.26.511.0 ]--
r 21             if(rank(chekclist[i], whitelist) == -1)
--[ 2021.08.31.11.37.26.986.0 ]--
r 21             if(rank(chekclist[i], whitelist) == -1) 
--[ 2021.08.31.11.37.27.342.0 ]--
r 21             if(rank(chekclist[i], whitelist) == -1) {
--[ 2021.08.31.11.37.27.609.0 ]--
+ 22 
+ 23 }
--[ 2021.08.31.11.37.27.625.0 ]--
r 23             }
--[ 2021.08.31.11.37.27.642.0 ]--
r 22                 
--[ 2021.08.31.11.37.29.808.0 ]--
r 22                 S
--[ 2021.08.31.11.37.30.202.0 ]--
r 22                 Sy
--[ 2021.08.31.11.37.30.350.0 ]--
r 22                 Sys
--[ 2021.08.31.11.37.30.713.0 ]--
r 22                 System
--[ 2021.08.31.11.37.30.886.0 ]--
r 22                 System.
--[ 2021.08.31.11.37.32.073.0 ]--
r 22                 System.o
--[ 2021.08.31.11.37.32.086.0 ]--
r 22                 System.out
--[ 2021.08.31.11.37.32.248.0 ]--
r 22                 System.out.
--[ 2021.08.31.11.37.32.572.0 ]--
r 22                 System.out.p
--[ 2021.08.31.11.37.32.639.0 ]--
r 22                 System.out.pr
--[ 2021.08.31.11.37.32.735.0 ]--
r 22                 System.out.pri
--[ 2021.08.31.11.37.32.837.0 ]--
r 22                 System.out.prin
--[ 2021.08.31.11.37.32.892.0 ]--
r 22                 System.out.print
--[ 2021.08.31.11.37.33.385.0 ]--
r 22                 System.out.print()
--[ 2021.08.31.11.37.33.894.0 ]--
r 22                 System.out.print(c)
--[ 2021.08.31.11.37.33.993.0 ]--
r 22                 System.out.print(ch)
--[ 2021.08.31.11.37.34.102.0 ]--
r 22                 System.out.print(che)
--[ 2021.08.31.11.37.34.277.0 ]--
r 22                 System.out.print(check)
--[ 2021.08.31.11.37.35.041.0 ]--
r 22                 System.out.print(checklist)
--[ 2021.08.31.11.37.35.868.0 ]--
r 22                 System.out.print(checklist[])
--[ 2021.08.31.11.37.36.782.0 ]--
r 22                 System.out.print(checklist[i])
--[ 2021.08.31.11.37.38.550.0 ]--
r 22                 System.out.print(checklist[i]);
--[ 2021.08.31.11.37.38.804.0 ]--
+ 23                 
--[ 2021.08.31.11.37.39.390.0 ]--
r 23                 S
--[ 2021.08.31.11.37.39.709.0 ]--
r 23                 Sty
--[ 2021.08.31.11.37.39.929.0 ]--
r 23                 St
--[ 2021.08.31.11.37.40.111.0 ]--
r 23                 S
--[ 2021.08.31.11.37.40.290.0 ]--
r 23                 Sys
--[ 2021.08.31.11.37.40.415.0 ]--
r 23                 Syst
--[ 2021.08.31.11.37.40.665.0 ]--
r 23                 System
--[ 2021.08.31.11.37.40.937.0 ]--
r 23                 System.
--[ 2021.08.31.11.37.41.180.0 ]--
r 23                 System.o
--[ 2021.08.31.11.37.41.249.0 ]--
r 23                 System.ou
--[ 2021.08.31.11.37.41.321.0 ]--
r 23                 System.out
--[ 2021.08.31.11.37.42.239.0 ]--
r 23                 System.out.
--[ 2021.08.31.11.37.42.511.0 ]--
r 23                 System.out.p
--[ 2021.08.31.11.37.42.988.0 ]--
r 23                 System.out.print
--[ 2021.08.31.11.37.42.995.0 ]--
r 23                 System.out.print()
--[ 2021.08.31.11.37.43.003.0 ]--
r 23                 System.out.print();
--[ 2021.08.31.11.37.43.926.0 ]--
r 23                 System.out.print(c);
--[ 2021.08.31.11.37.44.865.0 ]--
r 23                 System.out.print();
--[ 2021.08.31.11.37.46.004.0 ]--
r 23                 System.out.print("");
--[ 2021.08.31.11.37.46.160.0 ]--
r 23                 System.out.print(" ");
--[ 2021.08.31.11.37.49.411.0 ]--
+ 26         
--[ 2021.08.31.11.37.50.594.0 ]--
r 27         S
--[ 2021.08.31.11.37.50.921.0 ]--
r 27         St
--[ 2021.08.31.11.37.51.150.0 ]--
r 27         Std
--[ 2021.08.31.11.37.51.656.0 ]--
r 27         StdOut
--[ 2021.08.31.11.37.51.839.0 ]--
r 27         StdOut.
--[ 2021.08.31.11.37.53.014.0 ]--
r 27         StdOut.p
--[ 2021.08.31.11.37.53.126.0 ]--
r 27         StdOut.pr
--[ 2021.08.31.11.37.53.375.0 ]--
r 27         StdOut.pri
--[ 2021.08.31.11.37.53.787.0 ]--
r 27         StdOut.println
--[ 2021.08.31.11.37.53.792.0 ]--
r 27         StdOut.println()
--[ 2021.08.31.11.37.53.802.0 ]--
r 27         StdOut.println();
--[ 2021.08.31.11.37.56.053.0 ]--
r 27         StdOut.println(:);
--[ 2021.08.31.11.37.56.646.0 ]--
r 27         StdOut.println();
--[ 2021.08.31.11.37.59.025.0 ]--
r 27         StdOut.println("");
--[ 2021.08.31.11.38.00.323.0 ]--
r 27         StdOut.println("e");
--[ 2021.08.31.11.38.00.384.0 ]--
r 27         StdOut.println("el");
--[ 2021.08.31.11.38.00.461.0 ]--
r 27         StdOut.println("els");
--[ 2021.08.31.11.38.00.881.0 ]--
r 27         StdOut.println("elsa");
--[ 2021.08.31.11.38.00.958.0 ]--
r 27         StdOut.println("elsap");
--[ 2021.08.31.11.38.01.211.0 ]--
r 27         StdOut.println("elsa");
--[ 2021.08.31.11.38.01.335.0 ]--
r 27         StdOut.println("els");
--[ 2021.08.31.11.38.01.756.0 ]--
r 27         StdOut.println("el");
--[ 2021.08.31.11.38.01.861.0 ]--
r 27         StdOut.println("ela");
--[ 2021.08.31.11.38.01.970.0 ]--
r 27         StdOut.println("elap");
--[ 2021.08.31.11.38.02.260.0 ]--
r 27         StdOut.println("elaps");
--[ 2021.08.31.11.38.02.376.0 ]--
r 27         StdOut.println("elapse");
--[ 2021.08.31.11.38.02.534.0 ]--
r 27         StdOut.println("elapsed");
--[ 2021.08.31.11.38.02.688.0 ]--
r 27         StdOut.println("elapsed ");
--[ 2021.08.31.11.38.02.794.0 ]--
r 27         StdOut.println("elapsed t");
--[ 2021.08.31.11.38.02.847.0 ]--
r 27         StdOut.println("elapsed ti");
--[ 2021.08.31.11.38.02.918.0 ]--
r 27         StdOut.println("elapsed tim");
--[ 2021.08.31.11.38.02.996.0 ]--
r 27         StdOut.println("elapsed time");
--[ 2021.08.31.11.38.03.350.0 ]--
r 27         StdOut.println("elapsed time;");
--[ 2021.08.31.11.38.04.056.0 ]--
r 27         StdOut.println("elapsed time");
--[ 2021.08.31.11.38.04.247.0 ]--
r 27         StdOut.println("elapsed time;l");
--[ 2021.08.31.11.38.04.662.0 ]--
r 27         StdOut.println("elapsed time;");
--[ 2021.08.31.11.38.04.814.0 ]--
r 27         StdOut.println("elapsed time");
--[ 2021.08.31.11.38.05.365.0 ]--
r 27         StdOut.println("elapsed time:");
--[ 2021.08.31.11.38.06.545.0 ]--
r 27         StdOut.println("elapsed time: ");
--[ 2021.08.31.11.38.11.058.0 ]--
r 27         StdOut.println("elapsed time: " );
--[ 2021.08.31.11.38.11.384.0 ]--
r 27         StdOut.println("elapsed time: " +);
--[ 2021.08.31.11.38.11.687.0 ]--
r 27         StdOut.println("elapsed time: " + );
--[ 2021.08.31.11.38.13.226.0 ]--
r 27         StdOut.println("elapsed time: " + r);
--[ 2021.08.31.11.38.13.345.0 ]--
r 27         StdOut.println("elapsed time: " + ru);
--[ 2021.08.31.11.38.13.487.0 ]--
r 27         StdOut.println("elapsed time: " + run);
--[ 2021.08.31.11.38.13.543.0 ]--
r 27         StdOut.println("elapsed time: " + runt);
--[ 2021.08.31.11.38.13.698.0 ]--
r 27         StdOut.println("elapsed time: " + runti);
--[ 2021.08.31.11.38.14.148.0 ]--
r 27         StdOut.println("elapsed time: " + runtime);
--[ 2021.08.31.11.38.14.384.0 ]--
r 27         StdOut.println("elapsed time: " + runtime.);
--[ 2021.08.31.11.38.15.788.0 ]--
r 27         StdOut.println("elapsed time: " + runtime.e);
--[ 2021.08.31.11.38.16.451.0 ]--
r 27         StdOut.println("elapsed time: " + runtime.elapsedTime);
--[ 2021.08.31.11.38.16.456.0 ]--
r 27         StdOut.println("elapsed time: " + runtime.elapsedTime());
--[ 2021.08.31.11.38.23.780.0 ]--
r 13 
r 19 
r 26 
--[ 2021.08.31.11.38.37.230.0 ]--
+ 1 
--[ 2021.08.31.11.38.37.357.0 ]--
+ 1 
--[ 2021.08.31.11.38.39.242.0 ]--
r 1 i
--[ 2021.08.31.11.38.39.436.0 ]--
r 1 im
--[ 2021.08.31.11.38.39.592.0 ]--
r 1 imp
--[ 2021.08.31.11.38.39.718.0 ]--
r 1 impo
--[ 2021.08.31.11.38.39.827.0 ]--
r 1 impor
--[ 2021.08.31.11.38.40.012.0 ]--
r 1 import
--[ 2021.08.31.11.38.41.371.0 ]--
r 1 import 
--[ 2021.08.31.11.38.41.525.0 ]--
r 1 import j
--[ 2021.08.31.11.38.41.647.0 ]--
r 1 import ja
--[ 2021.08.31.11.38.41.806.0 ]--
r 1 import jav
--[ 2021.08.31.11.38.41.958.0 ]--
r 1 import java
--[ 2021.08.31.11.38.42.370.0 ]--
r 1 import java.
--[ 2021.08.31.11.38.42.640.0 ]--
r 1 import java.u
--[ 2021.08.31.11.38.42.685.0 ]--
r 1 import java.ut
--[ 2021.08.31.11.38.42.769.0 ]--
r 1 import java.uti
--[ 2021.08.31.11.38.42.906.0 ]--
r 1 import java.util
--[ 2021.08.31.11.38.43.170.0 ]--
r 1 import java.util.
--[ 2021.08.31.11.38.44.219.0 ]--
r 1 import java.util.A
--[ 2021.08.31.11.38.44.360.0 ]--
r 1 import java.util.Ar
--[ 2021.08.31.11.38.44.525.0 ]--
r 1 import java.util.Arr
--[ 2021.08.31.11.38.44.626.0 ]--
r 1 import java.util.Arra
--[ 2021.08.31.11.38.44.755.0 ]--
r 1 import java.util.Array
--[ 2021.08.31.11.38.44.875.0 ]--
r 1 import java.util.Arrays
--[ 2021.08.31.11.38.53.958.0 ]--
r 23             if(rank(chekist[i], whitelist) == -1) {
--[ 2021.08.31.11.38.54.068.0 ]--
r 23             if(rank(cheist[i], whitelist) == -1) {
--[ 2021.08.31.11.38.54.511.0 ]--
r 23             if(rank(checist[i], whitelist) == -1) {
--[ 2021.08.31.11.38.54.793.0 ]--
r 23             if(rank(checkist[i], whitelist) == -1) {
--[ 2021.08.31.11.38.55.420.0 ]--
r 23             if(rank(checklistist[i], whitelist) == -1) {
--[ 2021.08.31.11.38.58.409.0 ]--
r 23             if(rank(checklist[i], whitelist) == -1) {
--[ 2021.08.31.11.39.09.894.0 ]--
r 1 import java.util.Arrays;
--[ 2021.08.31.11.39.24.382.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.39.31.298.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.40.16.278.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.40.19.449.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.41.05.090.0 ]--
+ 7         
--[ 2021.08.31.11.41.05.189.0 ]--
+ 7         
--[ 2021.08.31.11.41.25.566.0 ]--
r 7         i
--[ 2021.08.31.11.41.25.649.0 ]--
r 7         in
--[ 2021.08.31.11.41.25.975.0 ]--
r 7         int
--[ 2021.08.31.11.41.26.029.0 ]--
r 7         int 
--[ 2021.08.31.11.41.26.687.0 ]--
r 7         int l
--[ 2021.08.31.11.41.26.856.0 ]--
r 7         int lo
--[ 2021.08.31.11.41.26.878.0 ]--
r 7         int low
--[ 2021.08.31.11.41.29.599.0 ]--
r 7         int low 
--[ 2021.08.31.11.41.30.222.0 ]--
r 7         int low =
--[ 2021.08.31.11.41.30.384.0 ]--
r 7         int low = 
--[ 2021.08.31.11.41.31.357.0 ]--
r 7         int low = 0
--[ 2021.08.31.11.41.31.871.0 ]--
r 7         int low = 0;
--[ 2021.08.31.11.41.32.152.0 ]--
+ 8         
--[ 2021.08.31.11.41.32.671.0 ]--
r 8         i
--[ 2021.08.31.11.41.32.795.0 ]--
r 8         in
--[ 2021.08.31.11.41.32.816.0 ]--
r 8         int
--[ 2021.08.31.11.41.33.024.0 ]--
r 8         int 
--[ 2021.08.31.11.41.33.333.0 ]--
r 8         int h
--[ 2021.08.31.11.41.33.412.0 ]--
r 8         int hi
--[ 2021.08.31.11.41.33.480.0 ]--
r 8         int hig
--[ 2021.08.31.11.41.33.561.0 ]--
r 8         int high
--[ 2021.08.31.11.41.33.660.0 ]--
r 8         int hight
--[ 2021.08.31.11.41.34.060.0 ]--
r 8         int high
--[ 2021.08.31.11.41.34.207.0 ]--
r 8         int high 
--[ 2021.08.31.11.41.34.909.0 ]--
r 8         int high =
--[ 2021.08.31.11.41.35.734.0 ]--
r 8         int high = 
--[ 2021.08.31.11.41.40.117.0 ]--
r 8         int high = ;
--[ 2021.08.31.11.41.41.572.0 ]--
r 8         int high = a;
--[ 2021.08.31.11.41.43.111.0 ]--
r 8         int high = a.;
--[ 2021.08.31.11.41.43.448.0 ]--
r 8         int high = a.l;
--[ 2021.08.31.11.41.43.931.0 ]--
r 8         int high = a.length;
--[ 2021.08.31.11.41.44.797.0 ]--
r 8         int high = a.length-;
--[ 2021.08.31.11.41.44.941.0 ]--
r 8         int high = a.length-1;
--[ 2021.08.31.11.41.58.107.0 ]--
+ 9         
--[ 2021.08.31.11.41.59.628.0 ]--
r 9         w
--[ 2021.08.31.11.41.59.719.0 ]--
r 9         wh
--[ 2021.08.31.11.41.59.782.0 ]--
r 9         whi
--[ 2021.08.31.11.41.59.870.0 ]--
r 9         whil
--[ 2021.08.31.11.42.00.008.0 ]--
r 9         whilt
--[ 2021.08.31.11.42.00.441.0 ]--
r 9         whil
--[ 2021.08.31.11.42.00.519.0 ]--
r 9         while
--[ 2021.08.31.11.42.01.453.0 ]--
r 9         while()
--[ 2021.08.31.11.42.02.427.0 ]--
r 9         while(l)
--[ 2021.08.31.11.42.02.629.0 ]--
r 9         while(low)
--[ 2021.08.31.11.42.03.719.0 ]--
r 9         while(low )
--[ 2021.08.31.11.42.04.663.0 ]--
r 9         while(low <)
--[ 2021.08.31.11.42.05.236.0 ]--
r 9         while(low <=)
--[ 2021.08.31.11.42.05.486.0 ]--
r 9         while(low <= )
--[ 2021.08.31.11.42.06.054.0 ]--
r 9         while(low <= h)
--[ 2021.08.31.11.42.06.136.0 ]--
r 9         while(low <= hi)
--[ 2021.08.31.11.42.06.219.0 ]--
r 9         while(low <= hig)
--[ 2021.08.31.11.42.06.315.0 ]--
r 9         while(low <= high)
--[ 2021.08.31.11.42.09.418.0 ]--
r 9         while(low <= high) 
--[ 2021.08.31.11.42.09.613.0 ]--
r 9         while(low <= high) {
--[ 2021.08.31.11.42.09.888.0 ]--
+ 10 
+ 11 }
--[ 2021.08.31.11.42.09.907.0 ]--
r 11         }
--[ 2021.08.31.11.42.09.938.0 ]--
r 10             
--[ 2021.08.31.11.42.15.902.0 ]--
r 10             i
--[ 2021.08.31.11.42.16.001.0 ]--
r 10             in
--[ 2021.08.31.11.42.16.019.0 ]--
r 10             int
--[ 2021.08.31.11.42.16.256.0 ]--
r 10             int 
--[ 2021.08.31.11.42.16.437.0 ]--
r 10             int m
--[ 2021.08.31.11.42.16.592.0 ]--
r 10             int mi
--[ 2021.08.31.11.42.16.630.0 ]--
r 10             int mid
--[ 2021.08.31.11.42.17.088.0 ]--
r 10             int mid 
--[ 2021.08.31.11.42.17.647.0 ]--
r 10             int mid  
--[ 2021.08.31.11.42.18.342.0 ]--
r 10             int mid 
--[ 2021.08.31.11.42.19.151.0 ]--
r 10             int mid =
--[ 2021.08.31.11.42.21.109.0 ]--
r 10             int mid = 
--[ 2021.08.31.11.42.43.861.0 ]--
r 10             int mid = l
--[ 2021.08.31.11.42.44.022.0 ]--
r 10             int mid = lo
--[ 2021.08.31.11.42.44.088.0 ]--
r 10             int mid = low
--[ 2021.08.31.11.42.44.374.0 ]--
r 10             int mid = low 
--[ 2021.08.31.11.42.45.477.0 ]--
r 10             int mid = low +
--[ 2021.08.31.11.42.45.749.0 ]--
r 10             int mid = low + 
--[ 2021.08.31.11.42.46.271.0 ]--
r 10             int mid = low + h
--[ 2021.08.31.11.42.48.361.0 ]--
r 10             int mid = low + h()
--[ 2021.08.31.11.42.48.878.0 ]--
r 10             int mid = low + h(h)
--[ 2021.08.31.11.42.49.051.0 ]--
r 10             int mid = low + h(hg)
--[ 2021.08.31.11.42.49.327.0 ]--
r 10             int mid = low + h(h)
--[ 2021.08.31.11.42.49.444.0 ]--
r 10             int mid = low + h()
--[ 2021.08.31.11.42.49.610.0 ]--
r 10             int mid = low + h
--[ 2021.08.31.11.42.49.734.0 ]--
r 10             int mid = low + 
--[ 2021.08.31.11.42.50.350.0 ]--
r 10             int mid = low + ()
--[ 2021.08.31.11.42.50.813.0 ]--
r 10             int mid = low + (h)
--[ 2021.08.31.11.42.50.898.0 ]--
r 10             int mid = low + (hi)
--[ 2021.08.31.11.42.50.954.0 ]--
r 10             int mid = low + (hig)
--[ 2021.08.31.11.42.51.616.0 ]--
r 10             int mid = low + (higw)
--[ 2021.08.31.11.42.51.884.0 ]--
r 10             int mid = low + (hig)
--[ 2021.08.31.11.42.52.053.0 ]--
r 10             int mid = low + (high)
--[ 2021.08.31.11.42.52.198.0 ]--
r 10             int mid = low + (high )
--[ 2021.08.31.11.42.52.772.0 ]--
r 10             int mid = low + (high -)
--[ 2021.08.31.11.42.53.084.0 ]--
r 10             int mid = low + (high -l)
--[ 2021.08.31.11.42.53.277.0 ]--
r 10             int mid = low + (high -lo)
--[ 2021.08.31.11.42.53.348.0 ]--
r 10             int mid = low + (high -low)
--[ 2021.08.31.11.42.54.719.0 ]--
r 10             int mid = low + (high - low)
--[ 2021.08.31.11.42.57.630.0 ]--
r 10             int mid = low + (high - low) 
--[ 2021.08.31.11.42.57.957.0 ]--
r 10             int mid = low + (high - low) /.
--[ 2021.08.31.11.42.58.998.0 ]--
r 10             int mid = low + (high - low) /
--[ 2021.08.31.11.42.59.229.0 ]--
r 10             int mid = low + (high - low) / 
--[ 2021.08.31.11.42.59.357.0 ]--
r 10             int mid = low + (high - low) / 2
--[ 2021.08.31.11.44.20.953.0 ]--
+ 11             
--[ 2021.08.31.11.44.20.992.0 ]--
r 11                     
--[ 2021.08.31.11.44.23.295.0 ]--
- 11
--[ 2021.08.31.11.44.24.078.0 ]--
r 10             int mid = low + (high - low) / 2;
--[ 2021.08.31.11.44.24.341.0 ]--
+ 11             
--[ 2021.08.31.11.44.25.598.0 ]--
r 11             i
--[ 2021.08.31.11.44.25.753.0 ]--
r 11             if
--[ 2021.08.31.11.44.26.367.0 ]--
r 11             if()
--[ 2021.08.31.11.44.27.667.0 ]--
r 11             if(k)
--[ 2021.08.31.11.44.27.817.0 ]--
r 11             if(ke)
--[ 2021.08.31.11.44.27.956.0 ]--
r 11             if(key)
--[ 2021.08.31.11.44.28.599.0 ]--
r 11             if(key )
--[ 2021.08.31.11.44.28.955.0 ]--
r 11             if(key >)
--[ 2021.08.31.11.44.30.299.0 ]--
r 11             if(key > )
--[ 2021.08.31.11.44.30.909.0 ]--
r 11             if(key > a)
--[ 2021.08.31.11.44.31.630.0 ]--
r 11             if(key > a[])
--[ 2021.08.31.11.44.31.980.0 ]--
r 11             if(key > a[m])
--[ 2021.08.31.11.44.32.181.0 ]--
r 11             if(key > a[mi])
--[ 2021.08.31.11.44.32.559.0 ]--
r 11             if(key > a[mid])
--[ 2021.08.31.11.44.35.421.0 ]--
r 11             if(key > a[mid]) 
--[ 2021.08.31.11.44.36.732.0 ]--
r 11             if(key > a[mid]) l
--[ 2021.08.31.11.44.36.932.0 ]--
r 11             if(key > a[mid]) lo
--[ 2021.08.31.11.44.36.980.0 ]--
r 11             if(key > a[mid]) low
--[ 2021.08.31.11.44.37.151.0 ]--
r 11             if(key > a[mid]) low 
--[ 2021.08.31.11.44.37.895.0 ]--
r 11             if(key > a[mid]) low =
--[ 2021.08.31.11.44.38.054.0 ]--
r 11             if(key > a[mid]) low = 
--[ 2021.08.31.11.44.38.292.0 ]--
r 11             if(key > a[mid]) low = m
--[ 2021.08.31.11.44.38.439.0 ]--
r 11             if(key > a[mid]) low = mi
--[ 2021.08.31.11.44.38.500.0 ]--
r 11             if(key > a[mid]) low = mid
--[ 2021.08.31.11.44.39.038.0 ]--
r 11             if(key > a[mid]) low = mid 
--[ 2021.08.31.11.44.39.295.0 ]--
r 11             if(key > a[mid]) low = mid +
--[ 2021.08.31.11.44.39.540.0 ]--
r 11             if(key > a[mid]) low = mid +1
--[ 2021.08.31.11.44.40.038.0 ]--
r 11             if(key > a[mid]) low = mid +
--[ 2021.08.31.11.44.40.207.0 ]--
r 11             if(key > a[mid]) low = mid + 
--[ 2021.08.31.11.44.40.343.0 ]--
r 11             if(key > a[mid]) low = mid + 1
--[ 2021.08.31.11.44.41.079.0 ]--
r 11             if(key > a[mid]) low = mid + 1;
--[ 2021.08.31.11.44.41.307.0 ]--
+ 12             
--[ 2021.08.31.11.44.48.677.0 ]--
r 11             if(key <>> a[mid]) low = mid + 1;
--[ 2021.08.31.11.44.50.876.0 ]--
r 11             if(key <> a[mid]) low = mid + 1;
--[ 2021.08.31.11.44.51.030.0 ]--
r 11             if(key < a[mid]) low = mid + 1;
--[ 2021.08.31.11.44.53.940.0 ]--
r 12             e
--[ 2021.08.31.11.44.54.100.0 ]--
r 12             el
--[ 2021.08.31.11.44.54.175.0 ]--
r 12             els
--[ 2021.08.31.11.44.54.243.0 ]--
r 12             else
--[ 2021.08.31.11.44.54.950.0 ]--
r 12             else 
--[ 2021.08.31.11.44.55.086.0 ]--
r 12             else i
--[ 2021.08.31.11.44.55.132.0 ]--
r 12             else if
--[ 2021.08.31.11.44.55.739.0 ]--
r 12             else if()
--[ 2021.08.31.11.44.55.971.0 ]--
r 12             else if(k)
--[ 2021.08.31.11.44.56.066.0 ]--
r 12             else if(ke)
--[ 2021.08.31.11.44.56.218.0 ]--
r 12             else if(key)
--[ 2021.08.31.11.45.01.028.0 ]--
r 11             if(key < a[mid]) low = mid  1;
--[ 2021.08.31.11.45.01.558.0 ]--
r 11             if(key < a[mid]) low = mid - 1;
--[ 2021.08.31.11.45.03.070.0 ]--
r 12             else if(key )
--[ 2021.08.31.11.45.03.475.0 ]--
r 12             else if(key >)
--[ 2021.08.31.11.45.03.645.0 ]--
r 12             else if(key > )
--[ 2021.08.31.11.45.04.054.0 ]--
r 12             else if(key > a)
--[ 2021.08.31.11.45.04.802.0 ]--
r 12             else if(key > a[])
--[ 2021.08.31.11.45.05.164.0 ]--
r 12             else if(key > a[m])
--[ 2021.08.31.11.45.05.315.0 ]--
r 12             else if(key > a[mi])
--[ 2021.08.31.11.45.05.363.0 ]--
r 12             else if(key > a[mid])
--[ 2021.08.31.11.45.07.196.0 ]--
r 12             else if(key > a[mid]) 
--[ 2021.08.31.11.45.07.780.0 ]--
r 12             else if(key > a[mid]) l
--[ 2021.08.31.11.45.08.018.0 ]--
r 12             else if(key > a[mid]) low
--[ 2021.08.31.11.45.08.088.0 ]--
r 12             else if(key > a[mid]) low 
--[ 2021.08.31.11.45.09.101.0 ]--
r 12             else if(key > a[mid]) low =
--[ 2021.08.31.11.45.09.210.0 ]--
r 12             else if(key > a[mid]) low = 
--[ 2021.08.31.11.45.09.406.0 ]--
r 12             else if(key > a[mid]) low = m
--[ 2021.08.31.11.45.09.538.0 ]--
r 12             else if(key > a[mid]) low = mi
--[ 2021.08.31.11.45.09.589.0 ]--
r 12             else if(key > a[mid]) low = mid
--[ 2021.08.31.11.45.09.902.0 ]--
r 12             else if(key > a[mid]) low = mid 
--[ 2021.08.31.11.45.10.389.0 ]--
r 12             else if(key > a[mid]) low = mid +
--[ 2021.08.31.11.45.10.623.0 ]--
r 12             else if(key > a[mid]) low = mid + 
--[ 2021.08.31.11.45.11.103.0 ]--
r 12             else if(key > a[mid]) low = mid + 1
--[ 2021.08.31.11.45.11.246.0 ]--
r 12             else if(key > a[mid]) low = mid + 1;
--[ 2021.08.31.11.45.19.228.0 ]--
r 11             if(key < a[mid]) h = mid - 1;
--[ 2021.08.31.11.45.19.355.0 ]--
r 11             if(key < a[mid]) hi = mid - 1;
--[ 2021.08.31.11.45.19.452.0 ]--
r 11             if(key < a[mid]) hig = mid - 1;
--[ 2021.08.31.11.45.19.553.0 ]--
r 11             if(key < a[mid]) high = mid - 1;
--[ 2021.08.31.11.45.20.498.0 ]--
r 14 
--[ 2021.08.31.11.46.18.178.0 ]--
+ 13             
--[ 2021.08.31.11.46.19.008.0 ]--
r 13             e
--[ 2021.08.31.11.46.19.405.0 ]--
r 13             else
--[ 2021.08.31.11.46.19.940.0 ]--
r 13             else 
--[ 2021.08.31.11.46.20.652.0 ]--
r 13             else m
--[ 2021.08.31.11.46.20.911.0 ]--
r 13             else mi
--[ 2021.08.31.11.46.21.002.0 ]--
r 13             else mid
--[ 2021.08.31.11.46.24.165.0 ]--
r 13             else mid;
--[ 2021.08.31.11.46.25.363.0 ]--
r 13             else rmid;
--[ 2021.08.31.11.46.25.595.0 ]--
r 13             else rtmid;
--[ 2021.08.31.11.46.26.735.0 ]--
r 13             else rmid;
--[ 2021.08.31.11.46.36.973.0 ]--
r 13             else remid;
--[ 2021.08.31.11.46.37.146.0 ]--
r 13             else retmid;
--[ 2021.08.31.11.46.37.493.0 ]--
r 13             else retumid;
--[ 2021.08.31.11.46.37.621.0 ]--
r 13             else returmid;
--[ 2021.08.31.11.46.37.679.0 ]--
r 13             else returnmid;
--[ 2021.08.31.11.46.38.021.0 ]--
r 13             else return mid;
--[ 2021.08.31.11.46.46.873.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.46.48.625.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.47.28.469.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.47.47.516.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.50.18.812.0 ]--
r 28         int[] checklist = in.readAllInts();
--[ 2021.08.31.11.50.19.019.0 ]--
r 28         int[] checklist = in2.readAllInts();
--[ 2021.08.31.11.50.23.557.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.50.25.189.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.08.31.11.52.37.549.0 ]--
UpdateTree (AD): 1 0
+ /P00_JavaIntro.zip

--[ 2021.09.01.13.36.41.024.0 ]--
NewLogger: P00_JavaIntro
Version: 1.5
--[ 2021.09.01.13.36.41.096.0 ]--
InitTree:
/out/production/P00_JavaIntro/.donotlog
/out/production/P00_JavaIntro/algs4.jar
/out/production/P00_JavaIntro/tinyT.txt
/out/production/P00_JavaIntro/tinyW.txt
/out/production/P00_JavaIntro/largeT.txt
/out/production/P00_JavaIntro/largeW.txt
/out/production/P00_JavaIntro/stdlib.jar
/out/production/P00_JavaIntro/HelloWorld.class
/out/production/P00_JavaIntro/BinarySearch.class
/out/production/P00_JavaIntro/BruteForceSearch.class
/src/algs4.jar
/src/stdlib.jar
/src/HelloWorld.java
/src/BinarySearch.java
/src/BruteForceSearch.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/tinyT.txt
/tests/tinyW.txt
/tests/largeT.txt
/tests/largeW.txt
/.cos265
/readme.html
/P00_JavaIntro.iml
/P00_JavaIntro.zip

--[ 2021.09.01.13.36.41.101.0 ]--
InitFile: /src/BruteForceSearch.java
import java.util.Arrays;

public class BruteForceSearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        for(int i=0; i<a.length; i++) {
            if(key==a[i]) return i;
        }
        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();
        In in = new In(args[0]);
        int[] whitelist = in.readAllInts();

        In test = new In(args[1]);
        int[] checklist = test.readAllInts();

        for(int i=0; i<checklist.length; i++) {
            if(rank(checklist[i], whitelist) == -1) {
                StdOut.println(checklist[i]);
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.09.01.13.36.41.104.0 ]--
InitFile: /.cos265


--[ 2021.09.01.13.36.41.107.0 ]--
InitFile: /P00_JavaIntro.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.01.13.36.41.110.0 ]--
InitFile: /src/BinarySearch.java
import java.util.Arrays;

public class BinarySearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        int low = 0;
        int high = a.length-1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(key < a[mid]) high = mid - 1;
            else if(key > a[mid]) low = mid + 1;
            else return mid;
        }

        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();

        In in1 = new In(args[0]);
        int[] whitelist = in1.readAllInts();
        In in2 = new In(args[1]);
        int[] checklist = in2.readAllInts();
        Arrays.sort(whitelist);

        for(int i=0; i<checklist.length; i++){
            if(rank(checklist[i], whitelist) == -1) {
                System.out.print(checklist[i]);
                System.out.print(" ");
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.09.01.13.36.41.121.0 ]--
InitFile: /src/HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        StdOut.println("Hello, World!");
    }
}

--[ 2021.09.01.13.37.23.483.0 ]--
DisposeComponent
--[ 2021.09.01.13.37.31.586.0 ]--
NewLogger: P00_JavaIntro
Version: 1.5
--[ 2021.09.01.13.37.31.610.0 ]--
InitTree:
/out/production/P00_JavaIntro/.donotlog
/out/production/P00_JavaIntro/algs4.jar
/out/production/P00_JavaIntro/tinyT.txt
/out/production/P00_JavaIntro/tinyW.txt
/out/production/P00_JavaIntro/largeT.txt
/out/production/P00_JavaIntro/largeW.txt
/out/production/P00_JavaIntro/stdlib.jar
/out/production/P00_JavaIntro/HelloWorld.class
/out/production/P00_JavaIntro/BinarySearch.class
/out/production/P00_JavaIntro/BruteForceSearch.class
/src/algs4.jar
/src/stdlib.jar
/src/HelloWorld.java
/src/BinarySearch.java
/src/BruteForceSearch.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/tinyT.txt
/tests/tinyW.txt
/tests/largeT.txt
/tests/largeW.txt
/.cos265
/readme.html
/P00_JavaIntro.iml
/P00_JavaIntro.zip

--[ 2021.09.01.13.37.31.617.0 ]--
InitFile: /src/BruteForceSearch.java
import java.util.Arrays;

public class BruteForceSearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        for(int i=0; i<a.length; i++) {
            if(key==a[i]) return i;
        }
        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();
        In in = new In(args[0]);
        int[] whitelist = in.readAllInts();

        In test = new In(args[1]);
        int[] checklist = test.readAllInts();

        for(int i=0; i<checklist.length; i++) {
            if(rank(checklist[i], whitelist) == -1) {
                StdOut.println(checklist[i]);
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.09.01.13.37.31.626.0 ]--
InitFile: /.cos265


--[ 2021.09.01.13.37.31.631.0 ]--
InitFile: /P00_JavaIntro.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.01.13.37.31.635.0 ]--
InitFile: /src/BinarySearch.java
import java.util.Arrays;

public class BinarySearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        int low = 0;
        int high = a.length-1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(key < a[mid]) high = mid - 1;
            else if(key > a[mid]) low = mid + 1;
            else return mid;
        }

        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();

        In in1 = new In(args[0]);
        int[] whitelist = in1.readAllInts();
        In in2 = new In(args[1]);
        int[] checklist = in2.readAllInts();
        Arrays.sort(whitelist);

        for(int i=0; i<checklist.length; i++){
            if(rank(checklist[i], whitelist) == -1) {
                System.out.print(checklist[i]);
                System.out.print(" ");
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.09.01.13.37.31.637.0 ]--
InitFile: /src/HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        StdOut.println("Hello, World!");
    }
}

--[ 2021.09.02.09.49.30.480.0 ]--
NewLogger: P00_JavaIntro
Version: 1.5
--[ 2021.09.02.09.49.30.551.0 ]--
InitTree:
/out/production/P00_JavaIntro/.donotlog
/out/production/P00_JavaIntro/algs4.jar
/out/production/P00_JavaIntro/tinyT.txt
/out/production/P00_JavaIntro/tinyW.txt
/out/production/P00_JavaIntro/largeT.txt
/out/production/P00_JavaIntro/largeW.txt
/out/production/P00_JavaIntro/stdlib.jar
/out/production/P00_JavaIntro/HelloWorld.class
/out/production/P00_JavaIntro/BinarySearch.class
/out/production/P00_JavaIntro/BruteForceSearch.class
/src/algs4.jar
/src/stdlib.jar
/src/HelloWorld.java
/src/BinarySearch.java
/src/BruteForceSearch.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/tinyT.txt
/tests/tinyW.txt
/tests/largeT.txt
/tests/largeW.txt
/.cos265
/readme.html
/P00_JavaIntro.iml
/P00_JavaIntro.zip

--[ 2021.09.02.09.49.30.558.0 ]--
InitFile: /src/BruteForceSearch.java
import java.util.Arrays;

public class BruteForceSearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        for(int i=0; i<a.length; i++) {
            if(key==a[i]) return i;
        }
        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();
        In in = new In(args[0]);
        int[] whitelist = in.readAllInts();

        In test = new In(args[1]);
        int[] checklist = test.readAllInts();

        for(int i=0; i<checklist.length; i++) {
            if(rank(checklist[i], whitelist) == -1) {
                StdOut.println(checklist[i]);
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.09.02.09.49.30.563.0 ]--
InitFile: /.cos265


--[ 2021.09.02.09.49.30.569.0 ]--
InitFile: /P00_JavaIntro.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.02.09.49.30.582.0 ]--
InitFile: /src/BinarySearch.java
import java.util.Arrays;

public class BinarySearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        int low = 0;
        int high = a.length-1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(key < a[mid]) high = mid - 1;
            else if(key > a[mid]) low = mid + 1;
            else return mid;
        }

        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();

        In in1 = new In(args[0]);
        int[] whitelist = in1.readAllInts();
        In in2 = new In(args[1]);
        int[] checklist = in2.readAllInts();
        Arrays.sort(whitelist);

        for(int i=0; i<checklist.length; i++){
            if(rank(checklist[i], whitelist) == -1) {
                System.out.print(checklist[i]);
                System.out.print(" ");
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.09.02.09.49.30.586.0 ]--
InitFile: /src/HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        StdOut.println("Hello, World!");
    }
}

--[ 2021.09.02.09.49.48.477.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.09.50.20.545.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.09.50.49.413.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.09.51.24.399.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.09.51.32.004.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.09.51.52.804.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.15.30.261.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.16.27.042.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.20.19.007.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.21.30.134.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.54.00.409.0 ]--
:/src/BruteForceSearch.java
+ 23         
--[ 2021.09.02.10.54.00.574.0 ]--
r 23         Arrays.sort(whitelist);
--[ 2021.09.02.10.54.05.995.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.54.09.193.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.54.18.593.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.54.23.484.0 ]--
r 23         
--[ 2021.09.02.10.54.23.835.0 ]--
- 23
--[ 2021.09.02.10.55.06.228.0 ]--
:/src/BinarySearch.java
r 29 //        Arrays.sort(whitelist);
--[ 2021.09.02.10.55.11.643.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.55.16.504.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.55.20.295.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.55.24.047.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.55.29.099.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.55.30.541.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.55.31.714.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.55.38.645.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.55.43.815.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.55.45.477.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.55.48.746.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.56.10.970.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.10.56.19.530.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.11.27.03.386.0 ]--
r 29         Arrays.sort(whitelist);
--[ 2021.09.02.11.27.08.564.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.11.27.12.578.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.11.27.20.399.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.11.27.21.355.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.11.39.35.250.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.11.39.52.030.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.11.40.24.297.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.13.40.01.306.0 ]--
NewLogger: P00_JavaIntro
Version: 1.5
--[ 2021.09.02.13.40.01.593.0 ]--
InitTree:
/out/production/P00_JavaIntro/.donotlog
/out/production/P00_JavaIntro/algs4.jar
/out/production/P00_JavaIntro/tinyT.txt
/out/production/P00_JavaIntro/tinyW.txt
/out/production/P00_JavaIntro/largeT.txt
/out/production/P00_JavaIntro/largeW.txt
/out/production/P00_JavaIntro/stdlib.jar
/out/production/P00_JavaIntro/HelloWorld.class
/out/production/P00_JavaIntro/BinarySearch.class
/out/production/P00_JavaIntro/BruteForceSearch.class
/src/algs4.jar
/src/stdlib.jar
/src/HelloWorld.java
/src/BinarySearch.java
/src/BruteForceSearch.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/tinyT.txt
/tests/tinyW.txt
/tests/largeT.txt
/tests/largeW.txt
/.cos265
/readme.html
/P00_JavaIntro.iml
/P00_JavaIntro.zip

--[ 2021.09.02.13.40.01.649.0 ]--
InitFile: /src/BinarySearch.java
import java.util.Arrays;

public class BinarySearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        int low = 0;
        int high = a.length-1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(key < a[mid]) high = mid - 1;
            else if(key > a[mid]) low = mid + 1;
            else return mid;
        }

        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();

        In in1 = new In(args[0]);
        int[] whitelist = in1.readAllInts();
        In in2 = new In(args[1]);
        int[] checklist = in2.readAllInts();
        Arrays.sort(whitelist);

        for(int i=0; i<checklist.length; i++){
            if(rank(checklist[i], whitelist) == -1) {
                System.out.print(checklist[i]);
                System.out.print(" ");
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.09.02.13.40.01.695.0 ]--
InitFile: /P00_JavaIntro.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.02.13.40.01.739.0 ]--
InitFile: /src/BruteForceSearch.java
import java.util.Arrays;

public class BruteForceSearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        for(int i=0; i<a.length; i++) {
            if(key==a[i]) return i;
        }
        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();
        In in = new In(args[0]);
        int[] whitelist = in.readAllInts();

        In test = new In(args[1]);
        int[] checklist = test.readAllInts();

        for(int i=0; i<checklist.length; i++) {
            if(rank(checklist[i], whitelist) == -1) {
                StdOut.println(checklist[i]);
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.09.02.13.40.01.829.0 ]--
InitFile: /.cos265


--[ 2021.09.02.13.40.01.874.0 ]--
InitFile: /src/HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        StdOut.println("Hello, World!");
    }
}

--[ 2021.09.02.13.42.40.441.0 ]--
UpdateTree (AD): 1 0
+ /.idea/runConfigurations.xml

--[ 2021.09.02.13.43.17.791.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.13.43.20.209.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.13.43.38.178.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.13.43.47.260.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.13.44.44.578.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.13.45.09.164.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.02.13.45.52.888.0 ]--
DisposeComponent
--[ 2021.09.14.10.10.56.990.0 ]--
NewLogger: P00_JavaIntro
Version: 1.5
--[ 2021.09.14.10.10.57.072.0 ]--
InitTree:
/out/production/P00_JavaIntro/.donotlog
/out/production/P00_JavaIntro/algs4.jar
/out/production/P00_JavaIntro/tinyT.txt
/out/production/P00_JavaIntro/tinyW.txt
/out/production/P00_JavaIntro/largeT.txt
/out/production/P00_JavaIntro/largeW.txt
/out/production/P00_JavaIntro/stdlib.jar
/out/production/P00_JavaIntro/HelloWorld.class
/out/production/P00_JavaIntro/BinarySearch.class
/out/production/P00_JavaIntro/BruteForceSearch.class
/src/algs4.jar
/src/stdlib.jar
/src/HelloWorld.java
/src/BinarySearch.java
/src/BruteForceSearch.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/tinyT.txt
/tests/tinyW.txt
/tests/largeT.txt
/tests/largeW.txt
/.cos265
/readme.html
/P00_JavaIntro.iml
/P00_JavaIntro.zip

--[ 2021.09.14.10.10.57.076.0 ]--
InitFile: /src/BruteForceSearch.java
import java.util.Arrays;

public class BruteForceSearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        for(int i=0; i<a.length; i++) {
            if(key==a[i]) return i;
        }
        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();
        In in = new In(args[0]);
        int[] whitelist = in.readAllInts();

        In test = new In(args[1]);
        int[] checklist = test.readAllInts();

        for(int i=0; i<checklist.length; i++) {
            if(rank(checklist[i], whitelist) == -1) {
                StdOut.println(checklist[i]);
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.09.14.10.10.57.081.0 ]--
InitFile: /.cos265


--[ 2021.09.14.10.10.57.088.0 ]--
InitFile: /P00_JavaIntro.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.14.10.10.57.093.0 ]--
InitFile: /src/BinarySearch.java
import java.util.Arrays;

public class BinarySearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        int low = 0;
        int high = a.length-1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(key < a[mid]) high = mid - 1;
            else if(key > a[mid]) low = mid + 1;
            else return mid;
        }

        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();

        In in1 = new In(args[0]);
        int[] whitelist = in1.readAllInts();
        In in2 = new In(args[1]);
        int[] checklist = in2.readAllInts();
        Arrays.sort(whitelist);

        for(int i=0; i<checklist.length; i++){
            if(rank(checklist[i], whitelist) == -1) {
                System.out.print(checklist[i]);
                System.out.print(" ");
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.09.14.10.10.57.119.0 ]--
InitFile: /src/HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        StdOut.println("Hello, World!");
    }
}

--[ 2021.09.14.10.11.05.832.0 ]--
UpdateTree (AD): 1 0
+ /.idea/runConfigurations.xml

--[ 2021.09.14.10.11.10.814.0 ]--
DisposeComponent
--[ 2021.09.17.08.05.03.498.0 ]--
NewLogger: P00_JavaIntro
Version: 1.5
--[ 2021.09.17.08.05.04.437.0 ]--
InitTree:
/out/production/P00_JavaIntro/.donotlog
/out/production/P00_JavaIntro/algs4.jar
/out/production/P00_JavaIntro/tinyT.txt
/out/production/P00_JavaIntro/tinyW.txt
/out/production/P00_JavaIntro/largeT.txt
/out/production/P00_JavaIntro/largeW.txt
/out/production/P00_JavaIntro/stdlib.jar
/out/production/P00_JavaIntro/HelloWorld.class
/out/production/P00_JavaIntro/BinarySearch.class
/out/production/P00_JavaIntro/BruteForceSearch.class
/src/algs4.jar
/src/stdlib.jar
/src/HelloWorld.java
/src/BinarySearch.java
/src/BruteForceSearch.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/tinyT.txt
/tests/tinyW.txt
/tests/largeT.txt
/tests/largeW.txt
/.cos265
/readme.html
/P00_JavaIntro.iml
/P00_JavaIntro.zip

--[ 2021.09.17.08.05.04.479.0 ]--
InitFile: /src/BinarySearch.java
import java.util.Arrays;

public class BinarySearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        int low = 0;
        int high = a.length-1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(key < a[mid]) high = mid - 1;
            else if(key > a[mid]) low = mid + 1;
            else return mid;
        }

        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();

        In in1 = new In(args[0]);
        int[] whitelist = in1.readAllInts();
        In in2 = new In(args[1]);
        int[] checklist = in2.readAllInts();
        Arrays.sort(whitelist);

        for(int i=0; i<checklist.length; i++){
            if(rank(checklist[i], whitelist) == -1) {
                System.out.print(checklist[i]);
                System.out.print(" ");
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.09.17.08.05.04.524.0 ]--
InitFile: /P00_JavaIntro.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.17.08.05.04.566.0 ]--
InitFile: /src/BruteForceSearch.java
import java.util.Arrays;

public class BruteForceSearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        for(int i=0; i<a.length; i++) {
            if(key==a[i]) return i;
        }
        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();
        In in = new In(args[0]);
        int[] whitelist = in.readAllInts();

        In test = new In(args[1]);
        int[] checklist = test.readAllInts();

        for(int i=0; i<checklist.length; i++) {
            if(rank(checklist[i], whitelist) == -1) {
                StdOut.println(checklist[i]);
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.09.17.08.05.04.609.0 ]--
InitFile: /.cos265


--[ 2021.09.17.08.05.04.651.0 ]--
InitFile: /src/HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        StdOut.println("Hello, World!");
    }
}

--[ 2021.09.17.08.05.27.543.0 ]--
UpdateTree (AD): 1 0
+ /.idea/runConfigurations.xml

--[ 2021.09.17.08.05.28.230.0 ]--
DisposeComponent
--[ 2021.12.04.21.09.11.396.0 ]--
NewLogger: P00_JavaIntro
Version: 1.5
--[ 2021.12.04.21.09.11.468.0 ]--
InitTree:
/out/production/P00_JavaIntro/.donotlog
/out/production/P00_JavaIntro/algs4.jar
/out/production/P00_JavaIntro/tinyT.txt
/out/production/P00_JavaIntro/tinyW.txt
/out/production/P00_JavaIntro/largeT.txt
/out/production/P00_JavaIntro/largeW.txt
/out/production/P00_JavaIntro/stdlib.jar
/out/production/P00_JavaIntro/HelloWorld.class
/out/production/P00_JavaIntro/BinarySearch.class
/out/production/P00_JavaIntro/BruteForceSearch.class
/src/algs4.jar
/src/stdlib.jar
/src/HelloWorld.java
/src/BinarySearch.java
/src/BruteForceSearch.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/runConfigurations.xml
/tests/.donotlog
/tests/tinyT.txt
/tests/tinyW.txt
/tests/largeT.txt
/tests/largeW.txt
/.cos265
/.DS_Store
/readme.html
/P00_JavaIntro.iml
/P00_JavaIntro.zip

--[ 2021.12.04.21.09.11.471.0 ]--
InitFile: /.DS_Store
   Bud1           
                                                           alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             . i d e alg1Scomp      2#    . i d e amoDDblob      �Q��A    . i d e amodDblob      �Q��A    . i d e aph1Scomp      �     . l o glg1Scomp     ��    . l o gmoDDblob      �Q��A    . l o gmodDblob      �Q��A    . l o gph1Scomp     �     o u tlg1Scomp    �k�    o u tmoDDblob      �Q��A    o u tmodDblob      �Q��A    o u tph1Scomp    ��     s r clg1Scomp     MB    s r cmoDDblob      �Q��A    s r cmodDblob      �Q��A    s r cph1Scomp     �     t e s t slg1Scomp    ��    t e s t smoDDblob     ��Q��A    t e s t smodDblob     ��Q��A    t e s t sph1Scomp    �@                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.12.04.21.09.11.485.0 ]--
InitFile: /src/BruteForceSearch.java
import java.util.Arrays;

public class BruteForceSearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        for(int i=0; i<a.length; i++) {
            if(key==a[i]) return i;
        }
        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();
        In in = new In(args[0]);
        int[] whitelist = in.readAllInts();

        In test = new In(args[1]);
        int[] checklist = test.readAllInts();

        for(int i=0; i<checklist.length; i++) {
            if(rank(checklist[i], whitelist) == -1) {
                StdOut.println(checklist[i]);
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.12.04.21.09.11.488.0 ]--
InitFile: /.cos265


--[ 2021.12.04.21.09.11.490.0 ]--
InitFile: /P00_JavaIntro.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.12.04.21.09.11.494.0 ]--
InitFile: /src/BinarySearch.java
import java.util.Arrays;

public class BinarySearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        int low = 0;
        int high = a.length-1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(key < a[mid]) high = mid - 1;
            else if(key > a[mid]) low = mid + 1;
            else return mid;
        }

        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();

        In in1 = new In(args[0]);
        int[] whitelist = in1.readAllInts();
        In in2 = new In(args[1]);
        int[] checklist = in2.readAllInts();
        Arrays.sort(whitelist);

        for(int i=0; i<checklist.length; i++){
            if(rank(checklist[i], whitelist) == -1) {
                System.out.print(checklist[i]);
                System.out.print(" ");
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.12.04.21.09.11.497.0 ]--
InitFile: /src/HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        StdOut.println("Hello, World!");
    }
}

--[ 2021.12.04.21.09.39.392.0 ]--
UpdateTree (AD): 0 1
- /.idea/runConfigurations.xml

--[ 2021.12.04.21.09.52.265.0 ]--
DisposeComponent
