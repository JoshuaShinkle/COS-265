--[ 2021.09.28.10.44.05.608.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.09.28.10.44.05.628.0 ]--
InitTree:
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.cos265
/readme.html
/P02_DataTypes.iml

--[ 2021.09.28.10.44.05.631.0 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.28.10.44.05.633.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.09.28.10.44.05.636.0 ]--
InitFile: /.cos265


--[ 2021.09.28.10.44.05.638.0 ]--
InitFile: /src/Steque.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    public Steque() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return true;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {

    }

    // pushes item to top of steque
    public void push(Item item) {

    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {

    }
}

--[ 2021.09.28.10.44.05.640.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.09.28.11.14.44.015.0 ]--
:/src/Steque.java
+ 6     
--[ 2021.09.28.11.14.45.995.0 ]--
r 6     /
--[ 2021.09.28.11.14.46.064.0 ]--
r 6     //
--[ 2021.09.28.11.14.47.791.0 ]--
r 6     /
--[ 2021.09.28.11.14.48.034.0 ]--
r 6     
--[ 2021.09.28.11.14.48.289.0 ]--
- 6
--[ 2021.09.28.11.14.58.184.0 ]--
+ 6     
--[ 2021.09.28.11.14.59.039.0 ]--
r 6     /
--[ 2021.09.28.11.14.59.176.0 ]--
r 6     //
--[ 2021.09.28.11.14.59.700.0 ]--
r 6     // 
--[ 2021.09.28.11.14.59.970.0 ]--
r 6     // s
--[ 2021.09.28.11.15.00.211.0 ]--
r 6     // si
--[ 2021.09.28.11.15.00.320.0 ]--
r 6     // sin
--[ 2021.09.28.11.15.00.431.0 ]--
r 6     // sing
--[ 2021.09.28.11.15.00.528.0 ]--
r 6     // singl
--[ 2021.09.28.11.15.00.743.0 ]--
r 6     // singly
--[ 2021.09.28.11.15.00.823.0 ]--
r 6     // singly 
--[ 2021.09.28.11.15.01.019.0 ]--
r 6     // singly l
--[ 2021.09.28.11.15.02.063.0 ]--
r 6     // singly 
--[ 2021.09.28.11.15.02.211.0 ]--
r 6     // singly
--[ 2021.09.28.11.15.02.982.0 ]--
r 6     // singly-
--[ 2021.09.28.11.15.03.297.0 ]--
r 6     // singly-l
--[ 2021.09.28.11.15.03.416.0 ]--
r 6     // singly-li
--[ 2021.09.28.11.15.03.633.0 ]--
r 6     // singly-lin
--[ 2021.09.28.11.15.03.800.0 ]--
r 6     // singly-link
--[ 2021.09.28.11.15.03.919.0 ]--
r 6     // singly-linke
--[ 2021.09.28.11.15.04.187.0 ]--
r 6     // singly-linked
--[ 2021.09.28.11.15.04.264.0 ]--
r 6     // singly-linked 
--[ 2021.09.28.11.15.04.397.0 ]--
r 6     // singly-linked l
--[ 2021.09.28.11.15.04.551.0 ]--
r 6     // singly-linked li
--[ 2021.09.28.11.15.04.723.0 ]--
r 6     // singly-linked lis
--[ 2021.09.28.11.15.04.917.0 ]--
r 6     // singly-linked list
--[ 2021.09.28.11.15.05.184.0 ]--
r 6     // singly-linked list 
--[ 2021.09.28.11.15.06.019.0 ]--
r 6     // singly-linked list
--[ 2021.09.28.11.15.06.307.0 ]--
+ 7     
--[ 2021.09.28.11.15.07.722.0 ]--
r 7     p
--[ 2021.09.28.11.15.07.930.0 ]--
r 7     pr
--[ 2021.09.28.11.15.08.054.0 ]--
r 7     pri
--[ 2021.09.28.11.15.08.554.0 ]--
r 7     priv
--[ 2021.09.28.11.15.09.177.0 ]--
r 7     private
--[ 2021.09.28.11.15.09.193.0 ]--
r 7     private 
--[ 2021.09.28.11.15.10.613.0 ]--
r 7     private
--[ 2021.09.28.11.15.11.114.0 ]--
r 7     privat
--[ 2021.09.28.11.15.11.144.0 ]--
r 7     priva
--[ 2021.09.28.11.15.11.175.0 ]--
r 7     priv
--[ 2021.09.28.11.15.11.198.0 ]--
r 7     pri
--[ 2021.09.28.11.15.11.236.0 ]--
r 7     pr
--[ 2021.09.28.11.15.11.260.0 ]--
r 7     p
--[ 2021.09.28.11.15.11.288.0 ]--
r 7     
--[ 2021.09.28.11.15.11.349.0 ]--
- 7
--[ 2021.09.28.11.15.11.364.0 ]--
r 6     // singly-linked lis
--[ 2021.09.28.11.15.11.381.0 ]--
r 6     // singly-linked li
--[ 2021.09.28.11.15.13.239.0 ]--
r 6     // singly-linked l
--[ 2021.09.28.11.15.13.647.0 ]--
r 6     // singly-linked 
--[ 2021.09.28.11.15.14.161.0 ]--
r 6     // singly-linked
--[ 2021.09.28.11.15.14.187.0 ]--
r 6     // singly-linke
--[ 2021.09.28.11.15.14.208.0 ]--
r 6     // singly-link
--[ 2021.09.28.11.15.14.236.0 ]--
r 6     // singly-lin
--[ 2021.09.28.11.15.14.269.0 ]--
r 6     // singly-li
--[ 2021.09.28.11.15.14.297.0 ]--
r 6     // singly-l
--[ 2021.09.28.11.15.14.327.0 ]--
r 6     // singly-
--[ 2021.09.28.11.15.14.356.0 ]--
r 6     // singly
--[ 2021.09.28.11.15.14.386.0 ]--
r 6     // singl
--[ 2021.09.28.11.15.14.417.0 ]--
r 6     // sing
--[ 2021.09.28.11.15.14.447.0 ]--
r 6     // sin
--[ 2021.09.28.11.15.14.477.0 ]--
r 6     // si
--[ 2021.09.28.11.15.14.632.0 ]--
r 6     // s
--[ 2021.09.28.11.15.14.831.0 ]--
r 6     // 
--[ 2021.09.28.11.15.14.991.0 ]--
r 6     //
--[ 2021.09.28.11.15.15.150.0 ]--
r 6     /
--[ 2021.09.28.11.15.15.335.0 ]--
r 6     
--[ 2021.09.28.11.15.15.526.0 ]--
- 6
--[ 2021.09.28.11.15.15.712.0 ]--
r 5 public class Steque<Item> implements Iterable<Item> 
--[ 2021.09.28.11.15.17.090.0 ]--
+ 5 public class Steque<Item> implements Iterable<Item> {
+ 6     // singly-linked list
r 7     private 
--[ 2021.09.28.11.15.17.635.0 ]--
r 7     private
--[ 2021.09.28.11.15.17.798.0 ]--
r 7     privat
--[ 2021.09.28.11.15.18.299.0 ]--
r 7     priva
--[ 2021.09.28.11.15.18.328.0 ]--
r 7     priv
--[ 2021.09.28.11.15.18.358.0 ]--
r 7     pri
--[ 2021.09.28.11.15.18.388.0 ]--
r 7     pr
--[ 2021.09.28.11.15.18.417.0 ]--
r 7     p
--[ 2021.09.28.11.15.18.448.0 ]--
r 7     
--[ 2021.09.28.11.15.18.487.0 ]--
- 7
--[ 2021.09.28.11.15.18.509.0 ]--
r 6     // singly-linked lis
--[ 2021.09.28.11.15.18.538.0 ]--
r 6     // singly-linked li
--[ 2021.09.28.11.15.18.576.0 ]--
r 6     // singly-linked l
--[ 2021.09.28.11.15.18.601.0 ]--
r 6     // singly-linked 
--[ 2021.09.28.11.15.18.630.0 ]--
r 6     // singly-linked
--[ 2021.09.28.11.15.18.659.0 ]--
r 6     // singly-linke
--[ 2021.09.28.11.15.18.690.0 ]--
r 6     // singly-link
--[ 2021.09.28.11.15.18.854.0 ]--
r 6     // singly-lin
--[ 2021.09.28.11.15.19.346.0 ]--
r 6     // singly-li
--[ 2021.09.28.11.15.19.369.0 ]--
r 6     // singly-l
--[ 2021.09.28.11.15.19.399.0 ]--
r 6     // singly-
--[ 2021.09.28.11.15.19.430.0 ]--
r 6     // singly
--[ 2021.09.28.11.15.19.460.0 ]--
r 6     // singl
--[ 2021.09.28.11.15.19.489.0 ]--
r 6     // sing
--[ 2021.09.28.11.15.19.520.0 ]--
r 6     // sin
--[ 2021.09.28.11.15.19.550.0 ]--
r 6     // si
--[ 2021.09.28.11.15.19.581.0 ]--
r 6     // s
--[ 2021.09.28.11.15.19.724.0 ]--
r 6     // 
--[ 2021.09.28.11.15.19.952.0 ]--
r 6     //
--[ 2021.09.28.11.15.20.134.0 ]--
r 6     /
--[ 2021.09.28.11.15.20.294.0 ]--
r 6     
--[ 2021.09.28.11.15.20.473.0 ]--
- 6
--[ 2021.09.28.11.25.37.596.0 ]--
+ 6     
--[ 2021.09.28.11.25.38.100.0 ]--
+ 6     
--[ 2021.09.28.11.25.40.649.0 ]--
r 6     /
--[ 2021.09.28.11.25.40.766.0 ]--
r 6     //
--[ 2021.09.28.11.25.41.104.0 ]--
r 6     // 
--[ 2021.09.28.11.25.41.207.0 ]--
r 6     // s
--[ 2021.09.28.11.25.41.574.0 ]--
r 6     // si
--[ 2021.09.28.11.25.41.709.0 ]--
r 6     // sin
--[ 2021.09.28.11.25.41.838.0 ]--
r 6     // sing
--[ 2021.09.28.11.25.41.916.0 ]--
r 6     // singl
--[ 2021.09.28.11.25.42.077.0 ]--
r 6     // singly
--[ 2021.09.28.11.25.42.461.0 ]--
r 6     // singly-
--[ 2021.09.28.11.25.42.783.0 ]--
r 6     // singly-l
--[ 2021.09.28.11.25.42.925.0 ]--
r 6     // singly-li
--[ 2021.09.28.11.25.43.005.0 ]--
r 6     // singly-lin
--[ 2021.09.28.11.25.43.141.0 ]--
r 6     // singly-link
--[ 2021.09.28.11.25.43.281.0 ]--
r 6     // singly-linke
--[ 2021.09.28.11.25.43.457.0 ]--
r 6     // singly-linked
--[ 2021.09.28.11.25.43.517.0 ]--
r 6     // singly-linked 
--[ 2021.09.28.11.25.43.662.0 ]--
r 6     // singly-linked l
--[ 2021.09.28.11.25.43.758.0 ]--
r 6     // singly-linked li
--[ 2021.09.28.11.25.43.932.0 ]--
r 6     // singly-linked lis
--[ 2021.09.28.11.25.44.046.0 ]--
r 6     // singly-linked list
--[ 2021.09.28.11.25.45.647.0 ]--
+ 7     
--[ 2021.09.28.11.25.46.102.0 ]--
r 7     p
--[ 2021.09.28.11.25.46.653.0 ]--
r 7     pri
--[ 2021.09.28.11.25.46.790.0 ]--
r 7     priv
--[ 2021.09.28.11.25.47.137.0 ]--
r 7     private
--[ 2021.09.28.11.25.47.147.0 ]--
r 7     private 
--[ 2021.09.28.11.25.47.614.0 ]--
r 7     private s
--[ 2021.09.28.11.25.47.733.0 ]--
r 7     private st
--[ 2021.09.28.11.25.48.295.0 ]--
r 7     private static
--[ 2021.09.28.11.25.48.306.0 ]--
r 7     private static 
--[ 2021.09.28.11.25.50.062.0 ]--
r 7     private static c
--[ 2021.09.28.11.25.50.174.0 ]--
r 7     private static cl
--[ 2021.09.28.11.25.50.636.0 ]--
r 7     private static class
--[ 2021.09.28.11.25.50.656.0 ]--
r 7     private static class 
--[ 2021.09.28.11.25.52.256.0 ]--
r 7     private static class N
--[ 2021.09.28.11.25.52.408.0 ]--
r 7     private static class No
--[ 2021.09.28.11.25.52.493.0 ]--
r 7     private static class Nod
--[ 2021.09.28.11.25.52.971.0 ]--
r 7     private static class Node
--[ 2021.09.28.11.25.53.861.0 ]--
r 7     private static class Node<>
--[ 2021.09.28.11.25.54.492.0 ]--
r 7     private static class Node
--[ 2021.09.28.11.25.55.203.0 ]--
r 7     private static class Node<>
--[ 2021.09.28.11.25.55.880.0 ]--
r 7     private static class Node<I>
--[ 2021.09.28.11.25.56.365.0 ]--
r 7     private static class Node<It>
--[ 2021.09.28.11.25.56.716.0 ]--
r 7     private static class Node<Itm>
--[ 2021.09.28.11.25.57.296.0 ]--
r 7     private static class Node<It>
--[ 2021.09.28.11.25.57.444.0 ]--
r 7     private static class Node<Ite>
--[ 2021.09.28.11.25.58.120.0 ]--
r 7     private static class Node<Item>
--[ 2021.09.28.11.25.59.862.0 ]--
r 7     private static class Node<Item> 
--[ 2021.09.28.11.26.00.397.0 ]--
r 7     private static class Node<Item> {}
--[ 2021.09.28.11.26.00.616.0 ]--
+ 7     private static class Node<Item> {
r 8     }
--[ 2021.09.28.11.26.00.663.0 ]--
+ 8         
--[ 2021.09.28.11.26.02.693.0 ]--
r 8         I
--[ 2021.09.28.11.26.02.961.0 ]--
r 8         It
--[ 2021.09.28.11.26.03.156.0 ]--
r 8         Ite
--[ 2021.09.28.11.26.03.247.0 ]--
r 8         Item
--[ 2021.09.28.11.26.03.433.0 ]--
r 8         Item 
--[ 2021.09.28.11.26.03.568.0 ]--
r 8         Item i
--[ 2021.09.28.11.26.03.770.0 ]--
r 8         Item it
--[ 2021.09.28.11.26.04.084.0 ]--
r 8         Item item
--[ 2021.09.28.11.26.05.071.0 ]--
r 8         Item item 
--[ 2021.09.28.11.26.05.642.0 ]--
r 8         Item item =
--[ 2021.09.28.11.26.05.833.0 ]--
r 8         Item item = 
--[ 2021.09.28.11.26.06.361.0 ]--
r 8         Item item = n
--[ 2021.09.28.11.26.06.565.0 ]--
r 8         Item item = nu
--[ 2021.09.28.11.26.06.759.0 ]--
r 8         Item item = nul
--[ 2021.09.28.11.26.06.897.0 ]--
r 8         Item item = null
--[ 2021.09.28.11.26.07.118.0 ]--
r 8         Item item = null;
--[ 2021.09.28.11.26.07.525.0 ]--
+ 9         
--[ 2021.09.28.11.26.09.269.0 ]--
r 9         N
--[ 2021.09.28.11.26.09.445.0 ]--
r 9         No
--[ 2021.09.28.11.26.09.616.0 ]--
r 9         Nod
--[ 2021.09.28.11.26.09.822.0 ]--
r 9         Node
--[ 2021.09.28.11.26.10.732.0 ]--
r 9         Node<>
--[ 2021.09.28.11.26.11.809.0 ]--
r 9         Node<I>
--[ 2021.09.28.11.26.12.094.0 ]--
r 9         Node<It>
--[ 2021.09.28.11.26.12.334.0 ]--
r 9         Node<Ite>
--[ 2021.09.28.11.26.12.454.0 ]--
r 9         Node<Item>
--[ 2021.09.28.11.26.14.293.0 ]--
r 9         Node<Item> 
--[ 2021.09.28.11.26.14.946.0 ]--
r 9         Node<Item> n
--[ 2021.09.28.11.26.15.016.0 ]--
r 9         Node<Item> ne
--[ 2021.09.28.11.26.15.277.0 ]--
r 9         Node<Item> nex
--[ 2021.09.28.11.26.15.453.0 ]--
r 9         Node<Item> next
--[ 2021.09.28.11.26.15.604.0 ]--
r 9         Node<Item> next 
--[ 2021.09.28.11.26.16.373.0 ]--
r 9         Node<Item> next =
--[ 2021.09.28.11.26.16.718.0 ]--
r 9         Node<Item> next = 
--[ 2021.09.28.11.26.17.076.0 ]--
r 9         Node<Item> next =
--[ 2021.09.28.11.26.17.572.0 ]--
r 9         Node<Item> next = 
--[ 2021.09.28.11.26.17.756.0 ]--
r 9         Node<Item> next = n
--[ 2021.09.28.11.26.17.972.0 ]--
r 9         Node<Item> next = nu
--[ 2021.09.28.11.26.18.111.0 ]--
r 9         Node<Item> next = nul
--[ 2021.09.28.11.26.18.288.0 ]--
r 9         Node<Item> next = null
--[ 2021.09.28.11.26.18.413.0 ]--
r 9         Node<Item> next = null;
--[ 2021.09.28.11.26.18.709.0 ]--
+ 10         
--[ 2021.09.28.11.26.20.205.0 ]--
r 10         p
--[ 2021.09.28.11.26.20.330.0 ]--
r 10         pu
--[ 2021.09.28.11.26.20.757.0 ]--
r 10         public
--[ 2021.09.28.11.26.20.775.0 ]--
r 10         public 
--[ 2021.09.28.11.26.21.789.0 ]--
r 10         public N
--[ 2021.09.28.11.26.22.088.0 ]--
r 10         public No
--[ 2021.09.28.11.26.22.583.0 ]--
r 10         public Node
--[ 2021.09.28.11.26.23.354.0 ]--
r 10         public Node()
--[ 2021.09.28.11.26.23.944.0 ]--
r 10         public Node(I)
--[ 2021.09.28.11.26.24.644.0 ]--
r 10         public Node(Item)
--[ 2021.09.28.11.26.25.636.0 ]--
r 10         public Node(Item )
--[ 2021.09.28.11.26.25.749.0 ]--
r 10         public Node(Item i)
--[ 2021.09.28.11.26.26.236.0 ]--
r 10         public Node(Item item)
--[ 2021.09.28.11.26.37.839.0 ]--
r 10         public Node(Item item) 
--[ 2021.09.28.11.26.38.714.0 ]--
r 10         public Node(Item item) {}
--[ 2021.09.28.11.26.39.092.0 ]--
r 10         public Node(Item item) {t}
--[ 2021.09.28.11.26.39.219.0 ]--
r 10         public Node(Item item) {th}
--[ 2021.09.28.11.26.39.285.0 ]--
r 10         public Node(Item item) {thi}
--[ 2021.09.28.11.26.39.832.0 ]--
r 10         public Node(Item item) {this}
--[ 2021.09.28.11.26.40.212.0 ]--
r 10         public Node(Item item) {this.}
--[ 2021.09.28.11.26.41.921.0 ]--
r 10         public Node(Item item) {this.i}
--[ 2021.09.28.11.26.42.720.0 ]--
r 10         public Node(Item item) {this.item}
--[ 2021.09.28.11.26.43.281.0 ]--
r 10         public Node(Item item) {this.item }
--[ 2021.09.28.11.26.43.520.0 ]--
r 10         public Node(Item item) {this.item =}
--[ 2021.09.28.11.26.43.640.0 ]--
r 10         public Node(Item item) {this.item = }
--[ 2021.09.28.11.26.44.060.0 ]--
r 10         public Node(Item item) {this.item = i}
--[ 2021.09.28.11.26.44.557.0 ]--
r 10         public Node(Item item) {this.item = item}
--[ 2021.09.28.11.26.45.363.0 ]--
r 10         public Node(Item item) {this.item = item;}
--[ 2021.09.28.11.26.46.663.0 ]--
+ 11         
--[ 2021.09.28.11.26.47.742.0 ]--
r 11         p
--[ 2021.09.28.11.26.48.220.0 ]--
r 11         public
--[ 2021.09.28.11.26.48.237.0 ]--
r 11         public 
--[ 2021.09.28.11.26.48.721.0 ]--
r 11         public N
--[ 2021.09.28.11.26.48.911.0 ]--
r 11         public No
--[ 2021.09.28.11.26.49.051.0 ]--
r 11         public Nof
--[ 2021.09.28.11.26.49.290.0 ]--
r 11         public Nofr
--[ 2021.09.28.11.26.49.598.0 ]--
r 11         public Nof
--[ 2021.09.28.11.26.49.727.0 ]--
r 11         public No
--[ 2021.09.28.11.26.50.430.0 ]--
r 11         public Node
--[ 2021.09.28.11.26.51.630.0 ]--
r 11         public Node*
--[ 2021.09.28.11.26.52.012.0 ]--
r 11         public Node
--[ 2021.09.28.11.26.52.924.0 ]--
r 11         public Node()
--[ 2021.09.28.11.26.53.664.0 ]--
r 11         public Node(I)
--[ 2021.09.28.11.26.54.235.0 ]--
r 11         public Node(Item)
--[ 2021.09.28.11.26.54.882.0 ]--
r 11         public Node(Item )
--[ 2021.09.28.11.26.55.071.0 ]--
r 11         public Node(Item i)
--[ 2021.09.28.11.26.55.539.0 ]--
r 11         public Node(Item item)
--[ 2021.09.28.11.26.56.260.0 ]--
r 11         public Node(Item item,)
--[ 2021.09.28.11.26.56.350.0 ]--
r 11         public Node(Item item, )
--[ 2021.09.28.11.26.58.211.0 ]--
r 11         public Node(Item item, N)
--[ 2021.09.28.11.26.58.453.0 ]--
r 11         public Node(Item item, No)
--[ 2021.09.28.11.26.58.868.0 ]--
r 11         public Node(Item item, Node)
--[ 2021.09.28.11.26.59.993.0 ]--
r 11         public Node(Item item, Node<>)
--[ 2021.09.28.11.27.00.511.0 ]--
r 11         public Node(Item item, Node<I>)
--[ 2021.09.28.11.27.01.114.0 ]--
r 11         public Node(Item item, Node<Item>)
--[ 2021.09.28.11.27.02.836.0 ]--
r 11         public Node(Item item, Node<Item> )
--[ 2021.09.28.11.27.03.168.0 ]--
r 11         public Node(Item item, Node<Item> n)
--[ 2021.09.28.11.27.03.318.0 ]--
r 11         public Node(Item item, Node<Item> ne)
--[ 2021.09.28.11.27.03.775.0 ]--
r 11         public Node(Item item, Node<Item> next)
--[ 2021.09.28.11.27.06.000.0 ]--
r 11         public Node(Item item, Node<Item> next) 
--[ 2021.09.28.11.27.06.300.0 ]--
r 11         public Node(Item item, Node<Item> next) {}
--[ 2021.09.28.11.27.06.587.0 ]--
+ 11         public Node(Item item, Node<Item> next) {
r 12         }
--[ 2021.09.28.11.27.06.619.0 ]--
+ 12             
--[ 2021.09.28.11.27.08.071.0 ]--
r 12             t
--[ 2021.09.28.11.27.08.575.0 ]--
r 12             this
--[ 2021.09.28.11.27.08.835.0 ]--
r 12             this.
--[ 2021.09.28.11.27.09.091.0 ]--
r 12             this.i
--[ 2021.09.28.11.27.09.390.0 ]--
r 12             this.item
--[ 2021.09.28.11.27.09.796.0 ]--
r 12             this.item 
--[ 2021.09.28.11.27.10.220.0 ]--
r 12             this.item =
--[ 2021.09.28.11.27.10.338.0 ]--
r 12             this.item = 
--[ 2021.09.28.11.27.11.419.0 ]--
r 12             this.item = i
--[ 2021.09.28.11.27.11.905.0 ]--
r 12             this.item = item
--[ 2021.09.28.11.27.12.260.0 ]--
r 12             this.item = item;
--[ 2021.09.28.11.27.12.567.0 ]--
+ 13             
--[ 2021.09.28.11.27.13.167.0 ]--
r 13             t
--[ 2021.09.28.11.27.13.566.0 ]--
r 13             this
--[ 2021.09.28.11.27.14.088.0 ]--
r 13             this.
--[ 2021.09.28.11.27.14.585.0 ]--
r 13             this.i
--[ 2021.09.28.11.27.15.055.0 ]--
r 13             this.
--[ 2021.09.28.11.27.15.392.0 ]--
r 13             this
--[ 2021.09.28.11.27.16.325.0 ]--
r 13             this.
--[ 2021.09.28.11.27.16.602.0 ]--
r 13             this.n
--[ 2021.09.28.11.27.17.113.0 ]--
r 13             this.next
--[ 2021.09.28.11.27.17.548.0 ]--
r 13             this.next 
--[ 2021.09.28.11.27.17.984.0 ]--
r 13             this.next =
--[ 2021.09.28.11.27.18.105.0 ]--
r 13             this.next = 
--[ 2021.09.28.11.27.19.381.0 ]--
r 13             this.next = n
--[ 2021.09.28.11.27.20.040.0 ]--
r 13             this.next = next
--[ 2021.09.28.11.27.20.475.0 ]--
r 13             this.next = next;
--[ 2021.09.28.11.27.24.192.0 ]--
- 18
--[ 2021.09.28.11.27.25.986.0 ]--
- 17
r 17     public Steque() { }
--[ 2021.09.28.11.27.26.782.0 ]--
r 17     public Steque() {}
--[ 2021.09.28.11.27.36.790.0 ]--
+ 16     
--[ 2021.09.28.11.27.39.904.0 ]--
+ 16     
--[ 2021.09.28.11.27.41.512.0 ]--
r 17     p
--[ 2021.09.28.11.27.42.146.0 ]--
r 17     public
--[ 2021.09.28.11.27.42.156.0 ]--
r 17     public 
--[ 2021.09.28.11.27.42.666.0 ]--
r 17     public i
--[ 2021.09.28.11.27.43.178.0 ]--
r 17     public int
--[ 2021.09.28.11.27.44.439.0 ]--
r 17     public int 
--[ 2021.09.28.11.27.44.592.0 ]--
r 17     public int o
--[ 2021.09.28.11.27.44.708.0 ]--
r 17     public int op
--[ 2021.09.28.11.27.45.253.0 ]--
r 17     public int opc
--[ 2021.09.28.11.27.45.380.0 ]--
r 17     public int opco
--[ 2021.09.28.11.27.45.480.0 ]--
r 17     public int opcou
--[ 2021.09.28.11.27.45.664.0 ]--
r 17     public int opcoun
--[ 2021.09.28.11.27.45.808.0 ]--
r 17     public int opcount
--[ 2021.09.28.11.27.47.182.0 ]--
r 17     public int opcount 
--[ 2021.09.28.11.27.47.297.0 ]--
r 17     public int opcount =
--[ 2021.09.28.11.27.47.413.0 ]--
r 17     public int opcount = 
--[ 2021.09.28.11.27.47.616.0 ]--
r 17     public int opcount = 0
--[ 2021.09.28.11.27.48.429.0 ]--
r 17     public int opcount = 0;
--[ 2021.09.28.11.27.48.705.0 ]--
+ 18     
--[ 2021.09.28.11.27.49.493.0 ]--
r 18     p
--[ 2021.09.28.11.27.49.723.0 ]--
r 18     pu
--[ 2021.09.28.11.27.50.047.0 ]--
r 18     public
--[ 2021.09.28.11.27.50.055.0 ]--
r 18     public 
--[ 2021.09.28.11.27.51.510.0 ]--
r 18     public i
--[ 2021.09.28.11.27.52.033.0 ]--
r 18     public int
--[ 2021.09.28.11.27.52.605.0 ]--
r 18     public int 
--[ 2021.09.28.11.27.52.731.0 ]--
r 18     public int d
--[ 2021.09.28.11.27.52.866.0 ]--
r 18     public int di
--[ 2021.09.28.11.27.53.276.0 ]--
r 18     public int d
--[ 2021.09.28.11.27.53.432.0 ]--
r 18     public int 
--[ 2021.09.28.11.27.53.925.0 ]--
r 18     public int s
--[ 2021.09.28.11.27.54.028.0 ]--
r 18     public int si
--[ 2021.09.28.11.27.54.672.0 ]--
r 18     public int siz
--[ 2021.09.28.11.27.55.093.0 ]--
r 18     public int size
--[ 2021.09.28.11.27.56.077.0 ]--
r 18     public int size 
--[ 2021.09.28.11.27.56.729.0 ]--
r 18     public int size =
--[ 2021.09.28.11.27.56.963.0 ]--
r 18     public int size =0
--[ 2021.09.28.11.27.57.306.0 ]--
r 18     public int size =0;
--[ 2021.09.28.11.27.57.547.0 ]--
+ 19     
--[ 2021.09.28.11.27.58.805.0 ]--
r 19     p
--[ 2021.09.28.11.27.58.997.0 ]--
r 19     pr
--[ 2021.09.28.11.27.59.362.0 ]--
r 19     private
--[ 2021.09.28.11.27.59.378.0 ]--
r 19     private 
--[ 2021.09.28.11.28.00.015.0 ]--
+ 20     
--[ 2021.09.28.11.28.00.299.0 ]--
r 20     p
--[ 2021.09.28.11.28.00.455.0 ]--
r 20     pr
--[ 2021.09.28.11.28.01.012.0 ]--
r 20     pri
--[ 2021.09.28.11.28.01.172.0 ]--
r 20     priv
--[ 2021.09.28.11.28.02.140.0 ]--
r 20     pri
--[ 2021.09.28.11.28.02.276.0 ]--
r 20     pr
--[ 2021.09.28.11.28.02.435.0 ]--
r 20     p
--[ 2021.09.28.11.28.02.583.0 ]--
r 20     
--[ 2021.09.28.11.28.02.731.0 ]--
- 19
r 19     private
--[ 2021.09.28.11.28.02.868.0 ]--
r 19     privat
--[ 2021.09.28.11.28.03.738.0 ]--
r 19     private
--[ 2021.09.28.11.28.03.929.0 ]--
r 19     private 
--[ 2021.09.28.11.28.05.192.0 ]--
r 19     private N
--[ 2021.09.28.11.28.05.367.0 ]--
r 19     private No
--[ 2021.09.28.11.28.05.755.0 ]--
r 19     private Node
--[ 2021.09.28.11.28.06.509.0 ]--
r 19     private Node<>
--[ 2021.09.28.11.28.06.982.0 ]--
r 19     private Node<I>
--[ 2021.09.28.11.28.07.627.0 ]--
r 19     private Node<Item>
--[ 2021.09.28.11.28.09.469.0 ]--
r 19     private Node<Item> 
--[ 2021.09.28.11.28.09.796.0 ]--
r 19     private Node<Item> f
--[ 2021.09.28.11.28.10.025.0 ]--
r 19     private Node<Item> fi
--[ 2021.09.28.11.28.10.888.0 ]--
r 19     private Node<Item> fir
--[ 2021.09.28.11.28.11.141.0 ]--
r 19     private Node<Item> firs
--[ 2021.09.28.11.28.11.800.0 ]--
r 19     private Node<Item> first
--[ 2021.09.28.11.28.12.022.0 ]--
r 19     private Node<Item> first 
--[ 2021.09.28.11.28.12.266.0 ]--
r 19     private Node<Item> first =
--[ 2021.09.28.11.28.12.382.0 ]--
r 19     private Node<Item> first = 
--[ 2021.09.28.11.28.13.717.0 ]--
r 19     private Node<Item> first = n
--[ 2021.09.28.11.28.13.931.0 ]--
r 19     private Node<Item> first = nu
--[ 2021.09.28.11.28.14.047.0 ]--
r 19     private Node<Item> first = nul
--[ 2021.09.28.11.28.14.237.0 ]--
r 19     private Node<Item> first = null
--[ 2021.09.28.11.28.14.323.0 ]--
r 19     private Node<Item> first = null;
--[ 2021.09.28.11.28.14.609.0 ]--
+ 20     
--[ 2021.09.28.11.28.15.359.0 ]--
r 20     p
--[ 2021.09.28.11.28.16.629.0 ]--
r 20     pr
--[ 2021.09.28.11.28.17.163.0 ]--
r 20     private
--[ 2021.09.28.11.28.17.171.0 ]--
r 20     private 
--[ 2021.09.28.11.28.18.470.0 ]--
r 20     private N
--[ 2021.09.28.11.28.19.132.0 ]--
r 20     private Node
--[ 2021.09.28.11.28.19.836.0 ]--
r 20     private NodeI
--[ 2021.09.28.11.28.20.410.0 ]--
r 20     private NodeIterator
--[ 2021.09.28.11.28.20.425.0 ]--
r 20     private org.w3c.dom.traversal.NodeIterator
--[ 2021.09.28.11.28.20.441.0 ]--
r 1 import org.w3c.dom.traversal.NodeIterator;import java.util.ConcurrentModificationException;
--[ 2021.09.28.11.28.20.454.0 ]--
r 20     private NodeIterator
--[ 2021.09.28.11.28.20.473.0 ]--
+ 1 import org.w3c.dom.traversal.NodeIterator;
+ 2 
r 3 import java.util.ConcurrentModificationException;
--[ 2021.09.28.11.28.20.844.0 ]--
r 22     private NodeIterato
--[ 2021.09.28.11.28.21.039.0 ]--
r 22     private NodeIterat
--[ 2021.09.28.11.28.21.187.0 ]--
r 22     private NodeItera
--[ 2021.09.28.11.28.21.352.0 ]--
r 22     private NodeIter
--[ 2021.09.28.11.28.21.502.0 ]--
r 22     private NodeIte
--[ 2021.09.28.11.28.21.653.0 ]--
r 22     private NodeIt
--[ 2021.09.28.11.28.21.803.0 ]--
r 22     private NodeI
--[ 2021.09.28.11.28.21.963.0 ]--
r 22     private Node
--[ 2021.09.28.11.28.22.468.0 ]--
r 22     private Node<>
--[ 2021.09.28.11.28.23.248.0 ]--
r 22     private Node<I>
--[ 2021.09.28.11.28.23.865.0 ]--
r 22     private Node<Item>
--[ 2021.09.28.11.28.24.882.0 ]--
r 22     private Node<Item> 
--[ 2021.09.28.11.28.25.551.0 ]--
r 22     private Node<Item> l
--[ 2021.09.28.11.28.25.939.0 ]--
r 22     private Node<Item> ls
--[ 2021.09.28.11.28.26.132.0 ]--
r 22     private Node<Item> lst
--[ 2021.09.28.11.28.26.647.0 ]--
r 22     private Node<Item> ls
--[ 2021.09.28.11.28.26.771.0 ]--
r 22     private Node<Item> l
--[ 2021.09.28.11.28.26.902.0 ]--
r 22     private Node<Item> la
--[ 2021.09.28.11.28.27.160.0 ]--
r 22     private Node<Item> las
--[ 2021.09.28.11.28.27.230.0 ]--
r 22     private Node<Item> last
--[ 2021.09.28.11.28.27.572.0 ]--
r 22     private Node<Item> last 
--[ 2021.09.28.11.28.28.264.0 ]--
r 22     private Node<Item> last =
--[ 2021.09.28.11.28.28.832.0 ]--
r 22     private Node<Item> last = 
--[ 2021.09.28.11.28.29.023.0 ]--
r 22     private Node<Item> last = n
--[ 2021.09.28.11.28.29.223.0 ]--
r 22     private Node<Item> last = nu
--[ 2021.09.28.11.28.29.376.0 ]--
r 22     private Node<Item> last = nul
--[ 2021.09.28.11.28.29.515.0 ]--
r 22     private Node<Item> last = null
--[ 2021.09.28.11.28.29.684.0 ]--
r 22     private Node<Item> last = null;
--[ 2021.09.28.11.28.33.430.0 ]--
r 18 
r 23 
--[ 2021.09.28.11.28.33.445.0 ]--
+ 22     private Node<Item> last = null;
--[ 2021.09.28.11.28.35.235.0 ]--
- 22
--[ 2021.09.28.11.28.38.739.0 ]--
r 28         return ;
--[ 2021.09.28.11.28.39.214.0 ]--
r 28         return s;
--[ 2021.09.28.11.28.39.362.0 ]--
r 28         return si;
--[ 2021.09.28.11.28.39.460.0 ]--
r 28         return siz;
--[ 2021.09.28.11.28.39.868.0 ]--
r 28         return size;
--[ 2021.09.28.11.29.21.508.0 ]--
r 24     public Steque() { }
--[ 2021.09.28.11.30.42.131.0 ]--
r 33         return s;
--[ 2021.09.28.11.30.42.315.0 ]--
r 33         return si;
--[ 2021.09.28.11.30.42.561.0 ]--
r 33         return siz;
--[ 2021.09.28.11.30.42.820.0 ]--
r 33         return size;
--[ 2021.09.28.11.30.43.007.0 ]--
r 33         return size ;
--[ 2021.09.28.11.30.43.420.0 ]--
r 33         return size;
--[ 2021.09.28.11.30.43.646.0 ]--
r 33         return size=;
--[ 2021.09.28.11.30.43.787.0 ]--
r 33         return size==;
--[ 2021.09.28.11.30.44.506.0 ]--
r 33         return size==0;
--[ 2021.09.28.11.31.01.012.0 ]--
UpdateTree (AD): 6 0
+ /out/production/P02_DataTypes/algs4.jar
+ /out/production/P02_DataTypes/stdlib.jar
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.09.28.11.31.01.015.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.28.11.49.22.731.0 ]--
DisposeComponent
--[ 2021.09.29.19.45.26.353.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.09.29.19.45.26.437.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/OnePointerQueue.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.cos265
/readme.html
/P02_DataTypes.iml

--[ 2021.09.29.19.45.26.440.0 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.29.19.45.26.443.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.09.29.19.45.26.446.0 ]--
InitFile: /.cos265


--[ 2021.09.29.19.45.26.448.0 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;

import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    public int opcount = 0;
    public int size =0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {

    }

    // pushes item to top of steque
    public void push(Item item) {

    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {

    }
}

--[ 2021.09.29.19.45.26.452.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.09.29.19.45.55.141.0 ]--
UpdateTree (AD): 1 0
+ /.idea/vcs.xml

--[ 2021.09.29.19.45.55.659.0 ]--
DisposeComponent
--[ 2021.09.30.21.22.49.982.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.09.30.21.22.50.058.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/OnePointerQueue.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.cos265
/readme.html
/P02_DataTypes.iml

--[ 2021.09.30.21.22.50.063.0 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.30.21.22.50.066.0 ]--
InitFile: /.cos265


--[ 2021.09.30.21.22.50.070.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.09.30.21.22.50.076.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.09.30.21.22.50.079.0 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;

import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    public int opcount = 0;
    public int size =0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {

    }

    // pushes item to top of steque
    public void push(Item item) {

    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {

    }
}

--[ 2021.09.30.21.22.59.900.0 ]--
DisposeComponent
--[ 2021.09.30.22.03.25.287.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.09.30.22.03.25.304.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/OnePointerQueue.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.cos265
/readme.html
/P02_DataTypes.iml

--[ 2021.09.30.22.03.25.306.0 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.30.22.03.25.310.0 ]--
InitFile: /.cos265


--[ 2021.09.30.22.03.25.312.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.09.30.22.03.25.314.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.09.30.22.03.25.317.0 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;

import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    public int opcount = 0;
    public int size =0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {

    }

    // pushes item to top of steque
    public void push(Item item) {

    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {

    }
}

--[ 2021.09.30.22.04.09.001.0 ]--
DisposeComponent
--[ 2021.10.01.13.20.31.871.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.10.01.13.20.31.954.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/OnePointerQueue.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.cos265
/readme.html
/P02_DataTypes.iml

--[ 2021.10.01.13.20.31.957.0 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.01.13.20.31.962.0 ]--
InitFile: /.cos265


--[ 2021.10.01.13.20.31.968.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.10.01.13.20.31.970.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.10.01.13.20.31.973.0 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;

import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    public int opcount = 0;
    public int size =0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {

    }

    // pushes item to top of steque
    public void push(Item item) {

    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {

    }
}

--[ 2021.10.01.13.20.41.602.0 ]--
DisposeComponent
--[ 2021.10.05.10.00.24.535.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.10.05.10.00.24.556.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/OnePointerQueue.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.cos265
/readme.html
/P02_DataTypes.iml

--[ 2021.10.05.10.00.24.560.0 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.05.10.00.24.564.0 ]--
InitFile: /.cos265


--[ 2021.10.05.10.00.24.567.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.10.05.10.00.24.571.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.10.05.10.00.24.573.0 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;

import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    public int opcount = 0;
    public int size =0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {

    }

    // pushes item to top of steque
    public void push(Item item) {

    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {

    }
}

