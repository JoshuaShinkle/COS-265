--[ 2021.09.28.10.44.05.608.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.09.28.10.44.05.628.0 ]--
InitTree:
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.cos265
/readme.html
/P02_DataTypes.iml

--[ 2021.09.28.10.44.05.631.0 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.28.10.44.05.633.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.09.28.10.44.05.636.0 ]--
InitFile: /.cos265


--[ 2021.09.28.10.44.05.638.0 ]--
InitFile: /src/Steque.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    public Steque() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return true;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {

    }

    // pushes item to top of steque
    public void push(Item item) {

    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {

    }
}

--[ 2021.09.28.10.44.05.640.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.09.28.11.14.44.015.0 ]--
:/src/Steque.java
+ 6     
--[ 2021.09.28.11.14.45.995.0 ]--
r 6     /
--[ 2021.09.28.11.14.46.064.0 ]--
r 6     //
--[ 2021.09.28.11.14.47.791.0 ]--
r 6     /
--[ 2021.09.28.11.14.48.034.0 ]--
r 6     
--[ 2021.09.28.11.14.48.289.0 ]--
- 6
--[ 2021.09.28.11.14.58.184.0 ]--
+ 6     
--[ 2021.09.28.11.14.59.039.0 ]--
r 6     /
--[ 2021.09.28.11.14.59.176.0 ]--
r 6     //
--[ 2021.09.28.11.14.59.700.0 ]--
r 6     // 
--[ 2021.09.28.11.14.59.970.0 ]--
r 6     // s
--[ 2021.09.28.11.15.00.211.0 ]--
r 6     // si
--[ 2021.09.28.11.15.00.320.0 ]--
r 6     // sin
--[ 2021.09.28.11.15.00.431.0 ]--
r 6     // sing
--[ 2021.09.28.11.15.00.528.0 ]--
r 6     // singl
--[ 2021.09.28.11.15.00.743.0 ]--
r 6     // singly
--[ 2021.09.28.11.15.00.823.0 ]--
r 6     // singly 
--[ 2021.09.28.11.15.01.019.0 ]--
r 6     // singly l
--[ 2021.09.28.11.15.02.063.0 ]--
r 6     // singly 
--[ 2021.09.28.11.15.02.211.0 ]--
r 6     // singly
--[ 2021.09.28.11.15.02.982.0 ]--
r 6     // singly-
--[ 2021.09.28.11.15.03.297.0 ]--
r 6     // singly-l
--[ 2021.09.28.11.15.03.416.0 ]--
r 6     // singly-li
--[ 2021.09.28.11.15.03.633.0 ]--
r 6     // singly-lin
--[ 2021.09.28.11.15.03.800.0 ]--
r 6     // singly-link
--[ 2021.09.28.11.15.03.919.0 ]--
r 6     // singly-linke
--[ 2021.09.28.11.15.04.187.0 ]--
r 6     // singly-linked
--[ 2021.09.28.11.15.04.264.0 ]--
r 6     // singly-linked 
--[ 2021.09.28.11.15.04.397.0 ]--
r 6     // singly-linked l
--[ 2021.09.28.11.15.04.551.0 ]--
r 6     // singly-linked li
--[ 2021.09.28.11.15.04.723.0 ]--
r 6     // singly-linked lis
--[ 2021.09.28.11.15.04.917.0 ]--
r 6     // singly-linked list
--[ 2021.09.28.11.15.05.184.0 ]--
r 6     // singly-linked list 
--[ 2021.09.28.11.15.06.019.0 ]--
r 6     // singly-linked list
--[ 2021.09.28.11.15.06.307.0 ]--
+ 7     
--[ 2021.09.28.11.15.07.722.0 ]--
r 7     p
--[ 2021.09.28.11.15.07.930.0 ]--
r 7     pr
--[ 2021.09.28.11.15.08.054.0 ]--
r 7     pri
--[ 2021.09.28.11.15.08.554.0 ]--
r 7     priv
--[ 2021.09.28.11.15.09.177.0 ]--
r 7     private
--[ 2021.09.28.11.15.09.193.0 ]--
r 7     private 
--[ 2021.09.28.11.15.10.613.0 ]--
r 7     private
--[ 2021.09.28.11.15.11.114.0 ]--
r 7     privat
--[ 2021.09.28.11.15.11.144.0 ]--
r 7     priva
--[ 2021.09.28.11.15.11.175.0 ]--
r 7     priv
--[ 2021.09.28.11.15.11.198.0 ]--
r 7     pri
--[ 2021.09.28.11.15.11.236.0 ]--
r 7     pr
--[ 2021.09.28.11.15.11.260.0 ]--
r 7     p
--[ 2021.09.28.11.15.11.288.0 ]--
r 7     
--[ 2021.09.28.11.15.11.349.0 ]--
- 7
--[ 2021.09.28.11.15.11.364.0 ]--
r 6     // singly-linked lis
--[ 2021.09.28.11.15.11.381.0 ]--
r 6     // singly-linked li
--[ 2021.09.28.11.15.13.239.0 ]--
r 6     // singly-linked l
--[ 2021.09.28.11.15.13.647.0 ]--
r 6     // singly-linked 
--[ 2021.09.28.11.15.14.161.0 ]--
r 6     // singly-linked
--[ 2021.09.28.11.15.14.187.0 ]--
r 6     // singly-linke
--[ 2021.09.28.11.15.14.208.0 ]--
r 6     // singly-link
--[ 2021.09.28.11.15.14.236.0 ]--
r 6     // singly-lin
--[ 2021.09.28.11.15.14.269.0 ]--
r 6     // singly-li
--[ 2021.09.28.11.15.14.297.0 ]--
r 6     // singly-l
--[ 2021.09.28.11.15.14.327.0 ]--
r 6     // singly-
--[ 2021.09.28.11.15.14.356.0 ]--
r 6     // singly
--[ 2021.09.28.11.15.14.386.0 ]--
r 6     // singl
--[ 2021.09.28.11.15.14.417.0 ]--
r 6     // sing
--[ 2021.09.28.11.15.14.447.0 ]--
r 6     // sin
--[ 2021.09.28.11.15.14.477.0 ]--
r 6     // si
--[ 2021.09.28.11.15.14.632.0 ]--
r 6     // s
--[ 2021.09.28.11.15.14.831.0 ]--
r 6     // 
--[ 2021.09.28.11.15.14.991.0 ]--
r 6     //
--[ 2021.09.28.11.15.15.150.0 ]--
r 6     /
--[ 2021.09.28.11.15.15.335.0 ]--
r 6     
--[ 2021.09.28.11.15.15.526.0 ]--
- 6
--[ 2021.09.28.11.15.15.712.0 ]--
r 5 public class Steque<Item> implements Iterable<Item> 
--[ 2021.09.28.11.15.17.090.0 ]--
+ 5 public class Steque<Item> implements Iterable<Item> {
+ 6     // singly-linked list
r 7     private 
--[ 2021.09.28.11.15.17.635.0 ]--
r 7     private
--[ 2021.09.28.11.15.17.798.0 ]--
r 7     privat
--[ 2021.09.28.11.15.18.299.0 ]--
r 7     priva
--[ 2021.09.28.11.15.18.328.0 ]--
r 7     priv
--[ 2021.09.28.11.15.18.358.0 ]--
r 7     pri
--[ 2021.09.28.11.15.18.388.0 ]--
r 7     pr
--[ 2021.09.28.11.15.18.417.0 ]--
r 7     p
--[ 2021.09.28.11.15.18.448.0 ]--
r 7     
--[ 2021.09.28.11.15.18.487.0 ]--
- 7
--[ 2021.09.28.11.15.18.509.0 ]--
r 6     // singly-linked lis
--[ 2021.09.28.11.15.18.538.0 ]--
r 6     // singly-linked li
--[ 2021.09.28.11.15.18.576.0 ]--
r 6     // singly-linked l
--[ 2021.09.28.11.15.18.601.0 ]--
r 6     // singly-linked 
--[ 2021.09.28.11.15.18.630.0 ]--
r 6     // singly-linked
--[ 2021.09.28.11.15.18.659.0 ]--
r 6     // singly-linke
--[ 2021.09.28.11.15.18.690.0 ]--
r 6     // singly-link
--[ 2021.09.28.11.15.18.854.0 ]--
r 6     // singly-lin
--[ 2021.09.28.11.15.19.346.0 ]--
r 6     // singly-li
--[ 2021.09.28.11.15.19.369.0 ]--
r 6     // singly-l
--[ 2021.09.28.11.15.19.399.0 ]--
r 6     // singly-
--[ 2021.09.28.11.15.19.430.0 ]--
r 6     // singly
--[ 2021.09.28.11.15.19.460.0 ]--
r 6     // singl
--[ 2021.09.28.11.15.19.489.0 ]--
r 6     // sing
--[ 2021.09.28.11.15.19.520.0 ]--
r 6     // sin
--[ 2021.09.28.11.15.19.550.0 ]--
r 6     // si
--[ 2021.09.28.11.15.19.581.0 ]--
r 6     // s
--[ 2021.09.28.11.15.19.724.0 ]--
r 6     // 
--[ 2021.09.28.11.15.19.952.0 ]--
r 6     //
--[ 2021.09.28.11.15.20.134.0 ]--
r 6     /
--[ 2021.09.28.11.15.20.294.0 ]--
r 6     
--[ 2021.09.28.11.15.20.473.0 ]--
- 6
--[ 2021.09.28.11.25.37.596.0 ]--
+ 6     
--[ 2021.09.28.11.25.38.100.0 ]--
+ 6     
--[ 2021.09.28.11.25.40.649.0 ]--
r 6     /
--[ 2021.09.28.11.25.40.766.0 ]--
r 6     //
--[ 2021.09.28.11.25.41.104.0 ]--
r 6     // 
--[ 2021.09.28.11.25.41.207.0 ]--
r 6     // s
--[ 2021.09.28.11.25.41.574.0 ]--
r 6     // si
--[ 2021.09.28.11.25.41.709.0 ]--
r 6     // sin
--[ 2021.09.28.11.25.41.838.0 ]--
r 6     // sing
--[ 2021.09.28.11.25.41.916.0 ]--
r 6     // singl
--[ 2021.09.28.11.25.42.077.0 ]--
r 6     // singly
--[ 2021.09.28.11.25.42.461.0 ]--
r 6     // singly-
--[ 2021.09.28.11.25.42.783.0 ]--
r 6     // singly-l
--[ 2021.09.28.11.25.42.925.0 ]--
r 6     // singly-li
--[ 2021.09.28.11.25.43.005.0 ]--
r 6     // singly-lin
--[ 2021.09.28.11.25.43.141.0 ]--
r 6     // singly-link
--[ 2021.09.28.11.25.43.281.0 ]--
r 6     // singly-linke
--[ 2021.09.28.11.25.43.457.0 ]--
r 6     // singly-linked
--[ 2021.09.28.11.25.43.517.0 ]--
r 6     // singly-linked 
--[ 2021.09.28.11.25.43.662.0 ]--
r 6     // singly-linked l
--[ 2021.09.28.11.25.43.758.0 ]--
r 6     // singly-linked li
--[ 2021.09.28.11.25.43.932.0 ]--
r 6     // singly-linked lis
--[ 2021.09.28.11.25.44.046.0 ]--
r 6     // singly-linked list
--[ 2021.09.28.11.25.45.647.0 ]--
+ 7     
--[ 2021.09.28.11.25.46.102.0 ]--
r 7     p
--[ 2021.09.28.11.25.46.653.0 ]--
r 7     pri
--[ 2021.09.28.11.25.46.790.0 ]--
r 7     priv
--[ 2021.09.28.11.25.47.137.0 ]--
r 7     private
--[ 2021.09.28.11.25.47.147.0 ]--
r 7     private 
--[ 2021.09.28.11.25.47.614.0 ]--
r 7     private s
--[ 2021.09.28.11.25.47.733.0 ]--
r 7     private st
--[ 2021.09.28.11.25.48.295.0 ]--
r 7     private static
--[ 2021.09.28.11.25.48.306.0 ]--
r 7     private static 
--[ 2021.09.28.11.25.50.062.0 ]--
r 7     private static c
--[ 2021.09.28.11.25.50.174.0 ]--
r 7     private static cl
--[ 2021.09.28.11.25.50.636.0 ]--
r 7     private static class
--[ 2021.09.28.11.25.50.656.0 ]--
r 7     private static class 
--[ 2021.09.28.11.25.52.256.0 ]--
r 7     private static class N
--[ 2021.09.28.11.25.52.408.0 ]--
r 7     private static class No
--[ 2021.09.28.11.25.52.493.0 ]--
r 7     private static class Nod
--[ 2021.09.28.11.25.52.971.0 ]--
r 7     private static class Node
--[ 2021.09.28.11.25.53.861.0 ]--
r 7     private static class Node<>
--[ 2021.09.28.11.25.54.492.0 ]--
r 7     private static class Node
--[ 2021.09.28.11.25.55.203.0 ]--
r 7     private static class Node<>
--[ 2021.09.28.11.25.55.880.0 ]--
r 7     private static class Node<I>
--[ 2021.09.28.11.25.56.365.0 ]--
r 7     private static class Node<It>
--[ 2021.09.28.11.25.56.716.0 ]--
r 7     private static class Node<Itm>
--[ 2021.09.28.11.25.57.296.0 ]--
r 7     private static class Node<It>
--[ 2021.09.28.11.25.57.444.0 ]--
r 7     private static class Node<Ite>
--[ 2021.09.28.11.25.58.120.0 ]--
r 7     private static class Node<Item>
--[ 2021.09.28.11.25.59.862.0 ]--
r 7     private static class Node<Item> 
--[ 2021.09.28.11.26.00.397.0 ]--
r 7     private static class Node<Item> {}
--[ 2021.09.28.11.26.00.616.0 ]--
+ 7     private static class Node<Item> {
r 8     }
--[ 2021.09.28.11.26.00.663.0 ]--
+ 8         
--[ 2021.09.28.11.26.02.693.0 ]--
r 8         I
--[ 2021.09.28.11.26.02.961.0 ]--
r 8         It
--[ 2021.09.28.11.26.03.156.0 ]--
r 8         Ite
--[ 2021.09.28.11.26.03.247.0 ]--
r 8         Item
--[ 2021.09.28.11.26.03.433.0 ]--
r 8         Item 
--[ 2021.09.28.11.26.03.568.0 ]--
r 8         Item i
--[ 2021.09.28.11.26.03.770.0 ]--
r 8         Item it
--[ 2021.09.28.11.26.04.084.0 ]--
r 8         Item item
--[ 2021.09.28.11.26.05.071.0 ]--
r 8         Item item 
--[ 2021.09.28.11.26.05.642.0 ]--
r 8         Item item =
--[ 2021.09.28.11.26.05.833.0 ]--
r 8         Item item = 
--[ 2021.09.28.11.26.06.361.0 ]--
r 8         Item item = n
--[ 2021.09.28.11.26.06.565.0 ]--
r 8         Item item = nu
--[ 2021.09.28.11.26.06.759.0 ]--
r 8         Item item = nul
--[ 2021.09.28.11.26.06.897.0 ]--
r 8         Item item = null
--[ 2021.09.28.11.26.07.118.0 ]--
r 8         Item item = null;
--[ 2021.09.28.11.26.07.525.0 ]--
+ 9         
--[ 2021.09.28.11.26.09.269.0 ]--
r 9         N
--[ 2021.09.28.11.26.09.445.0 ]--
r 9         No
--[ 2021.09.28.11.26.09.616.0 ]--
r 9         Nod
--[ 2021.09.28.11.26.09.822.0 ]--
r 9         Node
--[ 2021.09.28.11.26.10.732.0 ]--
r 9         Node<>
--[ 2021.09.28.11.26.11.809.0 ]--
r 9         Node<I>
--[ 2021.09.28.11.26.12.094.0 ]--
r 9         Node<It>
--[ 2021.09.28.11.26.12.334.0 ]--
r 9         Node<Ite>
--[ 2021.09.28.11.26.12.454.0 ]--
r 9         Node<Item>
--[ 2021.09.28.11.26.14.293.0 ]--
r 9         Node<Item> 
--[ 2021.09.28.11.26.14.946.0 ]--
r 9         Node<Item> n
--[ 2021.09.28.11.26.15.016.0 ]--
r 9         Node<Item> ne
--[ 2021.09.28.11.26.15.277.0 ]--
r 9         Node<Item> nex
--[ 2021.09.28.11.26.15.453.0 ]--
r 9         Node<Item> next
--[ 2021.09.28.11.26.15.604.0 ]--
r 9         Node<Item> next 
--[ 2021.09.28.11.26.16.373.0 ]--
r 9         Node<Item> next =
--[ 2021.09.28.11.26.16.718.0 ]--
r 9         Node<Item> next = 
--[ 2021.09.28.11.26.17.076.0 ]--
r 9         Node<Item> next =
--[ 2021.09.28.11.26.17.572.0 ]--
r 9         Node<Item> next = 
--[ 2021.09.28.11.26.17.756.0 ]--
r 9         Node<Item> next = n
--[ 2021.09.28.11.26.17.972.0 ]--
r 9         Node<Item> next = nu
--[ 2021.09.28.11.26.18.111.0 ]--
r 9         Node<Item> next = nul
--[ 2021.09.28.11.26.18.288.0 ]--
r 9         Node<Item> next = null
--[ 2021.09.28.11.26.18.413.0 ]--
r 9         Node<Item> next = null;
--[ 2021.09.28.11.26.18.709.0 ]--
+ 10         
--[ 2021.09.28.11.26.20.205.0 ]--
r 10         p
--[ 2021.09.28.11.26.20.330.0 ]--
r 10         pu
--[ 2021.09.28.11.26.20.757.0 ]--
r 10         public
--[ 2021.09.28.11.26.20.775.0 ]--
r 10         public 
--[ 2021.09.28.11.26.21.789.0 ]--
r 10         public N
--[ 2021.09.28.11.26.22.088.0 ]--
r 10         public No
--[ 2021.09.28.11.26.22.583.0 ]--
r 10         public Node
--[ 2021.09.28.11.26.23.354.0 ]--
r 10         public Node()
--[ 2021.09.28.11.26.23.944.0 ]--
r 10         public Node(I)
--[ 2021.09.28.11.26.24.644.0 ]--
r 10         public Node(Item)
--[ 2021.09.28.11.26.25.636.0 ]--
r 10         public Node(Item )
--[ 2021.09.28.11.26.25.749.0 ]--
r 10         public Node(Item i)
--[ 2021.09.28.11.26.26.236.0 ]--
r 10         public Node(Item item)
--[ 2021.09.28.11.26.37.839.0 ]--
r 10         public Node(Item item) 
--[ 2021.09.28.11.26.38.714.0 ]--
r 10         public Node(Item item) {}
--[ 2021.09.28.11.26.39.092.0 ]--
r 10         public Node(Item item) {t}
--[ 2021.09.28.11.26.39.219.0 ]--
r 10         public Node(Item item) {th}
--[ 2021.09.28.11.26.39.285.0 ]--
r 10         public Node(Item item) {thi}
--[ 2021.09.28.11.26.39.832.0 ]--
r 10         public Node(Item item) {this}
--[ 2021.09.28.11.26.40.212.0 ]--
r 10         public Node(Item item) {this.}
--[ 2021.09.28.11.26.41.921.0 ]--
r 10         public Node(Item item) {this.i}
--[ 2021.09.28.11.26.42.720.0 ]--
r 10         public Node(Item item) {this.item}
--[ 2021.09.28.11.26.43.281.0 ]--
r 10         public Node(Item item) {this.item }
--[ 2021.09.28.11.26.43.520.0 ]--
r 10         public Node(Item item) {this.item =}
--[ 2021.09.28.11.26.43.640.0 ]--
r 10         public Node(Item item) {this.item = }
--[ 2021.09.28.11.26.44.060.0 ]--
r 10         public Node(Item item) {this.item = i}
--[ 2021.09.28.11.26.44.557.0 ]--
r 10         public Node(Item item) {this.item = item}
--[ 2021.09.28.11.26.45.363.0 ]--
r 10         public Node(Item item) {this.item = item;}
--[ 2021.09.28.11.26.46.663.0 ]--
+ 11         
--[ 2021.09.28.11.26.47.742.0 ]--
r 11         p
--[ 2021.09.28.11.26.48.220.0 ]--
r 11         public
--[ 2021.09.28.11.26.48.237.0 ]--
r 11         public 
--[ 2021.09.28.11.26.48.721.0 ]--
r 11         public N
--[ 2021.09.28.11.26.48.911.0 ]--
r 11         public No
--[ 2021.09.28.11.26.49.051.0 ]--
r 11         public Nof
--[ 2021.09.28.11.26.49.290.0 ]--
r 11         public Nofr
--[ 2021.09.28.11.26.49.598.0 ]--
r 11         public Nof
--[ 2021.09.28.11.26.49.727.0 ]--
r 11         public No
--[ 2021.09.28.11.26.50.430.0 ]--
r 11         public Node
--[ 2021.09.28.11.26.51.630.0 ]--
r 11         public Node*
--[ 2021.09.28.11.26.52.012.0 ]--
r 11         public Node
--[ 2021.09.28.11.26.52.924.0 ]--
r 11         public Node()
--[ 2021.09.28.11.26.53.664.0 ]--
r 11         public Node(I)
--[ 2021.09.28.11.26.54.235.0 ]--
r 11         public Node(Item)
--[ 2021.09.28.11.26.54.882.0 ]--
r 11         public Node(Item )
--[ 2021.09.28.11.26.55.071.0 ]--
r 11         public Node(Item i)
--[ 2021.09.28.11.26.55.539.0 ]--
r 11         public Node(Item item)
--[ 2021.09.28.11.26.56.260.0 ]--
r 11         public Node(Item item,)
--[ 2021.09.28.11.26.56.350.0 ]--
r 11         public Node(Item item, )
--[ 2021.09.28.11.26.58.211.0 ]--
r 11         public Node(Item item, N)
--[ 2021.09.28.11.26.58.453.0 ]--
r 11         public Node(Item item, No)
--[ 2021.09.28.11.26.58.868.0 ]--
r 11         public Node(Item item, Node)
--[ 2021.09.28.11.26.59.993.0 ]--
r 11         public Node(Item item, Node<>)
--[ 2021.09.28.11.27.00.511.0 ]--
r 11         public Node(Item item, Node<I>)
--[ 2021.09.28.11.27.01.114.0 ]--
r 11         public Node(Item item, Node<Item>)
--[ 2021.09.28.11.27.02.836.0 ]--
r 11         public Node(Item item, Node<Item> )
--[ 2021.09.28.11.27.03.168.0 ]--
r 11         public Node(Item item, Node<Item> n)
--[ 2021.09.28.11.27.03.318.0 ]--
r 11         public Node(Item item, Node<Item> ne)
--[ 2021.09.28.11.27.03.775.0 ]--
r 11         public Node(Item item, Node<Item> next)
--[ 2021.09.28.11.27.06.000.0 ]--
r 11         public Node(Item item, Node<Item> next) 
--[ 2021.09.28.11.27.06.300.0 ]--
r 11         public Node(Item item, Node<Item> next) {}
--[ 2021.09.28.11.27.06.587.0 ]--
+ 11         public Node(Item item, Node<Item> next) {
r 12         }
--[ 2021.09.28.11.27.06.619.0 ]--
+ 12             
--[ 2021.09.28.11.27.08.071.0 ]--
r 12             t
--[ 2021.09.28.11.27.08.575.0 ]--
r 12             this
--[ 2021.09.28.11.27.08.835.0 ]--
r 12             this.
--[ 2021.09.28.11.27.09.091.0 ]--
r 12             this.i
--[ 2021.09.28.11.27.09.390.0 ]--
r 12             this.item
--[ 2021.09.28.11.27.09.796.0 ]--
r 12             this.item 
--[ 2021.09.28.11.27.10.220.0 ]--
r 12             this.item =
--[ 2021.09.28.11.27.10.338.0 ]--
r 12             this.item = 
--[ 2021.09.28.11.27.11.419.0 ]--
r 12             this.item = i
--[ 2021.09.28.11.27.11.905.0 ]--
r 12             this.item = item
--[ 2021.09.28.11.27.12.260.0 ]--
r 12             this.item = item;
--[ 2021.09.28.11.27.12.567.0 ]--
+ 13             
--[ 2021.09.28.11.27.13.167.0 ]--
r 13             t
--[ 2021.09.28.11.27.13.566.0 ]--
r 13             this
--[ 2021.09.28.11.27.14.088.0 ]--
r 13             this.
--[ 2021.09.28.11.27.14.585.0 ]--
r 13             this.i
--[ 2021.09.28.11.27.15.055.0 ]--
r 13             this.
--[ 2021.09.28.11.27.15.392.0 ]--
r 13             this
--[ 2021.09.28.11.27.16.325.0 ]--
r 13             this.
--[ 2021.09.28.11.27.16.602.0 ]--
r 13             this.n
--[ 2021.09.28.11.27.17.113.0 ]--
r 13             this.next
--[ 2021.09.28.11.27.17.548.0 ]--
r 13             this.next 
--[ 2021.09.28.11.27.17.984.0 ]--
r 13             this.next =
--[ 2021.09.28.11.27.18.105.0 ]--
r 13             this.next = 
--[ 2021.09.28.11.27.19.381.0 ]--
r 13             this.next = n
--[ 2021.09.28.11.27.20.040.0 ]--
r 13             this.next = next
--[ 2021.09.28.11.27.20.475.0 ]--
r 13             this.next = next;
--[ 2021.09.28.11.27.24.192.0 ]--
- 18
--[ 2021.09.28.11.27.25.986.0 ]--
- 17
r 17     public Steque() { }
--[ 2021.09.28.11.27.26.782.0 ]--
r 17     public Steque() {}
--[ 2021.09.28.11.27.36.790.0 ]--
+ 16     
--[ 2021.09.28.11.27.39.904.0 ]--
+ 16     
--[ 2021.09.28.11.27.41.512.0 ]--
r 17     p
--[ 2021.09.28.11.27.42.146.0 ]--
r 17     public
--[ 2021.09.28.11.27.42.156.0 ]--
r 17     public 
--[ 2021.09.28.11.27.42.666.0 ]--
r 17     public i
--[ 2021.09.28.11.27.43.178.0 ]--
r 17     public int
--[ 2021.09.28.11.27.44.439.0 ]--
r 17     public int 
--[ 2021.09.28.11.27.44.592.0 ]--
r 17     public int o
--[ 2021.09.28.11.27.44.708.0 ]--
r 17     public int op
--[ 2021.09.28.11.27.45.253.0 ]--
r 17     public int opc
--[ 2021.09.28.11.27.45.380.0 ]--
r 17     public int opco
--[ 2021.09.28.11.27.45.480.0 ]--
r 17     public int opcou
--[ 2021.09.28.11.27.45.664.0 ]--
r 17     public int opcoun
--[ 2021.09.28.11.27.45.808.0 ]--
r 17     public int opcount
--[ 2021.09.28.11.27.47.182.0 ]--
r 17     public int opcount 
--[ 2021.09.28.11.27.47.297.0 ]--
r 17     public int opcount =
--[ 2021.09.28.11.27.47.413.0 ]--
r 17     public int opcount = 
--[ 2021.09.28.11.27.47.616.0 ]--
r 17     public int opcount = 0
--[ 2021.09.28.11.27.48.429.0 ]--
r 17     public int opcount = 0;
--[ 2021.09.28.11.27.48.705.0 ]--
+ 18     
--[ 2021.09.28.11.27.49.493.0 ]--
r 18     p
--[ 2021.09.28.11.27.49.723.0 ]--
r 18     pu
--[ 2021.09.28.11.27.50.047.0 ]--
r 18     public
--[ 2021.09.28.11.27.50.055.0 ]--
r 18     public 
--[ 2021.09.28.11.27.51.510.0 ]--
r 18     public i
--[ 2021.09.28.11.27.52.033.0 ]--
r 18     public int
--[ 2021.09.28.11.27.52.605.0 ]--
r 18     public int 
--[ 2021.09.28.11.27.52.731.0 ]--
r 18     public int d
--[ 2021.09.28.11.27.52.866.0 ]--
r 18     public int di
--[ 2021.09.28.11.27.53.276.0 ]--
r 18     public int d
--[ 2021.09.28.11.27.53.432.0 ]--
r 18     public int 
--[ 2021.09.28.11.27.53.925.0 ]--
r 18     public int s
--[ 2021.09.28.11.27.54.028.0 ]--
r 18     public int si
--[ 2021.09.28.11.27.54.672.0 ]--
r 18     public int siz
--[ 2021.09.28.11.27.55.093.0 ]--
r 18     public int size
--[ 2021.09.28.11.27.56.077.0 ]--
r 18     public int size 
--[ 2021.09.28.11.27.56.729.0 ]--
r 18     public int size =
--[ 2021.09.28.11.27.56.963.0 ]--
r 18     public int size =0
--[ 2021.09.28.11.27.57.306.0 ]--
r 18     public int size =0;
--[ 2021.09.28.11.27.57.547.0 ]--
+ 19     
--[ 2021.09.28.11.27.58.805.0 ]--
r 19     p
--[ 2021.09.28.11.27.58.997.0 ]--
r 19     pr
--[ 2021.09.28.11.27.59.362.0 ]--
r 19     private
--[ 2021.09.28.11.27.59.378.0 ]--
r 19     private 
--[ 2021.09.28.11.28.00.015.0 ]--
+ 20     
--[ 2021.09.28.11.28.00.299.0 ]--
r 20     p
--[ 2021.09.28.11.28.00.455.0 ]--
r 20     pr
--[ 2021.09.28.11.28.01.012.0 ]--
r 20     pri
--[ 2021.09.28.11.28.01.172.0 ]--
r 20     priv
--[ 2021.09.28.11.28.02.140.0 ]--
r 20     pri
--[ 2021.09.28.11.28.02.276.0 ]--
r 20     pr
--[ 2021.09.28.11.28.02.435.0 ]--
r 20     p
--[ 2021.09.28.11.28.02.583.0 ]--
r 20     
--[ 2021.09.28.11.28.02.731.0 ]--
- 19
r 19     private
--[ 2021.09.28.11.28.02.868.0 ]--
r 19     privat
--[ 2021.09.28.11.28.03.738.0 ]--
r 19     private
--[ 2021.09.28.11.28.03.929.0 ]--
r 19     private 
--[ 2021.09.28.11.28.05.192.0 ]--
r 19     private N
--[ 2021.09.28.11.28.05.367.0 ]--
r 19     private No
--[ 2021.09.28.11.28.05.755.0 ]--
r 19     private Node
--[ 2021.09.28.11.28.06.509.0 ]--
r 19     private Node<>
--[ 2021.09.28.11.28.06.982.0 ]--
r 19     private Node<I>
--[ 2021.09.28.11.28.07.627.0 ]--
r 19     private Node<Item>
--[ 2021.09.28.11.28.09.469.0 ]--
r 19     private Node<Item> 
--[ 2021.09.28.11.28.09.796.0 ]--
r 19     private Node<Item> f
--[ 2021.09.28.11.28.10.025.0 ]--
r 19     private Node<Item> fi
--[ 2021.09.28.11.28.10.888.0 ]--
r 19     private Node<Item> fir
--[ 2021.09.28.11.28.11.141.0 ]--
r 19     private Node<Item> firs
--[ 2021.09.28.11.28.11.800.0 ]--
r 19     private Node<Item> first
--[ 2021.09.28.11.28.12.022.0 ]--
r 19     private Node<Item> first 
--[ 2021.09.28.11.28.12.266.0 ]--
r 19     private Node<Item> first =
--[ 2021.09.28.11.28.12.382.0 ]--
r 19     private Node<Item> first = 
--[ 2021.09.28.11.28.13.717.0 ]--
r 19     private Node<Item> first = n
--[ 2021.09.28.11.28.13.931.0 ]--
r 19     private Node<Item> first = nu
--[ 2021.09.28.11.28.14.047.0 ]--
r 19     private Node<Item> first = nul
--[ 2021.09.28.11.28.14.237.0 ]--
r 19     private Node<Item> first = null
--[ 2021.09.28.11.28.14.323.0 ]--
r 19     private Node<Item> first = null;
--[ 2021.09.28.11.28.14.609.0 ]--
+ 20     
--[ 2021.09.28.11.28.15.359.0 ]--
r 20     p
--[ 2021.09.28.11.28.16.629.0 ]--
r 20     pr
--[ 2021.09.28.11.28.17.163.0 ]--
r 20     private
--[ 2021.09.28.11.28.17.171.0 ]--
r 20     private 
--[ 2021.09.28.11.28.18.470.0 ]--
r 20     private N
--[ 2021.09.28.11.28.19.132.0 ]--
r 20     private Node
--[ 2021.09.28.11.28.19.836.0 ]--
r 20     private NodeI
--[ 2021.09.28.11.28.20.410.0 ]--
r 20     private NodeIterator
--[ 2021.09.28.11.28.20.425.0 ]--
r 20     private org.w3c.dom.traversal.NodeIterator
--[ 2021.09.28.11.28.20.441.0 ]--
r 1 import org.w3c.dom.traversal.NodeIterator;import java.util.ConcurrentModificationException;
--[ 2021.09.28.11.28.20.454.0 ]--
r 20     private NodeIterator
--[ 2021.09.28.11.28.20.473.0 ]--
+ 1 import org.w3c.dom.traversal.NodeIterator;
+ 2 
r 3 import java.util.ConcurrentModificationException;
--[ 2021.09.28.11.28.20.844.0 ]--
r 22     private NodeIterato
--[ 2021.09.28.11.28.21.039.0 ]--
r 22     private NodeIterat
--[ 2021.09.28.11.28.21.187.0 ]--
r 22     private NodeItera
--[ 2021.09.28.11.28.21.352.0 ]--
r 22     private NodeIter
--[ 2021.09.28.11.28.21.502.0 ]--
r 22     private NodeIte
--[ 2021.09.28.11.28.21.653.0 ]--
r 22     private NodeIt
--[ 2021.09.28.11.28.21.803.0 ]--
r 22     private NodeI
--[ 2021.09.28.11.28.21.963.0 ]--
r 22     private Node
--[ 2021.09.28.11.28.22.468.0 ]--
r 22     private Node<>
--[ 2021.09.28.11.28.23.248.0 ]--
r 22     private Node<I>
--[ 2021.09.28.11.28.23.865.0 ]--
r 22     private Node<Item>
--[ 2021.09.28.11.28.24.882.0 ]--
r 22     private Node<Item> 
--[ 2021.09.28.11.28.25.551.0 ]--
r 22     private Node<Item> l
--[ 2021.09.28.11.28.25.939.0 ]--
r 22     private Node<Item> ls
--[ 2021.09.28.11.28.26.132.0 ]--
r 22     private Node<Item> lst
--[ 2021.09.28.11.28.26.647.0 ]--
r 22     private Node<Item> ls
--[ 2021.09.28.11.28.26.771.0 ]--
r 22     private Node<Item> l
--[ 2021.09.28.11.28.26.902.0 ]--
r 22     private Node<Item> la
--[ 2021.09.28.11.28.27.160.0 ]--
r 22     private Node<Item> las
--[ 2021.09.28.11.28.27.230.0 ]--
r 22     private Node<Item> last
--[ 2021.09.28.11.28.27.572.0 ]--
r 22     private Node<Item> last 
--[ 2021.09.28.11.28.28.264.0 ]--
r 22     private Node<Item> last =
--[ 2021.09.28.11.28.28.832.0 ]--
r 22     private Node<Item> last = 
--[ 2021.09.28.11.28.29.023.0 ]--
r 22     private Node<Item> last = n
--[ 2021.09.28.11.28.29.223.0 ]--
r 22     private Node<Item> last = nu
--[ 2021.09.28.11.28.29.376.0 ]--
r 22     private Node<Item> last = nul
--[ 2021.09.28.11.28.29.515.0 ]--
r 22     private Node<Item> last = null
--[ 2021.09.28.11.28.29.684.0 ]--
r 22     private Node<Item> last = null;
--[ 2021.09.28.11.28.33.430.0 ]--
r 18 
r 23 
--[ 2021.09.28.11.28.33.445.0 ]--
+ 22     private Node<Item> last = null;
--[ 2021.09.28.11.28.35.235.0 ]--
- 22
--[ 2021.09.28.11.28.38.739.0 ]--
r 28         return ;
--[ 2021.09.28.11.28.39.214.0 ]--
r 28         return s;
--[ 2021.09.28.11.28.39.362.0 ]--
r 28         return si;
--[ 2021.09.28.11.28.39.460.0 ]--
r 28         return siz;
--[ 2021.09.28.11.28.39.868.0 ]--
r 28         return size;
--[ 2021.09.28.11.29.21.508.0 ]--
r 24     public Steque() { }
--[ 2021.09.28.11.30.42.131.0 ]--
r 33         return s;
--[ 2021.09.28.11.30.42.315.0 ]--
r 33         return si;
--[ 2021.09.28.11.30.42.561.0 ]--
r 33         return siz;
--[ 2021.09.28.11.30.42.820.0 ]--
r 33         return size;
--[ 2021.09.28.11.30.43.007.0 ]--
r 33         return size ;
--[ 2021.09.28.11.30.43.420.0 ]--
r 33         return size;
--[ 2021.09.28.11.30.43.646.0 ]--
r 33         return size=;
--[ 2021.09.28.11.30.43.787.0 ]--
r 33         return size==;
--[ 2021.09.28.11.30.44.506.0 ]--
r 33         return size==0;
--[ 2021.09.28.11.31.01.012.0 ]--
UpdateTree (AD): 6 0
+ /out/production/P02_DataTypes/algs4.jar
+ /out/production/P02_DataTypes/stdlib.jar
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.09.28.11.31.01.015.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.09.28.11.49.22.731.0 ]--
DisposeComponent
--[ 2021.09.29.19.45.26.353.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.09.29.19.45.26.437.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/OnePointerQueue.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.cos265
/readme.html
/P02_DataTypes.iml

--[ 2021.09.29.19.45.26.440.0 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.29.19.45.26.443.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.09.29.19.45.26.446.0 ]--
InitFile: /.cos265


--[ 2021.09.29.19.45.26.448.0 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;

import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    public int opcount = 0;
    public int size =0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {

    }

    // pushes item to top of steque
    public void push(Item item) {

    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {

    }
}

--[ 2021.09.29.19.45.26.452.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.09.29.19.45.55.141.0 ]--
UpdateTree (AD): 1 0
+ /.idea/vcs.xml

--[ 2021.09.29.19.45.55.659.0 ]--
DisposeComponent
--[ 2021.09.30.21.22.49.982.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.09.30.21.22.50.058.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/OnePointerQueue.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.cos265
/readme.html
/P02_DataTypes.iml

--[ 2021.09.30.21.22.50.063.0 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.30.21.22.50.066.0 ]--
InitFile: /.cos265


--[ 2021.09.30.21.22.50.070.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.09.30.21.22.50.076.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.09.30.21.22.50.079.0 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;

import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    public int opcount = 0;
    public int size =0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {

    }

    // pushes item to top of steque
    public void push(Item item) {

    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {

    }
}

--[ 2021.09.30.21.22.59.900.0 ]--
DisposeComponent
--[ 2021.09.30.22.03.25.287.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.09.30.22.03.25.304.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/OnePointerQueue.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.cos265
/readme.html
/P02_DataTypes.iml

--[ 2021.09.30.22.03.25.306.0 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.09.30.22.03.25.310.0 ]--
InitFile: /.cos265


--[ 2021.09.30.22.03.25.312.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.09.30.22.03.25.314.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.09.30.22.03.25.317.0 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;

import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    public int opcount = 0;
    public int size =0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {

    }

    // pushes item to top of steque
    public void push(Item item) {

    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {

    }
}

--[ 2021.09.30.22.04.09.001.0 ]--
DisposeComponent
--[ 2021.10.01.13.20.31.871.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.10.01.13.20.31.954.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/OnePointerQueue.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.cos265
/readme.html
/P02_DataTypes.iml

--[ 2021.10.01.13.20.31.957.0 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.01.13.20.31.962.0 ]--
InitFile: /.cos265


--[ 2021.10.01.13.20.31.968.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.10.01.13.20.31.970.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.10.01.13.20.31.973.0 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;

import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    public int opcount = 0;
    public int size =0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {

    }

    // pushes item to top of steque
    public void push(Item item) {

    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {

    }
}

--[ 2021.10.01.13.20.41.602.0 ]--
DisposeComponent
--[ 2021.10.05.10.00.24.535.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.10.05.10.00.24.556.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/OnePointerQueue.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.cos265
/readme.html
/P02_DataTypes.iml

--[ 2021.10.05.10.00.24.560.0 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.05.10.00.24.564.0 ]--
InitFile: /.cos265


--[ 2021.10.05.10.00.24.567.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.10.05.10.00.24.571.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.10.05.10.00.24.573.0 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;

import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    public int opcount = 0;
    public int size =0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {

    }

    // pushes item to top of steque
    public void push(Item item) {

    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {

    }
}

--[ 2021.10.05.10.22.27.981.0 ]--
:/src/Steque.java
r 38     
--[ 2021.10.05.10.22.28.280.0 ]--
r 38         
--[ 2021.10.05.10.23.15.729.0 ]--
r 38         N
--[ 2021.10.05.10.23.16.170.0 ]--
r 38         No
--[ 2021.10.05.10.23.16.286.0 ]--
r 38         Nod
--[ 2021.10.05.10.23.16.564.0 ]--
r 38         Node
--[ 2021.10.05.10.23.18.549.0 ]--
r 38         Node<>
--[ 2021.10.05.10.23.19.203.0 ]--
r 38         Node<I>
--[ 2021.10.05.10.23.19.401.0 ]--
r 38         Node<It>
--[ 2021.10.05.10.23.19.939.0 ]--
r 38         Node<Item>
--[ 2021.10.05.10.23.22.126.0 ]--
r 38         Node<Item> 
--[ 2021.10.05.10.23.29.461.0 ]--
r 38         Node<Item>
--[ 2021.10.05.10.23.29.766.0 ]--
r 38         Node<Item>/.
--[ 2021.10.05.10.23.30.225.0 ]--
r 38         Node<Item>/
--[ 2021.10.05.10.23.30.343.0 ]--
r 38         Node<Item>
--[ 2021.10.05.10.23.30.574.0 ]--
r 38         Node<Item>/
--[ 2021.10.05.10.23.31.077.0 ]--
r 38         Node<Item>
--[ 2021.10.05.10.23.31.329.0 ]--
r 38         Node<Item>.
--[ 2021.10.05.10.23.32.137.0 ]--
r 38         Node<Item>
--[ 2021.10.05.10.23.34.062.0 ]--
r 38         Node<Item> 
--[ 2021.10.05.10.23.34.350.0 ]--
r 38         Node<Item> n
--[ 2021.10.05.10.23.35.637.0 ]--
r 38         Node<Item> ne
--[ 2021.10.05.10.23.36.166.0 ]--
r 38         Node<Item> nex
--[ 2021.10.05.10.23.36.973.0 ]--
r 38         Node<Item> ne
--[ 2021.10.05.10.23.37.248.0 ]--
r 38         Node<Item> n
--[ 2021.10.05.10.23.37.443.0 ]--
r 38         Node<Item> 
--[ 2021.10.05.10.23.52.295.0 ]--
r 38         Node<Item>
--[ 2021.10.05.10.23.52.477.0 ]--
r 38         Node<Item
--[ 2021.10.05.10.23.52.645.0 ]--
r 38         Node<Ite
--[ 2021.10.05.10.23.52.798.0 ]--
r 38         Node<It
--[ 2021.10.05.10.23.52.948.0 ]--
r 38         Node<I
--[ 2021.10.05.10.23.53.124.0 ]--
r 38         Node<
--[ 2021.10.05.10.23.53.837.0 ]--
r 38         Node
--[ 2021.10.05.10.23.54.142.0 ]--
r 38         Nod
--[ 2021.10.05.10.23.54.314.0 ]--
r 38         No
--[ 2021.10.05.10.23.54.470.0 ]--
r 38         N
--[ 2021.10.05.10.23.54.605.0 ]--
r 38         
--[ 2021.10.05.10.23.55.594.0 ]--
r 38         i
--[ 2021.10.05.10.23.55.879.0 ]--
r 38         it
--[ 2021.10.05.10.23.56.007.0 ]--
r 38         ite
--[ 2021.10.05.10.23.56.118.0 ]--
r 38         item
--[ 2021.10.05.10.23.56.361.0 ]--
r 38         item.
--[ 2021.10.05.10.23.57.173.0 ]--
r 38         item.n
--[ 2021.10.05.10.23.57.644.0 ]--
r 38         item.ne
--[ 2021.10.05.10.23.58.182.0 ]--
r 38         item.nex
--[ 2021.10.05.10.23.58.631.0 ]--
r 38         item.ne
--[ 2021.10.05.10.23.58.767.0 ]--
r 38         item.n
--[ 2021.10.05.10.23.58.926.0 ]--
r 38         item.
--[ 2021.10.05.10.23.59.318.0 ]--
r 38         item
--[ 2021.10.05.10.23.59.549.0 ]--
r 38         ite
--[ 2021.10.05.10.23.59.726.0 ]--
r 38         it
--[ 2021.10.05.10.23.59.870.0 ]--
r 38         i
--[ 2021.10.05.10.24.00.125.0 ]--
r 38         
--[ 2021.10.05.10.24.20.943.0 ]--
r 38         i
--[ 2021.10.05.10.24.21.045.0 ]--
r 38         it
--[ 2021.10.05.10.24.21.223.0 ]--
r 38         ite
--[ 2021.10.05.10.24.21.306.0 ]--
r 38         item
--[ 2021.10.05.10.24.21.550.0 ]--
r 38         item.
--[ 2021.10.05.10.24.25.668.0 ]--
r 38         item.i
--[ 2021.10.05.10.24.25.821.0 ]--
r 38         item.it
--[ 2021.10.05.10.24.26.826.0 ]--
r 38         item.i
--[ 2021.10.05.10.24.26.971.0 ]--
r 38         item.
--[ 2021.10.05.10.24.27.391.0 ]--
r 38         item.n
--[ 2021.10.05.10.24.27.435.0 ]--
r 38         item.ne
--[ 2021.10.05.10.24.28.295.0 ]--
r 38         item.n
--[ 2021.10.05.10.24.28.452.0 ]--
r 38         item.
--[ 2021.10.05.10.24.30.694.0 ]--
r 38         item
--[ 2021.10.05.10.24.30.912.0 ]--
r 38         ite
--[ 2021.10.05.10.24.31.094.0 ]--
r 38         it
--[ 2021.10.05.10.24.31.282.0 ]--
r 38         i
--[ 2021.10.05.10.24.31.513.0 ]--
r 38         
--[ 2021.10.05.10.24.38.325.0 ]--
r 38         i
--[ 2021.10.05.10.24.38.437.0 ]--
r 38         it
--[ 2021.10.05.10.24.38.675.0 ]--
r 38         ite
--[ 2021.10.05.10.24.38.750.0 ]--
r 38         item
--[ 2021.10.05.10.24.38.878.0 ]--
r 38         item.
--[ 2021.10.05.10.24.39.525.0 ]--
r 38         item.n
--[ 2021.10.05.10.24.39.619.0 ]--
r 38         item.ne
--[ 2021.10.05.10.24.40.748.0 ]--
r 38         item.nex
--[ 2021.10.05.10.24.41.676.0 ]--
r 38         item.ne
--[ 2021.10.05.10.24.41.833.0 ]--
r 38         item.n
--[ 2021.10.05.10.24.41.978.0 ]--
r 38         item.
--[ 2021.10.05.10.24.42.126.0 ]--
r 38         item
--[ 2021.10.05.10.24.42.280.0 ]--
r 38         ite
--[ 2021.10.05.10.24.42.439.0 ]--
r 38         it
--[ 2021.10.05.10.24.42.566.0 ]--
r 38         i
--[ 2021.10.05.10.24.42.701.0 ]--
r 38         
--[ 2021.10.05.10.24.42.935.0 ]--
r 38         t
--[ 2021.10.05.10.24.43.111.0 ]--
r 38         th
--[ 2021.10.05.10.24.43.134.0 ]--
r 38         thi
--[ 2021.10.05.10.24.43.395.0 ]--
r 38         this
--[ 2021.10.05.10.24.43.714.0 ]--
r 38         this.
--[ 2021.10.05.10.24.44.169.0 ]--
r 38         this.i
--[ 2021.10.05.10.24.44.609.0 ]--
r 38         this.it
--[ 2021.10.05.10.24.45.907.0 ]--
r 38         this.i
--[ 2021.10.05.10.24.46.047.0 ]--
r 38         this.
--[ 2021.10.05.10.24.46.278.0 ]--
r 38         this.n
--[ 2021.10.05.10.24.46.661.0 ]--
r 38         this.ne
--[ 2021.10.05.10.24.47.246.0 ]--
r 38         this.n
--[ 2021.10.05.10.24.47.380.0 ]--
r 38         this.
--[ 2021.10.05.10.24.47.499.0 ]--
r 38         this
--[ 2021.10.05.10.24.47.655.0 ]--
r 38         thi
--[ 2021.10.05.10.24.47.781.0 ]--
r 38         th
--[ 2021.10.05.10.24.47.982.0 ]--
r 38         t
--[ 2021.10.05.10.24.48.253.0 ]--
r 38         
--[ 2021.10.05.10.29.03.871.0 ]--
r 38         i
--[ 2021.10.05.10.29.03.929.0 ]--
r 38         if
--[ 2021.10.05.10.29.04.046.0 ]--
r 38         if 
--[ 2021.10.05.10.29.06.876.0 ]--
r 38         if s
--[ 2021.10.05.10.29.08.363.0 ]--
r 38         if 
--[ 2021.10.05.10.29.09.034.0 ]--
r 38         if
--[ 2021.10.05.10.29.09.372.0 ]--
r 38         if 
--[ 2021.10.05.10.29.09.722.0 ]--
r 38         if ()
--[ 2021.10.05.10.29.10.281.0 ]--
r 38         if (i)
--[ 2021.10.05.10.29.10.326.0 ]--
r 38         if (is)
--[ 2021.10.05.10.29.10.956.0 ]--
r 38         if (isEmpty)
--[ 2021.10.05.10.29.10.967.0 ]--
r 38         if (isEmpty())
--[ 2021.10.05.10.29.12.308.0 ]--
r 38         if (isEmpty()) 
--[ 2021.10.05.10.29.12.920.0 ]--
r 38         if (isEmpty()) {
--[ 2021.10.05.10.29.13.317.0 ]--
+ 39 
+ 40 }
--[ 2021.10.05.10.29.13.351.0 ]--
r 40         }
--[ 2021.10.05.10.29.13.373.0 ]--
r 39             
--[ 2021.10.05.10.29.15.359.0 ]--
r 39             i
--[ 2021.10.05.10.29.16.199.0 ]--
r 39             item
--[ 2021.10.05.10.29.18.123.0 ]--
r 39             ite
--[ 2021.10.05.10.29.18.283.0 ]--
r 39             it
--[ 2021.10.05.10.29.18.475.0 ]--
r 39             i
--[ 2021.10.05.10.29.18.973.0 ]--
r 39             
--[ 2021.10.05.10.29.19.788.0 ]--
r 39             f
--[ 2021.10.05.10.29.20.425.0 ]--
r 39             first
--[ 2021.10.05.10.29.20.964.0 ]--
r 39             first 
--[ 2021.10.05.10.29.21.555.0 ]--
r 39             first =
--[ 2021.10.05.10.29.22.003.0 ]--
r 39             first = 
--[ 2021.10.05.10.29.23.438.0 ]--
r 39             first = i
--[ 2021.10.05.10.29.24.099.0 ]--
r 39             first = item
--[ 2021.10.05.10.29.25.157.0 ]--
r 39             first = item;
--[ 2021.10.05.10.29.29.744.0 ]--
r 39             tfirst = item;
--[ 2021.10.05.10.29.29.848.0 ]--
r 39             thfirst = item;
--[ 2021.10.05.10.29.29.929.0 ]--
r 39             thifirst = item;
--[ 2021.10.05.10.29.30.158.0 ]--
r 39             thisfirst = item;
--[ 2021.10.05.10.29.30.311.0 ]--
r 39             this.first = item;
--[ 2021.10.05.10.29.31.967.0 ]--
r 39             thisfirst = item;
--[ 2021.10.05.10.29.32.118.0 ]--
r 39             thifirst = item;
--[ 2021.10.05.10.29.32.280.0 ]--
r 39             thfirst = item;
--[ 2021.10.05.10.29.32.429.0 ]--
r 39             tfirst = item;
--[ 2021.10.05.10.29.32.600.0 ]--
r 39             first = item;
--[ 2021.10.05.10.31.50.003.0 ]--
+ 40             
--[ 2021.10.05.10.31.50.860.0 ]--
r 40             l
--[ 2021.10.05.10.31.50.951.0 ]--
r 40             la
--[ 2021.10.05.10.31.51.122.0 ]--
r 40             las
--[ 2021.10.05.10.31.51.349.0 ]--
r 40             last
--[ 2021.10.05.10.31.51.714.0 ]--
r 40             last 
--[ 2021.10.05.10.31.52.421.0 ]--
r 40             last =
--[ 2021.10.05.10.31.52.555.0 ]--
r 40             last = 
--[ 2021.10.05.10.31.53.153.0 ]--
r 40             last = i
--[ 2021.10.05.10.31.53.299.0 ]--
r 40             last = it
--[ 2021.10.05.10.31.53.545.0 ]--
r 40             last = ite
--[ 2021.10.05.10.31.53.660.0 ]--
r 40             last = item
--[ 2021.10.05.10.31.54.346.0 ]--
r 40             last = item;
--[ 2021.10.05.10.32.09.211.0 ]--
r 40             last = Nitem;
--[ 2021.10.05.10.32.09.541.0 ]--
r 40             last = Noitem;
--[ 2021.10.05.10.32.10.258.0 ]--
r 40             last = Noditem;
--[ 2021.10.05.10.32.10.465.0 ]--
r 40             last = Nodeitem;
--[ 2021.10.05.10.32.11.605.0 ]--
r 40             last = Node.item;
--[ 2021.10.05.10.32.13.021.0 ]--
r 40             last = Nodeitem;
--[ 2021.10.05.10.32.13.675.0 ]--
r 40             last = Node<item;
--[ 2021.10.05.10.32.14.542.0 ]--
r 40             last = Node<Iitem;
--[ 2021.10.05.10.32.14.760.0 ]--
r 40             last = Node<Ititem;
--[ 2021.10.05.10.32.14.970.0 ]--
r 40             last = Node<Iteitem;
--[ 2021.10.05.10.32.15.112.0 ]--
r 40             last = Node<Itemitem;
--[ 2021.10.05.10.32.16.301.0 ]--
r 40             last = Node<Item>item;
--[ 2021.10.05.10.32.17.181.0 ]--
r 40             last = Node<Item>.item;
--[ 2021.10.05.10.32.21.339.0 ]--
r 40             last = Node<Ite>.item;
--[ 2021.10.05.10.32.21.490.0 ]--
r 40             last = Node<It>.item;
--[ 2021.10.05.10.32.21.640.0 ]--
r 40             last = Node<I>.item;
--[ 2021.10.05.10.32.21.748.0 ]--
r 40             last = Node<>.item;
--[ 2021.10.05.10.32.22.340.0 ]--
r 40             last = Node<i>.item;
--[ 2021.10.05.10.32.22.494.0 ]--
r 40             last = Node<it>.item;
--[ 2021.10.05.10.32.22.684.0 ]--
r 40             last = Node<ite>.item;
--[ 2021.10.05.10.32.22.733.0 ]--
r 40             last = Node<item>.item;
--[ 2021.10.05.10.32.24.963.0 ]--
r 40             last = Node<ite>.item;
--[ 2021.10.05.10.32.25.087.0 ]--
r 40             last = Node<it>.item;
--[ 2021.10.05.10.32.25.206.0 ]--
r 40             last = Node<i>.item;
--[ 2021.10.05.10.32.25.368.0 ]--
r 40             last = Node<>.item;
--[ 2021.10.05.10.32.25.900.0 ]--
r 40             last = Node<I>.item;
--[ 2021.10.05.10.32.26.158.0 ]--
r 40             last = Node<It>.item;
--[ 2021.10.05.10.32.26.290.0 ]--
r 40             last = Node<Ite>.item;
--[ 2021.10.05.10.32.26.376.0 ]--
r 40             last = Node<Item>.item;
--[ 2021.10.05.10.32.31.547.0 ]--
r 40             last = Node<Item.item;
--[ 2021.10.05.10.32.32.052.0 ]--
r 40             last = Node<Ite.item;
--[ 2021.10.05.10.32.32.080.0 ]--
r 40             last = Node<It.item;
--[ 2021.10.05.10.32.32.113.0 ]--
r 40             last = Node<I.item;
--[ 2021.10.05.10.32.32.138.0 ]--
r 40             last = Node<.item;
--[ 2021.10.05.10.32.32.165.0 ]--
r 40             last = Node.item;
--[ 2021.10.05.10.32.47.730.0 ]--
r 40             last = Nodeitem;
--[ 2021.10.05.10.32.47.867.0 ]--
r 40             last = Noditem;
--[ 2021.10.05.10.32.48.003.0 ]--
r 40             last = Noitem;
--[ 2021.10.05.10.32.48.218.0 ]--
r 40             last = Nitem;
--[ 2021.10.05.10.32.48.487.0 ]--
r 40             last = item;
--[ 2021.10.05.10.33.03.990.0 ]--
r 40             
--[ 2021.10.05.10.33.05.214.0 ]--
+ 41         }\
r 42         
--[ 2021.10.05.10.33.06.354.0 ]--
r 42         last = item;
--[ 2021.10.05.10.33.07.368.0 ]--
r 41         }
--[ 2021.10.05.10.33.08.533.0 ]--
- 40
--[ 2021.10.05.10.33.42.458.0 ]--
r 39             first. = item;
--[ 2021.10.05.10.33.42.906.0 ]--
r 39             first.i = item;
--[ 2021.10.05.10.33.43.047.0 ]--
r 39             first.it = item;
--[ 2021.10.05.10.33.44.035.0 ]--
r 39             first.item = item;
--[ 2021.10.05.10.34.04.780.0 ]--
+ 39             
--[ 2021.10.05.10.34.06.740.0 ]--
r 39             f
--[ 2021.10.05.10.34.06.866.0 ]--
r 39             fi
--[ 2021.10.05.10.34.06.959.0 ]--
r 39             fir
--[ 2021.10.05.10.34.07.769.0 ]--
r 39             first
--[ 2021.10.05.10.34.08.237.0 ]--
r 39             first 
--[ 2021.10.05.10.34.08.504.0 ]--
r 39             first =
--[ 2021.10.05.10.34.08.616.0 ]--
r 39             first = 
--[ 2021.10.05.10.34.09.268.0 ]--
r 39             first = n
--[ 2021.10.05.10.34.09.307.0 ]--
r 39             first = ne
--[ 2021.10.05.10.34.09.541.0 ]--
r 39             first = new
--[ 2021.10.05.10.34.09.662.0 ]--
r 39             first = new 
--[ 2021.10.05.10.34.10.182.0 ]--
r 39             first = new N
--[ 2021.10.05.10.34.11.056.0 ]--
r 39             first = new Node
--[ 2021.10.05.10.34.11.063.0 ]--
r 39             first = new Node<>
--[ 2021.10.05.10.34.11.071.0 ]--
r 39             first = new Node<>()
--[ 2021.10.05.10.34.15.181.0 ]--
r 39             first = new Node<>(i)
--[ 2021.10.05.10.34.17.651.0 ]--
r 39             first = new Node<>(item)
--[ 2021.10.05.10.34.17.998.0 ]--
r 39             first = new Node<>(item,)
--[ 2021.10.05.10.34.18.188.0 ]--
r 39             first = new Node<>(item, )
--[ 2021.10.05.10.34.18.400.0 ]--
r 39             first = new Node<>(item, n)
--[ 2021.10.05.10.34.18.573.0 ]--
r 39             first = new Node<>(item, nu)
--[ 2021.10.05.10.34.18.764.0 ]--
r 39             first = new Node<>(item, nul)
--[ 2021.10.05.10.34.18.906.0 ]--
r 39             first = new Node<>(item, null)
--[ 2021.10.05.10.34.22.563.0 ]--
r 39             first = new Node<>(item, nul)
--[ 2021.10.05.10.34.23.069.0 ]--
r 39             first = new Node<>(item, nu)
--[ 2021.10.05.10.34.23.105.0 ]--
r 39             first = new Node<>(item, n)
--[ 2021.10.05.10.34.23.139.0 ]--
r 39             first = new Node<>(item, )
--[ 2021.10.05.10.34.23.187.0 ]--
r 39             first = new Node<>(item,)
--[ 2021.10.05.10.34.23.209.0 ]--
r 39             first = new Node<>(item)
--[ 2021.10.05.10.34.23.239.0 ]--
r 39             first = new Node<>(ite)
--[ 2021.10.05.10.34.23.621.0 ]--
r 39             first = new Node<>(it)
--[ 2021.10.05.10.34.24.243.0 ]--
r 39             first = new Node<>(ite)
--[ 2021.10.05.10.34.24.448.0 ]--
r 39             first = new Node<>(item)
--[ 2021.10.05.10.34.28.901.0 ]--
r 39             first = new Node<>(item);
--[ 2021.10.05.10.34.35.879.0 ]--
r 40             
--[ 2021.10.05.10.34.36.073.0 ]--
- 40
--[ 2021.10.05.10.34.56.982.0 ]--
r 41         
--[ 2021.10.05.10.34.59.059.0 ]--
r 41         l
--[ 2021.10.05.10.34.59.175.0 ]--
r 41         la
--[ 2021.10.05.10.34.59.666.0 ]--
r 41         las
--[ 2021.10.05.10.35.00.520.0 ]--
r 41         last
--[ 2021.10.05.10.35.03.755.0 ]--
r 41         las
--[ 2021.10.05.10.35.03.882.0 ]--
r 41         la
--[ 2021.10.05.10.35.04.026.0 ]--
r 41         l
--[ 2021.10.05.10.35.04.151.0 ]--
r 41         
--[ 2021.10.05.10.35.04.336.0 ]--
r 41         i
--[ 2021.10.05.10.35.04.442.0 ]--
r 41         if
--[ 2021.10.05.10.35.04.489.0 ]--
r 41         if 
--[ 2021.10.05.10.35.05.056.0 ]--
r 41         if l
--[ 2021.10.05.10.35.05.104.0 ]--
r 41         if la
--[ 2021.10.05.10.35.05.478.0 ]--
r 41         if l
--[ 2021.10.05.10.35.05.590.0 ]--
r 41         if 
--[ 2021.10.05.10.35.06.078.0 ]--
r 41         if ()
--[ 2021.10.05.10.35.06.375.0 ]--
r 41         if (l)
--[ 2021.10.05.10.35.06.443.0 ]--
r 41         if (la)
--[ 2021.10.05.10.35.07.025.0 ]--
r 41         if (last)
--[ 2021.10.05.10.35.07.430.0 ]--
r 41         if (last )
--[ 2021.10.05.10.35.07.698.0 ]--
r 41         if (last =)
--[ 2021.10.05.10.35.07.830.0 ]--
r 41         if (last ==)
--[ 2021.10.05.10.35.08.367.0 ]--
r 41         if (last == )
--[ 2021.10.05.10.35.08.555.0 ]--
r 41         if (last == n)
--[ 2021.10.05.10.35.09.385.0 ]--
r 41         if (last == null)
--[ 2021.10.05.10.35.10.221.0 ]--
r 41         if (last == null) 
--[ 2021.10.05.10.35.14.795.0 ]--
r 41         if (last == null) {
--[ 2021.10.05.10.35.14.971.0 ]--
+ 42 
+ 43 }
--[ 2021.10.05.10.35.14.980.0 ]--
r 43         }
--[ 2021.10.05.10.35.15.008.0 ]--
r 42             
--[ 2021.10.05.10.35.17.556.0 ]--
r 42             l
--[ 2021.10.05.10.35.17.622.0 ]--
r 42             la
--[ 2021.10.05.10.35.18.097.0 ]--
r 42             last
--[ 2021.10.05.10.35.18.475.0 ]--
r 42             last 
--[ 2021.10.05.10.35.19.019.0 ]--
r 42             last =
--[ 2021.10.05.10.35.19.152.0 ]--
r 42             last = 
--[ 2021.10.05.10.35.19.483.0 ]--
r 42             last = n
--[ 2021.10.05.10.35.20.203.0 ]--
r 42             last = null
--[ 2021.10.05.10.35.20.728.0 ]--
r 42             last = nul
--[ 2021.10.05.10.35.20.850.0 ]--
r 42             last = nu
--[ 2021.10.05.10.35.20.988.0 ]--
r 42             last = n
--[ 2021.10.05.10.35.21.083.0 ]--
r 42             last = ne
--[ 2021.10.05.10.35.21.670.0 ]--
r 42             last = new
--[ 2021.10.05.10.35.21.677.0 ]--
r 42             last = new 
--[ 2021.10.05.10.35.22.300.0 ]--
r 42             last = new  
--[ 2021.10.05.10.35.22.558.0 ]--
r 42             last = new  N
--[ 2021.10.05.10.35.22.904.0 ]--
r 42             last = new  
--[ 2021.10.05.10.35.23.030.0 ]--
r 42             last = new 
--[ 2021.10.05.10.35.23.395.0 ]--
r 42             last = new N
--[ 2021.10.05.10.35.24.014.0 ]--
r 42             last = new Node
--[ 2021.10.05.10.35.24.020.0 ]--
r 42             last = new Node<>
--[ 2021.10.05.10.35.24.026.0 ]--
r 42             last = new Node<>()
--[ 2021.10.05.10.35.26.458.0 ]--
r 42             last = new Node<>(i)
--[ 2021.10.05.10.35.27.074.0 ]--
r 42             last = new Node<>(item)
--[ 2021.10.05.10.35.29.916.0 ]--
r 42             last = new Node<>(item) 
--[ 2021.10.05.10.35.30.674.0 ]--
r 42             last = new Node<>(item)
--[ 2021.10.05.10.35.30.971.0 ]--
r 42             last = new Node<>(item);
--[ 2021.10.05.10.35.31.940.0 ]--
r 43         } 
--[ 2021.10.05.10.35.32.086.0 ]--
r 43         } e
--[ 2021.10.05.10.35.32.277.0 ]--
r 43         } el
--[ 2021.10.05.10.35.32.760.0 ]--
r 43         } else
--[ 2021.10.05.10.35.32.767.0 ]--
r 43         } else 
--[ 2021.10.05.10.35.33.923.0 ]--
r 43         } else {
--[ 2021.10.05.10.35.34.116.0 ]--
+ 44 
+ 45 }
--[ 2021.10.05.10.35.34.125.0 ]--
r 45         }
--[ 2021.10.05.10.35.34.138.0 ]--
r 44             
--[ 2021.10.05.10.35.34.783.0 ]--
r 44             l
--[ 2021.10.05.10.35.35.377.0 ]--
r 44             last
--[ 2021.10.05.10.35.36.264.0 ]--
r 44             last.
--[ 2021.10.05.10.35.39.445.0 ]--
r 44             last
--[ 2021.10.05.10.36.10.180.0 ]--
r 44             last 
--[ 2021.10.05.10.36.10.250.0 ]--
r 44             last =
--[ 2021.10.05.10.36.10.351.0 ]--
r 44             last = 
--[ 2021.10.05.10.36.14.716.0 ]--
r 44             last = i
--[ 2021.10.05.10.36.14.738.0 ]--
r 44             last = it
--[ 2021.10.05.10.36.15.633.0 ]--
r 44             last = item
--[ 2021.10.05.10.36.16.634.0 ]--
r 44             last = item;
--[ 2021.10.05.10.36.29.105.0 ]--
r 44             last. = item;
--[ 2021.10.05.10.36.30.244.0 ]--
r 44             last.i = item;
--[ 2021.10.05.10.36.30.332.0 ]--
r 44             last.it = item;
--[ 2021.10.05.10.36.30.802.0 ]--
r 44             last.item = item;
--[ 2021.10.05.10.37.30.784.0 ]--
+ 44             
--[ 2021.10.05.10.37.31.519.0 ]--
r 44             i
--[ 2021.10.05.10.37.31.634.0 ]--
r 44             it
--[ 2021.10.05.10.37.32.352.0 ]--
r 44             item
--[ 2021.10.05.10.37.41.938.0 ]--
r 44             ite
--[ 2021.10.05.10.37.42.115.0 ]--
r 44             it
--[ 2021.10.05.10.37.42.410.0 ]--
r 44             i
--[ 2021.10.05.10.37.42.714.0 ]--
r 44             
--[ 2021.10.05.10.37.56.107.0 ]--
r 44             .
--[ 2021.10.05.10.37.56.971.0 ]--
r 44             .n
--[ 2021.10.05.10.37.57.287.0 ]--
r 44             .ne
--[ 2021.10.05.10.37.57.649.0 ]--
r 44             .nex
--[ 2021.10.05.10.37.57.943.0 ]--
r 44             .next
--[ 2021.10.05.10.37.58.095.0 ]--
r 44             .next 
--[ 2021.10.05.10.37.58.695.0 ]--
r 44             .next =
--[ 2021.10.05.10.37.58.850.0 ]--
r 44             .next = 
--[ 2021.10.05.10.37.59.234.0 ]--
r 44             .next = a
--[ 2021.10.05.10.37.59.389.0 ]--
r 44             .next = al
--[ 2021.10.05.10.37.59.723.0 ]--
r 44             .next = als
--[ 2021.10.05.10.38.00.315.0 ]--
r 44             .next = al
--[ 2021.10.05.10.38.00.467.0 ]--
r 44             .next = a
--[ 2021.10.05.10.38.00.577.0 ]--
r 44             .next = 
--[ 2021.10.05.10.38.00.834.0 ]--
r 44             .next = l
--[ 2021.10.05.10.38.00.938.0 ]--
r 44             .next = la
--[ 2021.10.05.10.38.01.601.0 ]--
r 44             .next = last
--[ 2021.10.05.10.38.02.723.0 ]--
r 44             .next = last.
--[ 2021.10.05.10.38.04.060.0 ]--
r 44             .next = last.item
--[ 2021.10.05.10.38.04.615.0 ]--
r 44             .next = last.item;
--[ 2021.10.05.10.38.17.906.0 ]--
+ 40             
--[ 2021.10.05.10.38.18.555.0 ]--
r 40             l
--[ 2021.10.05.10.38.18.665.0 ]--
r 40             la
--[ 2021.10.05.10.38.19.121.0 ]--
r 40             last
--[ 2021.10.05.10.38.19.379.0 ]--
r 40             last 
--[ 2021.10.05.10.38.19.915.0 ]--
r 40             last =
--[ 2021.10.05.10.38.20.020.0 ]--
r 40             last = 
--[ 2021.10.05.10.38.20.162.0 ]--
r 40             last = f
--[ 2021.10.05.10.38.20.712.0 ]--
r 40             last = first
--[ 2021.10.05.10.38.23.290.0 ]--
r 40             last = first;
--[ 2021.10.05.10.38.56.278.0 ]--
- 42
- 42
r 42         
--[ 2021.10.05.10.38.56.667.0 ]--
- 42
--[ 2021.10.05.10.38.59.979.0 ]--
r 42             l.next = last.item;
--[ 2021.10.05.10.39.00.075.0 ]--
r 42             la.next = last.item;
--[ 2021.10.05.10.39.00.576.0 ]--
r 42             last.next = last.item;
--[ 2021.10.05.10.39.03.332.0 ]--
r 42         last.next = last.item;
--[ 2021.10.05.10.39.04.229.0 ]--
r 43         last.item = item;
--[ 2021.10.05.10.39.06.002.0 ]--
r 44         
--[ 2021.10.05.10.39.06.638.0 ]--
- 44
--[ 2021.10.05.10.39.18.185.0 ]--
r 41         } 
--[ 2021.10.05.10.39.18.331.0 ]--
r 41         } e
--[ 2021.10.05.10.39.18.419.0 ]--
r 41         } el
--[ 2021.10.05.10.39.18.996.0 ]--
r 41         } else
--[ 2021.10.05.10.39.19.008.0 ]--
r 41         } else 
--[ 2021.10.05.10.39.19.740.0 ]--
r 41         } else {
--[ 2021.10.05.10.39.20.035.0 ]--
+ 42 
+ 43 }
--[ 2021.10.05.10.39.20.044.0 ]--
r 43         }
--[ 2021.10.05.10.39.20.070.0 ]--
r 42             
--[ 2021.10.05.10.39.24.296.0 ]--
- 44
r 44         
--[ 2021.10.05.10.39.24.573.0 ]--
- 44
--[ 2021.10.05.10.39.24.848.0 ]--
r 43         
--[ 2021.10.05.10.39.25.812.0 ]--
r 43         }
--[ 2021.10.05.10.39.25.833.0 ]--
r 42 
--[ 2021.10.05.10.39.26.867.0 ]--
r 42     
--[ 2021.10.05.10.39.27.175.0 ]--
r 42         
--[ 2021.10.05.10.39.27.508.0 ]--
r 42             
--[ 2021.10.05.10.39.28.170.0 ]--
+ 42             last.next = last.item;
r 43         last.item = item;
--[ 2021.10.05.10.39.28.178.0 ]--
r 43             last.item = item;
--[ 2021.10.05.10.40.53.338.0 ]--
r 42             i.next = last.item;
--[ 2021.10.05.10.40.54.340.0 ]--
r 42             item.next = last.item;
--[ 2021.10.05.10.41.13.457.0 ]--
r 42             item.next = last.ite;
--[ 2021.10.05.10.41.13.566.0 ]--
r 42             item.next = last.it;
--[ 2021.10.05.10.41.13.709.0 ]--
r 42             item.next = last.i;
--[ 2021.10.05.10.41.13.837.0 ]--
r 42             item.next = last.;
--[ 2021.10.05.10.41.14.005.0 ]--
r 42             item.next = last;
--[ 2021.10.05.10.42.08.418.0 ]--
r 42             l.next = last;
--[ 2021.10.05.10.42.08.462.0 ]--
r 42             la.next = last;
--[ 2021.10.05.10.42.09.079.0 ]--
r 42             last.next = last;
--[ 2021.10.05.10.42.12.042.0 ]--
r 42             last.next = i;
--[ 2021.10.05.10.42.12.141.0 ]--
r 42             last.next = it;
--[ 2021.10.05.10.42.12.632.0 ]--
r 42             last.next = item;
--[ 2021.10.05.10.42.22.078.0 ]--
r 43             f = item;
--[ 2021.10.05.10.42.22.202.0 ]--
r 43             fi = item;
--[ 2021.10.05.10.42.22.776.0 ]--
r 43             first = item;
--[ 2021.10.05.10.42.23.137.0 ]--
r 43             first. = item;
--[ 2021.10.05.10.42.23.908.0 ]--
r 43             first.i = item;
--[ 2021.10.05.10.42.25.241.0 ]--
r 43             first. = item;
--[ 2021.10.05.10.42.25.449.0 ]--
r 43             first = item;
--[ 2021.10.05.10.42.25.652.0 ]--
r 43             firs = item;
--[ 2021.10.05.10.42.25.823.0 ]--
r 43             fir = item;
--[ 2021.10.05.10.42.25.988.0 ]--
r 43             fi = item;
--[ 2021.10.05.10.42.26.417.0 ]--
r 43             f = item;
--[ 2021.10.05.10.42.26.819.0 ]--
r 43              = item;
--[ 2021.10.05.10.42.29.777.0 ]--
r 43              = item
--[ 2021.10.05.10.42.29.964.0 ]--
r 43              = ite
--[ 2021.10.05.10.42.30.108.0 ]--
r 43              = it
--[ 2021.10.05.10.42.30.268.0 ]--
r 43              = i
--[ 2021.10.05.10.42.30.409.0 ]--
r 43              = 
--[ 2021.10.05.10.42.30.574.0 ]--
r 43              =
--[ 2021.10.05.10.42.30.855.0 ]--
r 43              
--[ 2021.10.05.10.42.31.143.0 ]--
r 43             
--[ 2021.10.05.10.42.55.820.0 ]--
r 42             last.next = nitem;
--[ 2021.10.05.10.42.56.157.0 ]--
r 42             last.next = newitem;
--[ 2021.10.05.10.43.04.729.0 ]--
r 42             last.next = new item;
--[ 2021.10.05.10.43.05.550.0 ]--
r 42             last.next = new Nitem;
--[ 2021.10.05.10.43.06.437.0 ]--
r 42             last.next = new Nodeitem;
--[ 2021.10.05.10.43.06.447.0 ]--
r 42             last.next = new Node item;
--[ 2021.10.05.10.43.06.453.0 ]--
r 42             last.next = new Node<>item;
--[ 2021.10.05.10.43.06.461.0 ]--
r 42             last.next = new Node<>()item;
--[ 2021.10.05.10.43.07.866.0 ]--
r 42             last.next = new Node<>(i)item;
--[ 2021.10.05.10.43.07.954.0 ]--
r 42             last.next = new Node<>(it)item;
--[ 2021.10.05.10.43.08.478.0 ]--
r 42             last.next = new Node<>(item)item;
--[ 2021.10.05.10.43.09.972.0 ]--
r 42             last.next = new Node<>(item);
--[ 2021.10.05.10.44.33.202.0 ]--
r 43             l
--[ 2021.10.05.10.44.33.326.0 ]--
r 43             la
--[ 2021.10.05.10.44.33.417.0 ]--
r 43             las
--[ 2021.10.05.10.44.33.743.0 ]--
r 43             last
--[ 2021.10.05.10.44.33.777.0 ]--
r 43             last 
--[ 2021.10.05.10.44.34.802.0 ]--
r 43             last =
--[ 2021.10.05.10.44.34.958.0 ]--
r 43             last = 
--[ 2021.10.05.10.44.35.121.0 ]--
r 43             last = l
--[ 2021.10.05.10.44.35.664.0 ]--
r 43             last = last
--[ 2021.10.05.10.44.35.868.0 ]--
r 43             last = last.
--[ 2021.10.05.10.44.36.828.0 ]--
r 43             last = last.next
--[ 2021.10.05.10.44.37.226.0 ]--
r 43             last = last.next;
--[ 2021.10.05.10.45.57.185.0 ]--
r 49     
--[ 2021.10.05.10.45.57.777.0 ]--
r 49         
--[ 2021.10.05.10.46.08.876.0 ]--
r 49         fi
--[ 2021.10.05.10.46.09.080.0 ]--
r 49         fi 
--[ 2021.10.05.10.46.09.583.0 ]--
r 49         fi
--[ 2021.10.05.10.46.09.710.0 ]--
r 49         f
--[ 2021.10.05.10.46.09.829.0 ]--
r 49         
--[ 2021.10.05.10.46.09.979.0 ]--
r 49         i
--[ 2021.10.05.10.46.10.080.0 ]--
r 49         if
--[ 2021.10.05.10.46.10.161.0 ]--
r 49         if 
--[ 2021.10.05.10.46.11.257.0 ]--
r 49         if ()
--[ 2021.10.05.10.46.12.024.0 ]--
r 49         if (i)
--[ 2021.10.05.10.46.12.185.0 ]--
r 49         if (is)
--[ 2021.10.05.10.46.12.649.0 ]--
r 49         if (isEmpty)
--[ 2021.10.05.10.46.12.664.0 ]--
r 49         if (isEmpty())
--[ 2021.10.05.10.46.14.622.0 ]--
r 49         if (isEmpty()) 
--[ 2021.10.05.10.46.15.058.0 ]--
r 49         if (isEmpty()) {
--[ 2021.10.05.10.46.15.262.0 ]--
+ 50 
+ 51 }
--[ 2021.10.05.10.46.15.287.0 ]--
r 51         }
--[ 2021.10.05.10.46.15.317.0 ]--
r 50             
--[ 2021.10.05.10.46.17.266.0 ]--
r 50             f
--[ 2021.10.05.10.46.17.400.0 ]--
r 50             fi
--[ 2021.10.05.10.46.17.465.0 ]--
r 50             fir
--[ 2021.10.05.10.46.17.950.0 ]--
r 50             firs
--[ 2021.10.05.10.46.18.187.0 ]--
r 50             firs 
--[ 2021.10.05.10.46.18.623.0 ]--
r 50             firs -
--[ 2021.10.05.10.46.18.761.0 ]--
r 50             firs - 
--[ 2021.10.05.10.46.19.235.0 ]--
r 50             firs -
--[ 2021.10.05.10.46.19.374.0 ]--
r 50             firs 
--[ 2021.10.05.10.46.19.504.0 ]--
r 50             firs
--[ 2021.10.05.10.46.19.651.0 ]--
r 50             fir
--[ 2021.10.05.10.46.19.787.0 ]--
r 50             fi
--[ 2021.10.05.10.46.19.923.0 ]--
r 50             f
--[ 2021.10.05.10.46.20.076.0 ]--
r 50             
--[ 2021.10.05.10.46.25.248.0 ]--
+ 50             first = new Node<>(item);
+ 51             last = first;
+ 52         } else {
+ 53             last.next = new Node<>(item);
r 54             last = last.next;
--[ 2021.10.05.10.46.29.250.0 ]--
- 53
r 53             
--[ 2021.10.05.10.46.42.714.0 ]--
r 53             f
--[ 2021.10.05.10.46.42.846.0 ]--
r 53             fi
--[ 2021.10.05.10.46.43.348.0 ]--
r 53             first
--[ 2021.10.05.10.46.44.006.0 ]--
r 53             first 
--[ 2021.10.05.10.46.44.124.0 ]--
r 53             first =
--[ 2021.10.05.10.46.44.234.0 ]--
r 53             first = 
--[ 2021.10.05.10.46.45.554.0 ]--
r 53             first = n
--[ 2021.10.05.10.46.45.618.0 ]--
r 53             first = ne
--[ 2021.10.05.10.46.46.440.0 ]--
r 53             first = new
--[ 2021.10.05.10.46.46.447.0 ]--
r 53             first = new 
--[ 2021.10.05.10.46.47.242.0 ]--
r 53             first = new N
--[ 2021.10.05.10.46.47.497.0 ]--
r 53             first = new No
--[ 2021.10.05.10.46.47.941.0 ]--
r 53             first = new Node
--[ 2021.10.05.10.46.47.946.0 ]--
r 53             first = new Node<>
--[ 2021.10.05.10.46.47.952.0 ]--
r 53             first = new Node<>()
--[ 2021.10.05.10.46.48.792.0 ]--
r 53             first = new Node<>(i)
--[ 2021.10.05.10.46.49.271.0 ]--
r 53             first = new Node<>(item)
--[ 2021.10.05.10.46.50.810.0 ]--
r 53             first = new Node<>(item);
--[ 2021.10.05.10.47.00.357.0 ]--
+ 53             
--[ 2021.10.05.10.47.13.185.0 ]--
r 53             t
--[ 2021.10.05.10.47.13.344.0 ]--
r 53             tm
--[ 2021.10.05.10.47.13.393.0 ]--
r 53             tmp
--[ 2021.10.05.10.47.13.877.0 ]--
r 53             tmp 
--[ 2021.10.05.10.47.14.323.0 ]--
r 53             tmp =
--[ 2021.10.05.10.47.14.429.0 ]--
r 53             tmp = 
--[ 2021.10.05.10.47.14.875.0 ]--
r 53             tmp = n
--[ 2021.10.05.10.47.15.853.0 ]--
r 53             tmp = 
--[ 2021.10.05.10.47.15.993.0 ]--
r 53             tmp =
--[ 2021.10.05.10.47.16.136.0 ]--
r 53             tmp 
--[ 2021.10.05.10.47.16.305.0 ]--
r 53             tmp
--[ 2021.10.05.10.47.16.452.0 ]--
r 53             tm
--[ 2021.10.05.10.47.16.595.0 ]--
r 53             t
--[ 2021.10.05.10.47.16.827.0 ]--
r 53             
--[ 2021.10.05.10.47.17.482.0 ]--
r 53             N
--[ 2021.10.05.10.47.17.688.0 ]--
r 53             No
--[ 2021.10.05.10.47.18.717.0 ]--
r 53             Nod
--[ 2021.10.05.10.47.18.966.0 ]--
r 53             Node
--[ 2021.10.05.10.47.21.079.0 ]--
r 53             Node<>
--[ 2021.10.05.10.47.21.733.0 ]--
r 53             Node<I>
--[ 2021.10.05.10.47.22.153.0 ]--
r 53             Node<It>
--[ 2021.10.05.10.47.22.515.0 ]--
r 53             Node<Item>
--[ 2021.10.05.10.47.23.682.0 ]--
r 53             Node<Item> 
--[ 2021.10.05.10.47.24.065.0 ]--
r 53             Node<Item> t
--[ 2021.10.05.10.47.25.112.0 ]--
r 53             Node<Item> tm
--[ 2021.10.05.10.47.25.235.0 ]--
r 53             Node<Item> tmp
--[ 2021.10.05.10.47.25.442.0 ]--
r 53             Node<Item> tmp 
--[ 2021.10.05.10.47.26.065.0 ]--
r 53             Node<Item> tmp =
--[ 2021.10.05.10.47.26.189.0 ]--
r 53             Node<Item> tmp = 
--[ 2021.10.05.10.47.26.677.0 ]--
r 53             Node<Item> tmp = n
--[ 2021.10.05.10.47.26.908.0 ]--
r 53             Node<Item> tmp = ne
--[ 2021.10.05.10.47.27.301.0 ]--
r 53             Node<Item> tmp = new
--[ 2021.10.05.10.47.27.320.0 ]--
r 53             Node<Item> tmp = new 
--[ 2021.10.05.10.47.27.549.0 ]--
r 53             Node<Item> tmp = new  
--[ 2021.10.05.10.47.28.116.0 ]--
r 53             Node<Item> tmp = new 
--[ 2021.10.05.10.47.28.405.0 ]--
r 53             Node<Item> tmp = new N
--[ 2021.10.05.10.47.28.600.0 ]--
r 53             Node<Item> tmp = new No
--[ 2021.10.05.10.47.29.000.0 ]--
r 53             Node<Item> tmp = new Node
--[ 2021.10.05.10.47.29.014.0 ]--
r 53             Node<Item> tmp = new Node<>
--[ 2021.10.05.10.47.29.033.0 ]--
r 53             Node<Item> tmp = new Node<>()
--[ 2021.10.05.10.47.29.682.0 ]--
r 53             Node<Item> tmp = new Node<>(i)
--[ 2021.10.05.10.47.30.296.0 ]--
r 53             Node<Item> tmp = new Node<>(item)
--[ 2021.10.05.10.47.31.714.0 ]--
r 53             Node<Item> tmp = new Node<>(item);
--[ 2021.10.05.10.47.40.393.0 ]--
r 54             first = t;
--[ 2021.10.05.10.47.40.477.0 ]--
r 54             first = tm;
--[ 2021.10.05.10.47.40.564.0 ]--
r 54             first = tmp;
--[ 2021.10.05.10.47.42.223.0 ]--
+ 54             
--[ 2021.10.05.10.47.58.426.0 ]--
r 54             t
--[ 2021.10.05.10.47.58.565.0 ]--
r 54             tm
--[ 2021.10.05.10.47.58.700.0 ]--
r 54             tmp
--[ 2021.10.05.10.47.58.861.0 ]--
r 54             tmp.
--[ 2021.10.05.10.47.59.212.0 ]--
r 54             tmp. 
--[ 2021.10.05.10.47.59.505.0 ]--
r 54             tmp.
--[ 2021.10.05.10.48.00.024.0 ]--
r 54             tmp.n
--[ 2021.10.05.10.48.00.136.0 ]--
r 54             tmp.ne
--[ 2021.10.05.10.48.00.533.0 ]--
r 54             tmp.next
--[ 2021.10.05.10.48.01.126.0 ]--
r 54             tmp.next 
--[ 2021.10.05.10.48.01.290.0 ]--
r 54             tmp.next =
--[ 2021.10.05.10.48.01.416.0 ]--
r 54             tmp.next = 
--[ 2021.10.05.10.48.02.914.0 ]--
r 54             tmp.next = f
--[ 2021.10.05.10.48.03.510.0 ]--
r 54             tmp.next = first
--[ 2021.10.05.10.48.04.004.0 ]--
r 54             tmp.next = first;
--[ 2021.10.05.10.49.46.104.0 ]--
+ 61         
--[ 2021.10.05.10.49.48.977.0 ]--
r 61         i
--[ 2021.10.05.10.49.49.084.0 ]--
r 61         if
--[ 2021.10.05.10.49.49.142.0 ]--
r 61         if 
--[ 2021.10.05.10.49.49.820.0 ]--
r 61         if I
--[ 2021.10.05.10.49.50.308.0 ]--
r 61         if 
--[ 2021.10.05.10.49.50.722.0 ]--
r 61         if ()
--[ 2021.10.05.10.49.50.978.0 ]--
r 61         if (i)
--[ 2021.10.05.10.49.51.499.0 ]--
r 61         if (isEmpty)
--[ 2021.10.05.10.49.51.504.0 ]--
r 61         if (isEmpty())
--[ 2021.10.05.10.49.52.522.0 ]--
r 61         if (isEmpty()) 
--[ 2021.10.05.10.49.52.848.0 ]--
r 61         if (isEmpty()) {
--[ 2021.10.05.10.49.54.288.0 ]--
+ 63         
--[ 2021.10.05.10.49.55.082.0 ]--
r 63         }
--[ 2021.10.05.10.49.55.106.0 ]--
r 62             return null;
--[ 2021.10.05.10.49.59.874.0 ]--
r 63         } 
--[ 2021.10.05.10.49.59.998.0 ]--
r 63         } e
--[ 2021.10.05.10.50.00.726.0 ]--
r 63         } else
--[ 2021.10.05.10.50.00.744.0 ]--
r 63         } else 
--[ 2021.10.05.10.50.01.537.0 ]--
r 63         } else {
--[ 2021.10.05.10.50.01.796.0 ]--
+ 64 
+ 65 }
--[ 2021.10.05.10.50.01.846.0 ]--
r 65         }
--[ 2021.10.05.10.50.01.860.0 ]--
r 64             
--[ 2021.10.05.10.50.03.754.0 ]--
r 64             r
--[ 2021.10.05.10.50.03.936.0 ]--
r 64             re
--[ 2021.10.05.10.50.04.083.0 ]--
r 64             reu
--[ 2021.10.05.10.50.04.140.0 ]--
r 64             reut
--[ 2021.10.05.10.50.04.259.0 ]--
r 64             reutn
--[ 2021.10.05.10.50.04.306.0 ]--
r 64             reutnr
--[ 2021.10.05.10.50.04.657.0 ]--
r 64             reutn
--[ 2021.10.05.10.50.04.777.0 ]--
r 64             reut
--[ 2021.10.05.10.50.04.923.0 ]--
r 64             reu
--[ 2021.10.05.10.50.05.051.0 ]--
r 64             re
--[ 2021.10.05.10.50.05.174.0 ]--
r 64             ret
--[ 2021.10.05.10.50.05.259.0 ]--
r 64             retu
--[ 2021.10.05.10.50.05.397.0 ]--
r 64             retur
--[ 2021.10.05.10.50.05.474.0 ]--
r 64             return
--[ 2021.10.05.10.50.06.164.0 ]--
r 64             retur
--[ 2021.10.05.10.50.06.274.0 ]--
r 64             retu
--[ 2021.10.05.10.50.06.419.0 ]--
r 64             ret
--[ 2021.10.05.10.50.06.553.0 ]--
r 64             re
--[ 2021.10.05.10.50.06.696.0 ]--
r 64             r
--[ 2021.10.05.10.50.06.884.0 ]--
r 64             
--[ 2021.10.05.10.50.10.602.0 ]--
r 64             r
--[ 2021.10.05.10.50.10.702.0 ]--
r 64             re
--[ 2021.10.05.10.50.10.905.0 ]--
r 64             reut
--[ 2021.10.05.10.50.11.066.0 ]--
r 64             reutr
--[ 2021.10.05.10.50.11.192.0 ]--
r 64             reutrn
--[ 2021.10.05.10.50.11.332.0 ]--
r 64             reutrn 
--[ 2021.10.05.10.50.11.596.0 ]--
r 64             reutrn
--[ 2021.10.05.10.50.11.723.0 ]--
r 64             reutr
--[ 2021.10.05.10.50.11.859.0 ]--
r 64             reut
--[ 2021.10.05.10.50.12.011.0 ]--
r 64             reu
--[ 2021.10.05.10.50.12.145.0 ]--
r 64             reut
--[ 2021.10.05.10.50.12.291.0 ]--
r 64             reutu
--[ 2021.10.05.10.50.12.515.0 ]--
r 64             reut
--[ 2021.10.05.10.50.12.643.0 ]--
r 64             reu
--[ 2021.10.05.10.50.12.787.0 ]--
r 64             re
--[ 2021.10.05.10.50.12.979.0 ]--
r 64             ret
--[ 2021.10.05.10.50.13.071.0 ]--
r 64             retu
--[ 2021.10.05.10.50.13.171.0 ]--
r 64             retur
--[ 2021.10.05.10.50.13.277.0 ]--
r 64             return
--[ 2021.10.05.10.50.13.361.0 ]--
r 64             return 
--[ 2021.10.05.10.50.13.596.0 ]--
r 64             return f
--[ 2021.10.05.10.50.13.709.0 ]--
r 64             return fi
--[ 2021.10.05.10.50.14.624.0 ]--
r 64             return first
--[ 2021.10.05.10.50.15.614.0 ]--
r 64             return first;
--[ 2021.10.05.10.50.17.047.0 ]--
+ 64             
--[ 2021.10.05.10.50.28.130.0 ]--
r 64             I
--[ 2021.10.05.10.50.28.294.0 ]--
r 64             It
--[ 2021.10.05.10.50.28.478.0 ]--
r 64             Ite
--[ 2021.10.05.10.50.28.546.0 ]--
r 64             Item
--[ 2021.10.05.10.50.28.888.0 ]--
r 64             Item.
--[ 2021.10.05.10.50.29.060.0 ]--
r 64             Item. 
--[ 2021.10.05.10.50.29.496.0 ]--
r 64             Item.
--[ 2021.10.05.10.50.29.636.0 ]--
r 64             Item
--[ 2021.10.05.10.50.29.814.0 ]--
r 64             Item 
--[ 2021.10.05.10.50.31.097.0 ]--
r 64             Item t
--[ 2021.10.05.10.50.31.238.0 ]--
r 64             Item tm
--[ 2021.10.05.10.50.31.404.0 ]--
r 64             Item tmp
--[ 2021.10.05.10.50.32.125.0 ]--
r 64             Item tmp 
--[ 2021.10.05.10.50.32.268.0 ]--
r 64             Item tmp =
--[ 2021.10.05.10.50.32.361.0 ]--
r 64             Item tmp = 
--[ 2021.10.05.10.50.33.034.0 ]--
r 64             Item tmp = f
--[ 2021.10.05.10.50.33.109.0 ]--
r 64             Item tmp = fi
--[ 2021.10.05.10.50.33.507.0 ]--
r 64             Item tmp = first
--[ 2021.10.05.10.50.33.708.0 ]--
r 64             Item tmp = first.
--[ 2021.10.05.10.50.34.319.0 ]--
r 64             Item tmp = first.item
--[ 2021.10.05.10.50.35.307.0 ]--
r 64             Item tmp = first.item;
--[ 2021.10.05.10.50.36.194.0 ]--
+ 66             
--[ 2021.10.05.10.50.36.941.0 ]--
- 66
--[ 2021.10.05.10.50.38.653.0 ]--
+ 65             
--[ 2021.10.05.10.50.39.233.0 ]--
r 65             f
--[ 2021.10.05.10.50.40.166.0 ]--
r 65             first
--[ 2021.10.05.10.50.40.625.0 ]--
r 65             first 
--[ 2021.10.05.10.50.40.833.0 ]--
r 65             first =
--[ 2021.10.05.10.50.40.945.0 ]--
r 65             first = 
--[ 2021.10.05.10.50.41.481.0 ]--
r 65             first = f
--[ 2021.10.05.10.50.41.924.0 ]--
r 65             first = first
--[ 2021.10.05.10.50.42.140.0 ]--
r 65             first = first.
--[ 2021.10.05.10.50.42.762.0 ]--
r 65             first = first
--[ 2021.10.05.10.50.42.944.0 ]--
r 65             first = firs
--[ 2021.10.05.10.50.43.179.0 ]--
r 65             first = fir
--[ 2021.10.05.10.50.43.331.0 ]--
r 65             first = fi
--[ 2021.10.05.10.50.43.488.0 ]--
r 65             first = f
--[ 2021.10.05.10.50.43.643.0 ]--
r 65             first = 
--[ 2021.10.05.10.50.44.849.0 ]--
r 65             first = f
--[ 2021.10.05.10.50.45.342.0 ]--
r 65             first = first
--[ 2021.10.05.10.50.45.578.0 ]--
r 65             first = first.
--[ 2021.10.05.10.50.46.602.0 ]--
r 65             first = first.n
--[ 2021.10.05.10.50.46.908.0 ]--
r 65             first = first.next
--[ 2021.10.05.10.50.51.408.0 ]--
r 65             first = first.next;
--[ 2021.10.05.10.50.52.616.0 ]--
r 66             return firs;
--[ 2021.10.05.10.50.52.746.0 ]--
r 66             return fir;
--[ 2021.10.05.10.50.52.899.0 ]--
r 66             return fi;
--[ 2021.10.05.10.50.53.041.0 ]--
r 66             return f;
--[ 2021.10.05.10.50.53.521.0 ]--
r 66             return ;
--[ 2021.10.05.10.50.53.619.0 ]--
r 66             return t;
--[ 2021.10.05.10.50.54.206.0 ]--
r 66             return tmp;
--[ 2021.10.05.10.52.15.661.0 ]--
r 62             t
--[ 2021.10.05.10.52.15.803.0 ]--
r 62             th
--[ 2021.10.05.10.52.16.155.0 ]--
r 62             thr
--[ 2021.10.05.10.52.17.371.0 ]--
r 62             thro
--[ 2021.10.05.10.52.17.737.0 ]--
r 62             thro.
--[ 2021.10.05.10.52.18.197.0 ]--
r 62             thro
--[ 2021.10.05.10.52.18.311.0 ]--
r 62             throw
--[ 2021.10.05.10.52.18.443.0 ]--
r 62             throw.
--[ 2021.10.05.10.52.19.388.0 ]--
r 62             throw.n
--[ 2021.10.05.10.52.19.544.0 ]--
r 62             throw.ne
--[ 2021.10.05.10.52.19.946.0 ]--
r 62             throw.n
--[ 2021.10.05.10.52.20.074.0 ]--
r 62             throw.
--[ 2021.10.05.10.52.21.951.0 ]--
r 62             throw.NoSuchElementException
--[ 2021.10.05.10.52.24.720.0 ]--
r 62             throwNoSuchElementException
--[ 2021.10.05.10.52.25.137.0 ]--
r 62             throw(NoSuchElementException
--[ 2021.10.05.10.52.26.017.0 ]--
r 62             throwNoSuchElementException
--[ 2021.10.05.10.52.26.212.0 ]--
r 62             throw NoSuchElementException
--[ 2021.10.05.10.52.28.490.0 ]--
r 62             throw NoSuchElementException()
--[ 2021.10.05.10.52.29.875.0 ]--
r 62             throw NoSuchElementException();
--[ 2021.10.05.10.52.33.312.0 ]--
r 62             throw nNoSuchElementException();
--[ 2021.10.05.10.52.33.551.0 ]--
r 62             throw neNoSuchElementException();
--[ 2021.10.05.10.52.33.729.0 ]--
r 62             throw newNoSuchElementException();
--[ 2021.10.05.10.52.33.788.0 ]--
r 62             throw new NoSuchElementException();
--[ 2021.10.05.10.52.35.660.0 ]--
r 62             throw new NoSuchElementExceptionNoSuchElementException();
--[ 2021.10.05.10.52.35.669.0 ]--
r 62             throw new NoSuchElementException NoSuchElementException();
--[ 2021.10.05.10.52.35.678.0 ]--
r 62             throw new NoSuchElementExceptionNoSuchElementException();
--[ 2021.10.05.10.52.35.683.0 ]--
r 62             throw new NoSuchElementException()NoSuchElementException();
--[ 2021.10.05.10.52.38.539.0 ]--
r 62             throw new NoSuchElementException()
--[ 2021.10.05.10.52.38.778.0 ]--
r 62             throw new NoSuchElementException();
--[ 2021.10.05.10.52.40.100.0 ]--
r 62             throw new NoSuchElementException("");
--[ 2021.10.05.10.52.41.912.0 ]--
r 62             throw new NoSuchElementException("p");
--[ 2021.10.05.10.52.42.080.0 ]--
r 62             throw new NoSuchElementException("po");
--[ 2021.10.05.10.52.42.311.0 ]--
r 62             throw new NoSuchElementException("pop");
--[ 2021.10.05.10.52.42.555.0 ]--
r 62             throw new NoSuchElementException("pop ");
--[ 2021.10.05.10.52.42.712.0 ]--
r 62             throw new NoSuchElementException("pop o");
--[ 2021.10.05.10.52.42.792.0 ]--
r 62             throw new NoSuchElementException("pop on");
--[ 2021.10.05.10.52.42.856.0 ]--
r 62             throw new NoSuchElementException("pop on ");
--[ 2021.10.05.10.52.43.008.0 ]--
r 62             throw new NoSuchElementException("pop on e");
--[ 2021.10.05.10.52.43.139.0 ]--
r 62             throw new NoSuchElementException("pop on em");
--[ 2021.10.05.10.52.43.392.0 ]--
r 62             throw new NoSuchElementException("pop on emp");
--[ 2021.10.05.10.52.43.525.0 ]--
r 62             throw new NoSuchElementException("pop on empt");
--[ 2021.10.05.10.52.43.626.0 ]--
r 62             throw new NoSuchElementException("pop on empty");
--[ 2021.10.05.10.52.43.777.0 ]--
r 62             throw new NoSuchElementException("pop on empty ");
--[ 2021.10.05.10.52.44.289.0 ]--
r 62             throw new NoSuchElementException("pop on empty s");
--[ 2021.10.05.10.52.45.048.0 ]--
r 62             throw new NoSuchElementException("pop on empty st");
--[ 2021.10.05.10.52.46.113.0 ]--
r 62             throw new NoSuchElementException("pop on empty ste");
--[ 2021.10.05.10.52.46.679.0 ]--
r 62             throw new NoSuchElementException("pop on empty steq");
--[ 2021.10.05.10.52.46.788.0 ]--
r 62             throw new NoSuchElementException("pop on empty stequ");
--[ 2021.10.05.10.52.47.366.0 ]--
r 62             throw new NoSuchElementException("pop on empty steque");
--[ 2021.10.05.10.52.50.336.0 ]--
r 62             throw new NoSuchElementException("pop on empty steque\");
--[ 2021.10.05.10.52.51.266.0 ]--
r 62             throw new NoSuchElementException("pop on empty steque\n");
--[ 2021.10.05.10.58.44.361.0 ]--
r 62             throw new NoSuchElementException("pop  on empty steque\n");
--[ 2021.10.05.10.58.44.464.0 ]--
r 62             throw new NoSuchElementException("pop c on empty steque\n");
--[ 2021.10.05.10.58.44.768.0 ]--
r 62             throw new NoSuchElementException("pop ca on empty steque\n");
--[ 2021.10.05.10.58.44.880.0 ]--
r 62             throw new NoSuchElementException("pop cal on empty steque\n");
--[ 2021.10.05.10.58.45.016.0 ]--
r 62             throw new NoSuchElementException("pop call on empty steque\n");
--[ 2021.10.05.10.58.45.153.0 ]--
r 62             throw new NoSuchElementException("pop calle on empty steque\n");
--[ 2021.10.05.10.58.45.427.0 ]--
r 62             throw new NoSuchElementException("pop called on empty steque\n");
--[ 2021.10.05.10.58.45.619.0 ]--
r 62             throw new NoSuchElementException("pop called  on empty steque\n");
--[ 2021.10.05.10.58.46.208.0 ]--
r 62             throw new NoSuchElementException("pop called on empty steque\n");
--[ 2021.10.05.10.59.04.727.0 ]--
+ 73         
--[ 2021.10.05.10.59.23.426.0 ]--
r 73         p
--[ 2021.10.05.10.59.23.717.0 ]--
r 73         pur
--[ 2021.10.05.10.59.24.128.0 ]--
r 73         pu
--[ 2021.10.05.10.59.24.220.0 ]--
r 73         pub
--[ 2021.10.05.10.59.24.329.0 ]--
r 73         publ
--[ 2021.10.05.10.59.24.477.0 ]--
r 73         publi
--[ 2021.10.05.10.59.24.561.0 ]--
r 73         public
--[ 2021.10.05.10.59.25.119.0 ]--
r 73         public 
--[ 2021.10.05.10.59.25.489.0 ]--
r 73         public r
--[ 2021.10.05.10.59.25.599.0 ]--
r 73         public re
--[ 2021.10.05.10.59.25.770.0 ]--
r 73         public rem
--[ 2021.10.05.10.59.26.336.0 ]--
r 73         public remo
--[ 2021.10.05.10.59.26.386.0 ]--
r 73         public remov
--[ 2021.10.05.10.59.26.562.0 ]--
r 73         public remove
--[ 2021.10.05.10.59.27.078.0 ]--
r 73         public remove()
--[ 2021.10.05.10.59.29.844.0 ]--
r 73         public remove(){
--[ 2021.10.05.10.59.30.895.0 ]--
r 73         public remove(){}
--[ 2021.10.05.10.59.31.714.0 ]--
r 73         public remove() {}
--[ 2021.10.05.10.59.41.034.0 ]--
r 73         public remove(){}
--[ 2021.10.05.10.59.41.717.0 ]--
r 73         public remove()
--[ 2021.10.05.10.59.42.286.0 ]--
r 73         pu
--[ 2021.10.05.10.59.42.535.0 ]--
r 73         pur
--[ 2021.10.05.10.59.42.826.0 ]--
r 73         
--[ 2021.10.05.10.59.43.156.0 ]--
- 73
--[ 2021.10.05.11.00.44.576.0 ]--
r 73         return n;
--[ 2021.10.05.11.00.44.767.0 ]--
r 73         return ne;
--[ 2021.10.05.11.00.44.931.0 ]--
r 73         return new;
--[ 2021.10.05.11.00.45.521.0 ]--
r 73         return new ;
--[ 2021.10.05.11.00.45.790.0 ]--
r 73         return new I;
--[ 2021.10.05.11.00.45.884.0 ]--
r 73         return new It;
--[ 2021.10.05.11.00.46.544.0 ]--
r 73         return new Iterator;
--[ 2021.10.05.11.00.46.563.0 ]--
r 73         return new Iterator<Item>;
--[ 2021.10.05.11.00.46.569.0 ]--
r 73         return new Iterator<Item>() {};
--[ 2021.10.05.11.00.46.583.0 ]--
+ 73         return new Iterator<Item>() {
r 74         };
--[ 2021.10.05.11.00.46.770.0 ]--
+ 74         @Override
+ 75             public boolean hasNext() {
+ 76                 return false;
r 77             }};
--[ 2021.10.05.11.00.46.783.0 ]--
+ 77             }@Override
+ 78             public Item next() {
+ 79                 return null;
--[ 2021.10.05.11.00.46.799.0 ]--
r 74             @Override
+ 77             }
+ 78 
r 79             @Override
+ 82             }
r 83         };
--[ 2021.10.05.11.00.58.289.0 ]--
+ 83             
--[ 2021.10.05.11.00.59.391.0 ]--
+ 83             
--[ 2021.10.05.11.01.01.297.0 ]--
r 84             @
--[ 2021.10.05.11.01.02.143.0 ]--
r 84             @Override
--[ 2021.10.05.11.01.02.920.0 ]--
+ 85             
--[ 2021.10.05.11.01.03.225.0 ]--
r 85             p
--[ 2021.10.05.11.01.03.312.0 ]--
r 85             pu
--[ 2021.10.05.11.01.03.773.0 ]--
r 85             public
--[ 2021.10.05.11.01.03.780.0 ]--
r 85             public 
--[ 2021.10.05.11.01.04.468.0 ]--
r 85             public v
--[ 2021.10.05.11.01.04.909.0 ]--
r 85             public void
--[ 2021.10.05.11.01.04.923.0 ]--
r 85             public void 
--[ 2021.10.05.11.01.05.652.0 ]--
r 85             public void n
--[ 2021.10.05.11.01.06.073.0 ]--
r 85             public void 
--[ 2021.10.05.11.01.06.150.0 ]--
r 85             public void r
--[ 2021.10.05.11.01.06.344.0 ]--
r 85             public void re
--[ 2021.10.05.11.01.06.548.0 ]--
r 85             public void rem
--[ 2021.10.05.11.01.06.665.0 ]--
r 85             public void remo
--[ 2021.10.05.11.01.06.931.0 ]--
r 85             public void remov
--[ 2021.10.05.11.01.07.131.0 ]--
r 85             public void remove
--[ 2021.10.05.11.01.07.747.0 ]--
r 85             public void remove()
--[ 2021.10.05.11.01.08.888.0 ]--
r 85             public void remove() 
--[ 2021.10.05.11.01.09.427.0 ]--
r 85             public void remove() {}
--[ 2021.10.05.11.01.15.894.0 ]--
r 84             @Overrid
--[ 2021.10.05.11.01.16.037.0 ]--
r 84             @Overri
--[ 2021.10.05.11.01.16.157.0 ]--
r 84             @Overr
--[ 2021.10.05.11.01.16.669.0 ]--
r 84             @Over
--[ 2021.10.05.11.01.16.695.0 ]--
r 84             @Ove
--[ 2021.10.05.11.01.16.724.0 ]--
r 84             @Ov
--[ 2021.10.05.11.01.16.746.0 ]--
r 84             @O
--[ 2021.10.05.11.01.16.777.0 ]--
r 84             @
--[ 2021.10.05.11.01.16.804.0 ]--
r 84             
--[ 2021.10.05.11.01.16.843.0 ]--
- 83
--[ 2021.10.05.11.01.16.874.0 ]--
- 83
--[ 2021.10.05.11.01.16.897.0 ]--
r 82             
--[ 2021.10.05.11.01.17.209.0 ]--
- 82
--[ 2021.10.05.11.01.18.440.0 ]--
+ 82             }
+ 83             
+ 84             @Override
--[ 2021.10.05.11.01.18.969.0 ]--
r 84             @Overrid
--[ 2021.10.05.11.01.19.160.0 ]--
r 84             @Overri
--[ 2021.10.05.11.01.19.309.0 ]--
r 84             @Overr
--[ 2021.10.05.11.01.20.033.0 ]--
r 84             @Override
--[ 2021.10.05.11.01.21.037.0 ]--
r 84 //            @Override
--[ 2021.10.05.11.01.26.591.0 ]--
r 84 
--[ 2021.10.05.11.01.26.932.0 ]--
- 84
--[ 2021.10.05.11.03.16.923.0 ]--
+ 74             
--[ 2021.10.05.11.03.18.158.0 ]--
r 74             N
--[ 2021.10.05.11.03.18.909.0 ]--
r 74             Node
--[ 2021.10.05.11.03.20.272.0 ]--
r 74             Node<>
--[ 2021.10.05.11.03.20.990.0 ]--
r 74             Node<I>
--[ 2021.10.05.11.03.21.721.0 ]--
r 74             Node<Item>
--[ 2021.10.05.11.03.22.817.0 ]--
r 74             Node<Item> 
--[ 2021.10.05.11.03.27.111.0 ]--
r 74             Node<Item> f
--[ 2021.10.05.11.03.27.481.0 ]--
r 74             Node<Item> f 
--[ 2021.10.05.11.03.28.194.0 ]--
r 74             Node<Item> f =
--[ 2021.10.05.11.03.28.364.0 ]--
r 74             Node<Item> f = 
--[ 2021.10.05.11.03.28.538.0 ]--
r 74             Node<Item> f = f
--[ 2021.10.05.11.03.29.475.0 ]--
r 74             Node<Item> f = fr
--[ 2021.10.05.11.03.30.219.0 ]--
r 74             Node<Item> f = f
--[ 2021.10.05.11.03.30.405.0 ]--
r 74             Node<Item> f = 
--[ 2021.10.05.11.03.32.024.0 ]--
r 74             Node<Item> f =
--[ 2021.10.05.11.03.32.259.0 ]--
r 74             Node<Item> f 
--[ 2021.10.05.11.03.32.453.0 ]--
r 74             Node<Item> f
--[ 2021.10.05.11.03.33.576.0 ]--
r 74             Node<Item> f;
--[ 2021.10.05.11.03.44.615.0 ]--
r 74             Node<Item> ;
--[ 2021.10.05.11.03.45.315.0 ]--
r 74             Node<Item> p;
--[ 2021.10.05.11.04.15.342.0 ]--
r 77                 return fals;
--[ 2021.10.05.11.04.15.487.0 ]--
r 77                 return fal;
--[ 2021.10.05.11.04.15.642.0 ]--
r 77                 return fa;
--[ 2021.10.05.11.04.15.787.0 ]--
r 77                 return f;
--[ 2021.10.05.11.04.15.914.0 ]--
r 77                 return ;
--[ 2021.10.05.11.04.16.989.0 ]--
r 77                 return p;
--[ 2021.10.05.11.04.21.764.0 ]--
r 77                 return p.;
--[ 2021.10.05.11.04.22.493.0 ]--
r 77                 return p.next;
--[ 2021.10.05.11.04.23.870.0 ]--
r 77                 return p.next ;
--[ 2021.10.05.11.04.25.319.0 ]--
r 77                 return p.next !;
--[ 2021.10.05.11.04.26.058.0 ]--
r 77                 return p.next !=;
--[ 2021.10.05.11.04.26.543.0 ]--
r 77                 return p.next != ;
--[ 2021.10.05.11.04.26.943.0 ]--
r 77                 return p.next != n;
--[ 2021.10.05.11.04.27.838.0 ]--
r 77                 return p.next != null;
--[ 2021.10.05.11.04.34.896.0 ]--
r 74             Node<Item> p ;
--[ 2021.10.05.11.04.34.983.0 ]--
r 74             Node<Item> p =;
--[ 2021.10.05.11.04.35.325.0 ]--
r 74             Node<Item> p =f;
--[ 2021.10.05.11.04.35.643.0 ]--
r 74             Node<Item> p =;
--[ 2021.10.05.11.04.35.810.0 ]--
r 74             Node<Item> p = ;
--[ 2021.10.05.11.04.35.953.0 ]--
r 74             Node<Item> p = f;
--[ 2021.10.05.11.04.36.541.0 ]--
r 74             Node<Item> p = first;
--[ 2021.10.05.11.04.59.151.0 ]--
+ 82                 
--[ 2021.10.05.11.05.12.143.0 ]--
r 85 
--[ 2021.10.05.11.06.22.593.0 ]--
r 82                 i
--[ 2021.10.05.11.06.22.656.0 ]--
r 82                 if
--[ 2021.10.05.11.06.23.775.0 ]--
r 82                 if 
--[ 2021.10.05.11.06.23.912.0 ]--
r 82                 if ()
--[ 2021.10.05.11.06.25.511.0 ]--
r 82                 if (h)
--[ 2021.10.05.11.06.25.897.0 ]--
r 82                 if ()
--[ 2021.10.05.11.06.26.559.0 ]--
r 82                 if (!)
--[ 2021.10.05.11.06.26.865.0 ]--
r 82                 if (!h)
--[ 2021.10.05.11.06.27.493.0 ]--
r 82                 if (!hasNext)
--[ 2021.10.05.11.06.27.498.0 ]--
r 82                 if (!hasNext())
--[ 2021.10.05.11.06.29.346.0 ]--
r 82                 if (!hasNext()) 
--[ 2021.10.05.11.06.29.680.0 ]--
r 82                 if (!hasNext()) {
--[ 2021.10.05.11.06.29.894.0 ]--
+ 83 
+ 84 }
--[ 2021.10.05.11.06.29.916.0 ]--
r 84                 }
--[ 2021.10.05.11.06.29.960.0 ]--
r 83                     
--[ 2021.10.05.11.06.42.520.0 ]--
r 84                 
--[ 2021.10.05.11.06.42.718.0 ]--
- 84
--[ 2021.10.05.11.06.42.878.0 ]--
- 83
--[ 2021.10.05.11.06.43.000.0 ]--
r 82                 if (!hasNext()) 
--[ 2021.10.05.11.06.43.139.0 ]--
r 82                 if (!hasNext())
--[ 2021.10.05.11.06.43.314.0 ]--
r 82                 if (!hasNext()
--[ 2021.10.05.11.06.43.806.0 ]--
r 82                 if (!hasNext(
--[ 2021.10.05.11.06.43.844.0 ]--
r 82                 if (!hasNext
--[ 2021.10.05.11.06.43.873.0 ]--
r 82                 if (!hasNex
--[ 2021.10.05.11.06.43.895.0 ]--
r 82                 if (!hasNe
--[ 2021.10.05.11.06.43.928.0 ]--
r 82                 if (!hasN
--[ 2021.10.05.11.06.43.954.0 ]--
r 82                 if (!has
--[ 2021.10.05.11.06.43.987.0 ]--
r 82                 if (!ha
--[ 2021.10.05.11.06.44.014.0 ]--
r 82                 if (!h
--[ 2021.10.05.11.06.44.045.0 ]--
r 82                 if (!
--[ 2021.10.05.11.06.44.191.0 ]--
r 82                 if (
--[ 2021.10.05.11.06.44.384.0 ]--
r 82                 if 
--[ 2021.10.05.11.06.44.585.0 ]--
r 82                 if
--[ 2021.10.05.11.06.44.696.0 ]--
r 82                 i
--[ 2021.10.05.11.06.44.856.0 ]--
r 82                 
--[ 2021.10.05.11.08.45.109.0 ]--
- 82
--[ 2021.10.05.11.08.47.157.0 ]--
r 82                 return nul;
--[ 2021.10.05.11.08.47.409.0 ]--
r 82                 return nu;
--[ 2021.10.05.11.08.47.534.0 ]--
r 82                 return n;
--[ 2021.10.05.11.08.47.680.0 ]--
r 82                 return ;
--[ 2021.10.05.11.08.48.960.0 ]--
r 82                 return p;
--[ 2021.10.05.11.08.49.225.0 ]--
r 82                 return p.;
--[ 2021.10.05.11.08.50.017.0 ]--
r 82                 return p.next;
--[ 2021.10.05.11.08.55.801.0 ]--
r 82                 return p.next.;
--[ 2021.10.05.11.08.57.005.0 ]--
r 82                 return p.next.i;
--[ 2021.10.05.11.08.57.493.0 ]--
r 82                 return p.next.item;
--[ 2021.10.05.11.09.57.026.0 ]--
r 84 d
--[ 2021.10.05.11.09.57.587.0 ]--
r 84 do
--[ 2021.10.05.11.09.57.641.0 ]--
r 84 don
--[ 2021.10.05.11.09.57.794.0 ]--
r 84 donu
--[ 2021.10.05.11.09.57.882.0 ]--
r 84 donus
--[ 2021.10.05.11.09.58.235.0 ]--
r 84 donu
--[ 2021.10.05.11.09.58.576.0 ]--
r 84 donus
--[ 2021.10.05.11.09.58.785.0 ]--
r 84 donuss
--[ 2021.10.05.11.09.59.128.0 ]--
r 84 donus
--[ 2021.10.05.11.09.59.261.0 ]--
r 84 donu
--[ 2021.10.05.11.09.59.835.0 ]--
r 84 donut
--[ 2021.10.05.11.09.59.915.0 ]--
r 84 donuts
--[ 2021.10.05.11.10.51.229.0 ]--
r 19     p int opcount = 0;
--[ 2021.10.05.11.10.51.279.0 ]--
r 19     pr int opcount = 0;
--[ 2021.10.05.11.10.51.680.0 ]--
r 19     pri int opcount = 0;
--[ 2021.10.05.11.10.51.704.0 ]--
r 19     priv int opcount = 0;
--[ 2021.10.05.11.10.52.166.0 ]--
r 19     private int opcount = 0;
--[ 2021.10.05.11.10.59.412.0 ]--
r 20     public int size = 0;
--[ 2021.10.05.11.11.01.328.0 ]--
r 20     p int size = 0;
--[ 2021.10.05.11.11.01.367.0 ]--
r 20     pr int size = 0;
--[ 2021.10.05.11.11.02.034.0 ]--
r 20     private int size = 0;
--[ 2021.10.05.11.11.35.649.0 ]--
r 53             Node<Item> tmp = new Node<>(item);?
--[ 2021.10.05.11.11.35.815.0 ]--
r 53             Node<Item> tmp = new Node<>(item);??
--[ 2021.10.05.11.11.35.986.0 ]--
r 53             Node<Item> tmp = new Node<>(item);???
--[ 2021.10.05.11.12.09.941.0 ]--
+ 38         
--[ 2021.10.05.11.12.10.936.0 ]--
r 38         o
--[ 2021.10.05.11.12.11.144.0 ]--
r 38         op
--[ 2021.10.05.11.12.11.531.0 ]--
r 38         opcount
--[ 2021.10.05.11.12.12.226.0 ]--
r 38         opcount+
--[ 2021.10.05.11.12.12.336.0 ]--
r 38         opcount++
--[ 2021.10.05.11.12.12.578.0 ]--
r 38         opcount++;
--[ 2021.10.05.11.12.15.414.0 ]--
+ 49     public void push(Item item) {\
r 50     
--[ 2021.10.05.11.12.15.448.0 ]--
r 50         
--[ 2021.10.05.11.12.15.987.0 ]--
r 50         o
--[ 2021.10.05.11.12.16.087.0 ]--
r 50         op
--[ 2021.10.05.11.12.16.530.0 ]--
r 50         opcount
--[ 2021.10.05.11.12.17.243.0 ]--
r 50         opcount+
--[ 2021.10.05.11.12.17.334.0 ]--
r 50         opcount++
--[ 2021.10.05.11.12.18.122.0 ]--
r 50         opcount++;
--[ 2021.10.05.11.12.20.628.0 ]--
+ 63         
--[ 2021.10.05.11.12.21.068.0 ]--
r 63         o
--[ 2021.10.05.11.12.21.127.0 ]--
r 63         op
--[ 2021.10.05.11.12.21.622.0 ]--
r 63         opcount
--[ 2021.10.05.11.12.22.588.0 ]--
r 63         opcount;
--[ 2021.10.05.11.12.24.095.0 ]--
r 63         opcount+;
--[ 2021.10.05.11.12.24.206.0 ]--
r 63         opcount++;
--[ 2021.10.05.11.12.30.251.0 ]--
+ 76         
--[ 2021.10.05.11.14.29.596.0 ]--
+ 81                 
--[ 2021.10.05.11.14.29.992.0 ]--
r 81                 i
--[ 2021.10.05.11.14.30.087.0 ]--
r 81                 if
--[ 2021.10.05.11.14.31.053.0 ]--
r 81                 if()
--[ 2021.10.05.11.14.34.479.0 ]--
r 81                 if() 
--[ 2021.10.05.11.14.35.008.0 ]--
r 81                 if() {
--[ 2021.10.05.11.14.35.207.0 ]--
+ 82 
+ 83 }
--[ 2021.10.05.11.14.35.229.0 ]--
r 83                 }
--[ 2021.10.05.11.14.35.271.0 ]--
r 82                     
--[ 2021.10.05.11.14.36.053.0 ]--
r 82                     ConcurrentModificationException
--[ 2021.10.05.11.14.38.078.0 ]--
r 82                     tConcurrentModificationException
--[ 2021.10.05.11.14.38.191.0 ]--
r 82                     thConcurrentModificationException
--[ 2021.10.05.11.14.38.308.0 ]--
r 82                     thrConcurrentModificationException
--[ 2021.10.05.11.14.38.384.0 ]--
r 82                     throConcurrentModificationException
--[ 2021.10.05.11.14.38.500.0 ]--
r 82                     thro ConcurrentModificationException
--[ 2021.10.05.11.14.38.980.0 ]--
r 82                     throConcurrentModificationException
--[ 2021.10.05.11.14.39.033.0 ]--
r 82                     throwConcurrentModificationException
--[ 2021.10.05.11.14.39.124.0 ]--
r 82                     throw ConcurrentModificationException
--[ 2021.10.05.11.14.39.264.0 ]--
r 82                     throw nConcurrentModificationException
--[ 2021.10.05.11.14.39.348.0 ]--
r 82                     throw neConcurrentModificationException
--[ 2021.10.05.11.14.39.540.0 ]--
r 82                     throw newConcurrentModificationException
--[ 2021.10.05.11.14.39.697.0 ]--
r 82                     throw new ConcurrentModificationException
--[ 2021.10.05.11.14.41.608.0 ]--
r 82                     throw new ConcurrentModificationException()
--[ 2021.10.05.11.14.43.064.0 ]--
r 82                     throw new ConcurrentModificationException();
--[ 2021.10.05.11.15.04.035.0 ]--
r 82                     throw new ConcurrentModificationException("");
--[ 2021.10.05.11.15.07.378.0 ]--
r 82                     throw new ConcurrentModificationException("m");
--[ 2021.10.05.11.15.07.502.0 ]--
r 82                     throw new ConcurrentModificationException("mo");
--[ 2021.10.05.11.15.07.598.0 ]--
r 82                     throw new ConcurrentModificationException("mod");
--[ 2021.10.05.11.15.07.702.0 ]--
r 82                     throw new ConcurrentModificationException("modi");
--[ 2021.10.05.11.15.07.933.0 ]--
r 82                     throw new ConcurrentModificationException("modif");
--[ 2021.10.05.11.15.08.054.0 ]--
r 82                     throw new ConcurrentModificationException("modifi");
--[ 2021.10.05.11.15.08.180.0 ]--
r 82                     throw new ConcurrentModificationException("modifie");
--[ 2021.10.05.11.15.08.361.0 ]--
r 82                     throw new ConcurrentModificationException("modified");
--[ 2021.10.05.11.15.08.449.0 ]--
r 82                     throw new ConcurrentModificationException("modified ");
--[ 2021.10.05.11.15.12.470.0 ]--
r 82                     throw new ConcurrentModificationException("modified s");
--[ 2021.10.05.11.15.12.680.0 ]--
r 82                     throw new ConcurrentModificationException("modified st");
--[ 2021.10.05.11.15.12.865.0 ]--
r 82                     throw new ConcurrentModificationException("modified ste");
--[ 2021.10.05.11.15.12.990.0 ]--
r 82                     throw new ConcurrentModificationException("modified steg");
--[ 2021.10.05.11.15.13.275.0 ]--
r 82                     throw new ConcurrentModificationException("modified stege");
--[ 2021.10.05.11.15.13.749.0 ]--
r 82                     throw new ConcurrentModificationException("modified steg");
--[ 2021.10.05.11.15.13.930.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegu");
--[ 2021.10.05.11.15.14.018.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue");
--[ 2021.10.05.11.15.14.090.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue ");
--[ 2021.10.05.11.15.14.307.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue w");
--[ 2021.10.05.11.15.14.530.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue wh");
--[ 2021.10.05.11.15.14.600.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue whi");
--[ 2021.10.05.11.15.14.641.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue whil");
--[ 2021.10.05.11.15.14.702.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue while");
--[ 2021.10.05.11.15.14.777.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue while ");
--[ 2021.10.05.11.15.14.984.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue while i");
--[ 2021.10.05.11.15.15.077.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue while it");
--[ 2021.10.05.11.15.15.306.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue while ite");
--[ 2021.10.05.11.15.15.537.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue while iter");
--[ 2021.10.05.11.15.15.933.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue while itera");
--[ 2021.10.05.11.15.16.254.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue while iterat");
--[ 2021.10.05.11.15.16.378.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue while iterati");
--[ 2021.10.05.11.15.16.460.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue while iteratin");
--[ 2021.10.05.11.15.16.488.0 ]--
r 82                     throw new ConcurrentModificationException("modified stegue while iterating");
--[ 2021.10.05.11.15.24.954.0 ]--
- 76
--[ 2021.10.05.11.15.26.259.0 ]--
+ 77             
--[ 2021.10.05.11.15.36.152.0 ]--
r 74     @Override?
--[ 2021.10.05.11.15.36.291.0 ]--
r 74     @Override??
--[ 2021.10.05.11.15.36.437.0 ]--
r 74     @Override???
--[ 2021.10.05.11.15.42.621.0 ]--
r 77             i
--[ 2021.10.05.11.15.42.707.0 ]--
r 77             in
--[ 2021.10.05.11.15.42.782.0 ]--
r 77             int
--[ 2021.10.05.11.15.42.898.0 ]--
r 77             int 
--[ 2021.10.05.11.15.43.038.0 ]--
r 77             int m
--[ 2021.10.05.11.15.43.232.0 ]--
r 77             int my
--[ 2021.10.05.11.15.43.351.0 ]--
r 77             int my 
--[ 2021.10.05.11.15.43.934.0 ]--
r 77             int my
--[ 2021.10.05.11.15.44.536.0 ]--
r 77             int m
--[ 2021.10.05.11.15.44.663.0 ]--
r 77             int 
--[ 2021.10.05.11.15.44.834.0 ]--
r 77             int c
--[ 2021.10.05.11.15.44.977.0 ]--
r 77             int cu
--[ 2021.10.05.11.15.45.066.0 ]--
r 77             int cur
--[ 2021.10.05.11.15.45.214.0 ]--
r 77             int curr
--[ 2021.10.05.11.15.46.078.0 ]--
r 77             int cur
--[ 2021.10.05.11.15.46.246.0 ]--
r 77             int cu
--[ 2021.10.05.11.15.46.443.0 ]--
r 77             int c
--[ 2021.10.05.11.15.46.617.0 ]--
r 77             int 
--[ 2021.10.05.11.15.47.098.0 ]--
r 77             int f
--[ 2021.10.05.11.15.47.855.0 ]--
r 77             int 
--[ 2021.10.05.11.15.48.623.0 ]--
r 77             int t
--[ 2021.10.05.11.15.48.753.0 ]--
r 77             int th
--[ 2021.10.05.11.15.48.802.0 ]--
r 77             int thi
--[ 2021.10.05.11.15.49.166.0 ]--
r 77             int this
--[ 2021.10.05.11.15.50.503.0 ]--
r 77             int thisO
--[ 2021.10.05.11.15.51.993.0 ]--
r 77             int thisOp
--[ 2021.10.05.11.15.52.478.0 ]--
r 77             int thisOpC
--[ 2021.10.05.11.15.52.662.0 ]--
r 77             int thisOpCo
--[ 2021.10.05.11.15.52.753.0 ]--
r 77             int thisOpCou
--[ 2021.10.05.11.15.52.952.0 ]--
r 77             int thisOpCoutn
--[ 2021.10.05.11.15.53.709.0 ]--
r 77             int thisOpCout
--[ 2021.10.05.11.15.53.834.0 ]--
r 77             int thisOpCou
--[ 2021.10.05.11.15.53.993.0 ]--
r 77             int thisOpCoun
--[ 2021.10.05.11.15.54.075.0 ]--
r 77             int thisOpCount
--[ 2021.10.05.11.15.57.359.0 ]--
r 77             int fOpCount
--[ 2021.10.05.11.15.57.514.0 ]--
r 77             int frOpCount
--[ 2021.10.05.11.15.57.593.0 ]--
r 77             int froOpCount
--[ 2021.10.05.11.15.58.047.0 ]--
r 77             int frozOpCount
--[ 2021.10.05.11.15.58.302.0 ]--
r 77             int frozreOpCount
--[ 2021.10.05.11.15.58.372.0 ]--
r 77             int frozrenOpCount
--[ 2021.10.05.11.15.58.929.0 ]--
r 77             int frozreOpCount
--[ 2021.10.05.11.15.59.054.0 ]--
r 77             int frozrOpCount
--[ 2021.10.05.11.15.59.313.0 ]--
r 77             int frozOpCount
--[ 2021.10.05.11.15.59.432.0 ]--
r 77             int frozeOpCount
--[ 2021.10.05.11.15.59.570.0 ]--
r 77             int frozenOpCount
--[ 2021.10.05.11.16.02.023.0 ]--
r 77             int frozenOpCount 
--[ 2021.10.05.11.16.02.111.0 ]--
r 77             int frozenOpCount =
--[ 2021.10.05.11.16.02.226.0 ]--
r 77             int frozenOpCount = 
--[ 2021.10.05.11.16.02.648.0 ]--
r 77             int frozenOpCount = m
--[ 2021.10.05.11.16.03.216.0 ]--
r 77             int frozenOpCount = 
--[ 2021.10.05.11.16.03.688.0 ]--
r 77             int frozenOpCount = o
--[ 2021.10.05.11.16.03.781.0 ]--
r 77             int frozenOpCount = op
--[ 2021.10.05.11.16.04.196.0 ]--
r 77             int frozenOpCount = opcount
--[ 2021.10.05.11.16.04.901.0 ]--
r 77             int frozenOpCount = opcount;
--[ 2021.10.05.11.16.06.903.0 ]--
r 81                 if () {
--[ 2021.10.05.11.16.07.868.0 ]--
r 81                 if (f) {
--[ 2021.10.05.11.16.08.840.0 ]--
r 81                 if (fr) {
--[ 2021.10.05.11.16.09.265.0 ]--
r 81                 if (frozenOpCount) {
--[ 2021.10.05.11.16.09.678.0 ]--
r 81                 if (frozenOpCount ) {
--[ 2021.10.05.11.16.10.398.0 ]--
r 81                 if (frozenOpCount !) {
--[ 2021.10.05.11.16.10.690.0 ]--
r 81                 if (frozenOpCount !=) {
--[ 2021.10.05.11.16.10.867.0 ]--
r 81                 if (frozenOpCount != ) {
--[ 2021.10.05.11.16.11.870.0 ]--
r 81                 if (frozenOpCount != o) {
--[ 2021.10.05.11.16.12.325.0 ]--
r 81                 if (frozenOpCount != opcount) {
--[ 2021.10.05.11.16.19.928.0 ]--
+ 89                 
--[ 2021.10.05.11.16.20.648.0 ]--
+ 89                 if (frozenOpCount != opcount) {
+ 90                     throw new ConcurrentModificationException("modified stegue while iterating");
r 91                 }
--[ 2021.10.05.11.16.38.783.0 ]--
r 49     public void push(Item item) {
--[ 2021.10.05.11.24.30.008.0 ]--
r 94 
--[ 2021.10.05.11.24.35.023.0 ]--
r 74     @Override??
--[ 2021.10.05.11.24.35.214.0 ]--
r 74     @Override?
--[ 2021.10.05.11.24.36.006.0 ]--
r 74     @Override
--[ 2021.10.05.11.25.15.524.0 ]--
+ 79             
--[ 2021.10.05.11.25.18.756.0 ]--
+ 96             
--[ 2021.10.05.11.25.56.647.0 ]--
r 55             Node<Item> tmp = new Node<>(item);??
--[ 2021.10.05.11.25.56.816.0 ]--
r 55             Node<Item> tmp = new Node<>(item);?
--[ 2021.10.05.11.25.57.038.0 ]--
r 55             Node<Item> tmp = new Node<>(item);
--[ 2021.10.05.11.27.33.882.0 ]--
r 96             @
--[ 2021.10.05.11.27.34.715.0 ]--
r 96             @Override
--[ 2021.10.05.11.27.42.175.0 ]--
+ 69             
--[ 2021.10.05.11.27.43.038.0 ]--
r 69             s
--[ 2021.10.05.11.27.43.880.0 ]--
r 69             size
--[ 2021.10.05.11.27.44.650.0 ]--
r 69             size+
--[ 2021.10.05.11.27.44.755.0 ]--
r 69             size++
--[ 2021.10.05.11.27.45.082.0 ]--
r 69             size++;
--[ 2021.10.05.11.27.49.243.0 ]--
+ 58             
--[ 2021.10.05.11.27.50.190.0 ]--
r 58             s
--[ 2021.10.05.11.27.50.731.0 ]--
r 58             size
--[ 2021.10.05.11.27.51.353.0 ]--
r 58             size+
--[ 2021.10.05.11.27.51.469.0 ]--
r 58             size++
--[ 2021.10.05.11.27.51.686.0 ]--
r 58             size++;
--[ 2021.10.05.11.27.59.858.0 ]--
r 58             
--[ 2021.10.05.11.28.00.127.0 ]--
- 58
--[ 2021.10.05.11.28.00.241.0 ]--
r 57             first = tmp
--[ 2021.10.05.11.28.01.638.0 ]--
r 57             first = tmp;
--[ 2021.10.05.11.28.02.651.0 ]--
+ 59         
--[ 2021.10.05.11.28.03.405.0 ]--
r 59         size++;
--[ 2021.10.05.11.29.08.220.0 ]--
+ 46         
--[ 2021.10.05.11.29.08.993.0 ]--
r 46         s
--[ 2021.10.05.11.29.09.659.0 ]--
r 46         size
--[ 2021.10.05.11.29.10.766.0 ]--
r 46         size+
--[ 2021.10.05.11.29.10.893.0 ]--
r 46         size++
--[ 2021.10.05.11.29.11.400.0 ]--
r 46         size++;
--[ 2021.10.05.11.29.22.608.0 ]--
r 82 
--[ 2021.10.05.11.35.06.799.0 ]--
r 106     
--[ 2021.10.05.11.35.07.103.0 ]--
r 106         
--[ 2021.10.05.11.35.10.623.0 ]--
r 106         p
--[ 2021.10.05.11.35.10.758.0 ]--
r 106         pr
--[ 2021.10.05.11.35.12.470.0 ]--
r 106         p
--[ 2021.10.05.11.35.12.587.0 ]--
r 106         
--[ 2021.10.05.11.35.14.325.0 ]--
r 106         S
--[ 2021.10.05.11.35.14.716.0 ]--
r 106         St
--[ 2021.10.05.11.35.14.927.0 ]--
r 106         Std
--[ 2021.10.05.11.35.15.792.0 ]--
r 106         StdOut
--[ 2021.10.05.11.35.16.270.0 ]--
r 106         StdOut.
--[ 2021.10.05.11.35.17.331.0 ]--
r 106         StdOut.println
--[ 2021.10.05.11.35.17.337.0 ]--
r 106         StdOut.println()
--[ 2021.10.05.11.35.17.341.0 ]--
r 106         StdOut.println();
--[ 2021.10.05.11.35.26.658.0 ]--
r 106         StdOut.println("");
--[ 2021.10.05.11.35.27.661.0 ]--
r 106         StdOut.println("m");
--[ 2021.10.05.11.35.27.787.0 ]--
r 106         StdOut.println("ma");
--[ 2021.10.05.11.35.27.838.0 ]--
r 106         StdOut.println("mai");
--[ 2021.10.05.11.35.27.901.0 ]--
r 106         StdOut.println("main");
--[ 2021.10.05.11.35.34.580.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.05.11.37.37.038.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.05.11.37.49.889.0 ]--
+ 106         
--[ 2021.10.05.11.38.13.234.0 ]--
- 2
--[ 2021.10.05.11.39.31.109.0 ]--
r 105         S
--[ 2021.10.05.11.39.32.429.0 ]--
r 105         St
--[ 2021.10.05.11.39.33.491.0 ]--
r 105         Ste
--[ 2021.10.05.11.39.34.421.0 ]--
r 105         Steque
--[ 2021.10.05.11.39.35.685.0 ]--
r 105         Steque<>
--[ 2021.10.05.11.39.49.102.0 ]--
r 105         Steque<S>
--[ 2021.10.05.11.39.50.151.0 ]--
r 105         Steque<St>
--[ 2021.10.05.11.39.50.968.0 ]--
r 105         Steque<Str>
--[ 2021.10.05.11.39.51.766.0 ]--
r 105         Steque<String>
--[ 2021.10.05.11.39.53.044.0 ]--
r 105         Steque<String> 
--[ 2021.10.05.11.39.54.974.0 ]--
r 105         Steque<String> t
--[ 2021.10.05.11.39.55.314.0 ]--
r 105         Steque<String> tew
--[ 2021.10.05.11.39.55.823.0 ]--
r 105         Steque<String> te
--[ 2021.10.05.11.39.55.917.0 ]--
r 105         Steque<String> tew
--[ 2021.10.05.11.39.56.244.0 ]--
r 105         Steque<String> tews
--[ 2021.10.05.11.39.56.394.0 ]--
r 105         Steque<String> tew
--[ 2021.10.05.11.39.56.501.0 ]--
r 105         Steque<String> te
--[ 2021.10.05.11.39.56.548.0 ]--
r 105         Steque<String> tes
--[ 2021.10.05.11.39.56.839.0 ]--
r 105         Steque<String> test
--[ 2021.10.05.11.39.57.205.0 ]--
r 105         Steque<String> testS
--[ 2021.10.05.11.39.57.493.0 ]--
r 105         Steque<String> testSt
--[ 2021.10.05.11.39.57.670.0 ]--
r 105         Steque<String> testStr
--[ 2021.10.05.11.39.57.761.0 ]--
r 105         Steque<String> testStri
--[ 2021.10.05.11.39.57.837.0 ]--
r 105         Steque<String> testStrin
--[ 2021.10.05.11.39.58.253.0 ]--
r 105         Steque<String> testString
--[ 2021.10.05.11.39.58.496.0 ]--
r 105         Steque<String> testString 
--[ 2021.10.05.11.39.59.166.0 ]--
r 105         Steque<String> testString =
--[ 2021.10.05.11.39.59.345.0 ]--
r 105         Steque<String> testString = 
--[ 2021.10.05.11.40.02.000.0 ]--
r 105         Steque<String> testString = n
--[ 2021.10.05.11.40.02.148.0 ]--
r 105         Steque<String> testString = ne
--[ 2021.10.05.11.40.02.633.0 ]--
r 105         Steque<String> testString = new
--[ 2021.10.05.11.40.02.640.0 ]--
r 105         Steque<String> testString = new 
--[ 2021.10.05.11.40.03.911.0 ]--
r 105         Steque<String> testString = new S
--[ 2021.10.05.11.40.04.848.0 ]--
r 105         Steque<String> testString = new Steque
--[ 2021.10.05.11.40.04.884.0 ]--
r 105         Steque<String> testString = new Steque<>
--[ 2021.10.05.11.40.04.891.0 ]--
r 105         Steque<String> testString = new Steque<>()
--[ 2021.10.05.11.40.06.383.0 ]--
r 105         Steque<String> testString = new Steque<>();
--[ 2021.10.05.11.40.10.814.0 ]--
+ 106         
--[ 2021.10.05.11.40.12.604.0 ]--
r 106         s
--[ 2021.10.05.11.40.12.881.0 ]--
r 106         
--[ 2021.10.05.11.40.13.120.0 ]--
r 106         t
--[ 2021.10.05.11.40.13.656.0 ]--
r 106         testString
--[ 2021.10.05.11.40.25.709.0 ]--
r 106         testString.
--[ 2021.10.05.11.40.25.857.0 ]--
r 106         testString. 
--[ 2021.10.05.11.40.26.375.0 ]--
r 106         testString.
--[ 2021.10.05.11.40.26.780.0 ]--
r 106         testString.s
--[ 2021.10.05.11.40.28.691.0 ]--
r 106         testString.size
--[ 2021.10.05.11.40.28.697.0 ]--
r 106         testString.size()
--[ 2021.10.05.11.40.32.108.0 ]--
r 106         StestString.size()
--[ 2021.10.05.11.40.34.412.0 ]--
r 106         StdOuttestString.size()
--[ 2021.10.05.11.40.34.422.0 ]--
r 106         StdOut testString.size()
--[ 2021.10.05.11.40.34.431.0 ]--
r 106         StdOuttestString.size()
--[ 2021.10.05.11.40.35.506.0 ]--
r 106         StdOut.testString.size()
--[ 2021.10.05.11.40.35.758.0 ]--
r 106         StdOut.ptestString.size()
--[ 2021.10.05.11.40.36.345.0 ]--
r 106         StdOut.printlntestString.size()
--[ 2021.10.05.11.40.36.358.0 ]--
r 106         StdOut.println()testString.size()
--[ 2021.10.05.11.40.36.363.0 ]--
r 106         StdOut.println();testString.size()
--[ 2021.10.05.11.40.40.283.0 ]--
r 106         StdOut.println();
--[ 2021.10.05.11.40.41.644.0 ]--
r 106         StdOut.println(testString.size());
--[ 2021.10.05.11.40.47.607.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.05.11.41.21.627.0 ]--
- 107
--[ 2021.10.05.11.41.27.306.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.05.11.41.55.443.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.05.11.42.10.241.0 ]--
+ 106         
--[ 2021.10.05.11.42.11.438.0 ]--
r 106         i
--[ 2021.10.05.11.42.11.545.0 ]--
r 106         int
--[ 2021.10.05.11.42.11.990.0 ]--
r 106         int 
--[ 2021.10.05.11.42.12.144.0 ]--
r 106         int s
--[ 2021.10.05.11.42.12.255.0 ]--
r 106         int si
--[ 2021.10.05.11.42.12.902.0 ]--
r 106         int siz
--[ 2021.10.05.11.42.13.205.0 ]--
r 106         int size
--[ 2021.10.05.11.42.13.398.0 ]--
r 106         int size 
--[ 2021.10.05.11.42.14.117.0 ]--
r 106         int size =
--[ 2021.10.05.11.42.14.292.0 ]--
r 106         int size = 
--[ 2021.10.05.11.42.14.760.0 ]--
r 106         int size = t
--[ 2021.10.05.11.42.14.958.0 ]--
r 106         int size = te
--[ 2021.10.05.11.42.15.379.0 ]--
r 106         int size = testString
--[ 2021.10.05.11.42.15.734.0 ]--
r 106         int size = testString.
--[ 2021.10.05.11.42.16.164.0 ]--
r 106         int size = testString.s
--[ 2021.10.05.11.42.16.495.0 ]--
r 106         int size = testString.size
--[ 2021.10.05.11.42.17.333.0 ]--
r 106         int size = testString.size()
--[ 2021.10.05.11.42.19.414.0 ]--
r 106         int size = testString.size();
--[ 2021.10.05.11.42.22.711.0 ]--
r 107 //        StdOut.println(testString.size());
--[ 2021.10.05.11.42.35.049.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.05.11.42.57.755.0 ]--
- 107
--[ 2021.10.05.11.43.00.452.0 ]--
+ 107         
--[ 2021.10.05.11.43.05.271.0 ]--
r 107         i
--[ 2021.10.05.11.43.05.384.0 ]--
r 107         in
--[ 2021.10.05.11.43.05.423.0 ]--
r 107         int
--[ 2021.10.05.11.43.05.863.0 ]--
r 107         int 
--[ 2021.10.05.11.43.06.167.0 ]--
r 107         int i
--[ 2021.10.05.11.43.06.221.0 ]--
r 107         int is
--[ 2021.10.05.11.43.07.021.0 ]--
r 107         int isE
--[ 2021.10.05.11.43.07.552.0 ]--
r 107         int isEm
--[ 2021.10.05.11.43.07.709.0 ]--
r 107         int isEmp
--[ 2021.10.05.11.43.07.992.0 ]--
r 107         int isEmpy
--[ 2021.10.05.11.43.08.076.0 ]--
r 107         int isEmpyt
--[ 2021.10.05.11.43.08.663.0 ]--
r 107         int isEmpy
--[ 2021.10.05.11.43.08.791.0 ]--
r 107         int isEmp
--[ 2021.10.05.11.43.09.245.0 ]--
r 107         int isEmpt
--[ 2021.10.05.11.43.09.317.0 ]--
r 107         int isEmpty
--[ 2021.10.05.11.43.10.108.0 ]--
r 107         int isEmpty()
--[ 2021.10.05.11.43.13.572.0 ]--
r 107         intisEmpty()
--[ 2021.10.05.11.43.13.692.0 ]--
r 107         inisEmpty()
--[ 2021.10.05.11.43.13.838.0 ]--
r 107         iisEmpty()
--[ 2021.10.05.11.43.13.981.0 ]--
r 107         isEmpty()
--[ 2021.10.05.11.43.14.756.0 ]--
r 107         tisEmpty()
--[ 2021.10.05.11.43.14.966.0 ]--
r 107         teisEmpty()
--[ 2021.10.05.11.43.15.417.0 ]--
r 107         testStringisEmpty()
--[ 2021.10.05.11.43.15.753.0 ]--
r 107         testString.isEmpty()
--[ 2021.10.05.11.43.18.477.0 ]--
r 107         testString.isEmpty();
--[ 2021.10.05.11.43.31.280.0 ]--
r 107         atestString.isEmpty();
--[ 2021.10.05.11.43.33.186.0 ]--
r 107         asserttestString.isEmpty();
--[ 2021.10.05.11.43.33.196.0 ]--
r 107         assert testString.isEmpty();
--[ 2021.10.05.11.43.34.355.0 ]--
r 107         assert (testString.isEmpty();
--[ 2021.10.05.11.43.37.460.0 ]--
r 107         assert (testString.isEmpty());
--[ 2021.10.05.11.43.40.525.0 ]--
r 107         assert(testString.isEmpty());
--[ 2021.10.05.11.44.02.676.0 ]--
r 107         assert (testString.isEmpty());
--[ 2021.10.05.11.44.03.109.0 ]--
r 107         assert testString.isEmpty());
--[ 2021.10.05.11.44.04.671.0 ]--
r 107         assert testString.isEmpty();
--[ 2021.10.05.11.45.02.534.0 ]--
r 107         assert testString.isEmpty() ;
--[ 2021.10.05.11.45.03.139.0 ]--
r 107         assert testString.isEmpty() :;
--[ 2021.10.05.11.45.03.443.0 ]--
r 107         assert testString.isEmpty() : ;
--[ 2021.10.05.11.46.31.875.0 ]--
r 107         assert testString.isEmpty() : t;
--[ 2021.10.05.11.46.32.066.0 ]--
r 107         assert testString.isEmpty() : tr;
--[ 2021.10.05.11.46.32.697.0 ]--
r 107         assert testString.isEmpty() : true;
--[ 2021.10.05.11.46.47.563.0 ]--
r 106         assert testString.isEmpty() : true;
--[ 2021.10.05.11.46.52.109.0 ]--
r 106         assert testString.isEmpt() : true;
--[ 2021.10.05.11.46.52.263.0 ]--
r 106         assert testString.isEmp() : true;
--[ 2021.10.05.11.46.52.398.0 ]--
r 106         assert testString.isEm() : true;
--[ 2021.10.05.11.46.52.533.0 ]--
r 106         assert testString.isE() : true;
--[ 2021.10.05.11.46.52.670.0 ]--
r 106         assert testString.is() : true;
--[ 2021.10.05.11.46.52.806.0 ]--
r 106         assert testString.i() : true;
--[ 2021.10.05.11.46.52.930.0 ]--
r 106         assert testString.() : true;
--[ 2021.10.05.11.46.53.428.0 ]--
r 106         assert testString.s() : true;
--[ 2021.10.05.11.46.53.559.0 ]--
r 106         assert testString.si() : true;
--[ 2021.10.05.11.46.53.933.0 ]--
r 106         assert testString.size() : true;
--[ 2021.10.05.11.46.58.124.0 ]--
r 106         assert testString.size() : 0;
--[ 2021.10.05.11.47.08.196.0 ]--
r 106         assert testString.size() : ;
--[ 2021.10.05.11.47.08.571.0 ]--
r 106         assert testString.size() : t;
--[ 2021.10.05.11.47.09.041.0 ]--
r 106         assert testString.size() : testString;
--[ 2021.10.05.11.47.09.596.0 ]--
r 106         assert testString.size() : testStrin;
--[ 2021.10.05.11.47.10.108.0 ]--
r 106         assert testString.size() : testStri;
--[ 2021.10.05.11.47.10.137.0 ]--
r 106         assert testString.size() : testStr;
--[ 2021.10.05.11.47.10.167.0 ]--
r 106         assert testString.size() : testSt;
--[ 2021.10.05.11.47.10.199.0 ]--
r 106         assert testString.size() : testS;
--[ 2021.10.05.11.47.10.240.0 ]--
r 106         assert testString.size() : test;
--[ 2021.10.05.11.47.10.253.0 ]--
r 106         assert testString.size() : tes;
--[ 2021.10.05.11.47.10.404.0 ]--
r 106         assert testString.size() : te;
--[ 2021.10.05.11.47.10.768.0 ]--
r 106         assert testString.size() : t;
--[ 2021.10.05.11.47.10.837.0 ]--
r 106         assert testString.size() : tr;
--[ 2021.10.05.11.47.10.970.0 ]--
r 106         assert testString.size() : tre;
--[ 2021.10.05.11.47.11.876.0 ]--
r 106         assert testString.size() : true;
--[ 2021.10.05.11.47.13.995.0 ]--
r 106         assert testString.size()= : true;
--[ 2021.10.05.11.47.14.127.0 ]--
r 106         assert testString.size()== : true;
--[ 2021.10.05.11.47.14.571.0 ]--
r 106         assert testString.size()==0 : true;
--[ 2021.10.05.11.48.01.015.0 ]--
r 106         assert testString.size()==0 : ;
--[ 2021.10.05.11.48.01.174.0 ]--
r 106         assert testString.size()==0 :;
--[ 2021.10.05.11.48.01.334.0 ]--
r 106         assert testString.size()==0 ;
--[ 2021.10.05.11.48.01.486.0 ]--
r 106         assert testString.size()==0;
--[ 2021.10.05.11.48.02.331.0 ]--
r 107         assert testString.isEmpty() : ;
--[ 2021.10.05.11.48.02.494.0 ]--
r 107         assert testString.isEmpty() :;
--[ 2021.10.05.11.48.02.636.0 ]--
r 107         assert testString.isEmpty() ;
--[ 2021.10.05.11.48.03.432.0 ]--
r 107         assert testString.isEmpty();
--[ 2021.10.05.11.48.06.691.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.05.11.48.09.552.0 ]--
r 106         assert testString.size()==;
--[ 2021.10.05.11.48.09.731.0 ]--
r 106         assert testString.size()==1;
--[ 2021.10.05.11.48.12.842.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.05.11.48.14.564.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.05.11.48.17.547.0 ]--
r 106         assert testString.size()==;
--[ 2021.10.05.11.48.17.734.0 ]--
r 106         assert testString.size()=;
--[ 2021.10.05.11.48.18.060.0 ]--
r 106         assert testString.size();
--[ 2021.10.05.11.48.20.883.0 ]--
r 106         assert testString.size()=;
--[ 2021.10.05.11.48.21.007.0 ]--
r 106         assert testString.size()==;
--[ 2021.10.05.11.48.21.231.0 ]--
r 106         assert testString.size()==0;
--[ 2021.10.05.11.48.25.926.0 ]--
r 107         assert !testString.isEmpty();
--[ 2021.10.05.11.48.29.151.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.05.11.48.31.175.0 ]--
r 107         assert testString.isEmpty();
--[ 2021.10.05.11.51.24.468.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.05.11.51.26.137.0 ]--
r 107         assert !testString.isEmpty();
--[ 2021.10.05.11.51.29.628.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.05.11.52.09.087.0 ]--
r 107         assert testString.isEmpty();
--[ 2021.10.05.11.52.12.755.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.10.38.17.659.0 ]--
:/P02_DataTypes.iml
+ 10     <orderEntry type="library" name="algs4" level="project" />
+ 11     <orderEntry type="library" name="stdlib" level="project" />
--[ 2021.10.11.10.38.22.062.0 ]--
DisposeComponent
--[ 2021.10.11.10.39.07.598.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.10.11.10.39.07.600.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$1.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/OnePointerQueue.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/runConfigurations.xml
/.cos265
/.DS_Store
/readme.html
/P02_DataTypes.iml

--[ 2021.10.11.10.39.07.600.1 ]--
InitFile: /.DS_Store
   Bud1           	                                                           alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                             . i d e alg1Scomp      *�    . i d e amoDDblob      �Q��A    . i d e amodDblob      �Q��A    . i d e aph1Scomp      �     . l o glg1Scomp      t�    . l o gmoDDblob     ��Q��A    . l o gmodDblob     ��Q��A    . l o gph1Scomp      �     o u tlg1Scomp     X�    o u tmoDDblob      �Q��A    o u tmodDblob      �Q��A    o u tph1Scomp     �     s r clg1Scomp     Pt    s r cmoDDblob      �Q��A    s r cmodDblob      �Q��A    s r cph1Scomp     �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.10.11.10.39.07.601.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.10.11.10.39.07.602.0 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            last.next = new Node<>(item);
            last = last.next;
        }
        size++;
    }

    // pushes item to top of steque
    public void push(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            Node<Item> tmp = new Node<>(item);
            tmp.next = first;
            first = tmp;
        }
        size++;
    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) {
            throw new NoSuchElementException("pop called on empty steque\n");
        } else {
            Item tmp = first.item;
            first = first.next;
            size++;
            return tmp;
        }
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            Node<Item> p = first;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                return p.next != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                return p.next.item;
            }

            @Override
            public void remove() {}
        };
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {
        Steque<String> testString = new Steque<>();
        assert testString.size()==0;
        assert testString.isEmpty();
    }
}

--[ 2021.10.11.10.39.07.602.1 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.10.11.10.39.07.602.2 ]--
InitFile: /.cos265


--[ 2021.10.11.10.39.07.603.0 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.11.10.40.13.271.0 ]--
DisposeComponent
--[ 2021.10.11.10.40.55.726.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.10.11.10.40.55.728.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$1.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/OnePointerQueue.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/runConfigurations.xml
/.cos265
/.DS_Store
/readme.html
/P02_DataTypes.iml

--[ 2021.10.11.10.40.55.729.0 ]--
InitFile: /.DS_Store
   Bud1           	                                                           alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                             . i d e alg1Scomp      *�    . i d e amoDDblob      �Q��A    . i d e amodDblob      �Q��A    . i d e aph1Scomp      �     . l o glg1Scomp      t�    . l o gmoDDblob     ��Q��A    . l o gmodDblob     ��Q��A    . l o gph1Scomp      �     o u tlg1Scomp     X�    o u tmoDDblob      �Q��A    o u tmodDblob      �Q��A    o u tph1Scomp     �     s r clg1Scomp     Pt    s r cmoDDblob      �Q��A    s r cmodDblob      �Q��A    s r cph1Scomp     �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.10.11.10.40.55.729.1 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.10.11.10.40.55.729.2 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            last.next = new Node<>(item);
            last = last.next;
        }
        size++;
    }

    // pushes item to top of steque
    public void push(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            Node<Item> tmp = new Node<>(item);
            tmp.next = first;
            first = tmp;
        }
        size++;
    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) {
            throw new NoSuchElementException("pop called on empty steque\n");
        } else {
            Item tmp = first.item;
            first = first.next;
            size++;
            return tmp;
        }
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            Node<Item> p = first;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                return p.next != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                return p.next.item;
            }

            @Override
            public void remove() {}
        };
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {
        Steque<String> testString = new Steque<>();
        assert testString.size()==0;
        assert testString.isEmpty();
    }
}

--[ 2021.10.11.10.40.55.729.3 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.10.11.10.40.55.730.0 ]--
InitFile: /.cos265


--[ 2021.10.11.10.40.55.730.1 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.11.10.41.24.131.0 ]--
UpdateTree (AD): 0 1
- /.idea/runConfigurations.xml

--[ 2021.10.11.10.41.53.739.0 ]--
UpdateTree (AD): 27 0
+ /out/production/P02_DataTypes/algs4.jar
+ /out/production/P02_DataTypes/stdlib.jar
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class
+ /src/algs4.jar
+ /src/stdlib.jar
+ /src/Steque.java
+ /src/MinimumStack.java
+ /src/OnePointerQueue.java
+ /.log/history.log
+ /.idea/copyright/profiles_settings.xml
+ /.idea/libraries/algs4.xml
+ /.idea/libraries/stdlib.xml
+ /.idea/vcs.xml
+ /.idea/misc.xml
+ /.idea/.gitignore
+ /.idea/modules.xml
+ /.idea/compiler.xml
+ /.idea/workspace.xml
+ /.idea/uiDesigner.xml
+ /.cos265
+ /.DS_Store
+ /readme.html
+ /P02_DataTypes.iml

--[ 2021.10.11.10.41.53.739.1 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            last.next = new Node<>(item);
            last = last.next;
        }
        size++;
    }

    // pushes item to top of steque
    public void push(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            Node<Item> tmp = new Node<>(item);
            tmp.next = first;
            first = tmp;
        }
        size++;
    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) {
            throw new NoSuchElementException("pop called on empty steque\n");
        } else {
            Item tmp = first.item;
            first = first.next;
            size++;
            return tmp;
        }
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            Node<Item> p = first;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                return p.next != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                return p.next.item;
            }

            @Override
            public void remove() {}
        };
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {
        Steque<String> testString = new Steque<>();
        assert testString.size()==0;
        assert testString.isEmpty();
    }
}

--[ 2021.10.11.10.41.53.740.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.10.11.10.41.53.740.1 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.10.11.10.41.53.740.2 ]--
InitFile: /.cos265


--[ 2021.10.11.10.41.53.740.3 ]--
InitFile: /.DS_Store
   Bud1           	                                                           alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                             . i d e alg1Scomp      *�    . i d e amoDDblob      �Q��A    . i d e amodDblob      �Q��A    . i d e aph1Scomp      �     . l o glg1Scomp      t�    . l o gmoDDblob     ��Q��A    . l o gmodDblob     ��Q��A    . l o gph1Scomp      �     o u tlg1Scomp     X�    o u tmoDDblob      �Q��A    o u tmodDblob      �Q��A    o u tph1Scomp     �     s r clg1Scomp     Pt    s r cmoDDblob      �Q��A    s r cmodDblob      �Q��A    s r cph1Scomp     �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.10.11.10.41.53.740.4 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.11.10.43.04.059.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.10.44.07.120.0 ]--
:/src/Steque.java
r 106         assert testString.size()==;
--[ 2021.10.11.10.44.07.219.0 ]--
r 106         assert testString.size()==1;
--[ 2021.10.11.10.44.11.416.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.10.44.19.617.0 ]--
r 106         assert testString.size()==10;
--[ 2021.10.11.10.44.20.337.0 ]--
r 106         assert testString.size()==1;
--[ 2021.10.11.10.44.20.475.0 ]--
r 106         assert testString.size()==;
--[ 2021.10.11.10.44.21.040.0 ]--
r 106         assert testString.size()==0;
--[ 2021.10.11.10.44.24.385.0 ]--
+ 108         
--[ 2021.10.11.10.44.55.859.0 ]--
r 108         t
--[ 2021.10.11.10.44.56.078.0 ]--
r 108         te
--[ 2021.10.11.10.44.56.676.0 ]--
r 108         testString
--[ 2021.10.11.10.44.56.890.0 ]--
r 108         testString.
--[ 2021.10.11.10.44.57.128.0 ]--
r 108         testString.e
--[ 2021.10.11.10.44.58.126.0 ]--
r 108         testString.enqueue
--[ 2021.10.11.10.44.58.151.0 ]--
r 108         testString.enqueue()
--[ 2021.10.11.10.44.58.158.0 ]--
r 108         testString.enqueue();
--[ 2021.10.11.10.44.59.750.0 ]--
r 108         testString.enqueue("");
--[ 2021.10.11.10.45.02.709.0 ]--
r 108         testString.enqueue("i");
--[ 2021.10.11.10.45.02.784.0 ]--
r 108         testString.enqueue("it");
--[ 2021.10.11.10.45.02.908.0 ]--
r 108         testString.enqueue("ite");
--[ 2021.10.11.10.45.02.988.0 ]--
r 108         testString.enqueue("item");
--[ 2021.10.11.10.45.03.614.0 ]--
r 108         testString.enqueue("item1");
--[ 2021.10.11.10.45.08.899.0 ]--
r 108         testString.enqueue("item");
--[ 2021.10.11.10.45.09.401.0 ]--
r 108         testString.enqueue("itemu");
--[ 2021.10.11.10.45.09.611.0 ]--
r 108         testString.enqueue("itemun");
--[ 2021.10.11.10.45.09.739.0 ]--
r 108         testString.enqueue("itemuno");
--[ 2021.10.11.10.45.12.104.0 ]--
+ 109         
--[ 2021.10.11.10.45.13.931.0 ]--
r 109         a
--[ 2021.10.11.10.45.14.215.0 ]--
r 109         as
--[ 2021.10.11.10.45.14.385.0 ]--
r 109         ass
--[ 2021.10.11.10.45.14.878.0 ]--
r 109         assert
--[ 2021.10.11.10.45.14.899.0 ]--
r 109         assert 
--[ 2021.10.11.10.45.15.465.0 ]--
r 109         assert  
--[ 2021.10.11.10.45.15.769.0 ]--
r 109         assert 
--[ 2021.10.11.10.45.15.849.0 ]--
r 109         assert t
--[ 2021.10.11.10.45.16.062.0 ]--
r 109         assert te
--[ 2021.10.11.10.45.18.709.0 ]--
r 109         assert testString.isEmpty
--[ 2021.10.11.10.45.18.731.0 ]--
r 109         assert testString;
--[ 2021.10.11.10.45.18.739.0 ]--
r 109         assert testString.isEmpty
--[ 2021.10.11.10.45.18.746.0 ]--
r 109         assert testString.isEmpty()
--[ 2021.10.11.10.45.18.895.0 ]--
r 109         assert testString.isEmpty();
--[ 2021.10.11.10.45.23.234.0 ]--
r 109         assert !testString.isEmpty();
--[ 2021.10.11.10.45.24.341.0 ]--
+ 109         
--[ 2021.10.11.10.45.25.492.0 ]--
r 109         a
--[ 2021.10.11.10.45.25.692.0 ]--
r 109         aa
--[ 2021.10.11.10.45.26.313.0 ]--
r 109         a
--[ 2021.10.11.10.45.26.375.0 ]--
r 109         aa
--[ 2021.10.11.10.45.26.738.0 ]--
r 109         a
--[ 2021.10.11.10.45.26.797.0 ]--
r 109         as
--[ 2021.10.11.10.45.27.355.0 ]--
r 109         assert
--[ 2021.10.11.10.45.27.370.0 ]--
r 109         assert 
--[ 2021.10.11.10.45.27.987.0 ]--
r 109         assert t
--[ 2021.10.11.10.45.28.181.0 ]--
r 109         assert te
--[ 2021.10.11.10.45.28.758.0 ]--
r 109         assert testString
--[ 2021.10.11.10.45.29.264.0 ]--
r 109         assert testString.
--[ 2021.10.11.10.45.29.935.0 ]--
r 109         assert testString.s
--[ 2021.10.11.10.45.30.554.0 ]--
r 109         assert testString.size
--[ 2021.10.11.10.45.32.261.0 ]--
r 109         assert testString.size()
--[ 2021.10.11.10.45.33.723.0 ]--
r 109         assert testString.size()=
--[ 2021.10.11.10.45.33.860.0 ]--
r 109         assert testString.size()==
--[ 2021.10.11.10.45.34.737.0 ]--
r 109         assert testString.size()==1
--[ 2021.10.11.10.45.35.088.0 ]--
r 109         assert testString.size()==1;
--[ 2021.10.11.10.45.37.865.0 ]--
+ 111         
--[ 2021.10.11.10.45.38.384.0 ]--
r 111         t
--[ 2021.10.11.10.45.39.336.0 ]--
r 111         testString
--[ 2021.10.11.10.45.48.459.0 ]--
r 111         testString.
--[ 2021.10.11.10.45.48.891.0 ]--
r 111         testString.p
--[ 2021.10.11.10.45.48.991.0 ]--
r 111         testString.pu
--[ 2021.10.11.10.45.49.867.0 ]--
r 111         testString.push
--[ 2021.10.11.10.45.49.875.0 ]--
r 111         testString.push()
--[ 2021.10.11.10.45.49.881.0 ]--
r 111         testString.push();
--[ 2021.10.11.10.45.51.041.0 ]--
r 111         testString.push("");
--[ 2021.10.11.10.45.52.393.0 ]--
r 111         testString.push("p");
--[ 2021.10.11.10.45.52.455.0 ]--
r 111         testString.push("pu");
--[ 2021.10.11.10.45.52.650.0 ]--
r 111         testString.push("pus");
--[ 2021.10.11.10.45.52.812.0 ]--
r 111         testString.push("push");
--[ 2021.10.11.10.45.55.018.0 ]--
r 111         testString.push("pusht");
--[ 2021.10.11.10.45.55.492.0 ]--
r 111         testString.push("push");
--[ 2021.10.11.10.45.55.714.0 ]--
r 111         testString.push("pushT");
--[ 2021.10.11.10.45.55.871.0 ]--
r 111         testString.push("pushTh");
--[ 2021.10.11.10.45.55.997.0 ]--
r 111         testString.push("pushThi");
--[ 2021.10.11.10.45.56.119.0 ]--
r 111         testString.push("pushThis");
--[ 2021.10.11.10.45.57.364.0 ]--
+ 112         
--[ 2021.10.11.10.45.57.960.0 ]--
r 112         t
--[ 2021.10.11.10.45.58.185.0 ]--
r 112         te
--[ 2021.10.11.10.45.58.581.0 ]--
r 112         testString
--[ 2021.10.11.10.45.58.825.0 ]--
r 112         testString.
--[ 2021.10.11.10.45.59.142.0 ]--
r 112         testString.p
--[ 2021.10.11.10.45.59.504.0 ]--
r 112         testString.po
--[ 2021.10.11.10.46.00.016.0 ]--
r 112         testString.pop
--[ 2021.10.11.10.46.00.024.0 ]--
r 112         testString.pop()
--[ 2021.10.11.10.46.01.170.0 ]--
r 112         testString.pop();
--[ 2021.10.11.10.46.03.422.0 ]--
+ 112         
--[ 2021.10.11.10.46.07.634.0 ]--
+ 112         assert testString.size()==1;
r 113         assert !testString.isEmpty();
--[ 2021.10.11.10.46.09.369.0 ]--
r 112         assert testString.size()==;
--[ 2021.10.11.10.46.09.421.0 ]--
r 112         assert testString.size()==2;
--[ 2021.10.11.10.46.10.687.0 ]--
+ 115         
--[ 2021.10.11.10.46.10.989.0 ]--
+ 115         assert testString.size()==1;
r 116         assert !testString.isEmpty();
--[ 2021.10.11.10.46.15.710.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.10.46.27.457.0 ]--
r 70             size+;
--[ 2021.10.11.10.46.27.643.0 ]--
r 70             size;
--[ 2021.10.11.10.46.28.273.0 ]--
r 70             size-;
--[ 2021.10.11.10.46.28.407.0 ]--
r 70             size--;
--[ 2021.10.11.10.46.32.381.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.10.51.14.603.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.10.51.57.267.0 ]--
r 114         ptestString.pop();
--[ 2021.10.11.10.51.57.382.0 ]--
r 114         potestString.pop();
--[ 2021.10.11.10.51.57.495.0 ]--
r 114         poptestString.pop();
--[ 2021.10.11.10.51.57.664.0 ]--
r 114         popotestString.pop();
--[ 2021.10.11.10.51.57.874.0 ]--
r 114         popoptestString.pop();
--[ 2021.10.11.10.51.58.057.0 ]--
r 114         popotestString.pop();
--[ 2021.10.11.10.51.58.181.0 ]--
r 114         poptestString.pop();
--[ 2021.10.11.10.51.58.370.0 ]--
r 114         popptestString.pop();
--[ 2021.10.11.10.51.58.550.0 ]--
r 114         poppetestString.pop();
--[ 2021.10.11.10.51.58.745.0 ]--
r 114         poppedtestString.pop();
--[ 2021.10.11.10.51.59.725.0 ]--
r 114         poppedStestString.pop();
--[ 2021.10.11.10.51.59.879.0 ]--
r 114         poppedSttestString.pop();
--[ 2021.10.11.10.52.00.028.0 ]--
r 114         poppedStrtestString.pop();
--[ 2021.10.11.10.52.00.083.0 ]--
r 114         poppedStritestString.pop();
--[ 2021.10.11.10.52.00.143.0 ]--
r 114         poppedStrintestString.pop();
--[ 2021.10.11.10.52.00.228.0 ]--
r 114         poppedStringtestString.pop();
--[ 2021.10.11.10.52.00.310.0 ]--
r 114         poppedString testString.pop();
--[ 2021.10.11.10.52.01.098.0 ]--
r 114         poppedString =testString.pop();
--[ 2021.10.11.10.52.01.571.0 ]--
r 114         poppedString = testString.pop();
--[ 2021.10.11.10.52.02.653.0 ]--
r 114         SpoppedString = testString.pop();
--[ 2021.10.11.10.52.05.096.0 ]--
r 114         StringpoppedString = testString.pop();
--[ 2021.10.11.10.52.05.113.0 ]--
r 114         String poppedString = testString.pop();
--[ 2021.10.11.10.52.05.125.0 ]--
r 114         StringpoppedString = testString.pop();
--[ 2021.10.11.10.52.05.670.0 ]--
r 114         String poppedString = testString.pop();
--[ 2021.10.11.10.52.07.895.0 ]--
+ 115         
--[ 2021.10.11.10.52.08.380.0 ]--
r 115         S
--[ 2021.10.11.10.52.08.649.0 ]--
r 115         St
--[ 2021.10.11.10.52.09.313.0 ]--
r 115         Std
--[ 2021.10.11.10.52.12.613.0 ]--
r 115         StdOut
--[ 2021.10.11.10.52.13.536.0 ]--
r 115         StdOut.
--[ 2021.10.11.10.52.13.921.0 ]--
r 115         StdOut.p
--[ 2021.10.11.10.52.14.787.0 ]--
r 115         StdOut.pr
--[ 2021.10.11.10.52.14.866.0 ]--
r 115         StdOut.pri
--[ 2021.10.11.10.52.14.937.0 ]--
r 115         StdOut.prin
--[ 2021.10.11.10.52.15.534.0 ]--
r 115         StdOut.print
--[ 2021.10.11.10.52.15.773.0 ]--
r 115         StdOut.printl
--[ 2021.10.11.10.52.16.296.0 ]--
r 115         StdOut.println
--[ 2021.10.11.10.52.16.305.0 ]--
r 115         StdOut.println()
--[ 2021.10.11.10.52.16.311.0 ]--
r 115         StdOut.println();
--[ 2021.10.11.10.52.18.061.0 ]--
r 115         StdOut.println(p);
--[ 2021.10.11.10.52.18.222.0 ]--
r 115         StdOut.println(po);
--[ 2021.10.11.10.52.18.725.0 ]--
r 115         StdOut.println(poppedString);
--[ 2021.10.11.10.52.22.601.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.10.52.34.930.0 ]--
+ 109         
--[ 2021.10.11.10.52.35.087.0 ]--
+ 109         String poppedString = testString.pop();
r 110         StdOut.println(poppedString);
--[ 2021.10.11.10.52.40.959.0 ]--
r 116         poppedString = testString.pop();
--[ 2021.10.11.10.52.44.713.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.10.52.56.837.0 ]--
r 111         assert testString.size()==;
--[ 2021.10.11.10.52.57.061.0 ]--
r 111         assert testString.size()==0;
--[ 2021.10.11.10.53.02.068.0 ]--
r 114         assert testString.size()==;
--[ 2021.10.11.10.53.02.152.0 ]--
r 114         assert testString.size()==1;
--[ 2021.10.11.10.53.05.808.0 ]--
r 118         assert testString.size()==;
--[ 2021.10.11.10.53.06.092.0 ]--
r 118         assert testString.size()==0;
--[ 2021.10.11.10.53.07.442.0 ]--
r 118         assert testString.size()==;
--[ 2021.10.11.10.53.07.729.0 ]--
r 118         assert testString.size()==1;
--[ 2021.10.11.10.53.08.131.0 ]--
r 114         assert testString.size()==;
--[ 2021.10.11.10.53.08.397.0 ]--
r 114         assert testString.size()==2;
--[ 2021.10.11.10.53.08.865.0 ]--
r 111         assert testString.size()==;
--[ 2021.10.11.10.53.09.158.0 ]--
r 111         assert testString.size()==1;
--[ 2021.10.11.10.53.09.790.0 ]--
r 116         String poppedString = testString.pop();
--[ 2021.10.11.10.53.11.837.0 ]--
r 116         poppedString = testString.pop();
--[ 2021.10.11.10.53.19.325.0 ]--
- 109
r 109         
--[ 2021.10.11.10.53.19.621.0 ]--
- 109
--[ 2021.10.11.10.53.22.705.0 ]--
r 114         SpoppedString = testString.pop();
--[ 2021.10.11.10.53.23.055.0 ]--
r 114         StpoppedString = testString.pop();
--[ 2021.10.11.10.53.23.658.0 ]--
r 114         StrpoppedString = testString.pop();
--[ 2021.10.11.10.53.23.765.0 ]--
r 114         StripoppedString = testString.pop();
--[ 2021.10.11.10.53.23.801.0 ]--
r 114         StrinpoppedString = testString.pop();
--[ 2021.10.11.10.53.24.058.0 ]--
r 114         StringpoppedString = testString.pop();
--[ 2021.10.11.10.53.24.255.0 ]--
r 114         String poppedString = testString.pop();
--[ 2021.10.11.10.53.28.677.0 ]--
+ 116         
--[ 2021.10.11.10.53.28.788.0 ]--
+ 116         String poppedString = testString.pop();
r 117         StdOut.println(poppedString);
--[ 2021.10.11.10.53.33.376.0 ]--
r 116         poppedString = testString.pop();
--[ 2021.10.11.10.53.35.396.0 ]--
r 118         assert testString.size()==;
--[ 2021.10.11.10.53.35.746.0 ]--
r 118         assert testString.size()==0;
--[ 2021.10.11.10.53.38.284.0 ]--
r 119         assert testString.isEmpty();
--[ 2021.10.11.10.53.42.428.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.10.54.37.878.0 ]--
+ 120         
--[ 2021.10.11.10.54.38.044.0 ]--
+ 120         
--[ 2021.10.11.10.54.39.160.0 ]--
r 121         /
--[ 2021.10.11.10.54.39.251.0 ]--
r 121         //
--[ 2021.10.11.10.54.39.996.0 ]--
r 121         // 
--[ 2021.10.11.10.54.40.209.0 ]--
r 121         // b
--[ 2021.10.11.10.54.40.273.0 ]--
r 121         // ba
--[ 2021.10.11.10.54.40.391.0 ]--
r 121         // bad
--[ 2021.10.11.10.54.41.041.0 ]--
r 121         // ba
--[ 2021.10.11.10.54.41.178.0 ]--
r 121         // b
--[ 2021.10.11.10.54.41.312.0 ]--
r 121         // 
--[ 2021.10.11.10.54.42.461.0 ]--
r 121         // f
--[ 2021.10.11.10.54.42.596.0 ]--
r 121         // fi
--[ 2021.10.11.10.54.42.738.0 ]--
r 121         // fia
--[ 2021.10.11.10.54.42.830.0 ]--
r 121         // fial
--[ 2021.10.11.10.54.43.134.0 ]--
r 121         // fia
--[ 2021.10.11.10.54.43.256.0 ]--
r 121         // fi
--[ 2021.10.11.10.54.43.373.0 ]--
r 121         // f
--[ 2021.10.11.10.54.43.510.0 ]--
r 121         // fa
--[ 2021.10.11.10.54.43.567.0 ]--
r 121         // fai
--[ 2021.10.11.10.54.43.689.0 ]--
r 121         // fail
--[ 2021.10.11.10.54.43.741.0 ]--
r 121         // fails
--[ 2021.10.11.10.54.44.402.0 ]--
+ 122         
--[ 2021.10.11.10.55.04.460.0 ]--
r 122         S
--[ 2021.10.11.10.55.04.839.0 ]--
r 122         Sr
--[ 2021.10.11.10.55.05.710.0 ]--
r 122         S
--[ 2021.10.11.10.55.05.745.0 ]--
r 122         St
--[ 2021.10.11.10.55.06.852.0 ]--
r 122         Ste
--[ 2021.10.11.10.55.07.138.0 ]--
r 122         Steq
--[ 2021.10.11.10.55.08.045.0 ]--
r 122         Steque
--[ 2021.10.11.10.55.09.048.0 ]--
r 122         Steque<>
--[ 2021.10.11.10.55.10.435.0 ]--
r 122         Steque<S>
--[ 2021.10.11.10.55.10.678.0 ]--
r 122         Steque<Sr>
--[ 2021.10.11.10.55.11.273.0 ]--
r 122         Steque<S>
--[ 2021.10.11.10.55.11.481.0 ]--
r 122         Steque<>
--[ 2021.10.11.10.55.12.035.0 ]--
r 122         Steque<I>
--[ 2021.10.11.10.55.12.359.0 ]--
r 122         Steque<In>
--[ 2021.10.11.10.55.13.001.0 ]--
r 122         Steque<Int>
--[ 2021.10.11.10.55.13.908.0 ]--
r 122         Steque<Integer>
--[ 2021.10.11.10.55.15.045.0 ]--
r 122         Steque<Integer> 
--[ 2021.10.11.10.55.15.438.0 ]--
r 122         Steque<Integer> t
--[ 2021.10.11.10.55.15.562.0 ]--
r 122         Steque<Integer> te
--[ 2021.10.11.10.55.15.832.0 ]--
r 122         Steque<Integer> tes
--[ 2021.10.11.10.55.15.963.0 ]--
r 122         Steque<Integer> test
--[ 2021.10.11.10.55.16.071.0 ]--
r 122         Steque<Integer> test 
--[ 2021.10.11.10.55.16.443.0 ]--
r 122         Steque<Integer> test
--[ 2021.10.11.10.55.16.711.0 ]--
r 122         Steque<Integer> testI
--[ 2021.10.11.10.55.17.043.0 ]--
r 122         Steque<Integer> testIn
--[ 2021.10.11.10.55.17.198.0 ]--
r 122         Steque<Integer> testInt
--[ 2021.10.11.10.55.17.943.0 ]--
r 122         Steque<Integer> testInt 
--[ 2021.10.11.10.55.18.467.0 ]--
r 122         Steque<Integer> testInt =
--[ 2021.10.11.10.55.18.621.0 ]--
r 122         Steque<Integer> testInt = 
--[ 2021.10.11.10.55.18.909.0 ]--
r 122         Steque<Integer> testInt = n
--[ 2021.10.11.10.55.18.960.0 ]--
r 122         Steque<Integer> testInt = ne
--[ 2021.10.11.10.55.19.614.0 ]--
r 122         Steque<Integer> testInt = new
--[ 2021.10.11.10.55.19.630.0 ]--
r 122         Steque<Integer> testInt = new 
--[ 2021.10.11.10.55.20.566.0 ]--
r 122         Steque<Integer> testInt = new S
--[ 2021.10.11.10.55.20.819.0 ]--
r 122         Steque<Integer> testInt = new St
--[ 2021.10.11.10.55.21.767.0 ]--
r 122         Steque<Integer> testInt = new Steque
--[ 2021.10.11.10.55.21.789.0 ]--
r 122         Steque<Integer> testInt = new Steque<>
--[ 2021.10.11.10.55.21.798.0 ]--
r 122         Steque<Integer> testInt = new Steque<>()
--[ 2021.10.11.10.55.23.282.0 ]--
r 122         Steque<Integer> testInt = new Steque<>();
--[ 2021.10.11.10.56.24.411.0 ]--
r 122         
--[ 2021.10.11.10.56.36.438.0 ]--
r 122         p
--[ 2021.10.11.10.56.36.581.0 ]--
r 122         po
--[ 2021.10.11.10.56.36.726.0 ]--
r 122         pop
--[ 2021.10.11.10.56.37.133.0 ]--
r 122         poppedString
--[ 2021.10.11.10.56.37.688.0 ]--
r 122         poppedString 
--[ 2021.10.11.10.56.38.189.0 ]--
r 122         poppedString =
--[ 2021.10.11.10.56.38.509.0 ]--
r 122         poppedString = 
--[ 2021.10.11.10.56.39.386.0 ]--
r 122         poppedString = t
--[ 2021.10.11.10.56.39.532.0 ]--
r 122         poppedString = te
--[ 2021.10.11.10.56.39.993.0 ]--
r 122         poppedString = testString
--[ 2021.10.11.10.56.40.581.0 ]--
r 122         poppedString = testString.
--[ 2021.10.11.10.56.41.549.0 ]--
r 122         poppedString = testString.pop
--[ 2021.10.11.10.56.41.558.0 ]--
r 122         poppedString = testString.pop()
--[ 2021.10.11.10.56.42.304.0 ]--
r 122         poppedString = testString.pop();
--[ 2021.10.11.10.56.45.020.0 ]--
r 120 
--[ 2021.10.11.10.56.46.700.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.10.56.52.504.0 ]--
r 122 //        poppedString = testString.pop();
--[ 2021.10.11.10.56.54.873.0 ]--
+ 123 
--[ 2021.10.11.10.56.54.907.0 ]--
r 123         
--[ 2021.10.11.10.57.56.526.0 ]--
+ 114         
--[ 2021.10.11.10.57.56.883.0 ]--
+ 114         testString.enqueue("itemuno");
+ 115         assert testString.size()==1;
r 116         assert !testString.isEmpty();
--[ 2021.10.11.10.57.59.377.0 ]--
r 114         testString.enqueue("itemun");
--[ 2021.10.11.10.57.59.407.0 ]--
r 114         testString.enqueue("itemu");
--[ 2021.10.11.10.57.59.509.0 ]--
r 114         testString.enqueue("item");
--[ 2021.10.11.10.57.59.805.0 ]--
r 114         testString.enqueue("itemt");
--[ 2021.10.11.10.58.00.001.0 ]--
r 114         testString.enqueue("itemtr");
--[ 2021.10.11.10.58.00.071.0 ]--
r 114         testString.enqueue("itemtre");
--[ 2021.10.11.10.58.00.325.0 ]--
r 114         testString.enqueue("itemtres");
--[ 2021.10.11.10.58.02.640.0 ]--
r 115         assert testString.size()==;
--[ 2021.10.11.10.58.02.719.0 ]--
r 115         assert testString.size()==3;
--[ 2021.10.11.10.58.08.890.0 ]--
+ 121         
--[ 2021.10.11.10.58.09.032.0 ]--
+ 121         poppedString = testString.pop();
r 122         StdOut.println(poppedString);
--[ 2021.10.11.10.58.11.705.0 ]--
r 128 
--[ 2021.10.11.10.58.13.411.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.10.58.46.719.0 ]--
+ 125         
--[ 2021.10.11.10.58.46.842.0 ]--
+ 125         
--[ 2021.10.11.10.58.47.164.0 ]--
r 126         f
--[ 2021.10.11.10.58.47.603.0 ]--
r 126         fo
--[ 2021.10.11.10.58.47.690.0 ]--
r 126         for
--[ 2021.10.11.10.58.47.763.0 ]--
r 126         for 
--[ 2021.10.11.10.58.51.770.0 ]--
r 126         for ()
--[ 2021.10.11.10.58.52.620.0 ]--
r 126         for 
--[ 2021.10.11.10.58.52.750.0 ]--
r 126         for
--[ 2021.10.11.10.58.52.877.0 ]--
r 126         fo
--[ 2021.10.11.10.58.53.028.0 ]--
r 126         f
--[ 2021.10.11.10.58.53.174.0 ]--
r 126         
--[ 2021.10.11.10.58.53.360.0 ]--
- 125
--[ 2021.10.11.10.58.53.558.0 ]--
- 125
--[ 2021.10.11.10.58.55.850.0 ]--
r 128     
--[ 2021.10.11.10.58.56.200.0 ]--
r 128         
--[ 2021.10.11.10.58.57.003.0 ]--
r 128         f
--[ 2021.10.11.10.58.57.153.0 ]--
r 128         fo
--[ 2021.10.11.10.58.57.212.0 ]--
r 128         for
--[ 2021.10.11.10.58.58.042.0 ]--
r 128         for 
--[ 2021.10.11.10.58.58.430.0 ]--
r 128         for ()
--[ 2021.10.11.10.58.59.812.0 ]--
r 128         for (i)
--[ 2021.10.11.10.58.59.863.0 ]--
r 128         for (in)
--[ 2021.10.11.10.58.59.891.0 ]--
r 128         for (int)
--[ 2021.10.11.10.59.00.591.0 ]--
r 128         for (int )
--[ 2021.10.11.10.59.00.716.0 ]--
r 128         for (int i)
--[ 2021.10.11.10.59.01.389.0 ]--
r 128         for (int i=)
--[ 2021.10.11.10.59.01.575.0 ]--
r 128         for (int i=0)
--[ 2021.10.11.10.59.02.656.0 ]--
r 128         for (int i=0;)
--[ 2021.10.11.10.59.02.921.0 ]--
r 128         for (int i=0; )
--[ 2021.10.11.10.59.03.209.0 ]--
r 128         for (int i=0; i)
--[ 2021.10.11.10.59.03.372.0 ]--
r 128         for (int i=0; in)
--[ 2021.10.11.10.59.03.805.0 ]--
r 128         for (int i=0; i)
--[ 2021.10.11.10.59.04.444.0 ]--
r 128         for (int i=0; i<)
--[ 2021.10.11.10.59.07.322.0 ]--
r 128         for (int i=0; i<t)
--[ 2021.10.11.10.59.08.387.0 ]--
r 128         for (int i=0; i<testString.size)
--[ 2021.10.11.10.59.08.405.0 ]--
r 128         for (int i=0; i<testString;)
--[ 2021.10.11.10.59.08.414.0 ]--
r 128         for (int i=0; i<testString.size)
--[ 2021.10.11.10.59.08.435.0 ]--
r 128         for (int i=0; i< testString.size)
--[ 2021.10.11.10.59.09.665.0 ]--
r 128         for (int i=0; i< testString.size())
--[ 2021.10.11.10.59.10.950.0 ]--
r 128         for (int i=0; i< testString.size();)
--[ 2021.10.11.10.59.11.174.0 ]--
r 128         for (int i=0; i< testString.size(); )
--[ 2021.10.11.10.59.11.654.0 ]--
r 128         for (int i=0; i< testString.size(); i)
--[ 2021.10.11.10.59.12.509.0 ]--
r 128         for (int i=0; i< testString.size(); i+)
--[ 2021.10.11.10.59.12.639.0 ]--
r 128         for (int i=0; i< testString.size(); i++)
--[ 2021.10.11.10.59.13.270.0 ]--
r 128         for (int i=0; i< testString.size(); i++) 
--[ 2021.10.11.10.59.13.564.0 ]--
r 128         for (int i=0; i< testString.size(); i++) {
--[ 2021.10.11.10.59.13.743.0 ]--
+ 129 
+ 130 }
--[ 2021.10.11.10.59.13.753.0 ]--
r 130         }
--[ 2021.10.11.10.59.13.776.0 ]--
r 129             
--[ 2021.10.11.10.59.25.847.0 ]--
+ 128 
--[ 2021.10.11.10.59.25.874.0 ]--
r 128         
--[ 2021.10.11.10.59.26.031.0 ]--
+ 128         testString.enqueue("itemuno");
+ 129         assert testString.size()==1;
r 130         assert !testString.isEmpty();
--[ 2021.10.11.10.59.27.623.0 ]--
+ 131         
--[ 2021.10.11.10.59.27.747.0 ]--
+ 131         testString.enqueue("itemuno");
+ 132         assert testString.size()==1;
r 133         assert !testString.isEmpty();
--[ 2021.10.11.10.59.31.065.0 ]--
r 131         testString.enqueue("tuno");
--[ 2021.10.11.10.59.31.320.0 ]--
r 131         testString.enqueue("teuno");
--[ 2021.10.11.10.59.31.706.0 ]--
r 131         testString.enqueue("tesuno");
--[ 2021.10.11.10.59.31.911.0 ]--
r 131         testString.enqueue("testuno");
--[ 2021.10.11.10.59.33.053.0 ]--
r 131         testString.enqueue("testun");
--[ 2021.10.11.10.59.33.138.0 ]--
r 131         testString.enqueue("testu");
--[ 2021.10.11.10.59.33.258.0 ]--
r 131         testString.enqueue("test");
--[ 2021.10.11.10.59.33.403.0 ]--
r 131         testString.enqueue("testd");
--[ 2021.10.11.10.59.33.629.0 ]--
r 131         testString.enqueue("testds");
--[ 2021.10.11.10.59.33.913.0 ]--
r 131         testString.enqueue("testd");
--[ 2021.10.11.10.59.34.113.0 ]--
r 131         testString.enqueue("testdo");
--[ 2021.10.11.10.59.34.159.0 ]--
r 131         testString.enqueue("testdos");
--[ 2021.10.11.10.59.34.337.0 ]--
r 131         testString.enqueue("testdose");
--[ 2021.10.11.10.59.35.688.0 ]--
r 131         testString.enqueue("testdos");
--[ 2021.10.11.10.59.37.139.0 ]--
r 128         testString.enqueue("iteuno");
--[ 2021.10.11.10.59.37.233.0 ]--
r 128         testString.enqueue("ituno");
--[ 2021.10.11.10.59.37.363.0 ]--
r 128         testString.enqueue("iuno");
--[ 2021.10.11.10.59.37.512.0 ]--
r 128         testString.enqueue("uno");
--[ 2021.10.11.10.59.37.690.0 ]--
r 128         testString.enqueue("tuno");
--[ 2021.10.11.10.59.37.769.0 ]--
r 128         testString.enqueue("teuno");
--[ 2021.10.11.10.59.38.014.0 ]--
r 128         testString.enqueue("tesuno");
--[ 2021.10.11.10.59.38.205.0 ]--
r 128         testString.enqueue("testuno");
--[ 2021.10.11.10.59.40.541.0 ]--
r 132         assert testString.size()==;
--[ 2021.10.11.10.59.40.640.0 ]--
r 132         assert testString.size()==2;
--[ 2021.10.11.10.59.46.744.0 ]--
r 134         for (int i=0; i < testString.size(); i++) {
--[ 2021.10.11.11.00.04.914.0 ]--
r 135             S
--[ 2021.10.11.11.00.05.169.0 ]--
r 135             St
--[ 2021.10.11.11.00.05.969.0 ]--
r 135             Std
--[ 2021.10.11.11.00.06.412.0 ]--
r 135             Std.
--[ 2021.10.11.11.00.06.909.0 ]--
r 135             Std
--[ 2021.10.11.11.00.07.490.0 ]--
r 135             StdO
--[ 2021.10.11.11.00.08.054.0 ]--
r 135             StdOut
--[ 2021.10.11.11.00.11.067.0 ]--
r 135             StdOut.
--[ 2021.10.11.11.00.11.330.0 ]--
r 135             StdOut.p
--[ 2021.10.11.11.00.11.460.0 ]--
r 135             StdOut.pr
--[ 2021.10.11.11.00.12.220.0 ]--
r 135             StdOut.println
--[ 2021.10.11.11.00.12.225.0 ]--
r 135             StdOut.println()
--[ 2021.10.11.11.00.12.229.0 ]--
r 135             StdOut.println();
--[ 2021.10.11.11.00.39.537.0 ]--
r 135             StdOut.println(t);
--[ 2021.10.11.11.00.40.251.0 ]--
r 135             StdOut.println(testString);
--[ 2021.10.11.11.00.41.049.0 ]--
r 135             StdOut.println(testString[]);
--[ 2021.10.11.11.00.42.775.0 ]--
r 135             StdOut.println(testString[i]);
--[ 2021.10.11.11.02.46.988.0 ]--
r 135             StdOut.println(testString.);
--[ 2021.10.11.11.02.47.641.0 ]--
r 135             StdOut.println(testString.i);
--[ 2021.10.11.11.02.47.814.0 ]--
r 135             StdOut.println(testString.it);
--[ 2021.10.11.11.02.48.658.0 ]--
r 135             StdOut.println(testString.iterator);
--[ 2021.10.11.11.02.48.665.0 ]--
r 135             StdOut.println(testString.iterator());
--[ 2021.10.11.11.02.58.869.0 ]--
+ 134         
--[ 2021.10.11.11.03.02.882.0 ]--
r 134         I
--[ 2021.10.11.11.03.03.001.0 ]--
r 134         It
--[ 2021.10.11.11.03.06.008.0 ]--
r 134         I
--[ 2021.10.11.11.03.06.189.0 ]--
r 134         
--[ 2021.10.11.11.03.06.566.0 ]--
r 134         i
--[ 2021.10.11.11.03.06.717.0 ]--
r 134         it
--[ 2021.10.11.11.03.06.830.0 ]--
r 134         ite
--[ 2021.10.11.11.03.06.911.0 ]--
r 134         iter
--[ 2021.10.11.11.03.07.061.0 ]--
r 134         itera
--[ 2021.10.11.11.03.07.168.0 ]--
r 134         iterat
--[ 2021.10.11.11.03.07.454.0 ]--
r 134         iterato
--[ 2021.10.11.11.03.07.510.0 ]--
r 134         iterator
--[ 2021.10.11.11.03.07.901.0 ]--
r 134         iterator 
--[ 2021.10.11.11.03.08.438.0 ]--
r 134         iterator =
--[ 2021.10.11.11.03.08.558.0 ]--
r 134         iterator = 
--[ 2021.10.11.11.03.09.411.0 ]--
r 134         iterator = t
--[ 2021.10.11.11.03.09.541.0 ]--
r 134         iterator = te
--[ 2021.10.11.11.03.10.074.0 ]--
r 134         iterator = testString
--[ 2021.10.11.11.03.10.240.0 ]--
r 134         iterator = testString.
--[ 2021.10.11.11.03.10.519.0 ]--
r 134         iterator = testString.i
--[ 2021.10.11.11.03.11.144.0 ]--
r 134         iterator = testString.iterator
--[ 2021.10.11.11.03.11.151.0 ]--
r 134         iterator = testString.iterator()
--[ 2021.10.11.11.03.12.299.0 ]--
r 134         iterator = testString.iterator();
--[ 2021.10.11.11.03.15.520.0 ]--
r 136             StdOut.println();
--[ 2021.10.11.11.03.23.252.0 ]--
r 134         Iiterator = testString.iterator();
--[ 2021.10.11.11.03.23.483.0 ]--
r 134         Ititerator = testString.iterator();
--[ 2021.10.11.11.03.23.558.0 ]--
r 134         Iteiterator = testString.iterator();
--[ 2021.10.11.11.03.23.614.0 ]--
r 134         Iteriterator = testString.iterator();
--[ 2021.10.11.11.03.25.489.0 ]--
r 134         Iterableiterator = testString.iterator();
--[ 2021.10.11.11.03.25.506.0 ]--
r 134         Iterable iterator = testString.iterator();
--[ 2021.10.11.11.03.25.517.0 ]--
r 134         Iterableiterator = testString.iterator();
--[ 2021.10.11.11.03.26.552.0 ]--
r 134         Iterable<iterator = testString.iterator();
--[ 2021.10.11.11.03.27.021.0 ]--
r 134         Iterable<>iterator = testString.iterator();
--[ 2021.10.11.11.03.27.390.0 ]--
r 134         Iterable<> iterator = testString.iterator();
--[ 2021.10.11.11.03.32.650.0 ]--
r 134         Iterable<S> iterator = testString.iterator();
--[ 2021.10.11.11.03.33.383.0 ]--
r 134         Iterable<String> iterator = testString.iterator();
--[ 2021.10.11.11.04.33.332.0 ]--
r 134         Iterabl<String> iterator = testString.iterator();
--[ 2021.10.11.11.04.33.450.0 ]--
r 134         Iterab<String> iterator = testString.iterator();
--[ 2021.10.11.11.04.33.598.0 ]--
r 134         Itera<String> iterator = testString.iterator();
--[ 2021.10.11.11.04.34.383.0 ]--
r 134         Iterat<String> iterator = testString.iterator();
--[ 2021.10.11.11.04.34.451.0 ]--
r 134         Iterato<String> iterator = testString.iterator();
--[ 2021.10.11.11.04.34.555.0 ]--
r 134         Iterator<String> iterator = testString.iterator();
--[ 2021.10.11.11.04.34.642.0 ]--
r 134         Iterator <String> iterator = testString.iterator();
--[ 2021.10.11.11.04.35.568.0 ]--
r 134         Iterator<String> iterator = testString.iterator();
--[ 2021.10.11.11.05.04.113.0 ]--
r 136             StdOut.println(t);
--[ 2021.10.11.11.05.04.341.0 ]--
r 136             StdOut.println(te);
--[ 2021.10.11.11.05.04.948.0 ]--
r 136             StdOut.println(testString);
--[ 2021.10.11.11.05.05.900.0 ]--
r 136             StdOut.println(testString.);
--[ 2021.10.11.11.05.06.828.0 ]--
r 136             StdOut.println(testString.n);
--[ 2021.10.11.11.05.07.755.0 ]--
r 136             StdOut.println(testString.);
--[ 2021.10.11.11.05.07.895.0 ]--
r 136             StdOut.println(testString.t);
--[ 2021.10.11.11.05.08.021.0 ]--
r 136             StdOut.println(testString.te);
--[ 2021.10.11.11.05.08.695.0 ]--
r 136             StdOut.println(testString.iterator);
--[ 2021.10.11.11.05.08.702.0 ]--
r 136             StdOut.println(testString.iterator());
--[ 2021.10.11.11.05.08.934.0 ]--
r 136             StdOut.println(testString.iterator().);
--[ 2021.10.11.11.05.12.229.0 ]--
r 136             StdOut.println(testString.iterator().next);
--[ 2021.10.11.11.05.12.234.0 ]--
r 136             StdOut.println(testString.iterator().next());
--[ 2021.10.11.11.05.36.424.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.11.05.57.824.0 ]--
r 136             StdOut.println(testString.iterator());
--[ 2021.10.11.11.06.01.058.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.11.06.12.119.0 ]--
r 136             StdOut.println(testString.iterator().);
--[ 2021.10.11.11.06.34.301.0 ]--
r 136             StdOut.println(testString.iterator().n);
--[ 2021.10.11.11.06.34.354.0 ]--
r 136             StdOut.println(testString.iterator().ne);
--[ 2021.10.11.11.06.34.593.0 ]--
r 136             StdOut.println(testString.iterator().nex);
--[ 2021.10.11.11.06.35.668.0 ]--
r 136             StdOut.println(testString.iterator().ne);
--[ 2021.10.11.11.06.35.795.0 ]--
r 136             StdOut.println(testString.iterator().n);
--[ 2021.10.11.11.06.35.973.0 ]--
r 136             StdOut.println(testString.iterator().);
--[ 2021.10.11.11.06.36.452.0 ]--
r 136             StdOut.println(testString.iterator().c);
--[ 2021.10.11.11.06.37.405.0 ]--
r 136             StdOut.println(testString.iterator().);
--[ 2021.10.11.11.06.37.580.0 ]--
r 136             StdOut.println(testString.iterator());
--[ 2021.10.11.11.06.37.913.0 ]--
r 136             StdOut.println(testString.iterator().);
--[ 2021.10.11.11.07.11.929.0 ]--
r 136             StdOut.println(testString.iterator().p);
--[ 2021.10.11.11.07.16.918.0 ]--
r 136             StdOut.println(testString.iterator().);
--[ 2021.10.11.11.07.17.378.0 ]--
r 136             StdOut.println(testString.iterator());
--[ 2021.10.11.11.08.17.875.0 ]--
r 135     
--[ 2021.10.11.11.08.18.186.0 ]--
- 135
--[ 2021.10.11.11.08.20.115.0 ]--
- 136
--[ 2021.10.11.11.08.21.540.0 ]--
r 135         StdOut.println(testString.iterator());
--[ 2021.10.11.11.08.25.158.0 ]--
r 135         StdOut.println(testString.iterator().);
--[ 2021.10.11.11.08.27.810.0 ]--
r 135         StdOut.println(testString.iterator().next);
--[ 2021.10.11.11.08.27.816.0 ]--
r 135         StdOut.println(testString.iterator().next());
--[ 2021.10.11.11.08.31.206.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.11.08.38.358.0 ]--
r 135         StdOut.println("testString.iterator().next());
--[ 2021.10.11.11.08.38.502.0 ]--
r 135         StdOut.println(""testString.iterator().next());
--[ 2021.10.11.11.08.41.054.0 ]--
r 135         StdOut.println(""+testString.iterator().next());
--[ 2021.10.11.11.08.43.194.0 ]--
r 135         StdOut.println("" +testString.iterator().next());
--[ 2021.10.11.11.08.43.625.0 ]--
r 135         StdOut.println("" +t estString.iterator().next());
--[ 2021.10.11.11.08.44.449.0 ]--
r 135         StdOut.println("" + t estString.iterator().next());
--[ 2021.10.11.11.08.46.242.0 ]--
r 135         StdOut.println("" + testString.iterator().next());
--[ 2021.10.11.11.08.49.613.0 ]--
r 135         StdOut.println("i" + testString.iterator().next());
--[ 2021.10.11.11.08.49.733.0 ]--
r 135         StdOut.println("it" + testString.iterator().next());
--[ 2021.10.11.11.08.49.869.0 ]--
r 135         StdOut.println("ite" + testString.iterator().next());
--[ 2021.10.11.11.08.50.004.0 ]--
r 135         StdOut.println("iter" + testString.iterator().next());
--[ 2021.10.11.11.08.50.250.0 ]--
r 135         StdOut.println("itera" + testString.iterator().next());
--[ 2021.10.11.11.08.50.362.0 ]--
r 135         StdOut.println("iterat" + testString.iterator().next());
--[ 2021.10.11.11.08.51.850.0 ]--
r 135         StdOut.println("iterate" + testString.iterator().next());
--[ 2021.10.11.11.08.55.436.0 ]--
r 135         StdOut.println("iterate:" + testString.iterator().next());
--[ 2021.10.11.11.08.58.671.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.11.09.07.262.0 ]--
+ 136         
--[ 2021.10.11.11.09.07.499.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next());
--[ 2021.10.11.11.09.09.791.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().);
--[ 2021.10.11.11.09.10.143.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().n);
--[ 2021.10.11.11.09.10.894.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().ne);
--[ 2021.10.11.11.09.11.412.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().nex);
--[ 2021.10.11.11.09.11.687.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().next);
--[ 2021.10.11.11.09.12.913.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().next;
--[ 2021.10.11.11.09.13.470.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().next();
--[ 2021.10.11.11.09.17.384.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().next());
--[ 2021.10.11.11.09.22.230.0 ]--
UpdateTree (AD): 0 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class

--[ 2021.10.11.11.09.22.230.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@2c272bbb
--[ 2021.10.11.11.09.43.410.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().next();
--[ 2021.10.11.11.09.43.412.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.43.432.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.43.544.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().next);
--[ 2021.10.11.11.09.43.545.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.43.550.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.43.552.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.43.821.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().nex);
--[ 2021.10.11.11.09.43.822.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.43.824.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.43.958.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().ne);
--[ 2021.10.11.11.09.43.960.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.43.962.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.44.092.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().n);
--[ 2021.10.11.11.09.44.093.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.44.095.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.44.421.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().);
--[ 2021.10.11.11.09.44.422.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.44.425.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.45.156.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().n);
--[ 2021.10.11.11.09.45.157.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.45.160.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.46.037.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().ne);
--[ 2021.10.11.11.09.46.038.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.46.039.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.46.785.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().nex);
--[ 2021.10.11.11.09.46.786.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.46.788.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.47.924.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().ne);
--[ 2021.10.11.11.09.47.924.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.47.930.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.48.028.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().n);
--[ 2021.10.11.11.09.48.030.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.48.032.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.48.173.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().);
--[ 2021.10.11.11.09.48.175.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.48.177.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.54.786.0 ]--
+ 135         
--[ 2021.10.11.11.09.54.786.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.54.788.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.55.341.0 ]--
r 135         i
--[ 2021.10.11.11.09.55.342.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.55.345.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.55.346.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.55.347.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.55.350.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.55.351.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.55.490.0 ]--
r 135         it
--[ 2021.10.11.11.09.55.491.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.55.493.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.57.689.0 ]--
r 135         ite
--[ 2021.10.11.11.09.57.690.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.57.693.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.045.0 ]--
r 135         it
--[ 2021.10.11.11.09.58.045.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.047.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.162.0 ]--
r 135         i
--[ 2021.10.11.11.09.58.163.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.165.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.324.0 ]--
r 135         
--[ 2021.10.11.11.09.58.324.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.326.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.326.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.327.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.329.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.331.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.548.0 ]--
r 135         S
--[ 2021.10.11.11.09.58.549.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.550.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.552.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.554.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.556.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.558.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.807.0 ]--
r 135         St
--[ 2021.10.11.11.09.58.808.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.58.810.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.59.597.0 ]--
r 135         Str
--[ 2021.10.11.11.09.59.597.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.09.59.598.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.00.231.0 ]--
r 135         Stri
--[ 2021.10.11.11.10.00.232.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.00.234.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.00.273.0 ]--
r 135         Strin
--[ 2021.10.11.11.10.00.273.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.00.275.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.00.352.0 ]--
r 135         String
--[ 2021.10.11.11.10.00.353.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.00.355.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.01.034.0 ]--
r 135         String 
--[ 2021.10.11.11.10.01.035.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.01.037.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.01.207.0 ]--
r 135         String i
--[ 2021.10.11.11.10.01.208.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.01.211.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.01.213.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.01.214.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.01.215.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.01.216.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.01.218.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.01.220.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.01.313.0 ]--
r 135         String it
--[ 2021.10.11.11.10.01.314.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.01.316.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.02.687.0 ]--
r 135         String ite
--[ 2021.10.11.11.10.02.689.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.02.691.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.02.805.0 ]--
r 135         String item
--[ 2021.10.11.11.10.02.805.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.02.807.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.03.756.0 ]--
r 135         String ite
--[ 2021.10.11.11.10.03.757.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.03.759.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.03.871.0 ]--
r 135         String it
--[ 2021.10.11.11.10.03.872.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.03.873.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.04.011.0 ]--
r 135         String i
--[ 2021.10.11.11.10.04.012.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.04.014.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.04.132.0 ]--
r 135         String ir
--[ 2021.10.11.11.10.04.134.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.04.136.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.04.419.0 ]--
r 135         String i
--[ 2021.10.11.11.10.04.420.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.04.423.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.04.483.0 ]--
r 135         String it
--[ 2021.10.11.11.10.04.484.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.04.487.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.04.627.0 ]--
r 135         String ite
--[ 2021.10.11.11.10.04.629.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.04.631.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.04.678.0 ]--
r 135         String iter
--[ 2021.10.11.11.10.04.679.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.04.681.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.05.797.0 ]--
r 135         String iter 
--[ 2021.10.11.11.10.05.798.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.05.799.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.06.497.0 ]--
r 135         String iter =
--[ 2021.10.11.11.10.06.498.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.06.500.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.06.502.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.06.503.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.06.505.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.06.506.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.06.627.0 ]--
r 135         String iter = 
--[ 2021.10.11.11.10.06.628.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.06.630.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.07.628.0 ]--
r 135         String iter = t
--[ 2021.10.11.11.10.07.629.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.07.631.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.07.633.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.07.635.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.07.638.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.08.296.0 ]--
r 135         String iter = testString
--[ 2021.10.11.11.10.08.297.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.08.302.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.08.507.0 ]--
r 135         String iter = testString.
--[ 2021.10.11.11.10.08.508.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.08.510.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.08.512.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.08.513.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.08.515.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.08.829.0 ]--
r 135         String iter = testString.i
--[ 2021.10.11.11.10.08.830.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.08.832.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.08.833.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.08.835.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.08.837.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.09.625.0 ]--
r 135         String iter = testString.iterator
--[ 2021.10.11.11.10.09.626.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.09.628.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.09.634.0 ]--
r 135         String iter = testString.iterator()
--[ 2021.10.11.11.10.09.636.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.09.639.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.09.994.0 ]--
r 135         String iter = testString.iterator().
--[ 2021.10.11.11.10.09.995.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.09.997.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.09.998.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.09.999.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.10.000.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.10.266.0 ]--
r 135         String iter = testString.iterator().n
--[ 2021.10.11.11.10.10.267.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.10.268.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.10.270.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.10.272.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.10.273.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.10.905.0 ]--
r 135         String iter = testString.iterator().next
--[ 2021.10.11.11.10.10.906.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.10.908.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.10.914.0 ]--
r 135         String iter = testString.iterator().next()
--[ 2021.10.11.11.10.10.915.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.10.917.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.11.372.0 ]--
r 135         String iter = testString.iterator().next();
--[ 2021.10.11.11.10.11.372.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.11.375.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.071.0 ]--
r 136         StdOut.println("iterate:" + o);
--[ 2021.10.11.11.10.17.072.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.075.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.092.0 ]--
r 136         StdOut.println("iterate:" + oi);
--[ 2021.10.11.11.10.17.094.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.096.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.176.0 ]--
r 136         StdOut.println("iterate:" + oit);
--[ 2021.10.11.11.10.17.177.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.178.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.451.0 ]--
r 136         StdOut.println("iterate:" + oi);
--[ 2021.10.11.11.10.17.453.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.455.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.583.0 ]--
r 136         StdOut.println("iterate:" + o);
--[ 2021.10.11.11.10.17.585.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.587.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.688.0 ]--
r 136         StdOut.println("iterate:" + );
--[ 2021.10.11.11.10.17.689.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.692.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.693.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.877.0 ]--
r 136         StdOut.println("iterate:" + i);
--[ 2021.10.11.11.10.17.878.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.880.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.882.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.942.0 ]--
r 136         StdOut.println("iterate:" + it);
--[ 2021.10.11.11.10.17.943.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.17.945.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.18.524.0 ]--
r 136         StdOut.println("iterate:" + iter);
--[ 2021.10.11.11.10.18.525.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.18.526.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.22.370.0 ]--
r 137         StdOut.println("iterate:" + t);
--[ 2021.10.11.11.10.22.371.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.22.372.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.22.373.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.22.375.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.22.434.0 ]--
r 137         StdOut.println("iterate:" + );
--[ 2021.10.11.11.10.22.435.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.22.436.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.22.437.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.22.833.0 ]--
r 137         StdOut.println("iterate:" + i);
--[ 2021.10.11.11.10.22.835.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.22.836.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.22.838.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.22.956.0 ]--
r 137         StdOut.println("iterate:" + it);
--[ 2021.10.11.11.10.22.957.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.22.958.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.23.573.0 ]--
r 137         StdOut.println("iterate:" + iter);
--[ 2021.10.11.11.10.23.574.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.23.575.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.23.717.0 ]--
r 137         StdOut.println("iterate:" + iter.);
--[ 2021.10.11.11.10.23.718.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.23.721.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.23.722.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.23.724.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.24.828.0 ]--
r 137         StdOut.println("iterate:" + iter.n);
--[ 2021.10.11.11.10.24.828.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.24.830.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.25.376.0 ]--
r 137         StdOut.println("iterate:" + iter.ne);
--[ 2021.10.11.11.10.25.377.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.25.380.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.26.061.0 ]--
r 137         StdOut.println("iterate:" + iter.nex);
--[ 2021.10.11.11.10.26.062.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.26.064.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.26.505.0 ]--
r 137         StdOut.println("iterate:" + iter.next);
--[ 2021.10.11.11.10.26.506.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.26.508.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.27.358.0 ]--
r 137         StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.11.10.27.359.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.10.27.362.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.09.337.0 ]--
r 137         StdOut.println("iterate:" + iter);
--[ 2021.10.11.11.12.09.338.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.09.340.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.09.523.0 ]--
r 137         StdOut.println("iterate:" + it);
--[ 2021.10.11.11.12.09.524.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.09.526.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.09.719.0 ]--
r 137         StdOut.println("iterate:" + );
--[ 2021.10.11.11.12.09.719.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.09.720.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.09.721.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.09.917.0 ]--
r 137         StdOut.println("iterate:" + testString.iterator().next().);
--[ 2021.10.11.11.12.09.918.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.09.919.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.09.921.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.10.475.0 ]--
r 136         StdOut.println("iterate:" + it);
--[ 2021.10.11.11.12.10.475.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.10.477.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.10.740.0 ]--
r 136         StdOut.println("iterate:" + );
--[ 2021.10.11.11.12.10.740.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.10.742.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.10.743.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.11.039.0 ]--
r 136         StdOut.println("iterate:" + oit);
--[ 2021.10.11.11.12.11.040.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.11.041.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.11.042.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.11.334.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next());
--[ 2021.10.11.11.12.11.335.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.11.336.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.19.191.0 ]--
r 135         String iter = testString.iterator().next()
--[ 2021.10.11.11.12.19.192.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.19.194.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.19.444.0 ]--
r 135         String iter = testString.iterator().n
--[ 2021.10.11.11.12.19.445.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.19.447.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.19.699.0 ]--
r 135         String iter = testString.iterator()
--[ 2021.10.11.11.12.19.700.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.19.702.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.19.952.0 ]--
r 135         String iter = testString.i
--[ 2021.10.11.11.12.19.954.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.19.955.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.133.0 ]--
r 135         String iter = testString
--[ 2021.10.11.11.12.20.134.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.136.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.137.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.138.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.301.0 ]--
r 135         String iter = t
--[ 2021.10.11.11.12.20.302.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.304.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.503.0 ]--
r 135         String i
--[ 2021.10.11.11.12.20.504.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.505.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.506.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.507.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.508.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.509.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.694.0 ]--
r 135         String ir
--[ 2021.10.11.11.12.20.695.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.697.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.933.0 ]--
r 135         String i
--[ 2021.10.11.11.12.20.935.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.20.936.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.148.0 ]--
r 135         String item
--[ 2021.10.11.11.12.21.150.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.152.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.373.0 ]--
r 135         
--[ 2021.10.11.11.12.21.374.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.376.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.378.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.379.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.553.0 ]--
r 135         ite
--[ 2021.10.11.11.12.21.555.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.556.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.558.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.559.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.560.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.562.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.879.0 ]--
r 135         
--[ 2021.10.11.11.12.21.879.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.881.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.882.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.882.1 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.883.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.21.884.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.22.200.0 ]--
- 135
--[ 2021.10.11.11.12.22.201.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.22.202.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.24.494.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().nex);
--[ 2021.10.11.11.12.24.495.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.24.497.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.24.745.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().);
--[ 2021.10.11.11.12.24.747.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.24.749.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.24.894.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().next());
--[ 2021.10.11.11.12.24.895.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.24.896.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.25.277.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().next();
--[ 2021.10.11.11.12.25.278.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.25.279.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.25.916.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().next;
--[ 2021.10.11.11.12.25.917.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.25.920.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.26.148.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next().next);
--[ 2021.10.11.11.12.26.149.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.26.151.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.26.396.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next());
--[ 2021.10.11.11.12.26.397.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.26.398.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.26.830.0 ]--
r 136         
--[ 2021.10.11.11.12.26.832.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.26.833.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.26.835.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.26.836.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.27.017.0 ]--
- 136
--[ 2021.10.11.11.12.27.019.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.27.021.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.37.253.0 ]--
+ 136         
--[ 2021.10.11.11.12.37.254.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.37.255.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.40.138.0 ]--
- 136
--[ 2021.10.11.11.12.40.139.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.12.40.140.0 ]--
UpdateTree (AD): 3 3
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.13.25.333.0 ]--
+ 136         
--[ 2021.10.11.11.13.25.485.0 ]--
r 136         StdOut.println("iterate:" + testString.iterator().next());
--[ 2021.10.11.11.13.26.547.0 ]--
+ 136         
--[ 2021.10.11.11.13.38.364.0 ]--
r 135         StdOut.println("iterate:" + testString.iterator(.next());
--[ 2021.10.11.11.13.38.505.0 ]--
r 135         StdOut.println("iterate:" + testString.iterator.next());
--[ 2021.10.11.11.13.39.796.0 ]--
r 137         StdOut.println("iterate:" + testString.iterator(.next());
--[ 2021.10.11.11.13.39.953.0 ]--
r 137         StdOut.println("iterate:" + testString.iterator.next());
--[ 2021.10.11.11.13.46.476.0 ]--
r 134         Iterator<String> i = testString.iterator();
--[ 2021.10.11.11.13.46.687.0 ]--
r 134         Iterator<String> it = testString.iterator();
--[ 2021.10.11.11.13.46.803.0 ]--
r 134         Iterator<String> ite = testString.iterator();
--[ 2021.10.11.11.13.46.876.0 ]--
r 134         Iterator<String> iter = testString.iterator();
--[ 2021.10.11.11.13.47.339.0 ]--
r 134         Iterator<String> itera = testString.iterator();
--[ 2021.10.11.11.13.47.691.0 ]--
r 134         Iterator<String> iterab = testString.iterator();
--[ 2021.10.11.11.13.48.065.0 ]--
r 134         Iterator<String> itera = testString.iterator();
--[ 2021.10.11.11.13.48.171.0 ]--
r 134         Iterator<String> iter = testString.iterator();
--[ 2021.10.11.11.13.50.275.0 ]--
r 135         StdOut.println("iterate:" + testString.i.next());
--[ 2021.10.11.11.13.50.296.0 ]--
r 135         StdOut.println("iterate:" + testString.it.next());
--[ 2021.10.11.11.13.53.610.0 ]--
r 135         StdOut.println("iterate:" + .it.next());
--[ 2021.10.11.11.13.54.462.0 ]--
r 135         StdOut.println("iterate:" + it.next());
--[ 2021.10.11.11.13.57.286.0 ]--
r 135         StdOut.println("iterate:" + ite.next());
--[ 2021.10.11.11.13.57.306.0 ]--
r 135         StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.11.14.01.262.0 ]--
r 137         StdOut.println("iterate:" + i.next());
--[ 2021.10.11.11.14.01.448.0 ]--
r 137         StdOut.println("iterate:" + ie.next());
--[ 2021.10.11.11.14.01.786.0 ]--
r 137         StdOut.println("iterate:" + i.next());
--[ 2021.10.11.11.14.01.815.0 ]--
r 137         StdOut.println("iterate:" + it.next());
--[ 2021.10.11.11.14.01.910.0 ]--
r 137         StdOut.println("iterate:" + ite.next());
--[ 2021.10.11.11.14.02.010.0 ]--
r 137         StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.11.14.05.103.0 ]--
r 136 
--[ 2021.10.11.11.14.06.783.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.11.14.10.383.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class

--[ 2021.10.11.11.15.49.677.0 ]--
+ 95                 
--[ 2021.10.11.11.15.55.517.0 ]--
r 95                 I
--[ 2021.10.11.11.15.55.649.0 ]--
r 95                 It
--[ 2021.10.11.11.15.55.878.0 ]--
r 95                 Ite
--[ 2021.10.11.11.15.56.116.0 ]--
r 95                 Item
--[ 2021.10.11.11.16.05.498.0 ]--
+ 96                 
--[ 2021.10.11.11.16.05.543.0 ]--
r 96                         
--[ 2021.10.11.11.16.06.249.0 ]--
- 96
--[ 2021.10.11.11.16.08.490.0 ]--
r 95                 Item 
--[ 2021.10.11.11.16.10.882.0 ]--
r 95                 Item j
--[ 2021.10.11.11.16.11.540.0 ]--
r 95                 Item 
--[ 2021.10.11.11.16.12.778.0 ]--
r 95                 Item t
--[ 2021.10.11.11.16.12.890.0 ]--
r 95                 Item tm
--[ 2021.10.11.11.16.12.931.0 ]--
r 95                 Item tmp
--[ 2021.10.11.11.16.13.230.0 ]--
r 95                 Item tmp 
--[ 2021.10.11.11.16.13.702.0 ]--
r 95                 Item tmp =
--[ 2021.10.11.11.16.13.828.0 ]--
r 95                 Item tmp = 
--[ 2021.10.11.11.16.17.845.0 ]--
r 95                 Item tmp = p
--[ 2021.10.11.11.16.18.149.0 ]--
r 95                 Item tmp = p.
--[ 2021.10.11.11.16.18.628.0 ]--
r 95                 Item tmp = p.n
--[ 2021.10.11.11.16.19.419.0 ]--
r 95                 Item tmp = p.next
--[ 2021.10.11.11.16.19.728.0 ]--
r 95                 Item tmp = p.next.
--[ 2021.10.11.11.16.19.944.0 ]--
r 95                 Item tmp = p.next.i
--[ 2021.10.11.11.16.20.536.0 ]--
r 95                 Item tmp = p.next.item
--[ 2021.10.11.11.16.20.839.0 ]--
r 95                 Item tmp = p.next.item;
--[ 2021.10.11.11.16.27.355.0 ]--
r 96                 return t;
--[ 2021.10.11.11.16.28.008.0 ]--
r 96                 return tm;
--[ 2021.10.11.11.16.28.121.0 ]--
r 96                 return tmp;
--[ 2021.10.11.11.16.29.624.0 ]--
+ 96                 
--[ 2021.10.11.11.16.33.663.0 ]--
r 96                 p
--[ 2021.10.11.11.16.35.077.0 ]--
r 96                 p 
--[ 2021.10.11.11.16.35.685.0 ]--
r 96                 p =
--[ 2021.10.11.11.16.35.843.0 ]--
r 96                 p = 
--[ 2021.10.11.11.16.37.322.0 ]--
r 96                 p = p
--[ 2021.10.11.11.16.37.587.0 ]--
r 96                 p = p.
--[ 2021.10.11.11.16.38.291.0 ]--
r 96                 p = p.n
--[ 2021.10.11.11.16.38.717.0 ]--
r 96                 p = p.next
--[ 2021.10.11.11.16.39.660.0 ]--
r 96                 p = p.next;
--[ 2021.10.11.11.16.46.328.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.11.17.21.610.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.11.17.33.077.0 ]--
r 138     
--[ 2021.10.11.11.17.33.415.0 ]--
r 138         
--[ 2021.10.11.11.17.40.082.0 ]--
r 138         StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.11.17.42.608.0 ]--
r 138         StdOut.println("iterate:" + iter.hnext());
--[ 2021.10.11.11.17.43.390.0 ]--
r 138         StdOut.println("iterate:" + iter.hasNextnext());
--[ 2021.10.11.11.17.43.399.0 ]--
r 138         StdOut.println("iterate:" + iter.hasNext()next());
--[ 2021.10.11.11.17.46.366.0 ]--
r 138         StdOut.println("iterate:" + iter.hasNext()});
--[ 2021.10.11.11.17.46.386.0 ]--
r 138         StdOut.println("iterate:" + iter.hasNext());
--[ 2021.10.11.11.17.50.042.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.11.17.57.043.0 ]--
r 139 //        StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.11.18.12.182.0 ]--
+ 136         
--[ 2021.10.11.11.18.12.470.0 ]--
+ 136         testString.enqueue("testdos");
+ 137         assert testString.size()==2;
r 138         assert !testString.isEmpty();
--[ 2021.10.11.11.18.14.125.0 ]--
r 137         assert testString.size()==;
--[ 2021.10.11.11.18.14.405.0 ]--
r 137         assert testString.size()==3;
--[ 2021.10.11.11.18.16.355.0 ]--
r 136         testString.enqueue("testdo");
--[ 2021.10.11.11.18.16.480.0 ]--
r 136         testString.enqueue("testd");
--[ 2021.10.11.11.18.16.626.0 ]--
r 136         testString.enqueue("test");
--[ 2021.10.11.11.18.17.278.0 ]--
r 136         testString.enqueue("testt");
--[ 2021.10.11.11.18.17.446.0 ]--
r 136         testString.enqueue("testtr");
--[ 2021.10.11.11.18.17.613.0 ]--
r 136         testString.enqueue("testtre");
--[ 2021.10.11.11.18.17.840.0 ]--
r 136         testString.enqueue("testtres");
--[ 2021.10.11.11.18.28.699.0 ]--
r 142         StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.11.18.33.543.0 ]--
+ 143         
--[ 2021.10.11.11.18.33.724.0 ]--
+ 143         StdOut.println("iterate:" + iter.hasNext());
r 144         StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.11.18.38.390.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.11.18.45.033.0 ]--
r 144 //        StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.11.18.52.346.0 ]--
+ 142         
--[ 2021.10.11.11.18.55.440.0 ]--
r 142         t
--[ 2021.10.11.11.18.55.757.0 ]--
r 142         te
--[ 2021.10.11.11.18.56.624.0 ]--
r 142         testString
--[ 2021.10.11.11.18.57.336.0 ]--
r 142         testString.
--[ 2021.10.11.11.18.57.615.0 ]--
r 142         testString.p
--[ 2021.10.11.11.18.58.526.0 ]--
r 142         testString.pop
--[ 2021.10.11.11.18.58.535.0 ]--
r 142         testString.pop()
--[ 2021.10.11.11.18.59.925.0 ]--
r 142         testString.pop();
--[ 2021.10.11.11.19.03.854.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.11.19.08.332.0 ]--
r 142 //        testString.pop();
--[ 2021.10.11.11.19.12.787.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.11.20.08.659.0 ]--
+ 144         
--[ 2021.10.11.11.20.09.036.0 ]--
r 144         t
--[ 2021.10.11.11.20.09.725.0 ]--
r 144         testString
--[ 2021.10.11.11.20.09.951.0 ]--
r 144         testString.
--[ 2021.10.11.11.20.11.068.0 ]--
r 144         testString.p
--[ 2021.10.11.11.20.12.072.0 ]--
r 144         testString.pop
--[ 2021.10.11.11.20.12.078.0 ]--
r 144         testString.pop()
--[ 2021.10.11.11.20.13.169.0 ]--
r 144         testString.pop();
--[ 2021.10.11.11.20.16.791.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.11.20.24.162.0 ]--
r 144 //        testString.pop();
--[ 2021.10.11.11.22.07.671.0 ]--
DisposeComponent
--[ 2021.10.11.11.22.28.110.0 ]--
:/src/MinimumStack.java
r 12         return ;
--[ 2021.10.11.11.22.32.211.0 ]--
r 12         return z;
--[ 2021.10.11.11.22.36.418.0 ]--
r 12         return ;
--[ 2021.10.11.11.22.36.790.0 ]--
r 12         return 0;
--[ 2021.10.11.11.22.46.003.0 ]--
+ 10     
--[ 2021.10.11.11.22.47.222.0 ]--
r 10     private int size = 0;
--[ 2021.10.11.11.22.49.466.0 ]--
r 13         return ;
--[ 2021.10.11.11.22.49.528.0 ]--
r 13         return s;
--[ 2021.10.11.11.22.50.878.0 ]--
r 13         return si;
--[ 2021.10.11.11.22.51.357.0 ]--
r 13         return size;
--[ 2021.10.11.11.23.10.370.0 ]--
- 7
--[ 2021.10.11.11.23.12.945.0 ]--
- 6
r 6     public MinimumStack() {}
--[ 2021.10.11.11.23.13.377.0 ]--
r 6     public MinimumStack() {n}
--[ 2021.10.11.11.23.13.822.0 ]--
r 6     public MinimumStack() {}
--[ 2021.10.11.11.23.14.099.0 ]--
r 6     public MinimumStack() { }
--[ 2021.10.11.11.23.15.152.0 ]--
+ 6     
--[ 2021.10.11.11.23.17.783.0 ]--
r 9     
--[ 2021.10.11.11.23.18.360.0 ]--
- 8
--[ 2021.10.11.11.23.19.678.0 ]--
+ 6     
--[ 2021.10.11.11.23.21.307.0 ]--
r 7     private int size = 0;
--[ 2021.10.11.11.23.21.315.0 ]--
r 6 
--[ 2021.10.11.11.23.31.051.0 ]--
r 9 
--[ 2021.10.11.11.23.38.593.0 ]--
r 17         return s;
--[ 2021.10.11.11.23.38.765.0 ]--
r 17         return si;
--[ 2021.10.11.11.23.40.709.0 ]--
r 17         return size;
--[ 2021.10.11.11.23.40.714.0 ]--
r 17         return size();
--[ 2021.10.11.11.23.41.887.0 ]--
r 17         return size()=;
--[ 2021.10.11.11.23.42.035.0 ]--
r 17         return size()==;
--[ 2021.10.11.11.23.42.242.0 ]--
r 17         return size()==0;
--[ 2021.10.11.11.24.40.876.0 ]--
r 22     
--[ 2021.10.11.11.24.41.259.0 ]--
r 22         
--[ 2021.10.11.11.25.50.511.0 ]--
r 22         S
--[ 2021.10.11.11.25.51.520.0 ]--
r 22         St
--[ 2021.10.11.11.25.54.478.0 ]--
r 22         Sta
--[ 2021.10.11.11.26.04.716.0 ]--
r 22         Stack
--[ 2021.10.11.11.26.06.054.0 ]--
r 22         Stac
--[ 2021.10.11.11.26.06.178.0 ]--
r 22         Sta
--[ 2021.10.11.11.26.06.331.0 ]--
r 22         St
--[ 2021.10.11.11.26.06.480.0 ]--
r 22         S
--[ 2021.10.11.11.26.06.619.0 ]--
r 22         
--[ 2021.10.11.11.26.27.357.0 ]--
+ 8     
--[ 2021.10.11.11.26.28.077.0 ]--
r 8     S
--[ 2021.10.11.11.26.28.386.0 ]--
r 8     St
--[ 2021.10.11.11.26.29.252.0 ]--
r 8     Sta
--[ 2021.10.11.11.26.29.472.0 ]--
r 8     Stac
--[ 2021.10.11.11.26.31.381.0 ]--
r 8     Stack
--[ 2021.10.11.11.26.37.599.0 ]--
r 8     Stack<>
--[ 2021.10.11.11.26.38.497.0 ]--
r 8     Stack<I>
--[ 2021.10.11.11.26.38.722.0 ]--
r 8     Stack<It>
--[ 2021.10.11.11.26.38.897.0 ]--
r 8     Stack<Ite>
--[ 2021.10.11.11.26.39.017.0 ]--
r 8     Stack<Item>
--[ 2021.10.11.11.27.13.688.0 ]--
r 23 
--[ 2021.10.11.11.27.52.977.0 ]--
- 8
--[ 2021.10.11.11.27.56.743.0 ]--
r 22     
--[ 2021.10.11.11.27.57.106.0 ]--
r 22         
--[ 2021.10.11.11.28.01.720.0 ]--
r 22         S
--[ 2021.10.11.11.28.02.180.0 ]--
r 22         St
--[ 2021.10.11.11.28.02.904.0 ]--
r 22         S
--[ 2021.10.11.11.28.03.030.0 ]--
r 22         
--[ 2021.10.11.11.28.03.223.0 ]--
- 22
--[ 2021.10.11.11.28.04.675.0 ]--
+ 22         
--[ 2021.10.11.11.28.14.245.0 ]--
r 8     public MinimumStack(I) { }
--[ 2021.10.11.11.28.14.357.0 ]--
r 8     public MinimumStack(It) { }
--[ 2021.10.11.11.28.14.531.0 ]--
r 8     public MinimumStack(Ite) { }
--[ 2021.10.11.11.28.14.656.0 ]--
r 8     public MinimumStack(Item) { }
--[ 2021.10.11.11.28.17.970.0 ]--
r 8     public MinimumStack(Item) {}
--[ 2021.10.11.11.28.18.181.0 ]--
+ 8     public MinimumStack(Item) {
r 9     }
--[ 2021.10.11.11.28.18.202.0 ]--
+ 9         
--[ 2021.10.11.11.28.27.166.0 ]--
- 8
- 8
r 8     public MinimumStack(Item) {}
--[ 2021.10.11.11.28.27.467.0 ]--
r 8     public MinimumStack(Item) { }
--[ 2021.10.11.11.28.28.072.0 ]--
r 8     public MinimumStack() { }
--[ 2021.10.11.11.28.29.878.0 ]--
r 8     public MinimumStack(Item) { }
--[ 2021.10.11.11.28.30.771.0 ]--
r 8     public MinimumStack() { }
--[ 2021.10.11.11.28.33.623.0 ]--
+ 8     
--[ 2021.10.11.11.28.35.966.0 ]--
r 8     S
--[ 2021.10.11.11.28.36.233.0 ]--
r 8     St
--[ 2021.10.11.11.28.37.316.0 ]--
r 8     Sta
--[ 2021.10.11.11.28.37.442.0 ]--
r 8     Stac
--[ 2021.10.11.11.28.38.637.0 ]--
r 8     Stack
--[ 2021.10.11.11.28.39.701.0 ]--
r 8     Stack<>
--[ 2021.10.11.11.28.40.318.0 ]--
r 8     Stack<I>
--[ 2021.10.11.11.28.40.429.0 ]--
r 8     Stack<It>
--[ 2021.10.11.11.28.40.593.0 ]--
r 8     Stack<Ite>
--[ 2021.10.11.11.28.40.706.0 ]--
r 8     Stack<Item>
--[ 2021.10.11.11.28.42.201.0 ]--
r 8     Stack<Item> 
--[ 2021.10.11.11.28.43.549.0 ]--
r 8     Stack<Item> s
--[ 2021.10.11.11.28.43.782.0 ]--
r 8     Stack<Item> st
--[ 2021.10.11.11.28.44.017.0 ]--
r 8     Stack<Item> sta
--[ 2021.10.11.11.28.44.196.0 ]--
r 8     Stack<Item> stac
--[ 2021.10.11.11.28.44.348.0 ]--
r 8     Stack<Item> stack
--[ 2021.10.11.11.28.45.447.0 ]--
r 8     Stack<Item> stack 
--[ 2021.10.11.11.28.46.209.0 ]--
r 8     Stack<Item> stack =
--[ 2021.10.11.11.28.47.780.0 ]--
r 8     Stack<Item> stack = 
--[ 2021.10.11.11.28.48.738.0 ]--
r 8     Stack<Item> stack = n
--[ 2021.10.11.11.28.48.756.0 ]--
r 8     Stack<Item> stack = ne
--[ 2021.10.11.11.28.49.634.0 ]--
r 8     Stack<Item> stack = new
--[ 2021.10.11.11.28.49.643.0 ]--
r 8     Stack<Item> stack = new 
--[ 2021.10.11.11.28.49.938.0 ]--
r 8     Stack<Item> stack = new S
--[ 2021.10.11.11.28.50.268.0 ]--
r 8     Stack<Item> stack = new St
--[ 2021.10.11.11.28.51.268.0 ]--
r 8     Stack<Item> stack = new Stack
--[ 2021.10.11.11.28.51.282.0 ]--
r 8     Stack<Item> stack = new Stack<>
--[ 2021.10.11.11.28.51.289.0 ]--
r 8     Stack<Item> stack = new Stack<>()
--[ 2021.10.11.11.28.52.663.0 ]--
r 8     Stack<Item> stack = new Stack<>();
--[ 2021.10.11.11.29.09.514.0 ]--
r 23         s
--[ 2021.10.11.11.29.09.818.0 ]--
r 23         st
--[ 2021.10.11.11.29.10.467.0 ]--
r 23         stack
--[ 2021.10.11.11.29.11.730.0 ]--
r 23         stack.
--[ 2021.10.11.11.29.16.580.0 ]--
r 23         stack.push
--[ 2021.10.11.11.29.16.586.0 ]--
r 23         stack.push()
--[ 2021.10.11.11.29.16.589.0 ]--
r 23         stack.push();
--[ 2021.10.11.11.29.18.386.0 ]--
r 23         stack.push(i);
--[ 2021.10.11.11.29.19.311.0 ]--
r 23         stack.push(item);
--[ 2021.10.11.11.29.29.362.0 ]--
r 28         return s;
--[ 2021.10.11.11.29.30.324.0 ]--
r 28         return stack;
--[ 2021.10.11.11.29.30.454.0 ]--
r 28         return stack.;
--[ 2021.10.11.11.29.32.709.0 ]--
r 28         return stack.pop;
--[ 2021.10.11.11.29.32.713.0 ]--
r 28         return stack.pop();
--[ 2021.10.11.11.30.11.621.0 ]--
+ 39         
--[ 2021.10.11.11.30.13.743.0 ]--
- 39
--[ 2021.10.11.11.32.34.028.0 ]--
:/src/Steque.java
r 78         return x {
--[ 2021.10.11.11.32.35.175.0 ]--
r 78         return new Iterator<Item>() {
--[ 2021.10.11.11.32.40.428.0 ]--
:/src/MinimumStack.java
r 39         return new Iterator<Item>();
--[ 2021.10.11.11.32.42.134.0 ]--
r 39         return new Iterator<Item>() ;
--[ 2021.10.11.11.32.42.376.0 ]--
r 39         return new Iterator<Item>() {};
--[ 2021.10.11.11.32.42.761.0 ]--
+ 39         return new Iterator<Item>() {
r 40         };
--[ 2021.10.11.11.32.42.790.0 ]--
+ 40             
--[ 2021.10.11.11.34.13.565.0 ]--
+ 40             int frozenOpCount = opcount;
+ 41             Node<Item> p = first;
+ 42 
+ 43             @Override
+ 44             public boolean hasNext() {
+ 45                 if (frozenOpCount != opcount) {
+ 46                     throw new ConcurrentModificationException("modified stegue while iterating");
+ 47                 }
+ 48                 return p.next != null;
+ 49             }
+ 50 
+ 51             @Override
+ 52             public Item next() {
+ 53                 if (frozenOpCount != opcount) {
+ 54                     throw new ConcurrentModificationException("modified stegue while iterating");
+ 55                 }
+ 56                 Item tmp = p.next.item;
+ 57                 p = p.next;
+ 58                 return tmp;
+ 59             }
+ 60 
+ 61             @Override
r 62             public void remove() {}
--[ 2021.10.11.11.34.13.591.0 ]--
r 41             Steque.Node<Item> p = first;
--[ 2021.10.11.11.34.21.328.0 ]--
- 53
- 53
- 53
- 53
- 53
r 53 
--[ 2021.10.11.11.34.21.868.0 ]--
- 53
--[ 2021.10.11.11.34.24.277.0 ]--
- 45
- 45
- 45
r 45 
--[ 2021.10.11.11.34.24.724.0 ]--
- 45
--[ 2021.10.11.11.34.25.934.0 ]--
- 40
- 40
--[ 2021.10.11.11.34.26.309.0 ]--
- 40
--[ 2021.10.11.11.34.27.339.0 ]--
+ 40             
--[ 2021.10.11.11.34.31.951.0 ]--
- 42
r 42             public boolean hasNext() {}
--[ 2021.10.11.11.34.35.529.0 ]--
+ 42             public boolean hasNext() {
r 43             }
--[ 2021.10.11.11.34.37.066.0 ]--
r 40 
--[ 2021.10.11.11.34.41.659.0 ]--
r 40             
--[ 2021.10.11.11.34.41.950.0 ]--
- 40
--[ 2021.10.11.11.34.42.265.0 ]--
+ 40 
--[ 2021.10.11.11.34.42.636.0 ]--
+ 40             int frozenOpCount = opcount;
+ 41             Steque.Node<Item> p = first;
--[ 2021.10.11.11.34.48.081.0 ]--
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 41
- 41
--[ 2021.10.11.11.34.49.642.0 ]--
- 40
--[ 2021.10.11.11.34.52.199.0 ]--
r 40         ;
--[ 2021.10.11.11.34.52.338.0 ]--
- 39
r 39         return new Iterator<Item>() {;
--[ 2021.10.11.11.34.52.517.0 ]--
r 39         return new Iterator<Item>() ;
--[ 2021.10.11.11.34.52.804.0 ]--
r 39         return new Iterator<Item>();
--[ 2021.10.11.11.34.53.095.0 ]--
r 39         return new Iterator<Item>(;
--[ 2021.10.11.11.34.53.404.0 ]--
r 39         return new Iterator<Item>;
--[ 2021.10.11.11.34.56.960.0 ]--
+ 39         return new Iterator<Item>() {
r 40         };
--[ 2021.10.11.11.34.58.493.0 ]--
r 40         ;
--[ 2021.10.11.11.34.58.649.0 ]--
- 39
r 39         return new Iterator<Item>() {;
--[ 2021.10.11.11.34.58.783.0 ]--
r 39         return new Iterator<Item>() ;
--[ 2021.10.11.11.34.58.937.0 ]--
r 39         return new Iterator<Item>();
--[ 2021.10.11.11.35.01.115.0 ]--
+ 39         return new Iterator<Item>() {
r 40         };
--[ 2021.10.11.11.35.01.907.0 ]--
r 39         return new Iterator<Item>() {z
--[ 2021.10.11.11.35.02.307.0 ]--
r 39         return new Iterator<Item>() {
--[ 2021.10.11.11.35.02.656.0 ]--
+ 40 
--[ 2021.10.11.11.35.02.865.0 ]--
+ 40             int frozenOpCount = opcount;
+ 41             Steque.Node<Item> p = first;
+ 42 
+ 43             @Override
+ 44             public boolean hasNext() {
+ 45             }
+ 46 
+ 47             @Override
+ 48             public Item next() {
+ 49             }
+ 51             @Override
+ 52             public void remove() {}
--[ 2021.10.11.11.35.18.317.0 ]--
- 40
r 40  
--[ 2021.10.11.11.35.18.435.0 ]--
- 40
--[ 2021.10.11.11.35.18.801.0 ]--
r 39         return new Iterator<Item>() 
--[ 2021.10.11.11.35.20.130.0 ]--
r 39         return new Iterator<Item>() {
--[ 2021.10.11.11.35.22.075.0 ]--
- 40
--[ 2021.10.11.11.36.13.982.0 ]--
+ 40 
--[ 2021.10.11.11.36.14.326.0 ]--
r 39         return new Iterator<Item>() 
--[ 2021.10.11.11.36.14.594.0 ]--
+ 39         return new Iterator<Item>() {
+ 40             int frozenOpCount = opcount;
r 41             Steque.Node<Item> p = first;
--[ 2021.10.11.11.36.15.458.0 ]--
+ 45 
--[ 2021.10.11.11.36.15.634.0 ]--
+ 45                 if (frozenOpCount != opcount) {
+ 46                     throw new ConcurrentModificationException("modified stegue while iterating");
+ 47                 }
r 48                 return p.next != null;
--[ 2021.10.11.11.36.16.242.0 ]--
+ 53 
--[ 2021.10.11.11.36.16.399.0 ]--
+ 53                 if (frozenOpCount != opcount) {
+ 54                     throw new ConcurrentModificationException("modified stegue while iterating");
+ 55                 }
+ 56                 Item tmp = p.next.item;
+ 57                 p = p.next;
r 58                 return tmp;
--[ 2021.10.11.11.36.17.608.0 ]--
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
- 40
r 40             
--[ 2021.10.11.11.36.18.326.0 ]--
+ 40             int frozenOpCount = opcount;
+ 41             Steque.Node<Item> p = first;
+ 42 
+ 43             @Override
+ 44             public boolean hasNext() {
+ 45                 if (frozenOpCount != opcount) {
+ 46                     throw new ConcurrentModificationException("modified stegue while iterating");
+ 47                 }
+ 48                 return p.next != null;
+ 49             }
+ 50 
+ 51             @Override
+ 52             public Item next() {
+ 53                 if (frozenOpCount != opcount) {
+ 54                     throw new ConcurrentModificationException("modified stegue while iterating");
+ 55                 }
+ 56                 Item tmp = p.next.item;
+ 57                 p = p.next;
+ 58                 return tmp;
+ 59             }
+ 60 
+ 61             @Override
r 62             public void remove() {}
--[ 2021.10.11.11.36.31.186.0 ]--
r 41             SS<Item> p = first;
--[ 2021.10.11.11.36.32.080.0 ]--
r 41             S<Item> p = first;
--[ 2021.10.11.11.36.32.340.0 ]--
r 41             St<Item> p = first;
--[ 2021.10.11.11.36.34.428.0 ]--
r 41             Steque<Item> p = first;
--[ 2021.10.11.11.36.38.930.0 ]--
r 41             Steque<Item> p = ;
--[ 2021.10.11.11.36.39.671.0 ]--
r 41             Steque<Item> p =;
--[ 2021.10.11.11.36.39.885.0 ]--
r 41             Steque<Item> p ;
--[ 2021.10.11.11.36.40.174.0 ]--
r 41             Steque<Item> p;
--[ 2021.10.11.11.37.08.215.0 ]--
+ 7     
--[ 2021.10.11.11.37.08.660.0 ]--
r 7     private int opcount = 0;
--[ 2021.10.11.11.37.12.858.0 ]--
+ 25         
--[ 2021.10.11.11.37.16.243.0 ]--
- 25
--[ 2021.10.11.11.37.17.047.0 ]--
+ 25         
--[ 2021.10.11.11.37.17.675.0 ]--
r 25         p
--[ 2021.10.11.11.37.18.047.0 ]--
r 25         
--[ 2021.10.11.11.37.18.213.0 ]--
r 25         o
--[ 2021.10.11.11.37.18.365.0 ]--
r 25         op
--[ 2021.10.11.11.37.19.104.0 ]--
r 25         opcount
--[ 2021.10.11.11.37.19.901.0 ]--
r 25         opcount+
--[ 2021.10.11.11.37.20.029.0 ]--
r 25         opcount++
--[ 2021.10.11.11.37.22.711.0 ]--
+ 31         
--[ 2021.10.11.11.37.24.540.0 ]--
- 31
--[ 2021.10.11.11.37.25.486.0 ]--
+ 30         
--[ 2021.10.11.11.37.26.674.0 ]--
r 30         o
--[ 2021.10.11.11.37.26.834.0 ]--
r 30         op
--[ 2021.10.11.11.37.28.167.0 ]--
r 30         opcount
--[ 2021.10.11.11.37.29.010.0 ]--
r 30         opcount+
--[ 2021.10.11.11.37.29.135.0 ]--
r 30         opcount++
--[ 2021.10.11.11.37.29.831.0 ]--
r 30         opcount++;
--[ 2021.10.11.11.37.31.906.0 ]--
r 25         opcount++;
--[ 2021.10.11.11.37.49.836.0 ]--
r 49                     throw new ConcurrentModificationException("modified s while iterating");
--[ 2021.10.11.11.37.50.023.0 ]--
r 49                     throw new ConcurrentModificationException("modified st while iterating");
--[ 2021.10.11.11.37.50.092.0 ]--
r 49                     throw new ConcurrentModificationException("modified sta while iterating");
--[ 2021.10.11.11.37.50.347.0 ]--
r 49                     throw new ConcurrentModificationException("modified stac while iterating");
--[ 2021.10.11.11.37.50.467.0 ]--
r 49                     throw new ConcurrentModificationException("modified stack while iterating");
--[ 2021.10.11.11.37.55.260.0 ]--
r 57                     throw new ConcurrentModificationException("modified s while iterating");
--[ 2021.10.11.11.37.55.399.0 ]--
r 57                     throw new ConcurrentModificationException("modified st while iterating");
--[ 2021.10.11.11.37.55.510.0 ]--
r 57                     throw new ConcurrentModificationException("modified sta while iterating");
--[ 2021.10.11.11.37.55.716.0 ]--
r 57                     throw new ConcurrentModificationException("modified stac while iterating");
--[ 2021.10.11.11.37.55.862.0 ]--
r 57                     throw new ConcurrentModificationException("modified stacl while iterating");
--[ 2021.10.11.11.37.55.908.0 ]--
r 57                     throw new ConcurrentModificationException("modified staclk while iterating");
--[ 2021.10.11.11.37.56.592.0 ]--
r 57                     throw new ConcurrentModificationException("modified stacl while iterating");
--[ 2021.10.11.11.37.56.687.0 ]--
r 57                     throw new ConcurrentModificationException("modified stac while iterating");
--[ 2021.10.11.11.37.57.228.0 ]--
r 57                     throw new ConcurrentModificationException("modified stack while iterating");
--[ 2021.10.11.11.38.06.109.0 ]--
r 51                 return p.nex != null;
--[ 2021.10.11.11.38.06.228.0 ]--
r 51                 return p.ne != null;
--[ 2021.10.11.11.38.06.377.0 ]--
r 51                 return p.n != null;
--[ 2021.10.11.11.38.06.515.0 ]--
r 51                 return p. != null;
--[ 2021.10.11.11.38.06.656.0 ]--
r 51                 return p != null;
--[ 2021.10.11.11.38.06.965.0 ]--
r 51                 return pj != null;
--[ 2021.10.11.11.38.07.447.0 ]--
r 51                 return p != null;
--[ 2021.10.11.11.38.07.635.0 ]--
r 51                 return p. != null;
--[ 2021.10.11.11.39.09.896.0 ]--
r 51                 return p != null;
--[ 2021.10.11.11.39.10.397.0 ]--
r 51                 return pj != null;
--[ 2021.10.11.11.39.10.486.0 ]--
r 51                 return p != null;
--[ 2021.10.11.11.39.10.565.0 ]--
r 51                 return p.next != null;
--[ 2021.10.11.11.39.10.737.0 ]--
r 57                     throw new ConcurrentModificationException("modified stac while iterating");
--[ 2021.10.11.11.39.10.847.0 ]--
r 57                     throw new ConcurrentModificationException("modified staclk while iterating");
--[ 2021.10.11.11.39.10.918.0 ]--
r 57                     throw new ConcurrentModificationException("modified stegue while iterating");
--[ 2021.10.11.11.39.11.077.0 ]--
r 49                     throw new ConcurrentModificationException("modified stegue while iterating");
--[ 2021.10.11.11.39.11.233.0 ]--
r 25         opcount++
--[ 2021.10.11.11.39.12.376.0 ]--
r 25         opcount++;
--[ 2021.10.11.11.39.12.535.0 ]--
r 49                     throw new ConcurrentModificationException("modified stack while iterating");
--[ 2021.10.11.11.39.12.699.0 ]--
r 57                     throw new ConcurrentModificationException("modified staclk while iterating");
--[ 2021.10.11.11.39.12.807.0 ]--
r 57                     throw new ConcurrentModificationException("modified stac while iterating");
--[ 2021.10.11.11.39.12.865.0 ]--
r 57                     throw new ConcurrentModificationException("modified stack while iterating");
--[ 2021.10.11.11.39.13.036.0 ]--
r 51                 return p != null;
--[ 2021.10.11.11.39.13.122.0 ]--
r 51                 return pj != null;
--[ 2021.10.11.11.39.13.209.0 ]--
r 51                 return p != null;
--[ 2021.10.11.11.39.13.289.0 ]--
r 51                 return p. != null;
--[ 2021.10.11.11.39.47.356.0 ]--
+ 30         
--[ 2021.10.11.11.39.48.014.0 ]--
r 30         i
--[ 2021.10.11.11.39.48.127.0 ]--
r 30         if
--[ 2021.10.11.11.39.48.667.0 ]--
r 30         i
--[ 2021.10.11.11.39.48.793.0 ]--
r 30         
--[ 2021.10.11.11.40.15.082.0 ]--
:/src/Steque.java
r 67         } else 
--[ 2021.10.11.11.40.15.226.0 ]--
r 67         } else
--[ 2021.10.11.11.40.15.395.0 ]--
r 67         } els
--[ 2021.10.11.11.40.15.563.0 ]--
r 67         } el
--[ 2021.10.11.11.40.15.782.0 ]--
r 67         } e
--[ 2021.10.11.11.40.15.981.0 ]--
r 67         } 
--[ 2021.10.11.11.40.16.800.0 ]--
r 72         
--[ 2021.10.11.11.40.16.972.0 ]--
- 72
--[ 2021.10.11.11.40.17.245.0 ]--
r 71             return tmp
--[ 2021.10.11.11.40.18.479.0 ]--
+ 71             return tmp;
r 72         }
--[ 2021.10.11.11.40.19.369.0 ]--
r 72         
--[ 2021.10.11.11.40.19.766.0 ]--
- 72
--[ 2021.10.11.11.40.22.103.0 ]--
r 68         Item tmp = first.item;
r 69         first = first.next;
r 70         size--;
r 71         return tmp;
--[ 2021.10.11.11.40.38.620.0 ]--
:/src/MinimumStack.java
r 30 
--[ 2021.10.11.11.40.38.627.0 ]--
:/src/Steque.java
r 67         }
--[ 2021.10.11.11.40.56.651.0 ]--
:/src/MinimumStack.java
r 30     
--[ 2021.10.11.11.40.57.507.0 ]--
r 30         
--[ 2021.10.11.11.41.03.123.0 ]--
r 31             opcount++;
--[ 2021.10.11.11.41.03.516.0 ]--
r 31                 opcount++;
--[ 2021.10.11.11.41.04.359.0 ]--
r 31         opcount++;
--[ 2021.10.11.11.41.06.339.0 ]--
+ 30         if (isEmpty()) {
+ 31             throw new NoSuchElementException("pop called on empty steque\n");
r 32         }
--[ 2021.10.11.11.41.48.291.0 ]--
+ 39         
--[ 2021.10.11.11.41.48.593.0 ]--
+ 39         if (isEmpty()) {
+ 40             throw new NoSuchElementException("pop called on empty steque\n");
r 41         }
--[ 2021.10.11.11.41.53.081.0 ]--
r 40             throw new NoSuchElementException("m called on empty steque\n");
--[ 2021.10.11.11.41.53.222.0 ]--
r 40             throw new NoSuchElementException("mi called on empty steque\n");
--[ 2021.10.11.11.41.53.314.0 ]--
r 40             throw new NoSuchElementException("min called on empty steque\n");
--[ 2021.10.11.11.41.53.462.0 ]--
r 40             throw new NoSuchElementException("mini called on empty steque\n");
--[ 2021.10.11.11.41.54.732.0 ]--
r 40             throw new NoSuchElementException("minim called on empty steque\n");
--[ 2021.10.11.11.41.54.885.0 ]--
r 40             throw new NoSuchElementException("minimu called on empty steque\n");
--[ 2021.10.11.11.41.56.690.0 ]--
r 40             throw new NoSuchElementException("minimum called on empty steque\n");
--[ 2021.10.11.11.41.58.655.0 ]--
r 40             throw new NoSuchElementException("minimum called on empty s\n");
--[ 2021.10.11.11.41.58.793.0 ]--
r 40             throw new NoSuchElementException("minimum called on empty st\n");
--[ 2021.10.11.11.41.58.909.0 ]--
r 40             throw new NoSuchElementException("minimum called on empty sta\n");
--[ 2021.10.11.11.41.59.118.0 ]--
r 40             throw new NoSuchElementException("minimum called on empty stac\n");
--[ 2021.10.11.11.41.59.224.0 ]--
r 40             throw new NoSuchElementException("minimum called on empty stack\n");
--[ 2021.10.11.11.42.01.008.0 ]--
r 31             throw new NoSuchElementException("pop called on empty s\n");
--[ 2021.10.11.11.42.01.144.0 ]--
r 31             throw new NoSuchElementException("pop called on empty st\n");
--[ 2021.10.11.11.42.01.256.0 ]--
r 31             throw new NoSuchElementException("pop called on empty sta\n");
--[ 2021.10.11.11.42.01.484.0 ]--
r 31             throw new NoSuchElementException("pop called on empty stac\n");
--[ 2021.10.11.11.42.01.602.0 ]--
r 31             throw new NoSuchElementException("pop called on empty stack\n");
--[ 2021.10.11.11.42.21.138.0 ]--
r 49 //            int frozenOpCount = opcount;
r 50 //            Steque<Item> p;
r 51 //
r 52 //            @Override
r 53 //            public boolean hasNext() {
r 54 //                if (frozenOpCount != opcount) {
r 55 //                    throw new ConcurrentModificationException("modified stack while iterating");
r 56 //                }
r 57 //                return p. != null;
r 58 //            }
r 59 //
r 60 //            @Override
r 61 //            public Item next() {
r 62 //                if (frozenOpCount != opcount) {
r 63 //                    throw new ConcurrentModificationException("modified stack while iterating");
r 64 //                }
r 65 //                Item tmp = p.next.item;
r 66 //                p = p.next;
r 67 //                return tmp;
r 68 //            }
--[ 2021.10.11.11.42.29.025.0 ]--
r 48 //        return new Iterator<Item>() {
r 49 ////            int frozenOpCount = opcount;
r 50 ////            Steque<Item> p;
r 51 ////
r 52 ////            @Override
r 53 ////            public boolean hasNext() {
r 54 ////                if (frozenOpCount != opcount) {
r 55 ////                    throw new ConcurrentModificationException("modified stack while iterating");
r 56 ////                }
r 57 ////                return p. != null;
r 58 ////            }
r 59 ////
r 60 ////            @Override
r 61 ////            public Item next() {
r 62 ////                if (frozenOpCount != opcount) {
r 63 ////                    throw new ConcurrentModificationException("modified stack while iterating");
r 64 ////                }
r 65 ////                Item tmp = p.next.item;
r 66 ////                p = p.next;
r 67 ////                return tmp;
r 68 ////            }
r 69 //
r 70 //            @Override
r 71 //            public void remove() {}
r 72 //        };
--[ 2021.10.11.11.42.31.076.0 ]--
+ 48         
--[ 2021.10.11.11.42.31.342.0 ]--
r 48         r
--[ 2021.10.11.11.42.31.489.0 ]--
r 48         re
--[ 2021.10.11.11.42.31.576.0 ]--
r 48         ret
--[ 2021.10.11.11.42.31.644.0 ]--
r 48         retu
--[ 2021.10.11.11.42.31.748.0 ]--
r 48         retur
--[ 2021.10.11.11.42.31.833.0 ]--
r 48         return
--[ 2021.10.11.11.42.31.934.0 ]--
r 48         return 
--[ 2021.10.11.11.42.32.448.0 ]--
r 48         return 0
--[ 2021.10.11.11.42.33.072.0 ]--
r 48         return 0;
--[ 2021.10.11.11.42.34.890.0 ]--
r 48         
--[ 2021.10.11.11.42.35.079.0 ]--
- 48
--[ 2021.10.11.11.42.35.547.0 ]--
r 48         return new Iterator<Item>() {
r 49 //            int frozenOpCount = opcount;
r 50 //            Steque<Item> p;
r 51 //
r 52 //            @Override
r 53 //            public boolean hasNext() {
r 54 //                if (frozenOpCount != opcount) {
r 55 //                    throw new ConcurrentModificationException("modified stack while iterating");
r 56 //                }
r 57 //                return p. != null;
r 58 //            }
r 59 //
r 60 //            @Override
r 61 //            public Item next() {
r 62 //                if (frozenOpCount != opcount) {
r 63 //                    throw new ConcurrentModificationException("modified stack while iterating");
r 64 //                }
r 65 //                Item tmp = p.next.item;
r 66 //                p = p.next;
r 67 //                return tmp;
r 68 //            }
r 69 
r 70             @Override
r 71             public void remove() {}
r 72         };
--[ 2021.10.11.11.42.36.127.0 ]--
r 49             int frozenOpCount = opcount;
r 50             Steque<Item> p;
r 51 
r 52             @Override
r 53             public boolean hasNext() {
r 54                 if (frozenOpCount != opcount) {
r 55                     throw new ConcurrentModificationException("modified stack while iterating");
r 56                 }
r 57                 return p. != null;
r 58             }
r 59 
r 60             @Override
r 61             public Item next() {
r 62                 if (frozenOpCount != opcount) {
r 63                     throw new ConcurrentModificationException("modified stack while iterating");
r 64                 }
r 65                 Item tmp = p.next.item;
r 66                 p = p.next;
r 67                 return tmp;
r 68             }
--[ 2021.10.11.12.39.27.020.0 ]--
+ 9     
--[ 2021.10.11.12.39.27.492.0 ]--
r 9     p
--[ 2021.10.11.12.39.28.047.0 ]--
r 9     
--[ 2021.10.11.12.39.32.962.0 ]--
- 9
--[ 2021.10.11.12.39.35.429.0 ]--
+ 10     
--[ 2021.10.11.12.39.35.692.0 ]--
r 10     s
--[ 2021.10.11.12.39.35.979.0 ]--
r 10     st
--[ 2021.10.11.12.39.36.118.0 ]--
r 10     sta
--[ 2021.10.11.12.39.36.278.0 ]--
r 10     stac
--[ 2021.10.11.12.39.36.401.0 ]--
r 10     stack
--[ 2021.10.11.12.39.36.683.0 ]--
r 10     stack.
--[ 2021.10.11.12.39.37.532.0 ]--
r 10     stack
--[ 2021.10.11.12.39.37.673.0 ]--
r 10     stac
--[ 2021.10.11.12.39.37.823.0 ]--
r 10     sta
--[ 2021.10.11.12.39.37.970.0 ]--
r 10     st
--[ 2021.10.11.12.39.38.130.0 ]--
r 10     s
--[ 2021.10.11.12.39.38.289.0 ]--
r 10     
--[ 2021.10.11.12.39.38.625.0 ]--
- 10
--[ 2021.10.11.12.39.40.377.0 ]--
r 10     public MinimumStack() { s}
--[ 2021.10.11.12.39.40.621.0 ]--
r 10     public MinimumStack() { st}
--[ 2021.10.11.12.39.40.871.0 ]--
r 10     public MinimumStack() { sta}
--[ 2021.10.11.12.39.40.971.0 ]--
r 10     public MinimumStack() { stac}
--[ 2021.10.11.12.39.41.121.0 ]--
r 10     public MinimumStack() { stack}
--[ 2021.10.11.12.39.41.439.0 ]--
r 10     public MinimumStack() { stack.}
--[ 2021.10.11.12.39.49.443.0 ]--
r 10     public MinimumStack() { stack}
--[ 2021.10.11.12.39.49.668.0 ]--
r 10     public MinimumStack() { stac}
--[ 2021.10.11.12.39.49.850.0 ]--
r 10     public MinimumStack() { sta}
--[ 2021.10.11.12.39.50.024.0 ]--
r 10     public MinimumStack() { st}
--[ 2021.10.11.12.39.50.197.0 ]--
r 10     public MinimumStack() { s}
--[ 2021.10.11.12.39.50.491.0 ]--
r 10     public MinimumStack() { }
--[ 2021.10.11.12.39.54.011.0 ]--
+ 10     
--[ 2021.10.11.12.40.20.082.0 ]--
+ 9     
--[ 2021.10.11.12.40.38.086.0 ]--
r 9     p
--[ 2021.10.11.12.40.38.227.0 ]--
r 9     pr
--[ 2021.10.11.12.40.38.355.0 ]--
r 9     pri
--[ 2021.10.11.12.40.38.452.0 ]--
r 9     prin
--[ 2021.10.11.12.40.38.518.0 ]--
r 9     print
--[ 2021.10.11.12.40.39.042.0 ]--
r 9     prin
--[ 2021.10.11.12.40.39.151.0 ]--
r 9     pri
--[ 2021.10.11.12.40.39.273.0 ]--
r 9     priv
--[ 2021.10.11.12.40.39.429.0 ]--
r 9     priva
--[ 2021.10.11.12.40.39.592.0 ]--
r 9     privat
--[ 2021.10.11.12.40.39.751.0 ]--
r 9     private
--[ 2021.10.11.12.40.41.080.0 ]--
r 9     private 
--[ 2021.10.11.12.40.41.226.0 ]--
r 9     private i
--[ 2021.10.11.12.40.41.266.0 ]--
r 9     private in
--[ 2021.10.11.12.40.41.381.0 ]--
r 9     private int
--[ 2021.10.11.12.40.41.740.0 ]--
r 9     private int 
--[ 2021.10.11.12.40.41.868.0 ]--
r 9     private int m
--[ 2021.10.11.12.40.42.017.0 ]--
r 9     private int mi
--[ 2021.10.11.12.40.42.107.0 ]--
r 9     private int min
--[ 2021.10.11.12.40.42.883.0 ]--
r 9     private int mini
--[ 2021.10.11.12.40.43.085.0 ]--
r 9     private int minim
--[ 2021.10.11.12.40.43.249.0 ]--
r 9     private int minimu
--[ 2021.10.11.12.40.43.419.0 ]--
r 9     private int minimum
--[ 2021.10.11.12.40.43.818.0 ]--
r 9     private int minimum 
--[ 2021.10.11.12.40.44.738.0 ]--
r 9     private int minimum =
--[ 2021.10.11.12.40.45.919.0 ]--
r 9     private int minimum 
--[ 2021.10.11.12.40.47.011.0 ]--
r 9     private int minimum =
--[ 2021.10.11.12.40.47.444.0 ]--
r 9     private int minimum =0
--[ 2021.10.11.12.40.47.851.0 ]--
r 9     private int minimum =0;
--[ 2021.10.11.12.40.48.848.0 ]--
r 9     private int minimum = 0;
--[ 2021.10.11.12.41.02.227.0 ]--
+ 28         
--[ 2021.10.11.12.41.02.803.0 ]--
r 28         i
--[ 2021.10.11.12.41.02.997.0 ]--
r 28         if
--[ 2021.10.11.12.41.03.011.0 ]--
r 28         if 
--[ 2021.10.11.12.41.05.061.0 ]--
r 28         if ()
--[ 2021.10.11.12.41.06.617.0 ]--
r 28         if 
--[ 2021.10.11.12.41.06.747.0 ]--
r 28         if
--[ 2021.10.11.12.41.06.906.0 ]--
r 28         i
--[ 2021.10.11.12.41.07.607.0 ]--
r 28         if
--[ 2021.10.11.12.41.08.033.0 ]--
r 28         if()
--[ 2021.10.11.12.41.08.400.0 ]--
r 28         if(i)
--[ 2021.10.11.12.41.09.201.0 ]--
r 28         if(item)
--[ 2021.10.11.12.41.09.948.0 ]--
r 28         if(item )
--[ 2021.10.11.12.41.10.622.0 ]--
r 28         if(item <)
--[ 2021.10.11.12.41.10.874.0 ]--
r 28         if(item < )
--[ 2021.10.11.12.41.11.044.0 ]--
r 28         if(item < m)
--[ 2021.10.11.12.41.11.150.0 ]--
r 28         if(item < mi)
--[ 2021.10.11.12.41.11.655.0 ]--
r 28         if(item < minimum)
--[ 2021.10.11.12.41.12.840.0 ]--
r 28         if(item < minimum) 
--[ 2021.10.11.12.41.13.185.0 ]--
r 28         if(item < minimum) {
--[ 2021.10.11.12.41.13.365.0 ]--
+ 29 
+ 30 }
--[ 2021.10.11.12.41.13.377.0 ]--
r 30         }
--[ 2021.10.11.12.41.13.402.0 ]--
r 29             
--[ 2021.10.11.12.41.13.848.0 ]--
r 29             m
--[ 2021.10.11.12.41.13.976.0 ]--
r 29             mi
--[ 2021.10.11.12.41.14.072.0 ]--
r 29             min
--[ 2021.10.11.12.41.14.462.0 ]--
r 29             minimum
--[ 2021.10.11.12.41.14.933.0 ]--
r 29             minimum 
--[ 2021.10.11.12.41.15.048.0 ]--
r 29             minimum =
--[ 2021.10.11.12.41.15.201.0 ]--
r 29             minimum = 
--[ 2021.10.11.12.41.15.350.0 ]--
r 29             minimum = i
--[ 2021.10.11.12.41.15.494.0 ]--
r 29             minimum = it
--[ 2021.10.11.12.41.15.597.0 ]--
r 29             minimum = ite
--[ 2021.10.11.12.41.15.668.0 ]--
r 29             minimum = item
--[ 2021.10.11.12.41.15.978.0 ]--
r 29             minimum = item;
--[ 2021.10.11.12.41.29.218.0 ]--
r 11 
--[ 2021.10.11.12.42.27.003.0 ]--
r 62                 return p.f != null;
--[ 2021.10.11.12.42.27.530.0 ]--
r 62                 return p. != null;
--[ 2021.10.11.12.42.27.976.0 ]--
r 62                 return p.n != null;
--[ 2021.10.11.12.42.28.047.0 ]--
r 62                 return p.ne != null;
--[ 2021.10.11.12.42.28.471.0 ]--
r 62                 return p.nex != null;
--[ 2021.10.11.12.42.29.157.0 ]--
r 62                 return p.next != null;
--[ 2021.10.11.12.45.45.683.0 ]--
+ 50     
--[ 2021.10.11.12.45.46.020.0 ]--
r 50         
--[ 2021.10.11.12.45.46.517.0 ]--
r 50     
--[ 2021.10.11.12.45.47.441.0 ]--
r 50     @
--[ 2021.10.11.12.45.48.299.0 ]--
r 50     @Override
--[ 2021.10.11.12.45.49.446.0 ]--
+ 51     
--[ 2021.10.11.12.45.50.609.0 ]--
r 51     p
--[ 2021.10.11.12.45.51.248.0 ]--
r 51     public
--[ 2021.10.11.12.45.51.265.0 ]--
r 51     public 
--[ 2021.10.11.12.45.53.289.0 ]--
r 51     public C
--[ 2021.10.11.12.45.53.945.0 ]--
r 51     public 
--[ 2021.10.11.12.45.54.000.0 ]--
r 51     public c
--[ 2021.10.11.12.45.54.661.0 ]--
r 51     public 
--[ 2021.10.11.12.45.54.966.0 ]--
r 51     public C
--[ 2021.10.11.12.45.56.324.0 ]--
r 51     public Comparable
--[ 2021.10.11.12.45.57.626.0 ]--
r 51     public Comparable<>
--[ 2021.10.11.12.45.58.125.0 ]--
r 51     public Comparable<i>
--[ 2021.10.11.12.45.58.269.0 ]--
r 51     public Comparable<it>
--[ 2021.10.11.12.45.58.997.0 ]--
r 51     public Comparable<ite>
--[ 2021.10.11.12.45.59.084.0 ]--
r 51     public Comparable<item>
--[ 2021.10.11.12.45.59.870.0 ]--
r 51     public Comparable<ite>
--[ 2021.10.11.12.45.59.997.0 ]--
r 51     public Comparable<it>
--[ 2021.10.11.12.46.00.144.0 ]--
r 51     public Comparable<i>
--[ 2021.10.11.12.46.00.284.0 ]--
r 51     public Comparable<>
--[ 2021.10.11.12.46.00.511.0 ]--
r 51     public Comparable<I>
--[ 2021.10.11.12.46.01.189.0 ]--
r 51     public Comparable<Item>
--[ 2021.10.11.12.46.01.940.0 ]--
r 51     public Comparable<Item> 
--[ 2021.10.11.12.46.02.679.0 ]--
r 51     public Comparable<Item> c
--[ 2021.10.11.12.46.03.576.0 ]--
r 51     public Comparable<Item> co
--[ 2021.10.11.12.46.03.653.0 ]--
r 51     public Comparable<Item> com
--[ 2021.10.11.12.46.03.970.0 ]--
r 51     public Comparable<Item> comp
--[ 2021.10.11.12.46.04.101.0 ]--
r 51     public Comparable<Item> compa
--[ 2021.10.11.12.46.04.276.0 ]--
r 51     public Comparable<Item> compar
--[ 2021.10.11.12.46.04.397.0 ]--
r 51     public Comparable<Item> compare
--[ 2021.10.11.12.46.05.909.0 ]--
r 51     public Comparable<Item> compareT
--[ 2021.10.11.12.46.06.058.0 ]--
r 51     public Comparable<Item> compareTo
--[ 2021.10.11.12.46.07.427.0 ]--
r 51     public Comparable<Item> compareTo()
--[ 2021.10.11.12.46.08.903.0 ]--
r 51     public Comparable<Item> compareTo(){}
--[ 2021.10.11.12.46.09.491.0 ]--
+ 51     public Comparable<Item> compareTo(){
r 52     }
--[ 2021.10.11.12.46.09.528.0 ]--
+ 52         
--[ 2021.10.11.12.46.16.163.0 ]--
r 52         r
--[ 2021.10.11.12.46.16.301.0 ]--
r 52         re
--[ 2021.10.11.12.46.16.436.0 ]--
r 52         ret
--[ 2021.10.11.12.46.16.512.0 ]--
r 52         retu
--[ 2021.10.11.12.46.16.677.0 ]--
r 52         retur
--[ 2021.10.11.12.46.16.732.0 ]--
r 52         return
--[ 2021.10.11.12.46.16.886.0 ]--
r 52         return 
--[ 2021.10.11.12.46.17.501.0 ]--
r 52         return 0
--[ 2021.10.11.12.46.18.444.0 ]--
r 52         return 0;
--[ 2021.10.11.12.46.26.684.0 ]--
r 51     public Comparable<Item> compareTo() {
--[ 2021.10.11.12.46.33.675.0 ]--
r 51     public i compareTo() {
--[ 2021.10.11.12.46.33.727.0 ]--
r 51     public in compareTo() {
--[ 2021.10.11.12.46.33.832.0 ]--
r 51     public int compareTo() {
--[ 2021.10.11.12.46.35.314.0 ]--
- 50
--[ 2021.10.11.12.46.42.152.0 ]--
r 50     p int compareTo() {
--[ 2021.10.11.12.46.42.347.0 ]--
r 50     pr int compareTo() {
--[ 2021.10.11.12.46.42.458.0 ]--
r 50     pri int compareTo() {
--[ 2021.10.11.12.46.42.536.0 ]--
r 50     priv int compareTo() {
--[ 2021.10.11.12.46.42.760.0 ]--
r 50     priva int compareTo() {
--[ 2021.10.11.12.46.42.877.0 ]--
r 50     privat int compareTo() {
--[ 2021.10.11.12.46.43.035.0 ]--
r 50     private int compareTo() {
--[ 2021.10.11.12.47.07.051.0 ]--
r 50     private int compareTo(o) {
--[ 2021.10.11.12.47.07.730.0 ]--
r 50     private int compareTo() {
--[ 2021.10.11.12.47.08.545.0 ]--
r 50     private int compareTo(I) {
--[ 2021.10.11.12.47.09.391.0 ]--
r 50     private int compareTo(Item) {
--[ 2021.10.11.12.47.10.064.0 ]--
r 50     private int compareTo(Item ) {
--[ 2021.10.11.12.47.10.231.0 ]--
r 50     private int compareTo(Item o) {
--[ 2021.10.11.12.47.10.401.0 ]--
r 50     private int compareTo(Item ot) {
--[ 2021.10.11.12.47.10.484.0 ]--
r 50     private int compareTo(Item oth) {
--[ 2021.10.11.12.47.10.548.0 ]--
r 50     private int compareTo(Item othe) {
--[ 2021.10.11.12.47.10.619.0 ]--
r 50     private int compareTo(Item other) {
--[ 2021.10.11.12.47.13.798.0 ]--
+ 51         
--[ 2021.10.11.12.47.45.921.0 ]--
+ 54     
--[ 2021.10.11.12.47.48.856.0 ]--
r 51 
--[ 2021.10.11.12.48.58.250.0 ]--
r 28         if() {
--[ 2021.10.11.12.48.59.127.0 ]--
r 28         if(c) {
--[ 2021.10.11.12.48.59.210.0 ]--
r 28         if(co) {
--[ 2021.10.11.12.48.59.405.0 ]--
r 28         if(com) {
--[ 2021.10.11.12.49.00.248.0 ]--
r 28         if(compareTo) {
--[ 2021.10.11.12.49.00.254.0 ]--
r 28         if(compareTo()) {
--[ 2021.10.11.12.49.18.233.0 ]--
r 28         if(compareTo(m)) {
--[ 2021.10.11.12.49.18.962.0 ]--
r 28         if(compareTo(minimum)) {
--[ 2021.10.11.12.49.18.970.0 ]--
r 28         if(compareTo(minimum())) {
--[ 2021.10.11.12.49.20.228.0 ]--
r 28         if(compareTo(minimum()) {
--[ 2021.10.11.12.49.20.394.0 ]--
r 28         if(compareTo(minimum)) {
--[ 2021.10.11.12.49.28.834.0 ]--
r 9     private int minimumV = 0;
--[ 2021.10.11.12.49.29.068.0 ]--
r 9     private int minimumVa = 0;
--[ 2021.10.11.12.49.29.164.0 ]--
r 9     private int minimumVal = 0;
--[ 2021.10.11.12.49.29.307.0 ]--
r 9     private int minimumValu = 0;
--[ 2021.10.11.12.49.29.424.0 ]--
r 9     private int minimumValue = 0;
--[ 2021.10.11.12.49.31.362.0 ]--
r 28         if(compareTo(minimumV)) {
--[ 2021.10.11.12.49.31.491.0 ]--
r 28         if(compareTo(minimumVa)) {
--[ 2021.10.11.12.49.31.990.0 ]--
r 28         if(compareTo(minimumValue)) {
--[ 2021.10.11.12.49.33.020.0 ]--
r 29             minimumv = item;
--[ 2021.10.11.12.49.33.392.0 ]--
r 29             minimum = item;
--[ 2021.10.11.12.49.33.623.0 ]--
r 29             minimumV = item;
--[ 2021.10.11.12.49.33.693.0 ]--
r 29             minimumVa = item;
--[ 2021.10.11.12.49.34.223.0 ]--
r 29             minimumValue = item;
--[ 2021.10.11.12.49.34.891.0 ]--
r 54 
--[ 2021.10.11.12.49.44.846.0 ]--
r 28         if(compareTo(minimumValu)) {
--[ 2021.10.11.12.49.45.000.0 ]--
r 28         if(compareTo(minimumVal)) {
--[ 2021.10.11.12.49.45.234.0 ]--
r 28         if(compareTo(minimumVa)) {
--[ 2021.10.11.12.49.45.371.0 ]--
r 28         if(compareTo(minimumV)) {
--[ 2021.10.11.12.49.45.506.0 ]--
r 28         if(compareTo(minimum)) {
--[ 2021.10.11.12.49.45.838.0 ]--
r 28         if(compareTo(minimumi)) {
--[ 2021.10.11.12.49.46.018.0 ]--
r 28         if(compareTo(minimumit)) {
--[ 2021.10.11.12.49.46.370.0 ]--
r 28         if(compareTo(minimumi)) {
--[ 2021.10.11.12.49.46.489.0 ]--
r 28         if(compareTo(minimum)) {
--[ 2021.10.11.12.49.46.780.0 ]--
r 28         if(compareTo(minimumI)) {
--[ 2021.10.11.12.49.46.964.0 ]--
r 28         if(compareTo(minimumIt)) {
--[ 2021.10.11.12.49.47.134.0 ]--
r 28         if(compareTo(minimumIte)) {
--[ 2021.10.11.12.49.47.341.0 ]--
r 28         if(compareTo(minimumItem)) {
--[ 2021.10.11.12.49.48.656.0 ]--
r 29             minimumValu = item;
--[ 2021.10.11.12.49.48.779.0 ]--
r 29             minimumVal = item;
--[ 2021.10.11.12.49.48.930.0 ]--
r 29             minimumVa = item;
--[ 2021.10.11.12.49.49.083.0 ]--
r 29             minimumV = item;
--[ 2021.10.11.12.49.49.185.0 ]--
r 29             minimum = item;
--[ 2021.10.11.12.49.49.877.0 ]--
r 29             minimumI = item;
--[ 2021.10.11.12.49.50.495.0 ]--
r 29             minimumIt = item;
--[ 2021.10.11.12.49.50.618.0 ]--
r 29             minimumIte = item;
--[ 2021.10.11.12.49.50.698.0 ]--
r 29             minimumItem = item;
--[ 2021.10.11.12.49.55.801.0 ]--
r 9     private int minimumValu = 0;
--[ 2021.10.11.12.49.56.279.0 ]--
r 9     private int minimumVal = 0;
--[ 2021.10.11.12.49.56.443.0 ]--
r 9     private int minimumVa = 0;
--[ 2021.10.11.12.49.56.600.0 ]--
r 9     private int minimumV = 0;
--[ 2021.10.11.12.49.56.933.0 ]--
r 9     private int minimumVI = 0;
--[ 2021.10.11.12.49.57.113.0 ]--
r 9     private int minimumVIt = 0;
--[ 2021.10.11.12.49.57.285.0 ]--
r 9     private int minimumVI = 0;
--[ 2021.10.11.12.49.57.401.0 ]--
r 9     private int minimumV = 0;
--[ 2021.10.11.12.49.57.526.0 ]--
r 9     private int minimum = 0;
--[ 2021.10.11.12.49.57.799.0 ]--
r 9     private int minimumI = 0;
--[ 2021.10.11.12.49.58.250.0 ]--
r 9     private int minimumIt = 0;
--[ 2021.10.11.12.49.58.540.0 ]--
r 9     private int minimumItem = 0;
--[ 2021.10.11.12.49.59.827.0 ]--
r 9     private I minimumItem = 0;
--[ 2021.10.11.12.50.00.568.0 ]--
r 9     private Item minimumItem = 0;
--[ 2021.10.11.12.50.01.685.0 ]--
r 9     private Item minimumItem = ;
--[ 2021.10.11.12.50.01.822.0 ]--
r 9     private Item minimumItem =;
--[ 2021.10.11.12.50.01.980.0 ]--
r 9     private Item minimumItem ;
--[ 2021.10.11.12.50.02.133.0 ]--
r 9     private Item minimumItem;
--[ 2021.10.11.12.50.41.113.0 ]--
r 28         if(compareTo(minimumItem)=) {
--[ 2021.10.11.12.50.41.256.0 ]--
r 28         if(compareTo(minimumItem)==) {
--[ 2021.10.11.12.50.42.208.0 ]--
r 28         if(compareTo(minimumItem)==0) {
--[ 2021.10.11.12.52.52.618.0 ]--
r 28         if(compareTo(minimumItem)==) {
--[ 2021.10.11.12.52.52.688.0 ]--
r 28         if(compareTo(minimumItem)==1) {
--[ 2021.10.11.12.53.06.535.0 ]--
r 47         return m;
--[ 2021.10.11.12.53.06.685.0 ]--
r 47         return mi;
--[ 2021.10.11.12.53.06.794.0 ]--
r 47         return min;
--[ 2021.10.11.12.53.08.105.0 ]--
r 47         return minimumItem;
--[ 2021.10.11.12.54.12.681.0 ]--
+ 38         
--[ 2021.10.11.12.54.12.942.0 ]--
r 38         /
--[ 2021.10.11.12.54.13.062.0 ]--
r 38         //
--[ 2021.10.11.12.54.13.360.0 ]--
r 38         //d
--[ 2021.10.11.12.54.13.702.0 ]--
r 38         //
--[ 2021.10.11.12.54.13.841.0 ]--
r 38         // 
--[ 2021.10.11.12.54.13.984.0 ]--
r 38         // o
--[ 2021.10.11.12.54.14.073.0 ]--
r 38         // od
--[ 2021.10.11.12.54.14.149.0 ]--
r 38         // od 
--[ 2021.10.11.12.54.14.395.0 ]--
r 38         // od s
--[ 2021.10.11.12.54.14.629.0 ]--
r 38         // od 
--[ 2021.10.11.12.54.14.737.0 ]--
r 38         // od
--[ 2021.10.11.12.54.14.874.0 ]--
r 38         // o
--[ 2021.10.11.12.54.15.006.0 ]--
r 38         // 
--[ 2021.10.11.12.54.15.318.0 ]--
r 38         // T
--[ 2021.10.11.12.54.16.323.0 ]--
r 38         // TO
--[ 2021.10.11.12.54.16.612.0 ]--
r 38         // TOD
--[ 2021.10.11.12.54.16.759.0 ]--
r 38         // TODO
--[ 2021.10.11.12.54.17.594.0 ]--
r 38         // TODO 
--[ 2021.10.11.12.54.17.817.0 ]--
r 38         // TODO d
--[ 2021.10.11.12.54.17.929.0 ]--
r 38         // TODO do
--[ 2021.10.11.12.54.18.096.0 ]--
r 38         // TODO do 
--[ 2021.10.11.12.54.18.613.0 ]--
r 38         // TODO do s
--[ 2021.10.11.12.54.18.704.0 ]--
r 38         // TODO do so
--[ 2021.10.11.12.54.18.775.0 ]--
r 38         // TODO do som
--[ 2021.10.11.12.54.18.820.0 ]--
r 38         // TODO do some
--[ 2021.10.11.12.54.19.005.0 ]--
r 38         // TODO do somet
--[ 2021.10.11.12.54.19.054.0 ]--
r 38         // TODO do someth
--[ 2021.10.11.12.54.19.127.0 ]--
r 38         // TODO do somethi
--[ 2021.10.11.12.54.19.230.0 ]--
r 38         // TODO do somethin
--[ 2021.10.11.12.54.19.940.0 ]--
r 38         // TODO do something
--[ 2021.10.11.12.54.20.007.0 ]--
r 38         // TODO do something 
--[ 2021.10.11.12.54.20.516.0 ]--
r 38         // TODO do something i
--[ 2021.10.11.12.54.20.607.0 ]--
r 38         // TODO do something if
--[ 2021.10.11.12.54.20.658.0 ]--
r 38         // TODO do something if 
--[ 2021.10.11.12.54.20.827.0 ]--
r 38         // TODO do something if m
--[ 2021.10.11.12.54.20.951.0 ]--
r 38         // TODO do something if mi
--[ 2021.10.11.12.54.21.022.0 ]--
r 38         // TODO do something if min
--[ 2021.10.11.12.54.21.166.0 ]--
r 38         // TODO do something if mini
--[ 2021.10.11.12.54.21.770.0 ]--
r 38         // TODO do something if minim
--[ 2021.10.11.12.54.22.269.0 ]--
r 38         // TODO do something if minimu
--[ 2021.10.11.12.54.22.569.0 ]--
r 38         // TODO do something if minimum
--[ 2021.10.11.12.54.22.791.0 ]--
r 38         // TODO do something if minimum 
--[ 2021.10.11.12.54.23.181.0 ]--
r 38         // TODO do something if minimum g
--[ 2021.10.11.12.54.23.313.0 ]--
r 38         // TODO do something if minimum ge
--[ 2021.10.11.12.54.23.389.0 ]--
r 38         // TODO do something if minimum get
--[ 2021.10.11.12.54.23.577.0 ]--
r 38         // TODO do something if minimum gets
--[ 2021.10.11.12.54.23.702.0 ]--
r 38         // TODO do something if minimum gets 
--[ 2021.10.11.12.54.23.877.0 ]--
r 38         // TODO do something if minimum gets p
--[ 2021.10.11.12.54.24.081.0 ]--
r 38         // TODO do something if minimum gets po
--[ 2021.10.11.12.54.24.257.0 ]--
r 38         // TODO do something if minimum gets pop
--[ 2021.10.11.12.54.24.393.0 ]--
r 38         // TODO do something if minimum gets popp
--[ 2021.10.11.12.54.24.482.0 ]--
r 38         // TODO do something if minimum gets poppe
--[ 2021.10.11.12.54.24.643.0 ]--
r 38         // TODO do something if minimum gets popped
--[ 2021.10.11.12.54.32.346.0 ]--
- 52
--[ 2021.10.11.12.54.33.442.0 ]--
r 52         return ;
--[ 2021.10.11.12.54.33.611.0 ]--
r 52         return 1;
--[ 2021.10.11.12.54.34.979.0 ]--
+ 52         
--[ 2021.10.11.12.54.36.184.0 ]--
r 52         T
--[ 2021.10.11.12.54.36.466.0 ]--
r 52         TD
--[ 2021.10.11.12.54.37.028.0 ]--
r 52         T
--[ 2021.10.11.12.54.37.634.0 ]--
r 52         TO
--[ 2021.10.11.12.54.37.752.0 ]--
r 52         TOD
--[ 2021.10.11.12.54.37.869.0 ]--
r 52         TODO
--[ 2021.10.11.12.54.39.524.0 ]--
r 52 //        TODO
--[ 2021.10.11.12.54.41.064.0 ]--
r 52 //        TODO 
--[ 2021.10.11.12.54.41.189.0 ]--
r 52 //        TODO i
--[ 2021.10.11.12.54.41.315.0 ]--
r 52 //        TODO im
--[ 2021.10.11.12.54.41.458.0 ]--
r 52 //        TODO imp
--[ 2021.10.11.12.54.41.628.0 ]--
r 52 //        TODO impo
--[ 2021.10.11.12.54.42.106.0 ]--
r 52 //        TODO imp
--[ 2021.10.11.12.54.42.280.0 ]--
r 52 //        TODO impl
--[ 2021.10.11.12.54.42.346.0 ]--
r 52 //        TODO imple
--[ 2021.10.11.12.54.42.459.0 ]--
r 52 //        TODO implem
--[ 2021.10.11.12.54.42.625.0 ]--
r 52 //        TODO impleme
--[ 2021.10.11.12.54.42.798.0 ]--
r 52 //        TODO implemen
--[ 2021.10.11.12.54.42.863.0 ]--
r 52 //        TODO implement
--[ 2021.10.11.12.54.44.360.0 ]--
r 52 //        TODO implement 
--[ 2021.10.11.12.54.44.466.0 ]--
r 52 //        TODO implement t
--[ 2021.10.11.12.54.44.527.0 ]--
r 52 //        TODO implement th
--[ 2021.10.11.12.54.44.594.0 ]--
r 52 //        TODO implement thi
--[ 2021.10.11.12.54.44.662.0 ]--
r 52 //        TODO implement this
--[ 2021.10.11.12.54.44.788.0 ]--
r 52 //        TODO implement this 
--[ 2021.10.11.12.54.44.913.0 ]--
r 52 //        TODO implement this f
--[ 2021.10.11.12.54.44.987.0 ]--
r 52 //        TODO implement this fu
--[ 2021.10.11.12.54.45.237.0 ]--
r 52 //        TODO implement this f
--[ 2021.10.11.12.54.45.357.0 ]--
r 52 //        TODO implement this 
--[ 2021.10.11.12.54.45.494.0 ]--
r 52 //        TODO implement this m
--[ 2021.10.11.12.54.45.531.0 ]--
r 52 //        TODO implement this me
--[ 2021.10.11.12.54.45.649.0 ]--
r 52 //        TODO implement this met
--[ 2021.10.11.12.54.45.703.0 ]--
r 52 //        TODO implement this meth
--[ 2021.10.11.12.54.45.772.0 ]--
r 52 //        TODO implement this metho
--[ 2021.10.11.12.54.45.844.0 ]--
r 52 //        TODO implement this method
--[ 2021.10.11.12.54.54.487.0 ]--
r 52         TODO implement this method
--[ 2021.10.11.12.54.56.148.0 ]--
r 52         /TODO implement this method
--[ 2021.10.11.12.54.56.246.0 ]--
r 52         //TODO implement this method
--[ 2021.10.11.12.54.56.328.0 ]--
r 52         // TODO implement this method
--[ 2021.10.11.12.55.06.310.0 ]--
r 61             Stequ<Item> p;
--[ 2021.10.11.12.55.06.447.0 ]--
r 61             Steq<Item> p;
--[ 2021.10.11.12.55.06.584.0 ]--
r 61             Ste<Item> p;
--[ 2021.10.11.12.55.06.724.0 ]--
r 61             St<Item> p;
--[ 2021.10.11.12.55.06.930.0 ]--
r 61             Sta<Item> p;
--[ 2021.10.11.12.55.07.168.0 ]--
r 61             Stack<Item> p;
--[ 2021.10.11.12.55.13.359.0 ]--
r 68                 return p;
--[ 2021.10.11.12.55.16.610.0 ]--
r 78                 return p;
--[ 2021.10.11.12.55.18.630.0 ]--
- 76
r 76 
--[ 2021.10.11.12.55.19.832.0 ]--
- 76
--[ 2021.10.11.12.55.24.052.0 ]--
+ 76 
--[ 2021.10.11.12.55.24.325.0 ]--
+ 76                 Item tmp = p.next.item;
r 77                 p = p.next;
--[ 2021.10.11.12.55.24.812.0 ]--
r 78                 return tmp;
--[ 2021.10.11.12.55.25.278.0 ]--
r 68                 return p.next != null;
--[ 2021.10.11.12.55.25.755.0 ]--
r 61             St<Item> p;
--[ 2021.10.11.12.55.26.654.0 ]--
r 61             Stack<Item> p;
--[ 2021.10.11.14.02.24.865.0 ]--
r 61 
--[ 2021.10.11.14.02.25.285.0 ]--
- 61
--[ 2021.10.11.14.02.27.996.0 ]--
r 67                 return s.next != null;
--[ 2021.10.11.14.02.28.206.0 ]--
r 67                 return st.next != null;
--[ 2021.10.11.14.02.28.745.0 ]--
r 67                 return stack.next != null;
--[ 2021.10.11.14.02.32.412.0 ]--
r 67                 return stack. != null;
--[ 2021.10.11.14.02.32.728.0 ]--
r 67                 return stack != null;
--[ 2021.10.11.14.02.33.656.0 ]--
r 67                 return stack. != null;
--[ 2021.10.11.14.04.30.189.0 ]--
r 67                 return stack ;
--[ 2021.10.11.14.04.45.812.0 ]--
- 75
r 75 
--[ 2021.10.11.14.04.46.154.0 ]--
- 75
--[ 2021.10.11.14.04.47.252.0 ]--
r 75                 return s;
--[ 2021.10.11.14.04.47.561.0 ]--
r 75                 return st;
--[ 2021.10.11.14.04.47.768.0 ]--
r 75                 return sta;
--[ 2021.10.11.14.04.47.887.0 ]--
r 75                 return stac;
--[ 2021.10.11.14.04.47.998.0 ]--
r 75                 return stack;
--[ 2021.10.11.14.04.50.265.0 ]--
r 75                 return stack[];
--[ 2021.10.11.14.05.32.733.0 ]--
r 75                 return stack[s];
--[ 2021.10.11.14.05.32.881.0 ]--
r 75                 return stack[si];
--[ 2021.10.11.14.05.33.063.0 ]--
r 75                 return stack[siz];
--[ 2021.10.11.14.05.33.366.0 ]--
r 75                 return stack[size];
--[ 2021.10.11.14.05.34.194.0 ]--
r 75                 return stack[size-];
--[ 2021.10.11.14.05.34.359.0 ]--
r 75                 return stack[size--];
--[ 2021.10.11.14.05.41.068.0 ]--
+ 61             
--[ 2021.10.11.14.05.41.268.0 ]--
r 61             i
--[ 2021.10.11.14.05.41.424.0 ]--
r 61             in
--[ 2021.10.11.14.05.41.465.0 ]--
r 61             int
--[ 2021.10.11.14.05.41.615.0 ]--
r 61             int 
--[ 2021.10.11.14.05.45.699.0 ]--
r 61             int i
--[ 2021.10.11.14.05.45.768.0 ]--
r 61             int in
--[ 2021.10.11.14.05.45.819.0 ]--
r 61             int ind
--[ 2021.10.11.14.05.45.972.0 ]--
r 61             int inde
--[ 2021.10.11.14.05.46.451.0 ]--
r 61             int indez
--[ 2021.10.11.14.05.47.126.0 ]--
r 61             int inde
--[ 2021.10.11.14.05.47.415.0 ]--
r 61             int index
--[ 2021.10.11.14.05.47.585.0 ]--
r 61             int index 
--[ 2021.10.11.14.05.48.205.0 ]--
r 61             int index =
--[ 2021.10.11.14.05.48.325.0 ]--
r 61             int index = 
--[ 2021.10.11.14.05.49.296.0 ]--
r 61             int index = s
--[ 2021.10.11.14.05.51.184.0 ]--
r 61             int index = size
--[ 2021.10.11.14.05.51.190.0 ]--
r 61             int index = size()
--[ 2021.10.11.14.05.52.329.0 ]--
r 61             int index = size();
--[ 2021.10.11.14.05.53.629.0 ]--
r 61             int index = ssize();
--[ 2021.10.11.14.05.53.928.0 ]--
r 61             int index = stsize();
--[ 2021.10.11.14.05.54.059.0 ]--
r 61             int index = stasize();
--[ 2021.10.11.14.05.54.186.0 ]--
r 61             int index = stacsize();
--[ 2021.10.11.14.05.54.273.0 ]--
r 61             int index = stacksize();
--[ 2021.10.11.14.05.54.568.0 ]--
r 61             int index = stack.size();
--[ 2021.10.11.14.05.58.759.0 ]--
r 61             int index = t.size();
--[ 2021.10.11.14.05.59.007.0 ]--
r 61             int index = th.size();
--[ 2021.10.11.14.05.59.563.0 ]--
r 61             int index = this.size();
--[ 2021.10.11.14.06.01.573.0 ]--
r 61             int index = th.size();
--[ 2021.10.11.14.06.02.274.0 ]--
r 61             int index = stack.size();
--[ 2021.10.11.14.06.08.019.0 ]--
r 76                 return stack[i--];
--[ 2021.10.11.14.06.08.168.0 ]--
r 76                 return stack[in--];
--[ 2021.10.11.14.06.08.899.0 ]--
r 76                 return stack[index--];
--[ 2021.10.11.14.07.04.904.0 ]--
r 68                 return stack;
--[ 2021.10.11.14.07.05.079.0 ]--
r 68                 return stac;
--[ 2021.10.11.14.07.05.264.0 ]--
r 68                 return sta;
--[ 2021.10.11.14.07.05.435.0 ]--
r 68                 return st;
--[ 2021.10.11.14.07.05.583.0 ]--
r 68                 return s;
--[ 2021.10.11.14.07.05.736.0 ]--
r 68                 return ;
--[ 2021.10.11.14.07.07.655.0 ]--
r 68                 return i;
--[ 2021.10.11.14.07.07.774.0 ]--
r 68                 return in;
--[ 2021.10.11.14.07.07.999.0 ]--
r 68                 return ind;
--[ 2021.10.11.14.07.08.178.0 ]--
r 68                 return inde;
--[ 2021.10.11.14.07.08.394.0 ]--
r 68                 return index;
--[ 2021.10.11.14.07.08.751.0 ]--
r 68                 return index ;
--[ 2021.10.11.14.07.10.011.0 ]--
r 68                 return index >;
--[ 2021.10.11.14.07.10.768.0 ]--
r 68                 return index >=;
--[ 2021.10.11.14.07.11.007.0 ]--
r 68                 return index >= ;
--[ 2021.10.11.14.07.11.424.0 ]--
r 68                 return index >= 0;
--[ 2021.10.11.14.07.34.450.0 ]--
r 76                 return stack.[index--];
--[ 2021.10.11.14.07.50.072.0 ]--
r 76                 return stack.peek[index--];
--[ 2021.10.11.14.07.50.081.0 ]--
r 76                 return stack.peek()[index--];
--[ 2021.10.11.14.07.52.373.0 ]--
r 76                 return stack.peek()];
--[ 2021.10.11.14.08.05.078.0 ]--
r 76                 return stack.peek();
--[ 2021.10.11.14.08.27.494.0 ]--
r 76                 return stack.peek().;
--[ 2021.10.11.14.08.29.426.0 ]--
r 76                 return stack.peek().p;
--[ 2021.10.11.14.08.30.557.0 ]--
r 76                 return stack.peek().;
--[ 2021.10.11.14.08.30.748.0 ]--
r 76                 return stack.peek();
--[ 2021.10.11.14.08.30.874.0 ]--
r 76                 return stack.peek(;
--[ 2021.10.11.14.08.31.159.0 ]--
r 76                 return stack.peek;
--[ 2021.10.11.14.08.31.370.0 ]--
r 76                 return stack.pee;
--[ 2021.10.11.14.08.31.534.0 ]--
r 76                 return stack.pe;
--[ 2021.10.11.14.08.31.705.0 ]--
r 76                 return stack.p;
--[ 2021.10.11.14.08.31.933.0 ]--
r 76                 return stack.;
--[ 2021.10.11.14.08.32.164.0 ]--
r 76                 return stack;
--[ 2021.10.11.14.08.34.088.0 ]--
r 76                 return stack.;
--[ 2021.10.11.14.08.35.066.0 ]--
r 76                 return stack.peek;
--[ 2021.10.11.14.08.35.070.0 ]--
r 76                 return stack.peek();
--[ 2021.10.11.14.08.44.921.0 ]--
r 76                 return stack[.peek()];
--[ 2021.10.11.14.08.46.823.0 ]--
r 76                 return stack[i];
--[ 2021.10.11.14.08.48.430.0 ]--
r 76                 return stack[index];
--[ 2021.10.11.14.08.49.277.0 ]--
r 76                 return stack[index-];
--[ 2021.10.11.14.08.49.417.0 ]--
r 76                 return stack[index--];
--[ 2021.10.11.14.17.12.540.0 ]--
r 38         // TODO do something if minimum gets popped 
--[ 2021.10.11.14.17.12.849.0 ]--
r 38         // TODO do something if minimum gets popped -
--[ 2021.10.11.14.17.13.017.0 ]--
r 38         // TODO do something if minimum gets popped - 
--[ 2021.10.11.14.17.13.263.0 ]--
r 38         // TODO do something if minimum gets popped - i
--[ 2021.10.11.14.17.13.336.0 ]--
r 38         // TODO do something if minimum gets popped - it
--[ 2021.10.11.14.17.13.508.0 ]--
r 38         // TODO do something if minimum gets popped - ite
--[ 2021.10.11.14.17.13.571.0 ]--
r 38         // TODO do something if minimum gets popped - iter
--[ 2021.10.11.14.17.13.850.0 ]--
r 38         // TODO do something if minimum gets popped - ite
--[ 2021.10.11.14.17.13.973.0 ]--
r 38         // TODO do something if minimum gets popped - it
--[ 2021.10.11.14.17.14.095.0 ]--
r 38         // TODO do something if minimum gets popped - i
--[ 2021.10.11.14.17.14.242.0 ]--
r 38         // TODO do something if minimum gets popped - 
--[ 2021.10.11.14.17.14.374.0 ]--
r 38         // TODO do something if minimum gets popped -
--[ 2021.10.11.14.17.14.507.0 ]--
r 38         // TODO do something if minimum gets popped 
--[ 2021.10.11.14.17.15.709.0 ]--
r 38         // TODO do something if minimum gets popped (
--[ 2021.10.11.14.17.16.221.0 ]--
r 38         // TODO do something if minimum gets popped (i
--[ 2021.10.11.14.17.16.355.0 ]--
r 38         // TODO do something if minimum gets popped (it
--[ 2021.10.11.14.17.16.411.0 ]--
r 38         // TODO do something if minimum gets popped (itn
--[ 2021.10.11.14.17.16.584.0 ]--
r 38         // TODO do something if minimum gets popped (itne
--[ 2021.10.11.14.17.16.667.0 ]--
r 38         // TODO do something if minimum gets popped (itner
--[ 2021.10.11.14.17.17.003.0 ]--
r 38         // TODO do something if minimum gets popped (itne
--[ 2021.10.11.14.17.17.118.0 ]--
r 38         // TODO do something if minimum gets popped (itn
--[ 2021.10.11.14.17.17.271.0 ]--
r 38         // TODO do something if minimum gets popped (it
--[ 2021.10.11.14.17.17.421.0 ]--
r 38         // TODO do something if minimum gets popped (i
--[ 2021.10.11.14.17.17.973.0 ]--
r 38         // TODO do something if minimum gets popped (it
--[ 2021.10.11.14.17.18.137.0 ]--
r 38         // TODO do something if minimum gets popped (ite
--[ 2021.10.11.14.17.18.212.0 ]--
r 38         // TODO do something if minimum gets popped (iter
--[ 2021.10.11.14.17.18.387.0 ]--
r 38         // TODO do something if minimum gets popped (itera
--[ 2021.10.11.14.17.18.573.0 ]--
r 38         // TODO do something if minimum gets popped (iterat
--[ 2021.10.11.14.17.18.716.0 ]--
r 38         // TODO do something if minimum gets popped (iterate
--[ 2021.10.11.14.17.18.839.0 ]--
r 38         // TODO do something if minimum gets popped (iterate 
--[ 2021.10.11.14.17.19.230.0 ]--
r 38         // TODO do something if minimum gets popped (iterate t
--[ 2021.10.11.14.17.19.312.0 ]--
r 38         // TODO do something if minimum gets popped (iterate th
--[ 2021.10.11.14.17.19.419.0 ]--
r 38         // TODO do something if minimum gets popped (iterate thr
--[ 2021.10.11.14.17.19.481.0 ]--
r 38         // TODO do something if minimum gets popped (iterate thro
--[ 2021.10.11.14.17.19.515.0 ]--
r 38         // TODO do something if minimum gets popped (iterate throu
--[ 2021.10.11.14.17.19.617.0 ]--
r 38         // TODO do something if minimum gets popped (iterate throug
--[ 2021.10.11.14.17.19.702.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through
--[ 2021.10.11.14.17.19.797.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through 
--[ 2021.10.11.14.17.19.839.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through a
--[ 2021.10.11.14.17.20.005.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through an
--[ 2021.10.11.14.17.20.068.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and
--[ 2021.10.11.14.17.20.148.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and 
--[ 2021.10.11.14.17.20.758.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and f
--[ 2021.10.11.14.17.20.838.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and fi
--[ 2021.10.11.14.17.20.917.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and fin
--[ 2021.10.11.14.17.20.973.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find
--[ 2021.10.11.14.17.21.086.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find 
--[ 2021.10.11.14.17.21.274.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find n
--[ 2021.10.11.14.17.21.380.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find ne
--[ 2021.10.11.14.17.21.610.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new
--[ 2021.10.11.14.17.21.734.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new 
--[ 2021.10.11.14.17.21.994.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new f
--[ 2021.10.11.14.17.22.266.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new 
--[ 2021.10.11.14.17.22.428.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new m
--[ 2021.10.11.14.17.22.534.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new mi
--[ 2021.10.11.14.17.22.578.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new min
--[ 2021.10.11.14.17.23.606.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new mini
--[ 2021.10.11.14.17.23.863.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new minim
--[ 2021.10.11.14.17.24.049.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new minimu
--[ 2021.10.11.14.17.24.379.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new minimum
--[ 2021.10.11.14.17.24.970.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new minimum)
--[ 2021.10.11.14.17.26.716.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new minimum?)
--[ 2021.10.11.14.17.26.997.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new minimum??)
--[ 2021.10.11.14.17.27.112.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new minimum???)
--[ 2021.10.11.14.17.27.259.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new minimum????)
--[ 2021.10.11.14.17.27.399.0 ]--
r 38         // TODO do something if minimum gets popped (iterate through and find new minimum?????)
--[ 2021.10.11.14.17.47.264.0 ]--
r 38         // TODO do something if minimum gets popped 
--[ 2021.10.11.14.17.47.504.0 ]--
r 38         // TODO do something if minimum gets popped
--[ 2021.10.11.14.19.24.906.0 ]--
:/src/OnePointerQueue.java
+ 33         return new Iterator<Item>() {
+ 34             int frozenOpCount = opcount;
+ 35             int index = stack.size();
+ 36 
+ 37             @Override
+ 38             public boolean hasNext() {
+ 39                 if (frozenOpCount != opcount) {
+ 40                     throw new ConcurrentModificationException("modified stack while iterating");
+ 41                 }
+ 42                 return index >= 0;
+ 43             }
+ 44 
+ 45             @Override
+ 46             public Item next() {
+ 47                 if (frozenOpCount != opcount) {
+ 48                     throw new ConcurrentModificationException("modified stack while iterating");
+ 49                 }
+ 50                 return stack[index--];
+ 51             }
+ 52 
+ 53             @Override
+ 54             public void remove() {}
r 55         };
--[ 2021.10.11.14.19.38.150.0 ]--
+ 6     
--[ 2021.10.11.14.19.38.282.0 ]--
+ 6     
--[ 2021.10.11.14.19.38.669.0 ]--
+ 7     private int opcount = 0;
+ 8     private int size = 0;
r 9     private Item minimumItem;
--[ 2021.10.11.14.19.38.675.0 ]--
r 6 
--[ 2021.10.11.14.19.40.166.0 ]--
r 10     public OnePointerQueue() 
--[ 2021.10.11.14.19.40.818.0 ]--
r 10     public OnePointerQueue() {
--[ 2021.10.11.14.19.41.512.0 ]--
- 11
--[ 2021.10.11.14.19.41.614.0 ]--
r 10     public OnePointerQueue() 
--[ 2021.10.11.14.19.42.454.0 ]--
r 10     public OnePointerQueue() {
--[ 2021.10.11.14.19.43.597.0 ]--
- 10
r 10     public OnePointerQueue() {}
--[ 2021.10.11.14.19.44.009.0 ]--
r 10     public OnePointerQueue() { }
--[ 2021.10.11.14.19.46.197.0 ]--
- 9
--[ 2021.10.11.14.19.47.979.0 ]--
r 13         return ;
--[ 2021.10.11.14.19.48.518.0 ]--
r 13         return s;
--[ 2021.10.11.14.19.48.659.0 ]--
r 13         return si;
--[ 2021.10.11.14.19.49.123.0 ]--
r 13         return size;
--[ 2021.10.11.14.19.51.424.0 ]--
r 18         return s;
--[ 2021.10.11.14.19.52.864.0 ]--
r 18         return size;
--[ 2021.10.11.14.19.52.870.0 ]--
r 18         return size();
--[ 2021.10.11.14.19.55.569.0 ]--
r 18         return size() ;
--[ 2021.10.11.14.19.55.874.0 ]--
r 18         return size() =;
--[ 2021.10.11.14.19.55.985.0 ]--
r 18         return size() ==;
--[ 2021.10.11.14.19.56.050.0 ]--
r 18         return size() == ;
--[ 2021.10.11.14.19.57.088.0 ]--
r 18         return size() == 0;
--[ 2021.10.11.14.20.20.561.0 ]--
+ 9     
--[ 2021.10.11.14.20.46.393.0 ]--
+ 29         
--[ 2021.10.11.14.20.46.888.0 ]--
+ 29         if (isEmpty()) {
+ 30             throw new NoSuchElementException("pop called on empty stack\n");
r 31         }
--[ 2021.10.11.14.20.51.551.0 ]--
r 30             throw new NoSuchElementException("d called on empty stack\n");
--[ 2021.10.11.14.20.51.730.0 ]--
r 30             throw new NoSuchElementException("de called on empty stack\n");
--[ 2021.10.11.14.20.51.898.0 ]--
r 30             throw new NoSuchElementException("deq called on empty stack\n");
--[ 2021.10.11.14.20.52.013.0 ]--
r 30             throw new NoSuchElementException("dequ called on empty stack\n");
--[ 2021.10.11.14.20.52.304.0 ]--
r 30             throw new NoSuchElementException("deque called on empty stack\n");
--[ 2021.10.11.14.20.52.745.0 ]--
r 30             throw new NoSuchElementException("dequee called on empty stack\n");
--[ 2021.10.11.14.20.53.140.0 ]--
r 30             throw new NoSuchElementException("deque called on empty stack\n");
--[ 2021.10.11.14.20.54.115.0 ]--
r 30             throw new NoSuchElementException("dequeu called on empty stack\n");
--[ 2021.10.11.14.20.54.183.0 ]--
r 30             throw new NoSuchElementException("dequeue called on empty stack\n");
--[ 2021.10.11.14.20.55.901.0 ]--
r 30             throw new NoSuchElementException("dequeue called on empty d\n");
--[ 2021.10.11.14.20.56.266.0 ]--
r 30             throw new NoSuchElementException("dequeue called on empty \n");
--[ 2021.10.11.14.20.56.872.0 ]--
r 30             throw new NoSuchElementException("dequeue called on empty q\n");
--[ 2021.10.11.14.20.57.016.0 ]--
r 30             throw new NoSuchElementException("dequeue called on empty qu\n");
--[ 2021.10.11.14.20.57.316.0 ]--
r 30             throw new NoSuchElementException("dequeue called on empty que\n");
--[ 2021.10.11.14.20.57.487.0 ]--
r 30             throw new NoSuchElementException("dequeue called on empty queu\n");
--[ 2021.10.11.14.20.57.686.0 ]--
r 30             throw new NoSuchElementException("dequeue called on empty queue\n");
--[ 2021.10.11.14.21.34.971.0 ]--
r 9     p
--[ 2021.10.11.14.21.35.112.0 ]--
r 9     pr
--[ 2021.10.11.14.21.35.177.0 ]--
r 9     pri
--[ 2021.10.11.14.21.35.398.0 ]--
r 9     priv
--[ 2021.10.11.14.21.36.423.0 ]--
r 9     private
--[ 2021.10.11.14.21.36.438.0 ]--
r 9     private 
--[ 2021.10.11.14.21.37.267.0 ]--
r 9     private b
--[ 2021.10.11.14.21.37.425.0 ]--
r 9     private ba
--[ 2021.10.11.14.21.37.518.0 ]--
r 9     private bac
--[ 2021.10.11.14.21.37.634.0 ]--
r 9     private back
--[ 2021.10.11.14.21.37.755.0 ]--
r 9     private back 
--[ 2021.10.11.14.21.38.424.0 ]--
r 9     private back =
--[ 2021.10.11.14.21.38.577.0 ]--
r 9     private back = 
--[ 2021.10.11.14.21.38.748.0 ]--
r 9     private back = n
--[ 2021.10.11.14.21.38.955.0 ]--
r 9     private back = nu
--[ 2021.10.11.14.21.39.063.0 ]--
r 9     private back = nul
--[ 2021.10.11.14.21.39.209.0 ]--
r 9     private back = null
--[ 2021.10.11.14.21.39.658.0 ]--
r 9     private back = null;
--[ 2021.10.11.14.21.44.422.0 ]--
r 9     private  back = null;
--[ 2021.10.11.14.21.44.557.0 ]--
r 9     private i back = null;
--[ 2021.10.11.14.21.44.681.0 ]--
r 9     private it back = null;
--[ 2021.10.11.14.21.44.877.0 ]--
r 9     private ite back = null;
--[ 2021.10.11.14.21.44.954.0 ]--
r 9     private item back = null;
--[ 2021.10.11.14.21.46.238.0 ]--
r 9     private ite back = null;
--[ 2021.10.11.14.21.46.374.0 ]--
r 9     private it back = null;
--[ 2021.10.11.14.21.46.502.0 ]--
r 9     private i back = null;
--[ 2021.10.11.14.21.46.623.0 ]--
r 9     private  back = null;
--[ 2021.10.11.14.21.46.819.0 ]--
r 9     private I back = null;
--[ 2021.10.11.14.21.47.004.0 ]--
r 9     private It back = null;
--[ 2021.10.11.14.21.47.069.0 ]--
r 9     private Ite back = null;
--[ 2021.10.11.14.21.47.122.0 ]--
r 9     private Item back = null;
--[ 2021.10.11.14.21.54.118.0 ]--
r 24     
--[ 2021.10.11.14.21.54.554.0 ]--
r 24         
--[ 2021.10.11.14.21.55.168.0 ]--
r 24         i
--[ 2021.10.11.14.21.55.263.0 ]--
r 24         if
--[ 2021.10.11.14.21.55.346.0 ]--
r 24         if 
--[ 2021.10.11.14.21.58.067.0 ]--
r 24         if
--[ 2021.10.11.14.21.58.186.0 ]--
r 24         i
--[ 2021.10.11.14.21.58.318.0 ]--
r 24         
--[ 2021.10.11.14.22.01.698.0 ]--
+ 24         if (isEmpty()) {
+ 25             throw new NoSuchElementException("dequeue called on empty queue\n");
r 26         }
--[ 2021.10.11.14.22.06.135.0 ]--
r 25             b
--[ 2021.10.11.14.22.06.757.0 ]--
r 25             back
--[ 2021.10.11.14.22.06.998.0 ]--
r 25             back 
--[ 2021.10.11.14.22.07.299.0 ]--
r 25             back =
--[ 2021.10.11.14.22.07.383.0 ]--
r 25             back = 
--[ 2021.10.11.14.22.07.719.0 ]--
r 25             back = i
--[ 2021.10.11.14.22.08.215.0 ]--
r 25             back = item
--[ 2021.10.11.14.22.08.629.0 ]--
r 25             back = item;
--[ 2021.10.11.14.22.29.951.0 ]--
+ 7     
--[ 2021.10.11.14.22.30.084.0 ]--
+ 7     
--[ 2021.10.11.14.22.31.950.0 ]--
+ 6 // singly-linked list
+ 7     private static class Node<Item> {
+ 8         Item item = null;
+ 9         Node<Item> next = null;
+ 10         public Node(Item item) {this.item = item;}
+ 11         public Node(Item item, Node<Item> next) {
+ 12             this.item = item;
+ 13             this.next = next;
+ 14         }
r 15     }
--[ 2021.10.11.14.22.31.967.0 ]--
r 9         Steque.Node<Item> next = null;
--[ 2021.10.11.14.22.31.979.0 ]--
r 11         public Node(Item item, Steque.Node<Item> next) {
--[ 2021.10.11.14.22.31.998.0 ]--
r 6     // singly-linked list
--[ 2021.10.11.14.22.33.770.0 ]--
- 16
--[ 2021.10.11.14.22.43.322.0 ]--
r 9         O.Node<Item> next = null;
--[ 2021.10.11.14.22.44.112.0 ]--
r 9         On.Node<Item> next = null;
--[ 2021.10.11.14.22.44.669.0 ]--
r 9         OnePointerQueue.Node<Item> next = null;
--[ 2021.10.11.14.22.51.218.0 ]--
r 11         public Node(Item item, O.Node<Item> next) {
--[ 2021.10.11.14.22.53.002.0 ]--
r 11         public Node(Item item, OnePointerQueue.Node<Item> next) {
--[ 2021.10.11.14.23.15.250.0 ]--
+ 35             
--[ 2021.10.11.14.23.48.697.0 ]--
:/src/MinimumStack.java
r 27         
--[ 2021.10.11.14.23.49.442.0 ]--
- 27
--[ 2021.10.11.14.23.50.397.0 ]--
+ 26         
--[ 2021.10.11.14.23.50.829.0 ]--
r 26         opcount++;
--[ 2021.10.11.14.23.55.404.0 ]--
r 39         
--[ 2021.10.11.14.23.55.798.0 ]--
- 39
--[ 2021.10.11.14.23.58.137.0 ]--
+ 35         
--[ 2021.10.11.14.23.58.548.0 ]--
r 35         opcount++;
--[ 2021.10.11.14.24.14.563.0 ]--
:/src/OnePointerQueue.java
r 16 
r 35 
--[ 2021.10.11.14.24.39.173.0 ]--
r 9         Node<Item> next = null;
--[ 2021.10.11.14.24.59.310.0 ]--
r 11         public Node(Item item, .Node<Item> next) {
--[ 2021.10.11.14.25.00.071.0 ]--
r 11         public Node(Item item, Node<Item> next) {
--[ 2021.10.11.14.25.21.657.0 ]--
+ 34         
--[ 2021.10.11.14.25.41.772.0 ]--
- 36
--[ 2021.10.11.14.25.42.776.0 ]--
- 34
--[ 2021.10.11.14.25.44.579.0 ]--
r 35             back = nitem;
--[ 2021.10.11.14.25.44.631.0 ]--
r 35             back = neitem;
--[ 2021.10.11.14.25.44.830.0 ]--
r 35             back = newitem;
--[ 2021.10.11.14.25.45.033.0 ]--
r 35             back = new item;
--[ 2021.10.11.14.25.46.296.0 ]--
r 35             back = new ;
--[ 2021.10.11.14.25.47.888.0 ]--
r 35             back = new N;
--[ 2021.10.11.14.25.49.213.0 ]--
r 35             back = new Node;
--[ 2021.10.11.14.25.49.221.0 ]--
r 35             back = new Node<>();
--[ 2021.10.11.14.26.06.191.0 ]--
r 35             back = new Node<>(i);
--[ 2021.10.11.14.26.06.244.0 ]--
r 35             back = new Node<>(it);
--[ 2021.10.11.14.26.06.870.0 ]--
r 35             back = new Node<>(item);
--[ 2021.10.11.14.27.10.983.0 ]--
+ 37         
--[ 2021.10.11.14.27.14.724.0 ]--
- 34
--[ 2021.10.11.14.27.15.544.0 ]--
r 35         
--[ 2021.10.11.14.27.15.718.0 ]--
- 35
--[ 2021.10.11.14.27.15.898.0 ]--
r 34             back = new Node<>(item)
--[ 2021.10.11.14.27.17.915.0 ]--
- 35
--[ 2021.10.11.14.27.18.779.0 ]--
r 34             back = new Node<>(item);
--[ 2021.10.11.14.27.20.445.0 ]--
r 34         back = new Node<>(item);
--[ 2021.10.11.14.28.08.935.0 ]--
r 19     private N back = null;
--[ 2021.10.11.14.28.09.775.0 ]--
r 19     private Node back = null;
--[ 2021.10.11.14.28.10.879.0 ]--
r 19     private Node<> back = null;
--[ 2021.10.11.14.28.11.399.0 ]--
r 19     private Node<I> back = null;
--[ 2021.10.11.14.28.11.627.0 ]--
r 19     private Node<It> back = null;
--[ 2021.10.11.14.28.11.747.0 ]--
r 19     private Node<Ite> back = null;
--[ 2021.10.11.14.28.11.833.0 ]--
r 19     private Node<Item> back = null;
--[ 2021.10.11.14.28.27.111.0 ]--
+ 35         
--[ 2021.10.11.14.28.31.274.0 ]--
r 35         ()
--[ 2021.10.11.14.28.31.770.0 ]--
r 35         
--[ 2021.10.11.14.28.31.949.0 ]--
r 35         i
--[ 2021.10.11.14.28.32.084.0 ]--
r 35         if
--[ 2021.10.11.14.28.32.294.0 ]--
r 35         if 
--[ 2021.10.11.14.28.32.599.0 ]--
r 35         if ()
--[ 2021.10.11.14.28.32.796.0 ]--
r 35         if (i)
--[ 2021.10.11.14.28.32.910.0 ]--
r 35         if (is)
--[ 2021.10.11.14.28.33.498.0 ]--
r 35         if (i)
--[ 2021.10.11.14.28.33.656.0 ]--
r 35         if ()
--[ 2021.10.11.14.28.34.129.0 ]--
r 35         if (!)
--[ 2021.10.11.14.28.34.764.0 ]--
r 35         if (!i)
--[ 2021.10.11.14.28.35.091.0 ]--
r 35         if (!is)
--[ 2021.10.11.14.28.35.747.0 ]--
r 35         if (!isEmpty)
--[ 2021.10.11.14.28.35.754.0 ]--
r 35         if (!isEmpty())
--[ 2021.10.11.14.28.37.025.0 ]--
r 35         if (!isEmpty()) 
--[ 2021.10.11.14.28.37.310.0 ]--
r 35         if (!isEmpty()) {
--[ 2021.10.11.14.28.37.500.0 ]--
+ 36 
+ 37 }
--[ 2021.10.11.14.28.37.510.0 ]--
r 37         }
--[ 2021.10.11.14.28.37.531.0 ]--
r 36             
--[ 2021.10.11.14.28.39.139.0 ]--
r 36             b
--[ 2021.10.11.14.28.39.368.0 ]--
r 36             ba
--[ 2021.10.11.14.28.39.747.0 ]--
r 36             back
--[ 2021.10.11.14.28.39.973.0 ]--
r 36             back.
--[ 2021.10.11.14.28.40.558.0 ]--
r 36             back.n
--[ 2021.10.11.14.28.41.381.0 ]--
r 36             back.next
--[ 2021.10.11.14.28.45.521.0 ]--
r 36             back.next 
--[ 2021.10.11.14.28.45.710.0 ]--
r 36             back.next =
--[ 2021.10.11.14.28.45.850.0 ]--
r 36             back.next = 
--[ 2021.10.11.14.28.46.483.0 ]--
r 36             back.next = t
--[ 2021.10.11.14.28.46.671.0 ]--
r 36             back.next = tm
--[ 2021.10.11.14.28.46.686.0 ]--
r 36             back.next = tmp
--[ 2021.10.11.14.28.47.806.0 ]--
r 36             back.next = tmp;
--[ 2021.10.11.14.28.50.402.0 ]--
+ 35         
--[ 2021.10.11.14.28.51.115.0 ]--
r 35         t
--[ 2021.10.11.14.28.51.447.0 ]--
r 35         tm
--[ 2021.10.11.14.28.51.602.0 ]--
r 35         tmp
--[ 2021.10.11.14.28.51.933.0 ]--
r 35         tmp 
--[ 2021.10.11.14.28.53.416.0 ]--
r 35         tmp =
--[ 2021.10.11.14.28.53.699.0 ]--
r 35         tmp = 
--[ 2021.10.11.14.28.54.103.0 ]--
r 35         tmp = n
--[ 2021.10.11.14.28.54.275.0 ]--
r 35         tmp = ne
--[ 2021.10.11.14.28.55.148.0 ]--
r 35         tmp = new
--[ 2021.10.11.14.28.55.159.0 ]--
r 35         tmp = new 
--[ 2021.10.11.14.28.55.518.0 ]--
r 35         tmp = new N
--[ 2021.10.11.14.28.56.536.0 ]--
r 35         tmp = new Node
--[ 2021.10.11.14.28.56.555.0 ]--
r 35         tmp = new Node<>()
--[ 2021.10.11.14.29.01.264.0 ]--
r 35         tmp = new Node<>(b)
--[ 2021.10.11.14.29.01.460.0 ]--
r 35         tmp = new Node<>(ba)
--[ 2021.10.11.14.29.01.590.0 ]--
r 35         tmp = new Node<>(bac)
--[ 2021.10.11.14.29.01.697.0 ]--
r 35         tmp = new Node<>(back)
--[ 2021.10.11.14.29.02.000.0 ]--
+ 35         tmp = new Node<>(back
r 36         )
--[ 2021.10.11.14.29.02.765.0 ]--
- 35
r 35         tmp = new Node<>(back)
--[ 2021.10.11.14.29.04.319.0 ]--
r 35         tmp = new Node<>(back);
--[ 2021.10.11.14.29.05.658.0 ]--
r 35         
--[ 2021.10.11.14.29.06.451.0 ]--
+ 34         
--[ 2021.10.11.14.29.06.880.0 ]--
r 34         tmp = new Node<>(back);
--[ 2021.10.11.14.29.07.928.0 ]--
- 36
--[ 2021.10.11.14.29.11.231.0 ]--
r 34         Ntmp = new Node<>(back);
--[ 2021.10.11.14.29.11.435.0 ]--
r 34         Notmp = new Node<>(back);
--[ 2021.10.11.14.29.11.929.0 ]--
r 34         Nodetmp = new Node<>(back);
--[ 2021.10.11.14.29.11.943.0 ]--
r 34         Node tmp = new Node<>(back);
--[ 2021.10.11.14.29.11.948.0 ]--
r 34         Nodetmp = new Node<>(back);
--[ 2021.10.11.14.29.12.803.0 ]--
r 34         Node<tmp = new Node<>(back);
--[ 2021.10.11.14.29.13.384.0 ]--
r 34         Node<Itmp = new Node<>(back);
--[ 2021.10.11.14.29.13.638.0 ]--
r 34         Node<Ittmp = new Node<>(back);
--[ 2021.10.11.14.29.13.862.0 ]--
r 34         Node<Itetmp = new Node<>(back);
--[ 2021.10.11.14.29.13.915.0 ]--
r 34         Node<Itemtmp = new Node<>(back);
--[ 2021.10.11.14.29.14.374.0 ]--
r 34         Node<Item>tmp = new Node<>(back);
--[ 2021.10.11.14.29.14.806.0 ]--
r 34         Node<Item> tmp = new Node<>(back);
--[ 2021.10.11.14.29.23.764.0 ]--
r 34         Node<Item> tmp = back);
--[ 2021.10.11.14.29.25.059.0 ]--
r 34         Node<Item> tmp = back;
--[ 2021.10.11.14.29.43.968.0 ]--
r 34         Node<Item> tmp = nback;
--[ 2021.10.11.14.29.44.015.0 ]--
r 34         Node<Item> tmp = neback;
--[ 2021.10.11.14.29.44.222.0 ]--
r 34         Node<Item> tmp = newback;
--[ 2021.10.11.14.29.44.318.0 ]--
r 34         Node<Item> tmp = new back;
--[ 2021.10.11.14.29.45.168.0 ]--
r 34         Node<Item> tmp = new Nodeback;
--[ 2021.10.11.14.29.45.178.0 ]--
r 34         Node<Item> tmp = new Node back;
--[ 2021.10.11.14.29.45.183.0 ]--
r 34         Node<Item> tmp = new Node<>back;
--[ 2021.10.11.14.29.45.188.0 ]--
r 34         Node<Item> tmp = new Node<>()back;
--[ 2021.10.11.14.29.47.575.0 ]--
r 34         Node<Item> tmp = new Node<>();
--[ 2021.10.11.14.29.48.102.0 ]--
r 34         Node<Item> tmp = new Node<>(back);
--[ 2021.10.11.14.29.51.089.0 ]--
r 34         Node<Item> tmp = new Node<I>(back);
--[ 2021.10.11.14.29.51.174.0 ]--
r 34         Node<Item> tmp = new Node<It>(back);
--[ 2021.10.11.14.29.51.315.0 ]--
r 34         Node<Item> tmp = new Node<Ite>(back);
--[ 2021.10.11.14.29.51.360.0 ]--
r 34         Node<Item> tmp = new Node<Item>(back);
--[ 2021.10.11.14.29.56.150.0 ]--
r 34         Node<Item> tmp = new Node<>(back);
--[ 2021.10.11.14.30.06.498.0 ]--
r 35         back = item);
--[ 2021.10.11.14.30.07.879.0 ]--
r 35         back = item;
--[ 2021.10.11.14.30.14.263.0 ]--
r 35         back. = item;
--[ 2021.10.11.14.30.15.337.0 ]--
r 35         back.i = item;
--[ 2021.10.11.14.30.16.983.0 ]--
r 35         back.item = item;
--[ 2021.10.11.14.30.27.694.0 ]--
r 34         I tmp = new Node<>(back);
--[ 2021.10.11.14.30.27.910.0 ]--
r 34         It tmp = new Node<>(back);
--[ 2021.10.11.14.30.28.587.0 ]--
r 34         Item tmp = new Node<>(back);
--[ 2021.10.11.14.30.31.748.0 ]--
r 34         Item tmp = b;
--[ 2021.10.11.14.30.33.209.0 ]--
r 34         Item tmp = back.item;
--[ 2021.10.11.14.30.33.218.0 ]--
r 34         Item tmp = back;;
--[ 2021.10.11.14.30.33.224.0 ]--
r 34         Item tmp = back.item;
--[ 2021.10.11.14.30.53.498.0 ]--
r 34         N tmp = back.item;
--[ 2021.10.11.14.30.53.702.0 ]--
r 34         No tmp = back.item;
--[ 2021.10.11.14.30.54.339.0 ]--
r 34         Node tmp = back.item;
--[ 2021.10.11.14.30.55.444.0 ]--
r 34         Node<> tmp = back.item;
--[ 2021.10.11.14.30.55.776.0 ]--
r 34         Node<I> tmp = back.item;
--[ 2021.10.11.14.30.56.434.0 ]--
r 34         Node<Item> tmp = back.item;
--[ 2021.10.11.14.30.59.703.0 ]--
r 34         Node<Item> tmp = nback.item;
--[ 2021.10.11.14.30.59.757.0 ]--
r 34         Node<Item> tmp = neback.item;
--[ 2021.10.11.14.31.00.011.0 ]--
r 34         Node<Item> tmp = newback.item;
--[ 2021.10.11.14.31.01.463.0 ]--
r 34         Node<Item> tmp = new back.item;
--[ 2021.10.11.14.31.02.638.0 ]--
r 34         Node<Item> tmp = new Nodeback.item;
--[ 2021.10.11.14.31.02.653.0 ]--
r 34         Node<Item> tmp = new Node back.item;
--[ 2021.10.11.14.31.02.660.0 ]--
r 34         Node<Item> tmp = new Node<>back.item;
--[ 2021.10.11.14.31.02.665.0 ]--
r 34         Node<Item> tmp = new Node<>()back.item;
--[ 2021.10.11.14.31.05.187.0 ]--
r 34         Node<Item> tmp = new Node<>();
--[ 2021.10.11.14.31.05.735.0 ]--
r 34         Node<Item> tmp = new Node<>(back.item);
--[ 2021.10.11.14.33.02.575.0 ]--
r 34         Node<Item> tmp = new Node<>(i);
--[ 2021.10.11.14.33.02.626.0 ]--
r 34         Node<Item> tmp = new Node<>(it);
--[ 2021.10.11.14.33.02.793.0 ]--
r 34         Node<Item> tmp = new Node<>(ite);
--[ 2021.10.11.14.33.02.920.0 ]--
r 34         Node<Item> tmp = new Node<>(item);
--[ 2021.10.11.14.33.17.069.0 ]--
r 34         Node<Item> tmp = new Node<>(back.item);
--[ 2021.10.11.14.33.18.305.0 ]--
r 34         Node<Item> tmp = new Node<>();
--[ 2021.10.11.14.33.19.261.0 ]--
r 34         Node<Item> tmp = new Node<>(back.item);
--[ 2021.10.11.14.33.31.654.0 ]--
+ 34         
--[ 2021.10.11.14.33.34.025.0 ]--
r 34         b
--[ 2021.10.11.14.33.34.198.0 ]--
r 34         ba
--[ 2021.10.11.14.33.34.340.0 ]--
r 34         bac
--[ 2021.10.11.14.33.34.433.0 ]--
r 34         back
--[ 2021.10.11.14.33.34.535.0 ]--
r 34         back 
--[ 2021.10.11.14.33.35.096.0 ]--
r 34         back =
--[ 2021.10.11.14.33.35.327.0 ]--
r 34         back = 
--[ 2021.10.11.14.33.35.502.0 ]--
r 34         back = n
--[ 2021.10.11.14.33.35.558.0 ]--
r 34         back = nn
--[ 2021.10.11.14.33.35.665.0 ]--
r 34         back = nne
--[ 2021.10.11.14.33.35.830.0 ]--
r 34         back = nnew
--[ 2021.10.11.14.33.36.136.0 ]--
r 34         back = nne
--[ 2021.10.11.14.33.36.280.0 ]--
r 34         back = nn
--[ 2021.10.11.14.33.36.377.0 ]--
r 34         back = nne
--[ 2021.10.11.14.33.36.554.0 ]--
r 34         back = nn
--[ 2021.10.11.14.33.36.666.0 ]--
r 34         back = nne
--[ 2021.10.11.14.33.36.863.0 ]--
r 34         back = nn
--[ 2021.10.11.14.33.37.004.0 ]--
r 34         back = n
--[ 2021.10.11.14.33.37.078.0 ]--
r 34         back = ne
--[ 2021.10.11.14.33.37.293.0 ]--
r 34         back = new
--[ 2021.10.11.14.33.37.403.0 ]--
r 34         back = new 
--[ 2021.10.11.14.33.38.726.0 ]--
r 34         back = new Node
--[ 2021.10.11.14.33.38.736.0 ]--
r 34         back = new Node<>
--[ 2021.10.11.14.33.38.742.0 ]--
r 34         back = new Node<>()
--[ 2021.10.11.14.33.39.586.0 ]--
r 34         back = new Node<>(i)
--[ 2021.10.11.14.33.40.172.0 ]--
r 34         back = new Node<>(item)
--[ 2021.10.11.14.33.41.335.0 ]--
r 34         back = new Node<>(item);
--[ 2021.10.11.14.33.48.479.0 ]--
+ 35         
--[ 2021.10.11.14.33.48.952.0 ]--
r 35         b
--[ 2021.10.11.14.33.49.129.0 ]--
r 35         ba
--[ 2021.10.11.14.33.49.246.0 ]--
r 35         bac
--[ 2021.10.11.14.33.49.378.0 ]--
r 35         back
--[ 2021.10.11.14.33.49.848.0 ]--
r 35         back.
--[ 2021.10.11.14.33.50.051.0 ]--
r 35         back. 
--[ 2021.10.11.14.33.50.476.0 ]--
r 35         back.
--[ 2021.10.11.14.33.50.646.0 ]--
r 35         back.n
--[ 2021.10.11.14.33.50.732.0 ]--
r 35         back.ne
--[ 2021.10.11.14.33.51.153.0 ]--
r 35         back.nex
--[ 2021.10.11.14.33.51.413.0 ]--
r 35         back.next
--[ 2021.10.11.14.33.51.642.0 ]--
r 35         back.next 
--[ 2021.10.11.14.33.52.216.0 ]--
r 35         back.next =
--[ 2021.10.11.14.33.52.390.0 ]--
r 35         back.next = 
--[ 2021.10.11.14.33.53.235.0 ]--
r 35         back.next = b
--[ 2021.10.11.14.33.53.524.0 ]--
r 35         back.next = ba
--[ 2021.10.11.14.33.53.675.0 ]--
r 35         back.next = bac
--[ 2021.10.11.14.33.53.854.0 ]--
r 35         back.next = back
--[ 2021.10.11.14.33.54.444.0 ]--
r 35         back.next = back 
--[ 2021.10.11.14.33.54.647.0 ]--
r 35         back.next = back .
--[ 2021.10.11.14.33.54.872.0 ]--
r 35         back.next = back 
--[ 2021.10.11.14.33.54.956.0 ]--
r 35         back.next = back
--[ 2021.10.11.14.33.55.171.0 ]--
r 35         back.next = back.
--[ 2021.10.11.14.33.56.308.0 ]--
r 35         back.next = back
--[ 2021.10.11.14.33.56.985.0 ]--
r 35         back.next = back;
--[ 2021.10.11.14.33.58.648.0 ]--
r 35         back.next = t;
--[ 2021.10.11.14.33.58.830.0 ]--
r 35         back.next = tm;
--[ 2021.10.11.14.33.58.961.0 ]--
r 35         back.next = tmp;
--[ 2021.10.11.14.34.02.243.0 ]--
+ 34         
--[ 2021.10.11.14.34.02.338.0 ]--
r 34         Node<Item> tmp = new Node<>(back.item);
--[ 2021.10.11.14.34.35.487.0 ]--
- 37
--[ 2021.10.11.14.34.36.705.0 ]--
- 37
--[ 2021.10.11.14.34.38.095.0 ]--
- 37
--[ 2021.10.11.14.34.39.063.0 ]--
- 37
--[ 2021.10.11.14.34.43.880.0 ]--
+ 36         
--[ 2021.10.11.14.34.46.519.0 ]--
r 36         i
--[ 2021.10.11.14.34.46.552.0 ]--
r 36         if
--[ 2021.10.11.14.34.50.137.0 ]--
r 36         i
--[ 2021.10.11.14.34.50.358.0 ]--
r 36         
--[ 2021.10.11.14.34.50.587.0 ]--
- 36
--[ 2021.10.11.14.34.52.804.0 ]--
+ 34         
--[ 2021.10.11.14.34.53.107.0 ]--
r 34         f
--[ 2021.10.11.14.34.53.235.0 ]--
r 34         fi
--[ 2021.10.11.14.34.53.474.0 ]--
r 34         f
--[ 2021.10.11.14.34.53.610.0 ]--
r 34         
--[ 2021.10.11.14.34.55.546.0 ]--
+ 34                 if (!isEmpty()) {
r 35 
--[ 2021.10.11.14.34.55.555.0 ]--
r 34         if (!isEmpty()) {
r 36             Node<Item> tmp = new Node<>(back.item);
--[ 2021.10.11.14.34.56.679.0 ]--
r 35     
--[ 2021.10.11.14.34.57.023.0 ]--
r 35         
--[ 2021.10.11.14.34.58.104.0 ]--
r 35         }
--[ 2021.10.11.14.34.59.422.0 ]--
r 39         
--[ 2021.10.11.14.34.59.773.0 ]--
- 39
--[ 2021.10.11.14.35.01.555.0 ]--
+ 35             
--[ 2021.10.11.14.35.03.157.0 ]--
r 34         if (isEmpty()) {
--[ 2021.10.11.14.35.09.289.0 ]--
r 35             back = new Node<>(item);
--[ 2021.10.11.14.35.11.015.0 ]--
r 36         } 
--[ 2021.10.11.14.35.11.155.0 ]--
r 36         } e
--[ 2021.10.11.14.35.11.277.0 ]--
r 36         } el
--[ 2021.10.11.14.35.11.439.0 ]--
r 36         } els
--[ 2021.10.11.14.35.11.620.0 ]--
r 36         } else
--[ 2021.10.11.14.35.12.026.0 ]--
r 36         } else 
--[ 2021.10.11.14.35.12.621.0 ]--
r 36         } else {
--[ 2021.10.11.14.35.13.043.0 ]--
+ 37 
+ 38 }
--[ 2021.10.11.14.35.13.050.0 ]--
r 38         }
--[ 2021.10.11.14.35.13.075.0 ]--
r 37             
--[ 2021.10.11.14.35.13.801.0 ]--
r 37             back = new Node<>(item);
--[ 2021.10.11.14.35.16.139.0 ]--
r 39             
--[ 2021.10.11.14.35.16.868.0 ]--
+ 37             
--[ 2021.10.11.14.35.16.968.0 ]--
r 37             Node<Item> tmp = new Node<>(back.item);
--[ 2021.10.11.14.35.19.208.0 ]--
- 41
--[ 2021.10.11.14.35.23.947.0 ]--
r 41         
--[ 2021.10.11.14.35.24.351.0 ]--
- 40
--[ 2021.10.11.14.35.24.485.0 ]--
- 40
--[ 2021.10.11.14.35.25.582.0 ]--
+ 39         
--[ 2021.10.11.14.35.26.508.0 ]--
r 39         Q
--[ 2021.10.11.14.35.27.191.0 ]--
r 39         
--[ 2021.10.11.14.35.28.012.0 ]--
r 39             
--[ 2021.10.11.14.35.28.858.0 ]--
r 39             back.next = tmp;
--[ 2021.10.11.14.37.55.746.0 ]--
r 19     private Node<Item> f = null;
--[ 2021.10.11.14.37.55.913.0 ]--
r 19     private Node<Item> fr = null;
--[ 2021.10.11.14.37.56.061.0 ]--
r 19     private Node<Item> fro = null;
--[ 2021.10.11.14.37.56.142.0 ]--
r 19     private Node<Item> fron = null;
--[ 2021.10.11.14.37.56.219.0 ]--
r 19     private Node<Item> front = null;
--[ 2021.10.11.14.37.56.653.0 ]--
r 19     private Node<Item> fron = null;
--[ 2021.10.11.14.37.56.753.0 ]--
r 19     private Node<Item> fro = null;
--[ 2021.10.11.14.37.56.916.0 ]--
r 19     private Node<Item> fr = null;
--[ 2021.10.11.14.37.57.019.0 ]--
r 19     private Node<Item> f = null;
--[ 2021.10.11.14.37.57.431.0 ]--
r 19     private Node<Item> fi = null;
--[ 2021.10.11.14.37.57.552.0 ]--
r 19     private Node<Item> fir = null;
--[ 2021.10.11.14.37.57.908.0 ]--
r 19     private Node<Item> firs = null;
--[ 2021.10.11.14.37.58.136.0 ]--
r 19     private Node<Item> firstr = null;
--[ 2021.10.11.14.37.58.771.0 ]--
r 19     private Node<Item> first = null;
--[ 2021.10.11.14.38.02.444.0 ]--
r 35             r = new Node<>(item);
--[ 2021.10.11.14.38.02.665.0 ]--
r 35             ri = new Node<>(item);
--[ 2021.10.11.14.38.03.213.0 ]--
r 35             r = new Node<>(item);
--[ 2021.10.11.14.38.03.348.0 ]--
r 35              = new Node<>(item);
--[ 2021.10.11.14.38.03.393.0 ]--
r 35             f = new Node<>(item);
--[ 2021.10.11.14.38.03.623.0 ]--
r 35             fr = new Node<>(item);
--[ 2021.10.11.14.38.04.121.0 ]--
r 35             f = new Node<>(item);
--[ 2021.10.11.14.38.04.282.0 ]--
r 35             fi = new Node<>(item);
--[ 2021.10.11.14.38.04.344.0 ]--
r 35             fir = new Node<>(item);
--[ 2021.10.11.14.38.04.888.0 ]--
r 35             first = new Node<>(item);
--[ 2021.10.11.14.38.14.145.0 ]--
r 37             Node<Item> tmp = new Node<>(f.item);
--[ 2021.10.11.14.38.14.301.0 ]--
r 37             Node<Item> tmp = new Node<>(fi.item);
--[ 2021.10.11.14.38.14.376.0 ]--
r 37             Node<Item> tmp = new Node<>(fir.item);
--[ 2021.10.11.14.38.15.004.0 ]--
r 37             Node<Item> tmp = new Node<>(firs.item);
--[ 2021.10.11.14.38.15.350.0 ]--
r 37             Node<Item> tmp = new Node<>(first.item);
--[ 2021.10.11.14.38.15.614.0 ]--
r 37             Node<Item> tmp = new Node<>(first..item);
--[ 2021.10.11.14.38.16.274.0 ]--
r 37             Node<Item> tmp = new Node<>(first.next.item);
--[ 2021.10.11.14.39.10.536.0 ]--
- 38
r 38 
--[ 2021.10.11.14.39.11.371.0 ]--
- 38
--[ 2021.10.11.14.39.12.790.0 ]--
r 37             Node<Item>  = new Node<>(first.next.item);
--[ 2021.10.11.14.39.12.919.0 ]--
r 37             Node<Item> = new Node<>(first.next.item);
--[ 2021.10.11.14.39.13.041.0 ]--
r 37             Node<Item = new Node<>(first.next.item);
--[ 2021.10.11.14.39.13.187.0 ]--
r 37             Node<Ite = new Node<>(first.next.item);
--[ 2021.10.11.14.39.13.329.0 ]--
r 37             Node<It = new Node<>(first.next.item);
--[ 2021.10.11.14.39.13.482.0 ]--
r 37             Node<I = new Node<>(first.next.item);
--[ 2021.10.11.14.39.13.618.0 ]--
r 37             Node< = new Node<>(first.next.item);
--[ 2021.10.11.14.39.13.926.0 ]--
r 37             Node = new Node<>(first.next.item);
--[ 2021.10.11.14.39.14.070.0 ]--
r 37             Nod = new Node<>(first.next.item);
--[ 2021.10.11.14.39.14.223.0 ]--
r 37             No = new Node<>(first.next.item);
--[ 2021.10.11.14.39.14.359.0 ]--
r 37             N = new Node<>(first.next.item);
--[ 2021.10.11.14.39.14.555.0 ]--
r 37             Nf = new Node<>(first.next.item);
--[ 2021.10.11.14.39.14.891.0 ]--
r 37             N = new Node<>(first.next.item);
--[ 2021.10.11.14.39.15.173.0 ]--
r 37              = new Node<>(first.next.item);
--[ 2021.10.11.14.39.15.283.0 ]--
r 37             f = new Node<>(first.next.item);
--[ 2021.10.11.14.39.15.520.0 ]--
r 37             fr = new Node<>(first.next.item);
--[ 2021.10.11.14.39.15.603.0 ]--
r 37             fri = new Node<>(first.next.item);
--[ 2021.10.11.14.39.16.007.0 ]--
r 37             fris = new Node<>(first.next.item);
--[ 2021.10.11.14.39.16.229.0 ]--
r 37             fri = new Node<>(first.next.item);
--[ 2021.10.11.14.39.16.349.0 ]--
r 37             fr = new Node<>(first.next.item);
--[ 2021.10.11.14.39.16.491.0 ]--
r 37             f = new Node<>(first.next.item);
--[ 2021.10.11.14.39.16.646.0 ]--
r 37             fr = new Node<>(first.next.item);
--[ 2021.10.11.14.39.16.658.0 ]--
r 37             fri = new Node<>(first.next.item);
--[ 2021.10.11.14.39.16.832.0 ]--
r 37             fris = new Node<>(first.next.item);
--[ 2021.10.11.14.39.17.084.0 ]--
r 37             frist = new Node<>(first.next.item);
--[ 2021.10.11.14.39.17.511.0 ]--
r 37             fris = new Node<>(first.next.item);
--[ 2021.10.11.14.39.17.624.0 ]--
r 37             fri = new Node<>(first.next.item);
--[ 2021.10.11.14.39.17.754.0 ]--
r 37             fr = new Node<>(first.next.item);
--[ 2021.10.11.14.39.17.887.0 ]--
r 37             f = new Node<>(first.next.item);
--[ 2021.10.11.14.39.18.046.0 ]--
r 37             fi = new Node<>(first.next.item);
--[ 2021.10.11.14.39.18.115.0 ]--
r 37             fir = new Node<>(first.next.item);
--[ 2021.10.11.14.39.18.298.0 ]--
r 37             firs = new Node<>(first.next.item);
--[ 2021.10.11.14.39.18.519.0 ]--
r 37             first = new Node<>(first.next.item);
--[ 2021.10.11.14.39.18.616.0 ]--
r 37             first. = new Node<>(first.next.item);
--[ 2021.10.11.14.39.19.377.0 ]--
r 37             first.next = new Node<>(first.next.item);
--[ 2021.10.11.14.39.19.723.0 ]--
r 37             first.next. = new Node<>(first.next.item);
--[ 2021.10.11.14.39.20.533.0 ]--
r 37             first.next.i = new Node<>(first.next.item);
--[ 2021.10.11.14.39.21.059.0 ]--
r 37             first.next.item = new Node<>(first.next.item);
--[ 2021.10.11.14.39.25.555.0 ]--
r 37             first.next.ite = new Node<>(first.next.item);
--[ 2021.10.11.14.39.25.694.0 ]--
r 37             first.next.it = new Node<>(first.next.item);
--[ 2021.10.11.14.39.25.842.0 ]--
r 37             first.next.i = new Node<>(first.next.item);
--[ 2021.10.11.14.39.25.988.0 ]--
r 37             first.next. = new Node<>(first.next.item);
--[ 2021.10.11.14.39.26.132.0 ]--
r 37             first.next = new Node<>(first.next.item);
--[ 2021.10.11.14.40.37.660.0 ]--
r 37             first.next = new Node<>(t);
--[ 2021.10.11.14.40.37.800.0 ]--
r 37             first.next = new Node<>(ti);
--[ 2021.10.11.14.40.38.011.0 ]--
r 37             first.next = new Node<>(tiem);
--[ 2021.10.11.14.40.38.709.0 ]--
r 37             first.next = new Node<>(tie);
--[ 2021.10.11.14.40.38.879.0 ]--
r 37             first.next = new Node<>(ti);
--[ 2021.10.11.14.40.38.997.0 ]--
r 37             first.next = new Node<>(t);
--[ 2021.10.11.14.40.39.156.0 ]--
r 37             first.next = new Node<>();
--[ 2021.10.11.14.40.39.565.0 ]--
r 37             first.next = new Node<>(i);
--[ 2021.10.11.14.40.39.663.0 ]--
r 37             first.next = new Node<>(it);
--[ 2021.10.11.14.40.39.841.0 ]--
r 37             first.next = new Node<>(ite);
--[ 2021.10.11.14.40.39.951.0 ]--
r 37             first.next = new Node<>(item);
--[ 2021.10.11.14.41.09.037.0 ]--
+ 38             
--[ 2021.10.11.14.41.09.554.0 ]--
r 38             f
--[ 2021.10.11.14.41.10.815.0 ]--
r 38             
--[ 2021.10.11.14.41.11.164.0 ]--
- 38
--[ 2021.10.11.14.41.12.626.0 ]--
+ 37             
--[ 2021.10.11.14.41.14.141.0 ]--
r 37             N
--[ 2021.10.11.14.41.14.363.0 ]--
r 37             No
--[ 2021.10.11.14.41.14.860.0 ]--
r 37             Node
--[ 2021.10.11.14.41.15.735.0 ]--
r 37             Node<>
--[ 2021.10.11.14.41.16.179.0 ]--
r 37             Node<I>
--[ 2021.10.11.14.41.16.390.0 ]--
r 37             Node<It>
--[ 2021.10.11.14.41.16.886.0 ]--
r 37             Node<Item>
--[ 2021.10.11.14.41.17.519.0 ]--
r 37             Node<Item> 
--[ 2021.10.11.14.41.18.595.0 ]--
r 37             Node<Item> t
--[ 2021.10.11.14.41.18.703.0 ]--
r 37             Node<Item> tm
--[ 2021.10.11.14.41.18.786.0 ]--
r 37             Node<Item> tmp
--[ 2021.10.11.14.41.18.908.0 ]--
r 37             Node<Item> tmp 
--[ 2021.10.11.14.41.19.419.0 ]--
r 37             Node<Item> tmp =
--[ 2021.10.11.14.41.19.513.0 ]--
r 37             Node<Item> tmp = 
--[ 2021.10.11.14.41.20.831.0 ]--
r 37             Node<Item> tmp = n
--[ 2021.10.11.14.41.21.548.0 ]--
r 37             Node<Item> tmp = new
--[ 2021.10.11.14.41.21.558.0 ]--
r 37             Node<Item> tmp = new 
--[ 2021.10.11.14.41.22.157.0 ]--
r 37             Node<Item> tmp = new N
--[ 2021.10.11.14.41.22.792.0 ]--
r 37             Node<Item> tmp = new Node
--[ 2021.10.11.14.41.22.797.0 ]--
r 37             Node<Item> tmp = new Node<>
--[ 2021.10.11.14.41.22.802.0 ]--
r 37             Node<Item> tmp = new Node<>()
--[ 2021.10.11.14.41.25.900.0 ]--
r 37             Node<Item> tmp = new Node<>(f)
--[ 2021.10.11.14.41.25.978.0 ]--
r 37             Node<Item> tmp = new Node<>(fi)
--[ 2021.10.11.14.41.26.511.0 ]--
r 37             Node<Item> tmp = new Node<>(first)
--[ 2021.10.11.14.41.26.807.0 ]--
r 37             Node<Item> tmp = new Node<>(first.)
--[ 2021.10.11.14.41.27.462.0 ]--
r 37             Node<Item> tmp = new Node<>(first.n)
--[ 2021.10.11.14.41.28.030.0 ]--
r 37             Node<Item> tmp = new Node<>(first.next)
--[ 2021.10.11.14.41.29.408.0 ]--
r 37             Node<Item> tmp = new Node<>(first.next);
--[ 2021.10.11.14.41.34.233.0 ]--
r 37             Node<Item> tmp = new Node<>(first.next.);
--[ 2021.10.11.14.41.34.529.0 ]--
r 37             Node<Item> tmp = new Node<>(first.next.i);
--[ 2021.10.11.14.41.34.920.0 ]--
r 37             Node<Item> tmp = new Node<>(first.next.item);
--[ 2021.10.11.14.41.52.376.0 ]--
+ 39             
--[ 2021.10.11.14.41.52.807.0 ]--
r 39             f
--[ 2021.10.11.14.41.52.932.0 ]--
r 39             fi
--[ 2021.10.11.14.41.52.999.0 ]--
r 39             fir
--[ 2021.10.11.14.41.53.576.0 ]--
r 39             first
--[ 2021.10.11.14.41.53.763.0 ]--
r 39             first.
--[ 2021.10.11.14.41.54.074.0 ]--
r 39             first.n
--[ 2021.10.11.14.41.54.532.0 ]--
r 39             first.next
--[ 2021.10.11.14.41.54.765.0 ]--
r 39             first.next.
--[ 2021.10.11.14.41.55.510.0 ]--
r 39             first.next.n
--[ 2021.10.11.14.41.55.827.0 ]--
r 39             first.next.next
--[ 2021.10.11.14.41.56.536.0 ]--
r 39             first.next.next 
--[ 2021.10.11.14.41.56.882.0 ]--
r 39             first.next.next =
--[ 2021.10.11.14.41.56.970.0 ]--
r 39             first.next.next = 
--[ 2021.10.11.14.41.59.013.0 ]--
r 39             first.next.next = t
--[ 2021.10.11.14.41.59.684.0 ]--
r 39             first.next.next = tmp
--[ 2021.10.11.14.42.00.263.0 ]--
r 39             first.next.next = tmp;
--[ 2021.10.11.14.44.32.298.0 ]--
r 48         return f;
--[ 2021.10.11.14.44.32.949.0 ]--
r 48         return first;
--[ 2021.10.11.14.44.33.423.0 ]--
r 48         return first.;
--[ 2021.10.11.14.44.34.481.0 ]--
r 48         return first.i;
--[ 2021.10.11.14.44.35.024.0 ]--
r 48         return first.item;
--[ 2021.10.11.14.44.44.978.0 ]--
+ 48         
--[ 2021.10.11.14.44.48.000.0 ]--
r 48         N
--[ 2021.10.11.14.44.48.985.0 ]--
r 48         Node
--[ 2021.10.11.14.44.50.031.0 ]--
r 48         Node<>
--[ 2021.10.11.14.44.50.586.0 ]--
r 48         Node<I>
--[ 2021.10.11.14.44.51.396.0 ]--
r 48         Node<Item>
--[ 2021.10.11.14.44.52.246.0 ]--
r 48         Node<Item> 
--[ 2021.10.11.14.44.52.918.0 ]--
r 48         Node<Item> t
--[ 2021.10.11.14.44.53.032.0 ]--
r 48         Node<Item> tm
--[ 2021.10.11.14.44.54.118.0 ]--
r 48         Node<Item> tmp
--[ 2021.10.11.14.44.54.455.0 ]--
r 48         Node<Item> tmp 
--[ 2021.10.11.14.44.54.853.0 ]--
r 48         Node<Item> tmp =
--[ 2021.10.11.14.44.54.959.0 ]--
r 48         Node<Item> tmp = 
--[ 2021.10.11.14.44.56.845.0 ]--
r 48         Node<Item> tmp = n
--[ 2021.10.11.14.44.56.991.0 ]--
r 48         Node<Item> tmp = ne
--[ 2021.10.11.14.44.57.553.0 ]--
r 48         Node<Item> tmp = new
--[ 2021.10.11.14.44.57.566.0 ]--
r 48         Node<Item> tmp = new 
--[ 2021.10.11.14.44.59.085.0 ]--
r 48         Node<Item> tmp = new N
--[ 2021.10.11.14.45.00.031.0 ]--
r 48         Node<Item> tmp = new Node
--[ 2021.10.11.14.45.00.036.0 ]--
r 48         Node<Item> tmp = new Node<>
--[ 2021.10.11.14.45.00.042.0 ]--
r 48         Node<Item> tmp = new Node<>()
--[ 2021.10.11.14.45.43.121.0 ]--
r 48         Node<Item> tmp = new Node<>(f)
--[ 2021.10.11.14.45.46.631.0 ]--
r 48         Node<Item> tmp = new Node<>(first)
--[ 2021.10.11.14.45.46.912.0 ]--
r 48         Node<Item> tmp = new Node<>(first.)
--[ 2021.10.11.14.45.47.876.0 ]--
r 48         Node<Item> tmp = new Node<>(first.n)
--[ 2021.10.11.14.45.48.735.0 ]--
r 48         Node<Item> tmp = new Node<>(first.next)
--[ 2021.10.11.14.45.50.135.0 ]--
r 48         Node<Item> tmp = new Node<>(first.next.)
--[ 2021.10.11.14.45.50.552.0 ]--
r 48         Node<Item> tmp = new Node<>(first.next.i)
--[ 2021.10.11.14.45.51.453.0 ]--
r 48         Node<Item> tmp = new Node<>(first.next.item)
--[ 2021.10.11.14.45.54.217.0 ]--
r 48         Node<Item> tmp = new Node<>(first.next.item);
--[ 2021.10.11.14.46.03.185.0 ]--
r 48         Node<Item> tmp = new Node<>(first.next.ite);
--[ 2021.10.11.14.46.03.300.0 ]--
r 48         Node<Item> tmp = new Node<>(first.next.it);
--[ 2021.10.11.14.46.03.446.0 ]--
r 48         Node<Item> tmp = new Node<>(first.next.i);
--[ 2021.10.11.14.46.03.576.0 ]--
r 48         Node<Item> tmp = new Node<>(first.next.);
--[ 2021.10.11.14.46.03.735.0 ]--
r 48         Node<Item> tmp = new Node<>(first.next);
--[ 2021.10.11.14.46.05.412.0 ]--
r 48         Node<Item> tmp = new Node<>(first.next.item);
--[ 2021.10.11.14.49.12.982.0 ]--
r 6     // d-linked list
--[ 2021.10.11.14.49.13.105.0 ]--
r 6     // do-linked list
--[ 2021.10.11.14.49.13.196.0 ]--
r 6     // dou-linked list
--[ 2021.10.11.14.49.13.387.0 ]--
r 6     // doub-linked list
--[ 2021.10.11.14.49.13.475.0 ]--
r 6     // doubl-linked list
--[ 2021.10.11.14.49.13.627.0 ]--
r 6     // double-linked list
--[ 2021.10.11.14.49.21.320.0 ]--
+ 10         
--[ 2021.10.11.14.49.22.330.0 ]--
r 10         N
--[ 2021.10.11.14.49.22.532.0 ]--
r 10         No
--[ 2021.10.11.14.49.22.587.0 ]--
r 10         Noe
--[ 2021.10.11.14.49.23.638.0 ]--
r 10         No
--[ 2021.10.11.14.49.23.749.0 ]--
r 10         N
--[ 2021.10.11.14.49.23.922.0 ]--
r 10         
--[ 2021.10.11.14.49.27.412.0 ]--
r 10         Node<Item> next = null;
--[ 2021.10.11.14.49.29.592.0 ]--
r 10         Node<Item> p = null;
--[ 2021.10.11.14.49.29.619.0 ]--
r 10         Node<Item> pr = null;
--[ 2021.10.11.14.49.29.706.0 ]--
r 10         Node<Item> pre = null;
--[ 2021.10.11.14.49.29.899.0 ]--
r 10         Node<Item> prev = null;
--[ 2021.10.11.14.49.29.939.0 ]--
r 10         Node<Item> previ = null;
--[ 2021.10.11.14.49.30.019.0 ]--
r 10         Node<Item> previo = null;
--[ 2021.10.11.14.49.30.114.0 ]--
r 10         Node<Item> previou = null;
--[ 2021.10.11.14.49.30.153.0 ]--
r 10         Node<Item> previous = null;
--[ 2021.10.11.14.49.34.563.0 ]--
r 12         public Node(Item item, Node<Item> next,) {
--[ 2021.10.11.14.49.34.714.0 ]--
r 12         public Node(Item item, Node<Item> next, ) {
--[ 2021.10.11.14.49.36.692.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<Item> next = null;) {
--[ 2021.10.11.14.49.40.158.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<Item> p) {
--[ 2021.10.11.14.49.40.206.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<Item> pr) {
--[ 2021.10.11.14.49.40.757.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<Item> previous) {
--[ 2021.10.11.14.49.42.324.0 ]--
+ 15             
--[ 2021.10.11.14.49.42.693.0 ]--
r 15             t
--[ 2021.10.11.14.49.42.799.0 ]--
r 15             th
--[ 2021.10.11.14.49.42.823.0 ]--
r 15             thi
--[ 2021.10.11.14.49.42.919.0 ]--
r 15             this
--[ 2021.10.11.14.49.43.175.0 ]--
r 15             this.
--[ 2021.10.11.14.49.43.333.0 ]--
r 15             this. 
--[ 2021.10.11.14.49.43.921.0 ]--
r 15             this.
--[ 2021.10.11.14.49.44.121.0 ]--
r 15             this.p
--[ 2021.10.11.14.49.44.213.0 ]--
r 15             this.pr
--[ 2021.10.11.14.49.44.692.0 ]--
r 15             this.previous
--[ 2021.10.11.14.49.45.042.0 ]--
r 15             this.previous 
--[ 2021.10.11.14.49.45.646.0 ]--
r 15             this.previous =
--[ 2021.10.11.14.49.45.779.0 ]--
r 15             this.previous = 
--[ 2021.10.11.14.49.45.895.0 ]--
r 15             this.previous = p
--[ 2021.10.11.14.49.46.405.0 ]--
r 15             this.previous = previous
--[ 2021.10.11.14.49.46.698.0 ]--
r 15             this.previous = previous;
--[ 2021.10.11.14.52.12.512.0 ]--
r 40             first.p = new Node<>(item);
--[ 2021.10.11.14.52.12.643.0 ]--
r 40             first.pr = new Node<>(item);
--[ 2021.10.11.14.52.13.436.0 ]--
r 40             first.previous = new Node<>(item);
--[ 2021.10.11.14.52.26.787.0 ]--
r 41             first.p.next = tmp;
--[ 2021.10.11.14.52.26.893.0 ]--
r 41             first.pr.next = tmp;
--[ 2021.10.11.14.52.27.352.0 ]--
r 41             first.previous.next = tmp;
--[ 2021.10.11.14.52.29.249.0 ]--
r 41             first.previous.next = f;
--[ 2021.10.11.14.52.29.375.0 ]--
r 41             first.previous.next = fi;
--[ 2021.10.11.14.52.29.802.0 ]--
r 41             first.previous.next = first;
--[ 2021.10.11.14.52.31.860.0 ]--
- 39
--[ 2021.10.11.14.52.49.692.0 ]--
+ 39             Node<Item> tmp = new Node<>(first.next.item);
--[ 2021.10.11.14.52.54.921.0 ]--
+ 40             
--[ 2021.10.11.14.52.55.553.0 ]--
r 40             f
--[ 2021.10.11.14.52.55.675.0 ]--
r 40             fi
--[ 2021.10.11.14.52.55.759.0 ]--
r 40             fir
--[ 2021.10.11.14.52.56.319.0 ]--
r 40             first
--[ 2021.10.11.14.52.56.519.0 ]--
r 40             first.
--[ 2021.10.11.14.52.56.932.0 ]--
r 40             first.n
--[ 2021.10.11.14.52.57.410.0 ]--
r 40             first.next
--[ 2021.10.11.14.52.58.187.0 ]--
r 40             first.next 
--[ 2021.10.11.14.52.59.363.0 ]--
r 40             first.next =
--[ 2021.10.11.14.52.59.502.0 ]--
r 40             first.next = 
--[ 2021.10.11.14.53.03.755.0 ]--
r 40             first.next = new Node<>(item);
--[ 2021.10.11.14.55.41.534.0 ]--
- 41
--[ 2021.10.11.14.55.49.044.0 ]--
- 41
--[ 2021.10.11.14.55.52.477.0 ]--
r 40             first.next = new Node<>(item);\
--[ 2021.10.11.14.55.52.935.0 ]--
r 40             first.next = new Node<>(item);
--[ 2021.10.11.14.55.53.302.0 ]--
+ 41             
--[ 2021.10.11.14.55.54.361.0 ]--
r 41             t
--[ 2021.10.11.14.55.54.475.0 ]--
r 41             tm
--[ 2021.10.11.14.55.54.722.0 ]--
r 41             tmp
--[ 2021.10.11.14.55.55.143.0 ]--
r 41             tm
--[ 2021.10.11.14.55.55.282.0 ]--
r 41             t
--[ 2021.10.11.14.55.55.544.0 ]--
r 41             
--[ 2021.10.11.14.55.56.965.0 ]--
r 41             f
--[ 2021.10.11.14.55.57.581.0 ]--
r 41             first
--[ 2021.10.11.14.55.57.825.0 ]--
r 41             first.
--[ 2021.10.11.14.55.58.941.0 ]--
r 41             first.next
--[ 2021.10.11.14.55.59.360.0 ]--
r 41             first.next.
--[ 2021.10.11.14.55.59.857.0 ]--
r 41             first.next.i
--[ 2021.10.11.14.56.00.333.0 ]--
r 41             first.next.item
--[ 2021.10.11.14.56.00.855.0 ]--
r 41             first.next.item 
--[ 2021.10.11.14.56.01.127.0 ]--
r 41             first.next.item =
--[ 2021.10.11.14.56.01.200.0 ]--
r 41             first.next.item = 
--[ 2021.10.11.14.56.01.640.0 ]--
r 41             first.next.item = t
--[ 2021.10.11.14.56.02.240.0 ]--
r 41             first.next.item = tmp
--[ 2021.10.11.14.56.02.540.0 ]--
r 41             first.next.item = tmp;
--[ 2021.10.11.14.56.04.277.0 ]--
r 41             first.next. = tmp;
--[ 2021.10.11.14.56.04.413.0 ]--
r 41             first.next = tmp;
--[ 2021.10.11.14.56.07.609.0 ]--
r 41             first.next. = tmp;
--[ 2021.10.11.14.56.08.291.0 ]--
r 41             first.next.n = tmp;
--[ 2021.10.11.14.56.08.787.0 ]--
r 41             first.next.next = tmp;
--[ 2021.10.11.14.56.22.983.0 ]--
+ 42             
--[ 2021.10.11.14.56.23.729.0 ]--
r 42             t
--[ 2021.10.11.14.56.23.862.0 ]--
r 42             tm
--[ 2021.10.11.14.56.24.005.0 ]--
r 42             tmp
--[ 2021.10.11.14.56.24.450.0 ]--
r 42             tmp.
--[ 2021.10.11.14.56.25.114.0 ]--
r 42             tmp.p
--[ 2021.10.11.14.56.25.770.0 ]--
r 42             tmp.previous
--[ 2021.10.11.14.56.26.386.0 ]--
r 42             tmp.previous 
--[ 2021.10.11.14.56.26.546.0 ]--
r 42             tmp.previous =
--[ 2021.10.11.14.56.26.687.0 ]--
r 42             tmp.previous = 
--[ 2021.10.11.14.56.30.234.0 ]--
r 42             tmp.previous = i
--[ 2021.10.11.14.56.30.358.0 ]--
r 42             tmp.previous = it
--[ 2021.10.11.14.56.30.817.0 ]--
r 42             tmp.previous = item
--[ 2021.10.11.14.56.31.182.0 ]--
r 42             tmp.previous = item;
--[ 2021.10.11.14.56.41.526.0 ]--
r 42             tmp.previous = f;
--[ 2021.10.11.14.56.42.373.0 ]--
r 42             tmp.previous = first;
--[ 2021.10.11.14.56.42.627.0 ]--
r 42             tmp.previous = first.;
--[ 2021.10.11.14.56.43.837.0 ]--
r 42             tmp.previous = first.n;
--[ 2021.10.11.14.56.44.514.0 ]--
r 42             tmp.previous = first.next;
--[ 2021.10.11.14.57.29.093.0 ]--
r 38         } eelse {
--[ 2021.10.11.14.57.29.326.0 ]--
r 38         } eselse {
--[ 2021.10.11.14.57.29.378.0 ]--
r 38         } eslelse {
--[ 2021.10.11.14.57.29.523.0 ]--
r 38         } eslielse {
--[ 2021.10.11.14.57.29.984.0 ]--
r 38         } eslelse {
--[ 2021.10.11.14.57.30.128.0 ]--
r 38         } eselse {
--[ 2021.10.11.14.57.30.378.0 ]--
r 38         } eelse {
--[ 2021.10.11.14.57.30.569.0 ]--
r 38         } elelse {
--[ 2021.10.11.14.57.30.603.0 ]--
r 38         } elselse {
--[ 2021.10.11.14.57.30.791.0 ]--
r 38         } elsielse {
--[ 2021.10.11.14.57.31.218.0 ]--
r 38         } elselse {
--[ 2021.10.11.14.57.31.278.0 ]--
r 38         } elsewelse {
--[ 2021.10.11.14.57.31.898.0 ]--
r 38         } elseelse {
--[ 2021.10.11.14.57.32.173.0 ]--
r 38         } else else {
--[ 2021.10.11.14.57.32.347.0 ]--
r 38         } else ielse {
--[ 2021.10.11.14.57.32.440.0 ]--
r 38         } else ifelse {
--[ 2021.10.11.14.57.32.755.0 ]--
r 38         } else if else {
--[ 2021.10.11.14.57.33.601.0 ]--
r 38         } else if (else {
--[ 2021.10.11.14.57.33.799.0 ]--
r 38         } else if ()else {
--[ 2021.10.11.14.57.35.151.0 ]--
r 38         } else if (){else {
--[ 2021.10.11.14.57.35.832.0 ]--
+ 38         } else if (){
+ 39 else
r 40 } {
--[ 2021.10.11.14.57.35.843.0 ]--
r 40         } {
--[ 2021.10.11.14.57.35.862.0 ]--
r 39             else
--[ 2021.10.11.14.57.37.075.0 ]--
r 39             }else
--[ 2021.10.11.14.57.37.085.0 ]--
r 38         } else if () {
--[ 2021.10.11.14.57.37.088.0 ]--
r 39         }else
--[ 2021.10.11.14.57.42.780.0 ]--
r 40          {
--[ 2021.10.11.14.57.43.036.0 ]--
r 40         {
--[ 2021.10.11.14.57.43.391.0 ]--
- 39
r 39         }else {
--[ 2021.10.11.14.57.47.280.0 ]--
r 38         } else if (s) {
--[ 2021.10.11.14.57.48.866.0 ]--
r 38         } else if (size) {
--[ 2021.10.11.14.57.48.872.0 ]--
r 38         } else if (size()) {
--[ 2021.10.11.14.57.50.191.0 ]--
r 38         } else if (size()=) {
--[ 2021.10.11.14.57.50.313.0 ]--
r 38         } else if (size()==) {
--[ 2021.10.11.14.57.50.496.0 ]--
r 38         } else if (size()==`) {
--[ 2021.10.11.14.57.50.996.0 ]--
r 38         } else if (size()==) {
--[ 2021.10.11.14.57.51.296.0 ]--
r 38         } else if (size()==1) {
--[ 2021.10.11.14.57.56.224.0 ]--
r 39         } else {
--[ 2021.10.11.14.57.57.610.0 ]--
+ 39         
--[ 2021.10.11.14.57.58.085.0 ]--
r 39             
--[ 2021.10.11.15.01.09.573.0 ]--
r 39             f
--[ 2021.10.11.15.01.10.189.0 ]--
r 39             first
--[ 2021.10.11.15.01.10.382.0 ]--
r 39             first.
--[ 2021.10.11.15.01.10.966.0 ]--
r 39             first.next
--[ 2021.10.11.15.01.11.820.0 ]--
r 39             first.next 
--[ 2021.10.11.15.01.11.937.0 ]--
r 39             first.next =
--[ 2021.10.11.15.01.12.031.0 ]--
r 39             first.next = 
--[ 2021.10.11.15.01.12.769.0 ]--
r 39             first.next = i
--[ 2021.10.11.15.01.13.327.0 ]--
r 39             first.next = item
--[ 2021.10.11.15.01.13.588.0 ]--
r 39             first.next = item;
--[ 2021.10.11.15.01.21.051.0 ]--
r 39             first.next = new Node<>(item);;
--[ 2021.10.11.15.01.21.821.0 ]--
+ 40             
--[ 2021.10.11.15.01.24.138.0 ]--
r 39             first.next = new Node<>(item);
--[ 2021.10.11.15.01.27.823.0 ]--
r 40             f
--[ 2021.10.11.15.01.28.734.0 ]--
r 40             first
--[ 2021.10.11.15.01.29.013.0 ]--
r 40             first.
--[ 2021.10.11.15.01.29.619.0 ]--
r 40             first.n
--[ 2021.10.11.15.01.30.249.0 ]--
r 40             first.next
--[ 2021.10.11.15.01.30.841.0 ]--
r 40             first.next.
--[ 2021.10.11.15.01.31.936.0 ]--
r 40             first.next.next
--[ 2021.10.11.15.01.32.577.0 ]--
r 40             first.next.next 
--[ 2021.10.11.15.01.32.823.0 ]--
r 40             first.next.next =
--[ 2021.10.11.15.01.32.940.0 ]--
r 40             first.next.next = 
--[ 2021.10.11.15.01.33.337.0 ]--
r 40             first.next.next = f
--[ 2021.10.11.15.01.34.061.0 ]--
r 40             first.next.next = first
--[ 2021.10.11.15.01.34.968.0 ]--
r 40             first.next.next = first;
--[ 2021.10.11.15.01.35.825.0 ]--
+ 41             
--[ 2021.10.11.15.01.36.075.0 ]--
r 41             f
--[ 2021.10.11.15.01.36.978.0 ]--
r 41             first
--[ 2021.10.11.15.01.37.284.0 ]--
r 41             first.
--[ 2021.10.11.15.01.38.074.0 ]--
r 41             first.p
--[ 2021.10.11.15.01.38.753.0 ]--
r 41             first.previous
--[ 2021.10.11.15.01.39.734.0 ]--
r 41             first.previous 
--[ 2021.10.11.15.01.40.138.0 ]--
r 41             first.previous  
--[ 2021.10.11.15.01.40.459.0 ]--
r 41             first.previous 
--[ 2021.10.11.15.01.40.683.0 ]--
r 41             first.previous
--[ 2021.10.11.15.01.41.020.0 ]--
r 41             first.previous 
--[ 2021.10.11.15.01.41.400.0 ]--
r 41             first.previous =
--[ 2021.10.11.15.01.41.541.0 ]--
r 41             first.previous = 
--[ 2021.10.11.15.01.42.948.0 ]--
r 41             first.previous = f
--[ 2021.10.11.15.01.43.722.0 ]--
r 41             first.previous = first
--[ 2021.10.11.15.01.44.022.0 ]--
r 41             first.previous = first.
--[ 2021.10.11.15.01.44.890.0 ]--
r 41             first.previous = first.next
--[ 2021.10.11.15.01.45.435.0 ]--
r 41             first.previous = first.next;
--[ 2021.10.11.15.04.29.860.0 ]--
r 55         
--[ 2021.10.11.15.04.34.395.0 ]--
r 55         f
--[ 2021.10.11.15.04.35.204.0 ]--
r 55         first
--[ 2021.10.11.15.04.35.370.0 ]--
r 55         first.
--[ 2021.10.11.15.04.36.114.0 ]--
r 55         first.p
--[ 2021.10.11.15.04.36.779.0 ]--
r 55         first.previous
--[ 2021.10.11.15.04.38.278.0 ]--
r 55         first.previous 
--[ 2021.10.11.15.04.38.345.0 ]--
r 55         first.previous =
--[ 2021.10.11.15.04.38.468.0 ]--
r 55         first.previous = 
--[ 2021.10.11.15.04.41.155.0 ]--
r 55         first.previous = f
--[ 2021.10.11.15.04.41.808.0 ]--
r 55         first.previous = first
--[ 2021.10.11.15.04.42.138.0 ]--
r 55         first.previous = first.
--[ 2021.10.11.15.04.43.119.0 ]--
r 55         first.previous = first.next
--[ 2021.10.11.15.04.50.631.0 ]--
r 55         first.previous. = first.next
--[ 2021.10.11.15.04.50.898.0 ]--
r 55         first.previous.n = first.next
--[ 2021.10.11.15.04.51.548.0 ]--
r 55         first.previous.next = first.next
--[ 2021.10.11.15.04.53.086.0 ]--
r 55         first.previous.next = first.next;
--[ 2021.10.11.19.30.38.579.0 ]--
r 36 //        if (isEmpty()) {
r 37 //            first = new Node<>(item);
r 38 //        } else if (size()==1) {
r 39 //            first.next = new Node<>(item);
r 40 //            first.next.next = first;
r 41 //            first.previous = first.next;
r 42 //        } else {
r 43 //            Node<Item> tmp = new Node<>(first.next.item);
r 44 //            first.next = new Node<>(item);
r 45 //            first.next.next = tmp;
r 46 //            tmp.previous = first.next;
r 47 //        }
--[ 2021.10.11.19.30.40.454.0 ]--
r 36         if (isEmpty()) {
r 37             first = new Node<>(item);
r 38         } else if (size()==1) {
r 39             first.next = new Node<>(item);
r 40             first.next.next = first;
r 41             first.previous = first.next;
r 42         } else {
r 43             Node<Item> tmp = new Node<>(first.next.item);
r 44             first.next = new Node<>(item);
r 45             first.next.next = tmp;
r 46             tmp.previous = first.next;
r 47         }
--[ 2021.10.11.19.30.43.280.0 ]--
+ 48         
--[ 2021.10.11.19.30.43.826.0 ]--
+ 48         
--[ 2021.10.11.19.31.26.635.0 ]--
r 21     private Node<Item> l = null;
--[ 2021.10.11.19.31.26.667.0 ]--
r 21     private Node<Item> la = null;
--[ 2021.10.11.19.31.26.894.0 ]--
r 21     private Node<Item> las = null;
--[ 2021.10.11.19.31.27.198.0 ]--
r 21     private Node<Item> last = null;
--[ 2021.10.11.19.31.34.265.0 ]--
r 58         return l;
--[ 2021.10.11.19.31.34.368.0 ]--
r 58         return ls;
--[ 2021.10.11.19.31.34.955.0 ]--
r 58         return l;
--[ 2021.10.11.19.31.35.012.0 ]--
r 58         return la;
--[ 2021.10.11.19.31.35.701.0 ]--
r 58         return last;
--[ 2021.10.11.19.31.35.886.0 ]--
r 58         return last.;
--[ 2021.10.11.19.31.36.835.0 ]--
r 58         return last.next;
--[ 2021.10.11.19.31.37.259.0 ]--
r 58         return last.next.;
--[ 2021.10.11.19.31.37.899.0 ]--
r 58         return last.next.next;
--[ 2021.10.11.19.31.38.430.0 ]--
r 58         return last.next.nex;
--[ 2021.10.11.19.31.38.549.0 ]--
r 58         return last.next.ne;
--[ 2021.10.11.19.31.38.676.0 ]--
r 58         return last.next.n;
--[ 2021.10.11.19.31.38.811.0 ]--
r 58         return last.next.;
--[ 2021.10.11.19.31.38.968.0 ]--
r 58         return last.next.i;
--[ 2021.10.11.19.31.39.092.0 ]--
r 58         return last.next.it;
--[ 2021.10.11.19.31.39.486.0 ]--
r 58         return last.next.item;
--[ 2021.10.11.19.31.44.936.0 ]--
- 57
--[ 2021.10.11.19.31.52.682.0 ]--
- 38
- 38
- 38
- 38
- 38
- 38
- 38
- 38
- 38
--[ 2021.10.11.19.32.25.724.0 ]--
r 37             l = new Node<>(item);
--[ 2021.10.11.19.32.25.968.0 ]--
r 37             la = new Node<>(item);
--[ 2021.10.11.19.32.26.810.0 ]--
r 37             last = new Node<>(item);
--[ 2021.10.11.19.32.27.283.0 ]--
r 37             last. = new Node<>(item);
--[ 2021.10.11.19.32.28.309.0 ]--
r 37             last.next = new Node<>(item);
--[ 2021.10.11.19.32.38.489.0 ]--
r 37             last.nex = new Node<>(item);
--[ 2021.10.11.19.32.38.647.0 ]--
r 37             last.ne = new Node<>(item);
--[ 2021.10.11.19.32.38.803.0 ]--
r 37             last.n = new Node<>(item);
--[ 2021.10.11.19.32.38.989.0 ]--
r 37             last. = new Node<>(item);
--[ 2021.10.11.19.32.39.289.0 ]--
r 37             last = new Node<>(item);
--[ 2021.10.11.19.32.46.676.0 ]--
r 38         } 
--[ 2021.10.11.19.32.46.869.0 ]--
r 38         } e
--[ 2021.10.11.19.32.46.965.0 ]--
r 38         } el
--[ 2021.10.11.19.32.47.786.0 ]--
r 38         } else
--[ 2021.10.11.19.32.47.802.0 ]--
r 38         } else 
--[ 2021.10.11.19.32.48.166.0 ]--
r 38         } else  
--[ 2021.10.11.19.32.48.517.0 ]--
r 38         } else 
--[ 2021.10.11.19.32.48.853.0 ]--
r 38         } else {
--[ 2021.10.11.19.32.49.068.0 ]--
+ 39 
+ 40 }
--[ 2021.10.11.19.32.49.077.0 ]--
r 40         }
--[ 2021.10.11.19.32.49.107.0 ]--
r 39             
--[ 2021.10.11.19.32.52.794.0 ]--
r 39             last = new Node<>(item);
--[ 2021.10.11.19.33.27.553.0 ]--
+ 40             
--[ 2021.10.11.19.33.51.545.0 ]--
r 39             last. = new Node<>(item);
--[ 2021.10.11.19.33.51.876.0 ]--
r 39             last.b = new Node<>(item);
--[ 2021.10.11.19.33.51.956.0 ]--
r 39             last.be = new Node<>(item);
--[ 2021.10.11.19.33.52.651.0 ]--
r 39             last.b = new Node<>(item);
--[ 2021.10.11.19.33.52.826.0 ]--
r 39             last. = new Node<>(item);
--[ 2021.10.11.19.33.52.980.0 ]--
r 39             last.n = new Node<>(item);
--[ 2021.10.11.19.33.53.125.0 ]--
r 39             last.nx = new Node<>(item);
--[ 2021.10.11.19.33.53.540.0 ]--
r 39             last.n = new Node<>(item);
--[ 2021.10.11.19.33.53.669.0 ]--
r 39             last.ne = new Node<>(item);
--[ 2021.10.11.19.33.53.943.0 ]--
r 39             last.nex = new Node<>(item);
--[ 2021.10.11.19.33.54.258.0 ]--
r 39             last.next = new Node<>(item);
--[ 2021.10.11.19.34.01.092.0 ]--
+ 40             
--[ 2021.10.11.19.34.02.050.0 ]--
r 40             l
--[ 2021.10.11.19.34.02.191.0 ]--
r 40             la
--[ 2021.10.11.19.34.02.359.0 ]--
r 40             las
--[ 2021.10.11.19.34.02.624.0 ]--
r 40             last
--[ 2021.10.11.19.34.02.947.0 ]--
r 40             last 
--[ 2021.10.11.19.34.03.245.0 ]--
r 40             last
--[ 2021.10.11.19.34.03.578.0 ]--
r 40             last.
--[ 2021.10.11.19.34.04.113.0 ]--
r 40             last.n
--[ 2021.10.11.19.34.04.841.0 ]--
r 40             last.next
--[ 2021.10.11.19.34.05.620.0 ]--
r 40             last.next.
--[ 2021.10.11.19.34.05.884.0 ]--
r 40             last.next.n
--[ 2021.10.11.19.34.06.015.0 ]--
r 40             last.next.ne
--[ 2021.10.11.19.34.06.451.0 ]--
r 40             last.next.nex
--[ 2021.10.11.19.34.06.761.0 ]--
r 40             last.next.next
--[ 2021.10.11.19.34.07.613.0 ]--
r 40             last.next.nex
--[ 2021.10.11.19.34.08.580.0 ]--
r 40             last.next.next
--[ 2021.10.11.19.34.09.484.0 ]--
r 40             last.next.next 
--[ 2021.10.11.19.34.10.135.0 ]--
r 40             last.next.next =
--[ 2021.10.11.19.34.10.353.0 ]--
r 40             last.next.next = 
--[ 2021.10.11.19.34.10.516.0 ]--
r 40             last.next.next = t
--[ 2021.10.11.19.34.10.702.0 ]--
r 40             last.next.next = tm
--[ 2021.10.11.19.34.10.729.0 ]--
r 40             last.next.next = tmp
--[ 2021.10.11.19.34.11.115.0 ]--
r 40             last.next.next = tmp;
--[ 2021.10.11.19.34.15.706.0 ]--
+ 39             
--[ 2021.10.11.19.34.16.339.0 ]--
r 39             new Node<>(item);
--[ 2021.10.11.19.34.19.505.0 ]--
r 39             Nnew Node<>(item);
--[ 2021.10.11.19.34.19.756.0 ]--
r 39             Nodnew Node<>(item);
--[ 2021.10.11.19.34.20.233.0 ]--
r 39             Nodenew Node<>(item);
--[ 2021.10.11.19.34.20.244.0 ]--
r 39             Node new Node<>(item);
--[ 2021.10.11.19.34.20.254.0 ]--
r 39             Nodenew Node<>(item);
--[ 2021.10.11.19.34.24.830.0 ]--
r 39             Node<new Node<>(item);
--[ 2021.10.11.19.34.25.674.0 ]--
r 39             Node<Inew Node<>(item);
--[ 2021.10.11.19.34.26.369.0 ]--
r 39             Node<Itemnew Node<>(item);
--[ 2021.10.11.19.34.27.811.0 ]--
r 39             Node<Item>new Node<>(item);
--[ 2021.10.11.19.34.28.205.0 ]--
r 39             Node<Item> new Node<>(item);
--[ 2021.10.11.19.34.28.787.0 ]--
r 39             Node<Item> tnew Node<>(item);
--[ 2021.10.11.19.34.28.902.0 ]--
r 39             Node<Item> tmnew Node<>(item);
--[ 2021.10.11.19.34.29.039.0 ]--
r 39             Node<Item> tmpnew Node<>(item);
--[ 2021.10.11.19.34.29.145.0 ]--
r 39             Node<Item> tmp new Node<>(item);
--[ 2021.10.11.19.34.29.869.0 ]--
r 39             Node<Item> tmp =new Node<>(item);
--[ 2021.10.11.19.34.29.991.0 ]--
r 39             Node<Item> tmp = new Node<>(item);
--[ 2021.10.11.19.34.37.080.0 ]--
r 39             Node<Item> tmp = new Node<>(l);
--[ 2021.10.11.19.34.37.286.0 ]--
r 39             Node<Item> tmp = new Node<>(la);
--[ 2021.10.11.19.34.37.681.0 ]--
r 39             Node<Item> tmp = new Node<>(last.item);
--[ 2021.10.11.19.34.37.689.0 ]--
r 39             Node<Item> tmp = new Node<>(last;);
--[ 2021.10.11.19.34.37.695.0 ]--
r 39             Node<Item> tmp = new Node<>(last.item);
--[ 2021.10.11.19.34.40.726.0 ]--
r 39             Node<Item> tmp = new Node<>(last.nitem);
--[ 2021.10.11.19.34.41.497.0 ]--
r 39             Node<Item> tmp = new Node<>(last.nextitem);
--[ 2021.10.11.19.34.41.906.0 ]--
r 39             Node<Item> tmp = new Node<>(last.next.item);
--[ 2021.10.11.19.36.38.037.0 ]--
- 44
--[ 2021.10.11.19.36.38.237.0 ]--
- 44
--[ 2021.10.11.19.36.39.975.0 ]--
- 41
r 41             last.next.next = tmp;\
--[ 2021.10.11.19.36.41.240.0 ]--
r 41             last.next.next = tmp;
--[ 2021.10.11.19.38.35.207.0 ]--
r 6     // s-linked list
--[ 2021.10.11.19.38.35.386.0 ]--
r 6     // si-linked list
--[ 2021.10.11.19.38.35.477.0 ]--
r 6     // sin-linked list
--[ 2021.10.11.19.38.35.543.0 ]--
r 6     // sing-linked list
--[ 2021.10.11.19.38.35.631.0 ]--
r 6     // singl-linked list
--[ 2021.10.11.19.38.35.755.0 ]--
r 6     // singly-linked list
--[ 2021.10.11.19.38.38.496.0 ]--
- 15
--[ 2021.10.11.19.38.39.509.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<Item> ) {
--[ 2021.10.11.19.38.39.723.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<Item>) {
--[ 2021.10.11.19.38.39.881.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<Item) {
--[ 2021.10.11.19.38.40.058.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<Ite) {
--[ 2021.10.11.19.38.40.198.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<It) {
--[ 2021.10.11.19.38.40.356.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<I) {
--[ 2021.10.11.19.38.40.512.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<) {
--[ 2021.10.11.19.38.40.667.0 ]--
r 12         public Node(Item item, Node<Item> next, Node) {
--[ 2021.10.11.19.38.40.800.0 ]--
r 12         public Node(Item item, Node<Item> next, Nod) {
--[ 2021.10.11.19.38.40.983.0 ]--
r 12         public Node(Item item, Node<Item> next, No) {
--[ 2021.10.11.19.38.41.147.0 ]--
r 12         public Node(Item item, Node<Item> next, N) {
--[ 2021.10.11.19.38.41.324.0 ]--
r 12         public Node(Item item, Node<Item> next, ) {
--[ 2021.10.11.19.38.41.494.0 ]--
r 12         public Node(Item item, Node<Item> next,) {
--[ 2021.10.11.19.38.41.694.0 ]--
r 12         public Node(Item item, Node<Item> next) {
--[ 2021.10.11.19.38.43.368.0 ]--
- 10
--[ 2021.10.11.19.42.48.864.0 ]--
r 56             Node<Item> p = first;
r 61                     throw new ConcurrentModificationException("modified stegue while iterating");
r 63                 return p.next != null;
r 69                     throw new ConcurrentModificationException("modified stegue while iterating");
+ 71                 Item tmp = p.next.item;
+ 72                 p = p.next;
r 73                 return tmp;
--[ 2021.10.11.19.42.48.885.0 ]--
r 56             Steque.Node<Item> p = first;
--[ 2021.10.11.19.42.55.768.0 ]--
r 56             Steque.\Node<Item> p = first;
--[ 2021.10.11.19.42.55.955.0 ]--
r 56             Steque.Node<Item> p = first;
--[ 2021.10.11.19.42.56.111.0 ]--
r 56             StequeNode<Item> p = first;
--[ 2021.10.11.19.42.56.271.0 ]--
r 56             StequNode<Item> p = first;
--[ 2021.10.11.19.42.56.403.0 ]--
r 56             SteqNode<Item> p = first;
--[ 2021.10.11.19.42.56.568.0 ]--
r 56             SteNode<Item> p = first;
--[ 2021.10.11.19.42.56.721.0 ]--
r 56             StNode<Item> p = first;
--[ 2021.10.11.19.42.56.861.0 ]--
r 56             SNode<Item> p = first;
--[ 2021.10.11.19.42.57.124.0 ]--
r 56             Node<Item> p = first;
--[ 2021.10.11.19.43.07.139.0 ]--
r 56             Node<Item> p = l;
--[ 2021.10.11.19.43.07.838.0 ]--
r 56             Node<Item> p = last;
--[ 2021.10.11.19.46.55.475.0 ]--
r 83     
--[ 2021.10.11.19.46.56.653.0 ]--
+ 83             Steque<String> testString = new Steque<>();
+ 84         assert testString.size()==0;
+ 85         assert testString.isEmpty();
+ 86         testString.enqueue("itemuno");
+ 87         assert testString.size()==1;
+ 88         assert !testString.isEmpty();
+ 89         testString.push("pushThis");
+ 90         assert testString.size()==2;
+ 91         assert !testString.isEmpty();
+ 92         testString.enqueue("itemtres");
+ 93         assert testString.size()==3;
+ 94         assert !testString.isEmpty();
+ 95         String poppedString = testString.pop();
+ 96         StdOut.println(poppedString);
+ 97         poppedString = testString.pop();
+ 98         StdOut.println(poppedString);
+ 99         poppedString = testString.pop();
+ 100         StdOut.println(poppedString);
+ 101         assert testString.size()==0;
+ 102         assert testString.isEmpty();
+ 103 
+ 104         // fails
+ 105 //        poppedString = testString.pop();
+ 106         testString.enqueue("testuno");
+ 107         assert testString.size()==1;
+ 108         assert !testString.isEmpty();
+ 109         testString.enqueue("testdos");
+ 110         assert testString.size()==2;
+ 111         assert !testString.isEmpty();
+ 112         testString.enqueue("testtres");
+ 113         assert testString.size()==3;
+ 114         assert !testString.isEmpty();
+ 115         Iterator<String> iter = testString.iterator();
+ 116         StdOut.println("iterate:" + iter.next());
+ 117         StdOut.println("iterate:" + iter.hasNext());
+ 118 //        testString.pop();
+ 119         StdOut.println("iterate:" + iter.next());
+ 120 //        testString.pop();
+ 121         StdOut.println("iterate:" + iter.hasNext());
r 122 //        StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.19.46.56.670.0 ]--
r 83         Steque<String> testString = new Steque<>();
--[ 2021.10.11.19.47.04.195.0 ]--
r 83         'Steque'<String> testString = new Steque<>();
--[ 2021.10.11.19.47.04.608.0 ]--
r 83         ''<String> testString = new Steque<>();
--[ 2021.10.11.19.47.05.023.0 ]--
r 83         <String> testString = new Steque<>();
--[ 2021.10.11.19.47.08.110.0 ]--
r 83         O<String> testString = new Steque<>();
--[ 2021.10.11.19.47.08.393.0 ]--
r 83         On<String> testString = new Steque<>();
--[ 2021.10.11.19.47.08.933.0 ]--
r 83         OnePointerQueue<String> testString = new Steque<>();
--[ 2021.10.11.19.47.23.110.0 ]--
r 83         OnePointerQueue<String> testString = new O<>();
--[ 2021.10.11.19.47.23.995.0 ]--
r 83         OnePointerQueue<String> testString = new OnePointerQueue<>();
--[ 2021.10.11.19.47.24.000.0 ]--
r 83         OnePointerQueue<String> testString = new OnePointerQueue();
--[ 2021.10.11.19.47.24.013.0 ]--
r 83         OnePointerQueue<String> testString = new OnePointerQueue<>();
--[ 2021.10.11.19.47.33.539.0 ]--
r 86 isEmpty        testString.enqueue("itemuno");
--[ 2021.10.11.19.47.35.405.0 ]--
r 86         testString.enqueue("itemuno");
--[ 2021.10.11.19.47.36.724.0 ]--
r 86 //        testString.enqueue("itemuno");
r 87 //        assert testString.size()==1;
r 88 //        assert !testString.isEmpty();
r 89 //        testString.push("pushThis");
r 90 //        assert testString.size()==2;
r 91 //        assert !testString.isEmpty();
r 92 //        testString.enqueue("itemtres");
r 93 //        assert testString.size()==3;
r 94 //        assert !testString.isEmpty();
r 95 //        String poppedString = testString.pop();
r 96 //        StdOut.println(poppedString);
r 97 //        poppedString = testString.pop();
r 98 //        StdOut.println(poppedString);
r 99 //        poppedString = testString.pop();
r 100 //        StdOut.println(poppedString);
r 101 //        assert testString.size()==0;
r 102 //        assert testString.isEmpty();
r 103 //
r 104 //        // fails
r 105 ////        poppedString = testString.pop();
r 106 //        testString.enqueue("testuno");
r 107 //        assert testString.size()==1;
r 108 //        assert !testString.isEmpty();
r 109 //        testString.enqueue("testdos");
r 110 //        assert testString.size()==2;
r 111 //        assert !testString.isEmpty();
r 112 //        testString.enqueue("testtres");
r 113 //        assert testString.size()==3;
r 114 //        assert !testString.isEmpty();
r 115 //        Iterator<String> iter = testString.iterator();
r 116 //        StdOut.println("iterate:" + iter.next());
r 117 //        StdOut.println("iterate:" + iter.hasNext());
r 118 ////        testString.pop();
r 119 //        StdOut.println("iterate:" + iter.next());
r 120 ////        testString.pop();
r 121 //        StdOut.println("iterate:" + iter.hasNext());
r 122 ////        StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.19.47.48.031.0 ]--
UpdateTree (AD): 0 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class

--[ 2021.10.11.19.47.48.031.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@4c59fef7
--[ 2021.10.11.19.48.02.581.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.23.768.0 ]--
:/src/MinimumStack.java
r 76                 return stack;
--[ 2021.10.11.19.48.23.769.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.23.773.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.26.726.0 ]--
r 76                 return stack.;
--[ 2021.10.11.19.48.26.727.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.26.731.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.26.732.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.26.733.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.27.457.0 ]--
r 76                 return stack.i;
--[ 2021.10.11.19.48.27.458.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.27.460.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.28.326.0 ]--
r 76                 return stack.;
--[ 2021.10.11.19.48.28.328.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.28.329.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.28.451.0 ]--
r 76                 return stack;
--[ 2021.10.11.19.48.28.451.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.28.454.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.28.455.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.28.456.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.29.034.0 ]--
r 76                 return stack.;
--[ 2021.10.11.19.48.29.035.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.29.037.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.29.039.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.29.041.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.29.284.0 ]--
r 76                 return stack.p;
--[ 2021.10.11.19.48.29.285.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.29.286.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.29.730.0 ]--
r 76                 return stack.peek;
--[ 2021.10.11.19.48.29.731.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.29.734.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.29.739.0 ]--
r 76                 return stack.peek();
--[ 2021.10.11.19.48.29.740.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.48.29.744.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.49.28.635.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.49.28.638.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.49.39.801.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.49.39.801.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.49.39.802.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.17.216.0 ]--
r 57 //    @Override
r 58 //    public Iterator<Item> iterator() {
r 59 //        return new Iterator<Item>() {
r 60 //            int frozenOpCount = opcount;
r 61 //            int index = stack.size();
r 62 //
r 63 //            @Override
r 64 //            public boolean hasNext() {
r 65 //                if (frozenOpCount != opcount) {
r 66 //                    throw new ConcurrentModificationException("modified stack while iterating");
r 67 //                }
r 68 //                return index >= 0;
r 69 //            }
r 70 //
r 71 //            @Override
r 72 //            public Item next() {
r 73 //                if (frozenOpCount != opcount) {
r 74 //                    throw new ConcurrentModificationException("modified stack while iterating");
r 75 //                }
r 76 //                return stack.peek();
r 77 //            }
r 78 //
r 79 //            @Override
r 80 //            public void remove() {}
r 81 //        };
r 82 //    }
--[ 2021.10.11.19.50.17.216.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.17.218.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.26.632.0 ]--
r 57     @Override
r 58     public Iterator<Item> iterator() {
r 59         return new Iterator<Item>() {
r 60             int frozenOpCount = opcount;
r 61             int index = stack.size();
r 62 
r 63             @Override
r 64             public boolean hasNext() {
r 65                 if (frozenOpCount != opcount) {
r 66                     throw new ConcurrentModificationException("modified stack while iterating");
r 67                 }
r 68                 return index >= 0;
r 69             }
r 70 
r 71             @Override
r 72             public Item next() {
r 73                 if (frozenOpCount != opcount) {
r 74                     throw new ConcurrentModificationException("modified stack while iterating");
r 75                 }
r 76                 return stack.peek();
r 77             }
r 78 
r 79             @Override
r 80             public void remove() {}
r 81         };
r 82     }
--[ 2021.10.11.19.50.26.633.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.26.634.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.628.0 ]--
r 1 //import java.util.ConcurrentModificationException;
r 2 //import java.util.Iterator;
r 3 //import java.util.NoSuchElementException;
r 4 //
r 5 //public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
r 6 //
r 7 //    private int opcount = 0;
r 8 //    private int size = 0;
r 9 //    private Item minimumItem;
r 10 //    Stack<Item> stack = new Stack<>();
r 11 //
r 12 //    public MinimumStack() { }
r 13 //
r 14 //    // returns the number of items stored
r 15 //    public int size() {
r 16 //        return size;
r 17 //    }
r 18 //
r 19 //    // returns true iff empty
r 20 //    public boolean isEmpty() {
r 21 //        return size()==0;
r 22 //    }
r 23 //
r 24 //    // push item onto stack
r 25 //    public void push(Item item) {
r 26 //        opcount++;
r 27 //        stack.push(item);
r 28 //        if(compareTo(minimumItem)==1) {
r 29 //            minimumItem = item;
r 30 //        }
r 31 //    }
r 32 //
r 33 //    // pop and return the top item
r 34 //    public Item pop() throws NoSuchElementException {
r 35 //        opcount++;
r 36 //        if (isEmpty()) {
r 37 //            throw new NoSuchElementException("pop called on empty stack\n");
r 38 //        }
r 39 //        // TODO do something if minimum gets popped
r 40 //        return stack.pop();
r 41 //    }
r 42 //
r 43 //    // returns the minimum item in constant time
r 44 //    public Item minimum() throws NoSuchElementException {
r 45 //        if (isEmpty()) {
r 46 //            throw new NoSuchElementException("minimum called on empty stack\n");
r 47 //        }
r 48 //        return minimumItem;
r 49 //    }
r 50 //
r 51 //    private int compareTo(Item other) {
r 52 //        // TODO implement this method
r 53 //        return 1;
r 54 //    }
r 55 //
r 56 //    // returns new Iterator<Item> that iterates over items
r 57 //    @Override
r 58 //    public Iterator<Item> iterator() {
r 59 //        return new Iterator<Item>() {
r 60 //            int frozenOpCount = opcount;
r 61 //            int index = stack.size();
r 62 //
r 63 //            @Override
r 64 //            public boolean hasNext() {
r 65 //                if (frozenOpCount != opcount) {
r 66 //                    throw new ConcurrentModificationException("modified stack while iterating");
r 67 //                }
r 68 //                return index >= 0;
r 69 //            }
r 70 //
r 71 //            @Override
r 72 //            public Item next() {
r 73 //                if (frozenOpCount != opcount) {
r 74 //                    throw new ConcurrentModificationException("modified stack while iterating");
r 75 //                }
r 76 //                return stack.peek();
r 77 //            }
r 78 //
r 79 //            @Override
r 80 //            public void remove() {}
r 81 //        };
r 82 //    }
r 83 //
r 84 //    public static void main(String[] args) {
r 85 //
r 86 //    }
r 87 //}
--[ 2021.10.11.19.50.31.629.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.630.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.631.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.632.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.635.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.636.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.637.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.639.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.641.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.642.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.643.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.644.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.645.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.646.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.647.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.648.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.648.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.649.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.650.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.651.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.652.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.652.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.653.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.653.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.654.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.654.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.655.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.656.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.657.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.657.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.658.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.659.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.659.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.660.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.660.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.661.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.662.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.663.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.664.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.664.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.665.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.666.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.667.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.667.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.668.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.669.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.669.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.670.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.671.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.672.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.673.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.674.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.675.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.676.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.676.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.677.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.678.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.678.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.679.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.680.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.681.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.681.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.682.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.682.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.683.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.684.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.684.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.685.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.686.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.687.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.688.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.689.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.689.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.690.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.691.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.691.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.692.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.692.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.693.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.693.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.694.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.695.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.695.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.696.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.697.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.698.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.699.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.700.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.700.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.701.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.702.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.704.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.705.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.706.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.707.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.708.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.710.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.711.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.712.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.713.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.715.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.716.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.717.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.718.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.720.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.721.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.723.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.724.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.725.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.726.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.727.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.728.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.729.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.730.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.730.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.731.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.732.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.733.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.733.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.734.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.735.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.736.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.737.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.737.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.738.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.739.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.739.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.740.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.741.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.742.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.742.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.743.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.744.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.745.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.746.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.746.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.747.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.748.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.748.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.749.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.750.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.750.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.751.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.752.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.752.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.753.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.753.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.754.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.755.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.756.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.756.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.757.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.757.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.758.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.758.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.759.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.760.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.761.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.762.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.762.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.763.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.764.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.764.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.765.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.765.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.766.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.766.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.767.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.768.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.768.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.769.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.769.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.770.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.771.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.771.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.31.773.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.756.0 ]--
r 1 import java.util.ConcurrentModificationException;
r 2 import java.util.Iterator;
r 3 import java.util.NoSuchElementException;
r 4 
r 5 public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
r 6 
r 7     private int opcount = 0;
r 8     private int size = 0;
r 9     private Item minimumItem;
r 10     Stack<Item> stack = new Stack<>();
r 11 
r 12     public MinimumStack() { }
r 13 
r 14     // returns the number of items stored
r 15     public int size() {
r 16         return size;
r 17     }
r 18 
r 19     // returns true iff empty
r 20     public boolean isEmpty() {
r 21         return size()==0;
r 22     }
r 23 
r 24     // push item onto stack
r 25     public void push(Item item) {
r 26         opcount++;
r 27         stack.push(item);
r 28         if(compareTo(minimumItem)==1) {
r 29             minimumItem = item;
r 30         }
r 31     }
r 32 
r 33     // pop and return the top item
r 34     public Item pop() throws NoSuchElementException {
r 35         opcount++;
r 36         if (isEmpty()) {
r 37             throw new NoSuchElementException("pop called on empty stack\n");
r 38         }
r 39         // TODO do something if minimum gets popped
r 40         return stack.pop();
r 41     }
r 42 
r 43     // returns the minimum item in constant time
r 44     public Item minimum() throws NoSuchElementException {
r 45         if (isEmpty()) {
r 46             throw new NoSuchElementException("minimum called on empty stack\n");
r 47         }
r 48         return minimumItem;
r 49     }
r 50 
r 51     private int compareTo(Item other) {
r 52         // TODO implement this method
r 53         return 1;
r 54     }
r 55 
r 56     // returns new Iterator<Item> that iterates over items
r 57     @Override
r 58     public Iterator<Item> iterator() {
r 59         return new Iterator<Item>() {
r 60             int frozenOpCount = opcount;
r 61             int index = stack.size();
r 62 
r 63             @Override
r 64             public boolean hasNext() {
r 65                 if (frozenOpCount != opcount) {
r 66                     throw new ConcurrentModificationException("modified stack while iterating");
r 67                 }
r 68                 return index >= 0;
r 69             }
r 70 
r 71             @Override
r 72             public Item next() {
r 73                 if (frozenOpCount != opcount) {
r 74                     throw new ConcurrentModificationException("modified stack while iterating");
r 75                 }
r 76                 return stack.peek();
r 77             }
r 78 
r 79             @Override
r 80             public void remove() {}
r 81         };
r 82     }
r 83 
r 84     public static void main(String[] args) {
r 85 
r 86     }
r 87 }
--[ 2021.10.11.19.50.38.757.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.759.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.760.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.761.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.762.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.762.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.763.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.763.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.764.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.764.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.765.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.765.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.766.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.767.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.767.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.768.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.769.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.769.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.770.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.770.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.771.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.771.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.772.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.772.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.773.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.774.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.775.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.775.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.776.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.777.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.777.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.778.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.779.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.779.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.780.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.780.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.781.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.781.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.782.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.782.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.783.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.783.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.784.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.784.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.785.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.785.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.786.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.786.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.787.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.787.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.788.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.788.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.789.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.790.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.790.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.791.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.792.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.792.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.793.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.793.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.793.2 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.794.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.795.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.795.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.796.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.796.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.797.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.797.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.798.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.798.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.799.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.799.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.800.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.800.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.801.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.802.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.802.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.803.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.803.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.804.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.804.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.805.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.805.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.806.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.806.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.807.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.807.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.807.2 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.808.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.808.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.809.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.809.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.810.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.811.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.812.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.813.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.814.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.815.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.815.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.816.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.816.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.816.2 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.817.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.817.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.818.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.818.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.819.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.819.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.820.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.820.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.821.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.821.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.822.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.822.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.823.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.824.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.824.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.825.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.825.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.826.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.826.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.826.2 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.827.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.827.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.828.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.828.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.829.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.829.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.830.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.830.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.831.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.832.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.832.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.833.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.834.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.834.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.835.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.837.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.838.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.840.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.841.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.842.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.844.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.846.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.847.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.848.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.850.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.851.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.852.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.854.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.855.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.855.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.856.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.857.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.858.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.859.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.859.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.860.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.861.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.861.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.862.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.863.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.864.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.864.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.865.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.866.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.866.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.867.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.868.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.868.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.869.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.870.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.870.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.871.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.871.1 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.38.872.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.39.854.0 ]--
r 76                 return stack.p;
--[ 2021.10.11.19.50.39.855.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.39.858.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.40.525.0 ]--
r 76                 return stack;
--[ 2021.10.11.19.50.40.527.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.40.528.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.40.530.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.40.532.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.41.203.0 ]--
r 76                 return stack.p;
--[ 2021.10.11.19.50.41.204.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.41.205.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.41.207.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.41.208.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.41.569.0 ]--
r 76                 return stack.peek();
--[ 2021.10.11.19.50.41.570.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.50.41.572.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.51.04.375.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.51.04.379.0 ]--
UpdateTree (AD): 5 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/OnePointerQueue.class

--[ 2021.10.11.19.51.04.506.0 ]--
DisposeComponent
--[ 2021.10.11.19.51.08.321.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.10.11.19.51.08.323.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$1.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/OnePointerQueue.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.cos265
/.DS_Store
/readme.html
/P02_DataTypes.iml

--[ 2021.10.11.19.51.08.324.0 ]--
InitFile: /.DS_Store
   Bud1           	                                                           alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                             . i d e alg1Scomp      *�    . i d e amoDDblob      �Q��A    . i d e amodDblob      �Q��A    . i d e aph1Scomp      �     . l o glg1Scomp      t�    . l o gmoDDblob     ��Q��A    . l o gmodDblob     ��Q��A    . l o gph1Scomp      �     o u tlg1Scomp     X�    o u tmoDDblob      �Q��A    o u tmodDblob      �Q��A    o u tph1Scomp     �     s r clg1Scomp     Pt    s r cmoDDblob      �Q��A    s r cmodDblob      �Q��A    s r cph1Scomp     �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.10.11.19.51.08.324.1 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> last = null;
    public OnePointerQueue() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return size() == 0;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {
        if (isEmpty()) {
            last = new Node<>(item);
        } else {
            Node<Item> tmp = new Node<>(last.next.item);
            last.next = new Node<>(item);
            last.next.next = tmp;
        }
    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        if (isEmpty()) {
            throw new NoSuchElementException("dequeue called on empty queue\n");
        }
        return last.next.item;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            Node<Item> p = last;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                return p.next != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                Item tmp = p.next.item;
                p = p.next;
                return tmp;
            }

            @Override
            public void remove() {}
        };
    }

    // perform unit testing here
    public static void main(String[] args) {
        OnePointerQueue<String> testString = new OnePointerQueue<>();
        assert testString.size()==0;
        assert testString.isEmpty();
//        testString.enqueue("itemuno");
//        assert testString.size()==1;
//        assert !testString.isEmpty();
//        testString.push("pushThis");
//        assert testString.size()==2;
//        assert !testString.isEmpty();
//        testString.enqueue("itemtres");
//        assert testString.size()==3;
//        assert !testString.isEmpty();
//        String poppedString = testString.pop();
//        StdOut.println(poppedString);
//        poppedString = testString.pop();
//        StdOut.println(poppedString);
//        poppedString = testString.pop();
//        StdOut.println(poppedString);
//        assert testString.size()==0;
//        assert testString.isEmpty();
//
//        // fails
////        poppedString = testString.pop();
//        testString.enqueue("testuno");
//        assert testString.size()==1;
//        assert !testString.isEmpty();
//        testString.enqueue("testdos");
//        assert testString.size()==2;
//        assert !testString.isEmpty();
//        testString.enqueue("testtres");
//        assert testString.size()==3;
//        assert !testString.isEmpty();
//        Iterator<String> iter = testString.iterator();
//        StdOut.println("iterate:" + iter.next());
//        StdOut.println("iterate:" + iter.hasNext());
////        testString.pop();
//        StdOut.println("iterate:" + iter.next());
////        testString.pop();
//        StdOut.println("iterate:" + iter.hasNext());
////        StdOut.println("iterate:" + iter.next());
    }
}

--[ 2021.10.11.19.51.08.324.2 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            last.next = new Node<>(item);
            last = last.next;
        }
        size++;
    }

    // pushes item to top of steque
    public void push(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            Node<Item> tmp = new Node<>(item);
            tmp.next = first;
            first = tmp;
        }
        size++;
    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) {
            throw new NoSuchElementException("pop called on empty steque\n");
        }
        Item tmp = first.item;
        first = first.next;
        size--;
        return tmp;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            Node<Item> p = first;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                return p.next != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                Item tmp = p.next.item;
                p = p.next;
                return tmp;
            }

            @Override
            public void remove() {}
        };
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {
        Steque<String> testString = new Steque<>();
        assert testString.size()==0;
        assert testString.isEmpty();
        testString.enqueue("itemuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.push("pushThis");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("itemtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        String poppedString = testString.pop();
        StdOut.println(poppedString);
        poppedString = testString.pop();
        StdOut.println(poppedString);
        poppedString = testString.pop();
        StdOut.println(poppedString);
        assert testString.size()==0;
        assert testString.isEmpty();

        // fails
//        poppedString = testString.pop();
        testString.enqueue("testuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.enqueue("testdos");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("testtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        Iterator<String> iter = testString.iterator();
        StdOut.println("iterate:" + iter.next());
        StdOut.println("iterate:" + iter.hasNext());
//        testString.pop();
        StdOut.println("iterate:" + iter.next());
//        testString.pop();
        StdOut.println("iterate:" + iter.hasNext());
//        StdOut.println("iterate:" + iter.next());
    }
}

--[ 2021.10.11.19.51.08.325.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {

    private int opcount = 0;
    private int size = 0;
    private Item minimumItem;
    Stack<Item> stack = new Stack<>();

    public MinimumStack() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return size()==0;
    }

    // push item onto stack
    public void push(Item item) {
        opcount++;
        stack.push(item);
        if(compareTo(minimumItem)==1) {
            minimumItem = item;
        }
    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) {
            throw new NoSuchElementException("pop called on empty stack\n");
        }
        // TODO do something if minimum gets popped
        return stack.pop();
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        if (isEmpty()) {
            throw new NoSuchElementException("minimum called on empty stack\n");
        }
        return minimumItem;
    }

    private int compareTo(Item other) {
        // TODO implement this method
        return 1;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            int index = stack.size();

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stack while iterating");
                }
                return index >= 0;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stack while iterating");
                }
                return stack.peek();
            }

            @Override
            public void remove() {}
        };
    }

    public static void main(String[] args) {

    }
}

--[ 2021.10.11.19.51.08.325.1 ]--
InitFile: /.cos265


--[ 2021.10.11.19.51.08.325.2 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.11.19.51.18.544.0 ]--
UpdateTree (AD): 1 5
- /out/production/P02_DataTypes/MinimumStack.class
- /out/production/P02_DataTypes/Steque$Node.class
- /out/production/P02_DataTypes/Steque$1.class
- /out/production/P02_DataTypes/OnePointerQueue.class
- /out/production/P02_DataTypes/Steque.class
+ /.idea/runConfigurations.xml

--[ 2021.10.11.19.51.21.747.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.19.53.22.114.0 ]--
:/src/OnePointerQueue.java
r 86         testString.enqueue("itemuno");
r 87         assert testString.size()==1;
r 88         assert !testString.isEmpty();
--[ 2021.10.11.19.53.22.116.0 ]--
UpdateTree (AD): 8 0
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/MinimumStack$1.class
+ /out/production/P02_DataTypes/OnePointerQueue.class
+ /out/production/P02_DataTypes/OnePointerQueue$1.class
+ /out/production/P02_DataTypes/OnePointerQueue$Node.class

--[ 2021.10.11.19.54.06.302.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.19.56.09.386.0 ]--
r 88         assert !testString.isEmpty(); 
--[ 2021.10.11.19.56.32.808.0 ]--
r 88         assert !testString.isEmpty();
--[ 2021.10.11.19.57.00.440.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.19.57.15.152.0 ]--
+ 41         
--[ 2021.10.11.19.57.17.174.0 ]--
r 41         o
--[ 2021.10.11.19.57.17.264.0 ]--
r 41         op
--[ 2021.10.11.19.57.17.642.0 ]--
r 41         opc
--[ 2021.10.11.19.57.18.220.0 ]--
r 41         opcount
--[ 2021.10.11.19.57.18.926.0 ]--
r 41         opcount+
--[ 2021.10.11.19.57.19.050.0 ]--
r 41         opcount++
--[ 2021.10.11.19.57.19.506.0 ]--
r 41         opcount++;
--[ 2021.10.11.19.57.19.817.0 ]--
+ 42         
--[ 2021.10.11.19.57.22.767.0 ]--
r 42         s
--[ 2021.10.11.19.57.22.973.0 ]--
r 42         si
--[ 2021.10.11.19.57.23.531.0 ]--
r 42         size
--[ 2021.10.11.19.57.25.389.0 ]--
r 42         size+
--[ 2021.10.11.19.57.25.522.0 ]--
r 42         size++
--[ 2021.10.11.19.57.26.828.0 ]--
r 42         size++;
--[ 2021.10.11.19.57.31.128.0 ]--
+ 50         
--[ 2021.10.11.19.57.32.334.0 ]--
r 50         o
--[ 2021.10.11.19.57.32.520.0 ]--
r 50         op
--[ 2021.10.11.19.57.32.818.0 ]--
r 50         o
--[ 2021.10.11.19.57.32.952.0 ]--
r 50         
--[ 2021.10.11.19.57.33.166.0 ]--
- 50
--[ 2021.10.11.19.57.35.406.0 ]--
+ 47         
--[ 2021.10.11.19.57.36.726.0 ]--
- 47
--[ 2021.10.11.19.57.38.570.0 ]--
+ 50         
--[ 2021.10.11.19.57.39.269.0 ]--
r 50         o
--[ 2021.10.11.19.57.39.382.0 ]--
r 50         op
--[ 2021.10.11.19.57.39.880.0 ]--
r 50         opcount
--[ 2021.10.11.19.57.40.459.0 ]--
r 50         opcount+
--[ 2021.10.11.19.57.40.581.0 ]--
r 50         opcount++
--[ 2021.10.11.19.57.40.785.0 ]--
+ 51         
--[ 2021.10.11.19.57.40.821.0 ]--
r 51                 
--[ 2021.10.11.19.57.42.001.0 ]--
- 51
--[ 2021.10.11.19.57.43.102.0 ]--
r 50         opcount++;
--[ 2021.10.11.19.57.43.341.0 ]--
+ 51         
--[ 2021.10.11.19.57.43.896.0 ]--
r 51         s
--[ 2021.10.11.19.57.44.028.0 ]--
r 51         si
--[ 2021.10.11.19.57.44.598.0 ]--
r 51         size
--[ 2021.10.11.19.57.45.275.0 ]--
r 51         size-
--[ 2021.10.11.19.57.45.358.0 ]--
r 51         size--
--[ 2021.10.11.19.57.45.567.0 ]--
r 51         size--;
--[ 2021.10.11.19.57.54.392.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.19.57.58.535.0 ]--
r 93         testString.push("pushThis");
--[ 2021.10.11.19.58.03.939.0 ]--
r 93         testString.e("pushThis");
--[ 2021.10.11.19.58.04.061.0 ]--
r 93         testString.en("pushThis");
--[ 2021.10.11.19.58.04.561.0 ]--
r 93         testString.enqueue("pushThis");
--[ 2021.10.11.19.58.15.613.0 ]--
r 94         assert testString.size()==2;
r 95         assert !testString.isEmpty();
--[ 2021.10.11.19.58.20.795.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.19.59.39.164.0 ]--
r 36         } eelse {
--[ 2021.10.11.19.59.39.229.0 ]--
r 36         } elelse {
--[ 2021.10.11.19.59.39.374.0 ]--
r 36         } elselse {
--[ 2021.10.11.19.59.39.587.0 ]--
r 36         } elseelse {
--[ 2021.10.11.19.59.39.673.0 ]--
r 36         } else else {
--[ 2021.10.11.19.59.39.855.0 ]--
r 36         } else ielse {
--[ 2021.10.11.19.59.39.903.0 ]--
r 36         } else ifelse {
--[ 2021.10.11.19.59.40.041.0 ]--
r 36         } else if else {
--[ 2021.10.11.19.59.40.763.0 ]--
r 36         } else if (else {
--[ 2021.10.11.19.59.41.348.0 ]--
r 36         } else if ()else {
--[ 2021.10.11.19.59.41.922.0 ]--
r 36         } else if () else {
--[ 2021.10.11.19.59.42.362.0 ]--
r 36         } else if () {else {
--[ 2021.10.11.19.59.42.698.0 ]--
+ 36         } else if () {
+ 37 else
r 38 } {
--[ 2021.10.11.19.59.42.706.0 ]--
r 38         } {
--[ 2021.10.11.19.59.42.724.0 ]--
r 37             else
--[ 2021.10.11.19.59.44.443.0 ]--
- 36
- 36
r 36         } else if () {else {
--[ 2021.10.11.19.59.47.211.0 ]--
r 36         } else if () { else {
--[ 2021.10.11.19.59.49.032.0 ]--
r 35             last = new }Node<>(item);
--[ 2021.10.11.19.59.50.365.0 ]--
r 35             last = new Node<>(item);
--[ 2021.10.11.19.59.54.578.0 ]--
r 36         } else if () { }else {
--[ 2021.10.11.19.59.56.929.0 ]--
+ 36         } else if () { 
r 37         }else {
--[ 2021.10.11.19.59.56.953.0 ]--
+ 37             
--[ 2021.10.11.19.59.58.740.0 ]--
r 38         } else {
--[ 2021.10.11.19.59.59.291.0 ]--
r 36         } else if () {
r 37 
--[ 2021.10.11.20.00.08.390.0 ]--
r 36         } else if (s) {
--[ 2021.10.11.20.00.08.500.0 ]--
r 36         } else if (si) {
--[ 2021.10.11.20.00.09.952.0 ]--
r 36         } else if (size) {
--[ 2021.10.11.20.00.09.958.0 ]--
r 36         } else if (size()) {
--[ 2021.10.11.20.00.11.708.0 ]--
r 36         } else if (size()=) {
--[ 2021.10.11.20.00.11.828.0 ]--
r 36         } else if (size()==) {
--[ 2021.10.11.20.00.12.015.0 ]--
r 36         } else if (size()==1) {
--[ 2021.10.11.20.00.13.204.0 ]--
r 37     
--[ 2021.10.11.20.00.13.508.0 ]--
r 37         
--[ 2021.10.11.20.00.13.693.0 ]--
r 37             
--[ 2021.10.11.20.00.53.964.0 ]--
+ 37             Node<Item> tmp = new Node<>(last.next.item);
+ 38             last.next = new Node<>(item);
r 39             last.next.next = tmp;
--[ 2021.10.11.20.02.22.491.0 ]--
r 37             Node<Item> tmp = new Node<>(last.next.ite);
--[ 2021.10.11.20.02.22.629.0 ]--
r 37             Node<Item> tmp = new Node<>(last.next.it);
--[ 2021.10.11.20.02.22.782.0 ]--
r 37             Node<Item> tmp = new Node<>(last.next.i);
--[ 2021.10.11.20.02.22.937.0 ]--
r 37             Node<Item> tmp = new Node<>(last.next.);
--[ 2021.10.11.20.02.23.071.0 ]--
r 37             Node<Item> tmp = new Node<>(last.next);
--[ 2021.10.11.20.02.23.242.0 ]--
r 37             Node<Item> tmp = new Node<>(last.nex);
--[ 2021.10.11.20.02.23.390.0 ]--
r 37             Node<Item> tmp = new Node<>(last.ne);
--[ 2021.10.11.20.02.23.557.0 ]--
r 37             Node<Item> tmp = new Node<>(last.n);
--[ 2021.10.11.20.02.23.732.0 ]--
r 37             Node<Item> tmp = new Node<>(last.);
--[ 2021.10.11.20.02.23.981.0 ]--
r 37             Node<Item> tmp = new Node<>(last);
--[ 2021.10.11.20.02.28.155.0 ]--
r 37             Node<Item> tmp = new Node<>(last.next.item);
--[ 2021.10.11.20.02.41.971.0 ]--
r 37             Node<Item> tmp = new Node<>(last.next.ite);
--[ 2021.10.11.20.02.42.106.0 ]--
r 37             Node<Item> tmp = new Node<>(last.next.it);
--[ 2021.10.11.20.02.42.267.0 ]--
r 37             Node<Item> tmp = new Node<>(last.next.i);
--[ 2021.10.11.20.02.42.427.0 ]--
r 37             Node<Item> tmp = new Node<>(last.next.);
--[ 2021.10.11.20.02.42.564.0 ]--
r 37             Node<Item> tmp = new Node<>(last.next);
--[ 2021.10.11.20.02.42.717.0 ]--
r 37             Node<Item> tmp = new Node<>(last.nex);
--[ 2021.10.11.20.02.42.863.0 ]--
r 37             Node<Item> tmp = new Node<>(last.ne);
--[ 2021.10.11.20.02.43.013.0 ]--
r 37             Node<Item> tmp = new Node<>(last.n);
--[ 2021.10.11.20.02.43.148.0 ]--
r 37             Node<Item> tmp = new Node<>(last.);
--[ 2021.10.11.20.02.43.305.0 ]--
r 37             Node<Item> tmp = new Node<>(last);
--[ 2021.10.11.20.02.46.080.0 ]--
r 39             last.next.nex = tmp;
--[ 2021.10.11.20.02.46.196.0 ]--
r 39             last.next.ne = tmp;
--[ 2021.10.11.20.02.46.368.0 ]--
r 39             last.next.n = tmp;
--[ 2021.10.11.20.02.46.474.0 ]--
r 39             last.next. = tmp;
--[ 2021.10.11.20.02.46.642.0 ]--
r 39             last.next = tmp;
--[ 2021.10.11.20.02.47.836.0 ]--
r 38             last.nex = new Node<>(item);
--[ 2021.10.11.20.02.47.981.0 ]--
r 38             last.ne = new Node<>(item);
--[ 2021.10.11.20.02.48.124.0 ]--
r 38             last.n = new Node<>(item);
--[ 2021.10.11.20.02.48.262.0 ]--
r 38             last. = new Node<>(item);
--[ 2021.10.11.20.02.48.479.0 ]--
r 38             last = new Node<>(item);
--[ 2021.10.11.20.02.52.765.0 ]--
r 37             Node<Item> tmp = new Node<>(last.);
--[ 2021.10.11.20.02.53.459.0 ]--
r 37             Node<Item> tmp = new Node<>(last.i);
--[ 2021.10.11.20.02.53.824.0 ]--
r 37             Node<Item> tmp = new Node<>(last.item);
--[ 2021.10.11.20.05.22.743.0 ]--
+ 38             
--[ 2021.10.11.20.05.24.335.0 ]--
r 38             l
--[ 2021.10.11.20.05.24.492.0 ]--
r 38             la
--[ 2021.10.11.20.05.24.637.0 ]--
r 38             las
--[ 2021.10.11.20.05.24.881.0 ]--
r 38             last
--[ 2021.10.11.20.05.25.005.0 ]--
r 38             last.
--[ 2021.10.11.20.05.25.323.0 ]--
r 38             last.n
--[ 2021.10.11.20.05.25.751.0 ]--
r 38             last.next
--[ 2021.10.11.20.05.26.679.0 ]--
r 38             last.next 
--[ 2021.10.11.20.05.26.783.0 ]--
r 38             last.next =
--[ 2021.10.11.20.05.28.121.0 ]--
r 38             last.next = 
--[ 2021.10.11.20.05.33.718.0 ]--
r 38             last.next =  
--[ 2021.10.11.20.05.34.005.0 ]--
r 38             last.next = new Node<>(item); 
--[ 2021.10.11.20.07.10.393.0 ]--
r 39             last = l;
--[ 2021.10.11.20.07.10.441.0 ]--
r 39             last = la;
--[ 2021.10.11.20.07.11.097.0 ]--
r 39             last = last;
--[ 2021.10.11.20.07.11.254.0 ]--
r 39             last = last.;
--[ 2021.10.11.20.07.12.246.0 ]--
r 39             last = last.next;
--[ 2021.10.11.20.07.12.448.0 ]--
r 39             last = last.next.;
--[ 2021.10.11.20.07.13.633.0 ]--
r 39             last = last.next;
--[ 2021.10.11.20.07.34.814.0 ]--
r 38             last.next = new Node<>(item);
--[ 2021.10.11.20.08.40.254.0 ]--
r 37             Node<Item> tmp = new Node<>(last.item,);
--[ 2021.10.11.20.08.40.462.0 ]--
r 37             Node<Item> tmp = new Node<>(last.item, );
--[ 2021.10.11.20.08.40.867.0 ]--
r 37             Node<Item> tmp = new Node<>(last.item, l);
--[ 2021.10.11.20.08.40.956.0 ]--
r 37             Node<Item> tmp = new Node<>(last.item, la);
--[ 2021.10.11.20.08.41.577.0 ]--
r 37             Node<Item> tmp = new Node<>(last.item, last);
--[ 2021.10.11.20.08.41.796.0 ]--
r 37             Node<Item> tmp = new Node<>(last.item, last.);
--[ 2021.10.11.20.08.42.464.0 ]--
r 37             Node<Item> tmp = new Node<>(last.item, last.next);
--[ 2021.10.11.20.10.42.595.0 ]--
r 42             Node<Item> tmp = new Node<>(last.item, last.next);
+ 44             last = last.next;
r 45             last.next = tmp;
--[ 2021.10.11.20.10.52.033.0 ]--
r 45             last.next. = tmp;
--[ 2021.10.11.20.10.52.278.0 ]--
r 45             last.next.n = tmp;
--[ 2021.10.11.20.10.52.826.0 ]--
r 45             last.next.next = tmp;
--[ 2021.10.11.20.10.55.040.0 ]--
r 45             last.next.nex = tmp;
--[ 2021.10.11.20.10.55.208.0 ]--
r 45             last.next.ne = tmp;
--[ 2021.10.11.20.10.55.391.0 ]--
r 45             last.next.n = tmp;
--[ 2021.10.11.20.10.55.640.0 ]--
r 45             last.next. = tmp;
--[ 2021.10.11.20.10.56.067.0 ]--
r 45             last.next = tmp;
--[ 2021.10.11.20.10.59.809.0 ]--
r 45             last.next = tmp.;
--[ 2021.10.11.20.11.00.701.0 ]--
r 45             last.next = tmp.next;
--[ 2021.10.11.20.12.16.248.0 ]--
- 36
- 36
- 36
- 36
- 36
r 36         } e} else {
--[ 2021.10.11.20.12.16.509.0 ]--
r 36         } } else {
--[ 2021.10.11.20.12.16.884.0 ]--
r 36         }} else {
--[ 2021.10.11.20.12.17.336.0 ]--
r 36         } else {
--[ 2021.10.11.20.12.27.276.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.12.37.383.0 ]--
r 97         testString.enqueue("itemtres");
r 98         assert testString.size()==3;
r 99         assert !testString.isEmpty();
--[ 2021.10.11.20.12.41.276.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.12.46.902.0 ]--
r 100         String poppedString = testString.pop();
r 101         StdOut.println(poppedString);
r 102         poppedString = testString.pop();
r 103         StdOut.println(poppedString);
r 104         poppedString = testString.pop();
r 105         StdOut.println(poppedString);
r 106         assert testString.size()==0;
r 107         assert testString.isEmpty();
--[ 2021.10.11.20.12.49.496.0 ]--
r 100         String poppedString = testString.e();
--[ 2021.10.11.20.12.50.273.0 ]--
r 100         String poppedString = testString.();
--[ 2021.10.11.20.12.50.306.0 ]--
r 100         String poppedString = testString.d();
--[ 2021.10.11.20.12.50.456.0 ]--
r 100         String poppedString = testString.de();
--[ 2021.10.11.20.12.51.350.0 ]--
r 100         String poppedString = testString.dequeue();
--[ 2021.10.11.20.12.54.173.0 ]--
r 102         poppedString = testString.d();
--[ 2021.10.11.20.12.54.299.0 ]--
r 102         poppedString = testString.de();
--[ 2021.10.11.20.12.55.650.0 ]--
r 102         poppedString = testString.dequeue();
--[ 2021.10.11.20.12.56.780.0 ]--
r 104         poppedString = testString.d();
--[ 2021.10.11.20.12.57.537.0 ]--
r 104         poppedString = testString.de();
--[ 2021.10.11.20.12.59.209.0 ]--
r 104         poppedString = testString.deq();
--[ 2021.10.11.20.12.59.930.0 ]--
r 104         poppedString = testString.dequeue();
--[ 2021.10.11.20.13.05.330.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.14.15.376.0 ]--
+ 53         
--[ 2021.10.11.20.14.16.353.0 ]--
r 53         l
--[ 2021.10.11.20.14.16.401.0 ]--
r 53         la
--[ 2021.10.11.20.14.17.021.0 ]--
r 53         last
--[ 2021.10.11.20.14.17.190.0 ]--
r 53         last.
--[ 2021.10.11.20.14.18.054.0 ]--
r 53         last.next
--[ 2021.10.11.20.14.20.556.0 ]--
r 53         last.next 
--[ 2021.10.11.20.14.20.722.0 ]--
r 53         last.next =
--[ 2021.10.11.20.14.20.815.0 ]--
r 53         last.next = 
--[ 2021.10.11.20.14.26.215.0 ]--
r 53         last.next = l
--[ 2021.10.11.20.14.26.340.0 ]--
r 53         last.next = la
--[ 2021.10.11.20.14.26.947.0 ]--
r 53         last.next = last
--[ 2021.10.11.20.14.27.177.0 ]--
r 53         last.next = last.
--[ 2021.10.11.20.14.27.815.0 ]--
r 53         last.next = last.next
--[ 2021.10.11.20.14.29.611.0 ]--
r 53         last.next = last.next.
--[ 2021.10.11.20.14.30.435.0 ]--
r 53         last.next = last.next.next
--[ 2021.10.11.20.14.30.978.0 ]--
r 53         last.next = last.next.next;
--[ 2021.10.11.20.14.53.352.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.15.13.124.0 ]--
+ 51         
--[ 2021.10.11.20.15.13.964.0 ]--
r 51         i
--[ 2021.10.11.20.15.14.098.0 ]--
r 51         if
--[ 2021.10.11.20.15.15.066.0 ]--
r 51         i
--[ 2021.10.11.20.15.15.182.0 ]--
r 51         
--[ 2021.10.11.20.15.15.470.0 ]--
- 51
--[ 2021.10.11.20.15.16.085.0 ]--
r 50         } 
--[ 2021.10.11.20.15.16.178.0 ]--
r 50         } e
--[ 2021.10.11.20.15.16.289.0 ]--
r 50         } el
--[ 2021.10.11.20.15.16.754.0 ]--
r 50         } else
--[ 2021.10.11.20.15.16.770.0 ]--
r 50         } else 
--[ 2021.10.11.20.15.17.236.0 ]--
r 50         } else i
--[ 2021.10.11.20.15.17.292.0 ]--
r 50         } else if
--[ 2021.10.11.20.15.18.539.0 ]--
r 50         } else if()
--[ 2021.10.11.20.15.20.108.0 ]--
r 50         } else if(i)
--[ 2021.10.11.20.15.20.744.0 ]--
r 50         } else if(isEmpty)
--[ 2021.10.11.20.15.20.749.0 ]--
r 50         } else if(isEmpty())
--[ 2021.10.11.20.15.23.102.0 ]--
r 50         } else if(isEmpty()
--[ 2021.10.11.20.15.23.261.0 ]--
r 50         } else if(isEmpty)
--[ 2021.10.11.20.15.23.428.0 ]--
r 50         } else if(isEmpt)
--[ 2021.10.11.20.15.23.563.0 ]--
r 50         } else if(isEmp)
--[ 2021.10.11.20.15.23.717.0 ]--
r 50         } else if(isEm)
--[ 2021.10.11.20.15.23.848.0 ]--
r 50         } else if(isE)
--[ 2021.10.11.20.15.24.000.0 ]--
r 50         } else if(is)
--[ 2021.10.11.20.15.24.159.0 ]--
r 50         } else if(i)
--[ 2021.10.11.20.15.24.361.0 ]--
r 50         } else if()
--[ 2021.10.11.20.15.24.757.0 ]--
r 50         } else if(s)
--[ 2021.10.11.20.15.25.406.0 ]--
r 50         } else if(size)
--[ 2021.10.11.20.15.26.233.0 ]--
r 50         } else if(size=)
--[ 2021.10.11.20.15.26.365.0 ]--
r 50         } else if(size==)
--[ 2021.10.11.20.15.26.860.0 ]--
r 50         } else if(size==q)
--[ 2021.10.11.20.15.27.450.0 ]--
r 50         } else if(size==)
--[ 2021.10.11.20.15.27.634.0 ]--
r 50         } else if(size=)
--[ 2021.10.11.20.15.27.823.0 ]--
r 50         } else if(size)
--[ 2021.10.11.20.15.28.559.0 ]--
r 50         } else if(size())
--[ 2021.10.11.20.15.31.921.0 ]--
r 50         } else if(size()=)
--[ 2021.10.11.20.15.32.038.0 ]--
r 50         } else if(size()==)
--[ 2021.10.11.20.15.32.202.0 ]--
r 50         } else if(size()==1)
--[ 2021.10.11.20.15.33.141.0 ]--
r 50         } else if(size()==1) 
--[ 2021.10.11.20.15.33.440.0 ]--
r 50         } else if(size()==1) {
--[ 2021.10.11.20.15.33.639.0 ]--
+ 51 
+ 52 }
--[ 2021.10.11.20.15.33.651.0 ]--
r 52         }
--[ 2021.10.11.20.15.33.681.0 ]--
r 51             
--[ 2021.10.11.20.15.36.734.0 ]--
r 51             r
--[ 2021.10.11.20.15.37.386.0 ]--
r 51             return
--[ 2021.10.11.20.15.37.399.0 ]--
r 51             return 
--[ 2021.10.11.20.15.37.972.0 ]--
r 51             return l
--[ 2021.10.11.20.15.38.047.0 ]--
r 51             return la
--[ 2021.10.11.20.15.38.704.0 ]--
r 51             return last
--[ 2021.10.11.20.15.39.475.0 ]--
r 51             return last.
--[ 2021.10.11.20.15.40.157.0 ]--
r 51             return last.i
--[ 2021.10.11.20.15.40.601.0 ]--
r 51             return last.item
--[ 2021.10.11.20.15.41.062.0 ]--
r 51             return last.item;
--[ 2021.10.11.20.15.42.357.0 ]--
r 52         } 
--[ 2021.10.11.20.15.42.489.0 ]--
r 52         } e
--[ 2021.10.11.20.15.42.656.0 ]--
r 52         } el
--[ 2021.10.11.20.15.42.837.0 ]--
r 52         } els
--[ 2021.10.11.20.15.43.086.0 ]--
r 52         } else
--[ 2021.10.11.20.15.43.641.0 ]--
r 52         } else 
--[ 2021.10.11.20.15.46.190.0 ]--
r 52         } else {
--[ 2021.10.11.20.15.48.456.0 ]--
+ 53 
+ 54 }
--[ 2021.10.11.20.15.48.468.0 ]--
r 54         }
--[ 2021.10.11.20.15.48.506.0 ]--
r 53             
--[ 2021.10.11.20.15.53.243.0 ]--
- 57
r 57         
--[ 2021.10.11.20.15.54.637.0 ]--
r 53                 
--[ 2021.10.11.20.15.55.302.0 ]--
+ 53             last.next = last.next.next;
r 54         return last.next.item;    
--[ 2021.10.11.20.15.55.309.0 ]--
r 54             return last.next.item;    
--[ 2021.10.11.20.15.57.595.0 ]--
- 56
r 56         
--[ 2021.10.11.20.15.57.938.0 ]--
- 56
--[ 2021.10.11.20.15.59.033.0 ]--
- 56
--[ 2021.10.11.20.16.01.133.0 ]--
+ 48         
--[ 2021.10.11.20.16.01.685.0 ]--
+ 48         opcount++;
r 49         size--;
--[ 2021.10.11.20.16.06.181.0 ]--
- 42
r 42         
--[ 2021.10.11.20.16.06.583.0 ]--
- 42
--[ 2021.10.11.20.16.09.635.0 ]--
+ 34         
--[ 2021.10.11.20.16.10.483.0 ]--
+ 34         opcount++;
r 35         size++;
--[ 2021.10.11.20.16.28.949.0 ]--
r 56             return last.next.item;
--[ 2021.10.11.20.16.30.516.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.17.11.182.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.17.53.228.0 ]--
r 35         
--[ 2021.10.11.20.17.53.822.0 ]--
- 35
--[ 2021.10.11.20.17.56.279.0 ]--
+ 43         
--[ 2021.10.11.20.17.56.879.0 ]--
r 43         size++;
--[ 2021.10.11.20.18.01.365.0 ]--
r 49         
--[ 2021.10.11.20.18.01.678.0 ]--
- 49
--[ 2021.10.11.20.18.01.808.0 ]--
r 48         opcount++
--[ 2021.10.11.20.18.02.797.0 ]--
r 48         opcount++;
--[ 2021.10.11.20.18.05.325.0 ]--
+ 52             
--[ 2021.10.11.20.18.08.356.0 ]--
r 52             size--;
--[ 2021.10.11.20.18.10.134.0 ]--
+ 55             
--[ 2021.10.11.20.18.10.215.0 ]--
r 55             size--;
--[ 2021.10.11.20.18.20.350.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.19.03.412.0 ]--
r 55             
--[ 2021.10.11.20.19.04.180.0 ]--
+ 55             
--[ 2021.10.11.20.19.05.078.0 ]--
- 55
--[ 2021.10.11.20.19.05.274.0 ]--
- 55
--[ 2021.10.11.20.19.06.145.0 ]--
+ 56             
--[ 2021.10.11.20.19.08.867.0 ]--
- 56
--[ 2021.10.11.20.19.09.448.0 ]--
+ 55             
+ 56             
--[ 2021.10.11.20.19.09.786.0 ]--
- 55
--[ 2021.10.11.20.19.10.445.0 ]--
r 55             size--;
--[ 2021.10.11.20.19.11.229.0 ]--
r 55             
--[ 2021.10.11.20.19.13.947.0 ]--
- 55
--[ 2021.10.11.20.19.16.166.0 ]--
+ 56             
--[ 2021.10.11.20.19.16.979.0 ]--
r 56             size--;
--[ 2021.10.11.20.22.18.687.0 ]--
r 54         } eelse {
--[ 2021.10.11.20.22.19.432.0 ]--
r 54         } elelse {
--[ 2021.10.11.20.22.19.563.0 ]--
r 54         } elselse {
--[ 2021.10.11.20.22.20.043.0 ]--
r 54         } elseelse {
--[ 2021.10.11.20.22.20.142.0 ]--
r 54         } else else {
--[ 2021.10.11.20.22.20.367.0 ]--
r 54         } else felse {
--[ 2021.10.11.20.22.20.384.0 ]--
r 54         } else fielse {
--[ 2021.10.11.20.22.20.539.0 ]--
r 54         } else fi else {
--[ 2021.10.11.20.22.20.937.0 ]--
r 54         } else fielse {
--[ 2021.10.11.20.22.21.047.0 ]--
r 54         } else felse {
--[ 2021.10.11.20.22.21.169.0 ]--
r 54         } else else {
--[ 2021.10.11.20.22.21.325.0 ]--
r 54         } else ielse {
--[ 2021.10.11.20.22.21.441.0 ]--
r 54         } else ifelse {
--[ 2021.10.11.20.22.21.598.0 ]--
r 54         } else if else {
--[ 2021.10.11.20.22.22.230.0 ]--
r 54         } else if (else {
--[ 2021.10.11.20.22.23.316.0 ]--
r 54         } else if (selse {
--[ 2021.10.11.20.22.23.630.0 ]--
r 54         } else if (else {
--[ 2021.10.11.20.22.23.732.0 ]--
r 54         } else if else {
--[ 2021.10.11.20.22.24.664.0 ]--
r 54         } else if (else {
--[ 2021.10.11.20.22.25.066.0 ]--
r 54         } else if (selse {
--[ 2021.10.11.20.22.25.228.0 ]--
r 54         } else if (sielse {
--[ 2021.10.11.20.22.26.491.0 ]--
r 54         } else if (sizeelse {
--[ 2021.10.11.20.22.26.498.0 ]--
r 54         } else if (size()else {
--[ 2021.10.11.20.22.27.592.0 ]--
r 54         } else if (size()=else {
--[ 2021.10.11.20.22.27.723.0 ]--
r 54         } else if (size()==else {
--[ 2021.10.11.20.22.27.917.0 ]--
r 54         } else if (size()==2else {
--[ 2021.10.11.20.22.29.235.0 ]--
r 54         } else if (size()==2)else {
--[ 2021.10.11.20.22.30.135.0 ]--
r 54         } else if (size()==2) else {
--[ 2021.10.11.20.22.30.689.0 ]--
r 54         } else if (size()==2) {else {
--[ 2021.10.11.20.22.31.599.0 ]--
r 54         } else if (size()==2) {}else {
--[ 2021.10.11.20.22.33.278.0 ]--
+ 54         } else if (size()==2) {
r 55         }else {
--[ 2021.10.11.20.22.33.311.0 ]--
+ 55             
--[ 2021.10.11.20.22.35.310.0 ]--
r 56         } else {
--[ 2021.10.11.20.22.38.246.0 ]--
r 51         } else if (size()==1) {
--[ 2021.10.11.20.22.44.331.0 ]--
+ 55             size--;
r 56             return last.item;
--[ 2021.10.11.20.22.45.509.0 ]--
+ 56             
--[ 2021.10.11.20.22.57.852.0 ]--
r 56             l
--[ 2021.10.11.20.22.57.986.0 ]--
r 56             la
--[ 2021.10.11.20.22.58.316.0 ]--
r 56             las
--[ 2021.10.11.20.22.58.555.0 ]--
r 56             last
--[ 2021.10.11.20.22.59.196.0 ]--
r 56             last.
--[ 2021.10.11.20.22.59.640.0 ]--
r 56             last.n
--[ 2021.10.11.20.22.59.692.0 ]--
r 56             last.na
--[ 2021.10.11.20.23.00.299.0 ]--
r 56             last.n
--[ 2021.10.11.20.23.00.415.0 ]--
r 56             last.ne
--[ 2021.10.11.20.23.00.607.0 ]--
r 56             last.nex
--[ 2021.10.11.20.23.00.876.0 ]--
r 56             last.next
--[ 2021.10.11.20.23.01.157.0 ]--
r 56             last.next.
--[ 2021.10.11.20.23.01.340.0 ]--
r 56             last.next.e
--[ 2021.10.11.20.23.01.960.0 ]--
r 56             last.next.
--[ 2021.10.11.20.23.02.057.0 ]--
r 56             last.next.n
--[ 2021.10.11.20.23.02.126.0 ]--
r 56             last.next.ne
--[ 2021.10.11.20.23.02.533.0 ]--
r 56             last.next.next
--[ 2021.10.11.20.23.03.075.0 ]--
r 56             last.next.next 
--[ 2021.10.11.20.23.03.337.0 ]--
r 56             last.next.next =
--[ 2021.10.11.20.23.03.411.0 ]--
r 56             last.next.next = 
--[ 2021.10.11.20.23.03.791.0 ]--
r 56             last.next.next = n
--[ 2021.10.11.20.23.03.937.0 ]--
r 56             last.next.next = nu
--[ 2021.10.11.20.23.04.453.0 ]--
r 56             last.next.next = null
--[ 2021.10.11.20.23.04.632.0 ]--
r 56             last.next.next = nulll
--[ 2021.10.11.20.23.05.073.0 ]--
r 56             last.next.next = null
--[ 2021.10.11.20.23.05.239.0 ]--
r 56             last.next.next = null;
--[ 2021.10.11.20.23.51.419.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.26.40.001.0 ]--
r 41             last.next = tmp.next; 
--[ 2021.10.11.20.26.40.202.0 ]--
r 41             last.next = tmp.next; /
--[ 2021.10.11.20.26.40.339.0 ]--
r 41             last.next = tmp.next; //
--[ 2021.10.11.20.26.40.603.0 ]--
r 41             last.next = tmp.next; // 
--[ 2021.10.11.20.26.40.839.0 ]--
r 41             last.next = tmp.next; // j
--[ 2021.10.11.20.26.41.004.0 ]--
r 41             last.next = tmp.next; // ju
--[ 2021.10.11.20.26.41.140.0 ]--
r 41             last.next = tmp.next; // jus
--[ 2021.10.11.20.26.41.426.0 ]--
r 41             last.next = tmp.next; // just
--[ 2021.10.11.20.26.41.536.0 ]--
r 41             last.next = tmp.next; // just 
--[ 2021.10.11.20.26.42.469.0 ]--
r 41             last.next = tmp.next; // just t
--[ 2021.10.11.20.26.42.553.0 ]--
r 41             last.next = tmp.next; // just tm
--[ 2021.10.11.20.26.42.794.0 ]--
r 41             last.next = tmp.next; // just tmp
--[ 2021.10.11.20.27.32.472.0 ]--
r 37         } eelse {
--[ 2021.10.11.20.27.32.699.0 ]--
r 37         } eselse {
--[ 2021.10.11.20.27.32.726.0 ]--
r 37         } eslelse {
--[ 2021.10.11.20.27.33.319.0 ]--
r 37         } eselse {
--[ 2021.10.11.20.27.33.377.0 ]--
r 37         } eelse {
--[ 2021.10.11.20.27.33.562.0 ]--
r 37         } elelse {
--[ 2021.10.11.20.27.33.680.0 ]--
r 37         } elselse {
--[ 2021.10.11.20.27.34.097.0 ]--
r 37         } elseelse {
--[ 2021.10.11.20.27.34.408.0 ]--
r 37         } else else {
--[ 2021.10.11.20.27.34.564.0 ]--
r 37         } else ielse {
--[ 2021.10.11.20.27.34.720.0 ]--
r 37         } else ifelse {
--[ 2021.10.11.20.27.34.749.0 ]--
r 37         } else if else {
--[ 2021.10.11.20.27.35.345.0 ]--
r 37         } else if (else {
--[ 2021.10.11.20.27.35.532.0 ]--
r 37         } else if ()else {
--[ 2021.10.11.20.27.35.950.0 ]--
r 37         } else if () else {
--[ 2021.10.11.20.27.36.905.0 ]--
r 37         } else if () {else {
--[ 2021.10.11.20.27.37.196.0 ]--
r 37         } else if () {}else {
--[ 2021.10.11.20.27.37.792.0 ]--
r 37         } else if () {} else {
--[ 2021.10.11.20.27.38.729.0 ]--
+ 37         } else if () {
r 38         } else {
--[ 2021.10.11.20.27.38.765.0 ]--
+ 38             
--[ 2021.10.11.20.27.41.273.0 ]--
r 37         } else if (s) {
--[ 2021.10.11.20.27.42.644.0 ]--
r 37         } else if (size) {
--[ 2021.10.11.20.27.42.654.0 ]--
r 37         } else if (size()) {
--[ 2021.10.11.20.27.45.451.0 ]--
r 37         } else if (size() ) {
--[ 2021.10.11.20.27.45.569.0 ]--
r 37         } else if (size() =) {
--[ 2021.10.11.20.27.45.699.0 ]--
r 37         } else if (size() ==) {
--[ 2021.10.11.20.27.45.811.0 ]--
r 37         } else if (size() == ) {
--[ 2021.10.11.20.27.48.145.0 ]--
r 37         } else if (size() == 1) {
--[ 2021.10.11.20.27.56.150.0 ]--
+ 38             Node<Item> tmp = new Node<>(last.item, last.next);
+ 39             last.next = new Node<>(item);
+ 40             last = last.next;
r 41             last.next = tmp.next; // just tmp
--[ 2021.10.11.20.27.56.854.0 ]--
r 41             last.next = tmp.next; // just tm
--[ 2021.10.11.20.27.56.934.0 ]--
r 41             last.next = tmp.next; // just t
--[ 2021.10.11.20.27.57.098.0 ]--
r 41             last.next = tmp.next; // just 
--[ 2021.10.11.20.27.57.246.0 ]--
r 41             last.next = tmp.next; // just
--[ 2021.10.11.20.27.57.388.0 ]--
r 41             last.next = tmp.next; // jus
--[ 2021.10.11.20.27.57.548.0 ]--
r 41             last.next = tmp.next; // ju
--[ 2021.10.11.20.27.57.692.0 ]--
r 41             last.next = tmp.next; // j
--[ 2021.10.11.20.27.57.839.0 ]--
r 41             last.next = tmp.next; // 
--[ 2021.10.11.20.27.57.989.0 ]--
r 41             last.next = tmp.next; //
--[ 2021.10.11.20.27.58.120.0 ]--
r 41             last.next = tmp.next; /
--[ 2021.10.11.20.27.58.281.0 ]--
r 41             last.next = tmp.next; 
--[ 2021.10.11.20.27.58.530.0 ]--
r 41             last.next = tmp.next;
--[ 2021.10.11.20.27.59.198.0 ]--
r 41             last.next = tmp.nex;
--[ 2021.10.11.20.27.59.311.0 ]--
r 41             last.next = tmp.ne;
--[ 2021.10.11.20.27.59.461.0 ]--
r 41             last.next = tmp.n;
--[ 2021.10.11.20.27.59.605.0 ]--
r 41             last.next = tmp.;
--[ 2021.10.11.20.27.59.777.0 ]--
r 41             last.next = tmp;
--[ 2021.10.11.20.28.02.343.0 ]--
r 46             last.next = tmp.next; // just tm
--[ 2021.10.11.20.28.02.494.0 ]--
r 46             last.next = tmp.next; // just t
--[ 2021.10.11.20.28.02.630.0 ]--
r 46             last.next = tmp.next; // just 
--[ 2021.10.11.20.28.02.835.0 ]--
r 46             last.next = tmp.next; // just
--[ 2021.10.11.20.28.02.937.0 ]--
r 46             last.next = tmp.next; // jus
--[ 2021.10.11.20.28.03.096.0 ]--
r 46             last.next = tmp.next; // ju
--[ 2021.10.11.20.28.03.238.0 ]--
r 46             last.next = tmp.next; // j
--[ 2021.10.11.20.28.03.383.0 ]--
r 46             last.next = tmp.next; // 
--[ 2021.10.11.20.28.03.538.0 ]--
r 46             last.next = tmp.next; //
--[ 2021.10.11.20.28.03.695.0 ]--
r 46             last.next = tmp.next; /
--[ 2021.10.11.20.28.03.865.0 ]--
r 46             last.next = tmp.next; 
--[ 2021.10.11.20.28.04.078.0 ]--
r 46             last.next = tmp.next;
--[ 2021.10.11.20.28.30.508.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.28.47.317.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.29.41.766.0 ]--
r 66             return t.item;
--[ 2021.10.11.20.29.41.827.0 ]--
r 66             return tm.item;
--[ 2021.10.11.20.29.42.218.0 ]--
r 66             return tmp.item;
--[ 2021.10.11.20.29.50.430.0 ]--
+ 64             
--[ 2021.10.11.20.29.50.559.0 ]--
r 64             Node<Item> tmp = new Node<>(last.item, last.next);
--[ 2021.10.11.20.29.55.200.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.30.08.044.0 ]--
r 60             
--[ 2021.10.11.20.30.09.240.0 ]--
+ 62             
--[ 2021.10.11.20.30.09.610.0 ]--
r 62             size--;
--[ 2021.10.11.20.30.10.581.0 ]--
- 60
--[ 2021.10.11.20.30.56.011.0 ]--
r 67             return tmp.nitem;
--[ 2021.10.11.20.30.56.679.0 ]--
r 67             return tmp.nextitem;
--[ 2021.10.11.20.30.57.112.0 ]--
r 67             return tmp.next.item;
--[ 2021.10.11.20.31.36.137.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.31.54.332.0 ]--
r 62             return last.nitem;
--[ 2021.10.11.20.31.55.256.0 ]--
r 62             return last.nextitem;
--[ 2021.10.11.20.31.55.517.0 ]--
r 62             return last.next.item;
--[ 2021.10.11.20.32.15.900.0 ]--
- 60
--[ 2021.10.11.20.32.34.098.0 ]--
+ 60             
--[ 2021.10.11.20.32.35.889.0 ]--
r 60             l
--[ 2021.10.11.20.32.36.162.0 ]--
r 60             la
--[ 2021.10.11.20.32.36.698.0 ]--
r 60             l
--[ 2021.10.11.20.32.36.847.0 ]--
r 60             
--[ 2021.10.11.20.32.43.616.0 ]--
r 60             Node<Item> tmp = new Node<>(last.item, last.next);
--[ 2021.10.11.20.32.44.882.0 ]--
+ 61             
--[ 2021.10.11.20.32.45.644.0 ]--
r 61             l
--[ 2021.10.11.20.32.45.678.0 ]--
r 61             la
--[ 2021.10.11.20.32.46.445.0 ]--
r 61             last
--[ 2021.10.11.20.32.46.600.0 ]--
r 61             last.
--[ 2021.10.11.20.32.47.209.0 ]--
r 61             last.next
--[ 2021.10.11.20.32.47.749.0 ]--
r 61             last.next 
--[ 2021.10.11.20.32.48.306.0 ]--
r 61             last.next =
--[ 2021.10.11.20.32.49.237.0 ]--
r 61             last.next = 
--[ 2021.10.11.20.32.49.362.0 ]--
r 61             last.next = n
--[ 2021.10.11.20.32.49.589.0 ]--
r 61             last.next = nu
--[ 2021.10.11.20.32.49.988.0 ]--
r 61             last.next = null
--[ 2021.10.11.20.32.50.215.0 ]--
r 61             last.next = null;
--[ 2021.10.11.20.32.52.741.0 ]--
r 63             return las.next.item;
--[ 2021.10.11.20.32.52.853.0 ]--
r 63             return la.next.item;
--[ 2021.10.11.20.32.52.998.0 ]--
r 63             return l.next.item;
--[ 2021.10.11.20.32.53.121.0 ]--
r 63             return .next.item;
--[ 2021.10.11.20.32.53.332.0 ]--
r 63             return t.next.item;
--[ 2021.10.11.20.32.53.972.0 ]--
r 63             return tmp.next.item;
--[ 2021.10.11.20.32.59.386.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.38.33.450.0 ]--
r 110         testString.enqueue("i");
--[ 2021.10.11.20.38.33.601.0 ]--
r 110         testString.enqueue("it");
--[ 2021.10.11.20.38.33.761.0 ]--
r 110         testString.enqueue("ite");
--[ 2021.10.11.20.38.33.894.0 ]--
r 110         testString.enqueue("item");
--[ 2021.10.11.20.38.34.372.0 ]--
r 110         testString.enqueue("itemd");
--[ 2021.10.11.20.38.34.430.0 ]--
r 110         testString.enqueue("itemdo");
--[ 2021.10.11.20.38.34.593.0 ]--
r 110         testString.enqueue("itemdos");
--[ 2021.10.11.20.40.41.142.0 ]--
r 61 //            last.next = null;
--[ 2021.10.11.20.40.45.094.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.40.47.560.0 ]--
r 61             last.next = null;
--[ 2021.10.11.20.42.16.925.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.42.52.903.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.44.22.137.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.44.51.707.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.47.10.344.0 ]--
r 41             last.next = la;
--[ 2021.10.11.20.47.11.157.0 ]--
r 41             last.next = last;
--[ 2021.10.11.20.47.14.855.0 ]--
r 41             t.next = last;
--[ 2021.10.11.20.47.15.591.0 ]--
r 41             tmp.next = last;
--[ 2021.10.11.20.47.51.577.0 ]--
r 39             last.nex = new Node<>(item);
--[ 2021.10.11.20.47.51.745.0 ]--
r 39             last.ne = new Node<>(item);
--[ 2021.10.11.20.47.51.924.0 ]--
r 39             last.n = new Node<>(item);
--[ 2021.10.11.20.47.52.108.0 ]--
r 39             last. = new Node<>(item);
--[ 2021.10.11.20.47.52.288.0 ]--
r 39             last = new Node<>(item);
--[ 2021.10.11.20.47.57.612.0 ]--
- 40
--[ 2021.10.11.20.48.08.822.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.48.24.216.0 ]--
r 45             t.next = tmp.next;
--[ 2021.10.11.20.48.24.994.0 ]--
r 45             tmp.next = tmp.next;
--[ 2021.10.11.20.48.27.837.0 ]--
r 45             tmp.next = l.next;
--[ 2021.10.11.20.48.28.014.0 ]--
r 45             tmp.next = la.next;
--[ 2021.10.11.20.48.28.554.0 ]--
r 45             tmp.next = last.next;
--[ 2021.10.11.20.48.33.817.0 ]--
r 44             
--[ 2021.10.11.20.48.34.197.0 ]--
- 44
--[ 2021.10.11.20.48.37.826.0 ]--
r 43             last = new Node<>(item);
--[ 2021.10.11.20.49.05.870.0 ]--
+ 44             
--[ 2021.10.11.20.49.06.662.0 ]--
r 44             l
--[ 2021.10.11.20.49.06.702.0 ]--
r 44             la
--[ 2021.10.11.20.49.07.034.0 ]--
r 44             las
--[ 2021.10.11.20.49.07.304.0 ]--
r 44             last
--[ 2021.10.11.20.49.07.756.0 ]--
r 44             last.
--[ 2021.10.11.20.49.07.929.0 ]--
r 44             last.n
--[ 2021.10.11.20.49.08.417.0 ]--
r 44             last.next
--[ 2021.10.11.20.49.08.767.0 ]--
r 44             last.next 
--[ 2021.10.11.20.49.09.244.0 ]--
r 44             last.next =
--[ 2021.10.11.20.49.09.318.0 ]--
r 44             last.next = 
--[ 2021.10.11.20.49.09.674.0 ]--
r 44             last.next = t
--[ 2021.10.11.20.49.09.785.0 ]--
r 44             last.next = tm
--[ 2021.10.11.20.50.52.944.0 ]--
+ 40             
--[ 2021.10.11.20.50.53.734.0 ]--
r 40             l
--[ 2021.10.11.20.50.54.120.0 ]--
r 40             la
--[ 2021.10.11.20.50.54.536.0 ]--
r 40             last
--[ 2021.10.11.20.50.55.287.0 ]--
r 40             last.
--[ 2021.10.11.20.50.55.958.0 ]--
r 40             last.next
--[ 2021.10.11.20.50.56.618.0 ]--
r 40             last.next 
--[ 2021.10.11.20.50.56.849.0 ]--
r 40             last.next -
--[ 2021.10.11.20.50.57.119.0 ]--
r 40             last.next 
--[ 2021.10.11.20.50.57.344.0 ]--
r 40             last.next =
--[ 2021.10.11.20.50.57.640.0 ]--
r 40             last.next = 
--[ 2021.10.11.20.50.57.987.0 ]--
r 40             last.next = t
--[ 2021.10.11.20.50.58.563.0 ]--
r 40             last.next = tmp
--[ 2021.10.11.20.51.00.379.0 ]--
r 40             last.next = tmp;
--[ 2021.10.11.20.51.10.865.0 ]--
r 39             last. = new Node<>(item);
--[ 2021.10.11.20.51.11.172.0 ]--
r 39             last.n = new Node<>(item);
--[ 2021.10.11.20.51.11.286.0 ]--
r 39             last.ne = new Node<>(item);
--[ 2021.10.11.20.51.12.026.0 ]--
r 39             last.next = new Node<>(item);
--[ 2021.10.11.20.51.23.098.0 ]--
+ 40             
--[ 2021.10.11.20.51.24.215.0 ]--
r 40             l
--[ 2021.10.11.20.51.24.270.0 ]--
r 40             la
--[ 2021.10.11.20.51.24.534.0 ]--
r 40             las
--[ 2021.10.11.20.51.24.742.0 ]--
r 40             last
--[ 2021.10.11.20.51.24.847.0 ]--
r 40             last 
--[ 2021.10.11.20.51.25.744.0 ]--
r 40             last =
--[ 2021.10.11.20.51.25.937.0 ]--
r 40             last = 
--[ 2021.10.11.20.51.26.382.0 ]--
r 40             last = l
--[ 2021.10.11.20.51.26.424.0 ]--
r 40             last = la
--[ 2021.10.11.20.51.26.999.0 ]--
r 40             last = last
--[ 2021.10.11.20.51.27.158.0 ]--
r 40             last = last.
--[ 2021.10.11.20.51.27.794.0 ]--
r 40             last = last.next
--[ 2021.10.11.20.51.34.607.0 ]--
r 40             last = last.next;
--[ 2021.10.11.20.51.40.676.0 ]--
r 42             
--[ 2021.10.11.20.51.41.181.0 ]--
- 42
--[ 2021.10.11.20.51.53.646.0 ]--
r 44             last.next = new Node<>(item);
r 45             last = last.next;
r 46             last.next = tmp;
--[ 2021.10.11.20.52.33.781.0 ]--
r 46             last.next = tmp.;
--[ 2021.10.11.20.52.34.487.0 ]--
r 46             last.next = tmp.next;
--[ 2021.10.11.20.52.38.349.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.53.11.279.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.53.35.827.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.56.49.368.0 ]--
r 38             
--[ 2021.10.11.20.56.50.667.0 ]--
+ 40             
--[ 2021.10.11.20.56.50.885.0 ]--
r 40             Node<Item> tmp = new Node<>(last.item, last.next);
--[ 2021.10.11.20.56.54.988.0 ]--
- 38
--[ 2021.10.11.20.56.58.555.0 ]--
r 43             
--[ 2021.10.11.20.56.59.664.0 ]--
+ 45             
--[ 2021.10.11.20.57.00.575.0 ]--
r 45             Node<Item> tmp = new Node<>(last.item, last.next);
--[ 2021.10.11.20.57.01.733.0 ]--
- 43
--[ 2021.10.11.20.57.14.653.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.59.24.947.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.20.59.45.993.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.03.24.346.0 ]--
r 44             
--[ 2021.10.11.21.03.26.753.0 ]--
+ 43             
--[ 2021.10.11.21.03.27.016.0 ]--
r 43             Node<Item> tmp = new Node<>(last.item, last.next);
--[ 2021.10.11.21.03.28.201.0 ]--
- 45
--[ 2021.10.11.21.03.35.143.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.04.13.188.0 ]--
r 126 //        poppedString = testString.pop();
--[ 2021.10.11.21.04.16.188.0 ]--
r 126         poppedString = testString.pop();
--[ 2021.10.11.21.04.19.212.0 ]--
r 126         poppedString = testString.d();
--[ 2021.10.11.21.04.19.368.0 ]--
r 126         poppedString = testString.de();
--[ 2021.10.11.21.04.20.125.0 ]--
r 126         poppedString = testString.dequeue();
--[ 2021.10.11.21.04.23.273.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.04.27.652.0 ]--
r 126 //        poppedString = testString.dequeue();
--[ 2021.10.11.21.04.57.979.0 ]--
r 116         String dString = testString.dequeue();
r 117         StdOut.println(dString);
r 118         dString = testString.dequeue();
r 119         StdOut.println(dString);
r 120         dString = testString.dequeue();
r 121         StdOut.println(dString);
r 126 //        dString = testString.dequeue();
--[ 2021.10.11.21.04.58.386.0 ]--
r 116         String deString = testString.dequeue();
r 117         StdOut.println(deString);
r 118         deString = testString.dequeue();
r 119         StdOut.println(deString);
r 120         deString = testString.dequeue();
r 121         StdOut.println(deString);
r 126 //        deString = testString.dequeue();
--[ 2021.10.11.21.04.58.836.0 ]--
r 116         String deqString = testString.dequeue();
r 117         StdOut.println(deqString);
r 118         deqString = testString.dequeue();
r 119         StdOut.println(deqString);
r 120         deqString = testString.dequeue();
r 121         StdOut.println(deqString);
r 126 //        deqString = testString.dequeue();
--[ 2021.10.11.21.04.59.342.0 ]--
r 116         String dequString = testString.dequeue();
r 117         StdOut.println(dequString);
r 118         dequString = testString.dequeue();
r 119         StdOut.println(dequString);
r 120         dequString = testString.dequeue();
r 121         StdOut.println(dequString);
r 126 //        dequString = testString.dequeue();
--[ 2021.10.11.21.04.59.566.0 ]--
r 116         String dequeString = testString.dequeue();
r 117         StdOut.println(dequeString);
r 118         dequeString = testString.dequeue();
r 119         StdOut.println(dequeString);
r 120         dequeString = testString.dequeue();
r 121         StdOut.println(dequeString);
r 126 //        dequeString = testString.dequeue();
--[ 2021.10.11.21.05.01.347.0 ]--
r 116         String dequeuString = testString.dequeue();
r 117         StdOut.println(dequeuString);
r 118         dequeuString = testString.dequeue();
r 119         StdOut.println(dequeuString);
r 120         dequeuString = testString.dequeue();
r 121         StdOut.println(dequeuString);
r 126 //        dequeuString = testString.dequeue();
--[ 2021.10.11.21.05.02.601.0 ]--
r 116         String dequeueString = testString.dequeue();
r 117         StdOut.println(dequeueString);
r 118         dequeueString = testString.dequeue();
r 119         StdOut.println(dequeueString);
r 120         dequeueString = testString.dequeue();
r 121         StdOut.println(dequeueString);
r 126 //        dequeueString = testString.dequeue();
--[ 2021.10.11.21.05.02.784.0 ]--
r 116         String dequeuedString = testString.dequeue();
r 117         StdOut.println(dequeuedString);
r 118         dequeuedString = testString.dequeue();
r 119         StdOut.println(dequeuedString);
r 120         dequeuedString = testString.dequeue();
r 121         StdOut.println(dequeuedString);
r 126 //        dequeuedString = testString.dequeue();
--[ 2021.10.11.21.05.16.040.0 ]--
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
r 127 //         
--[ 2021.10.11.21.05.16.263.0 ]--
r 127 //         /
--[ 2021.10.11.21.05.17.417.0 ]--
+ 127 //        testString.enqueue("testuno");
+ 128 //        assert testString.size()==1;
+ 129 //        assert !testString.isEmpty();
+ 130 //        testString.enqueue("testdos");
+ 131 //        assert testString.size()==2;
+ 132 //        assert !testString.isEmpty();
+ 133 //        testString.enqueue("testtres");
+ 134 //        assert testString.size()==3;
r 135 //        assert !testString.isEmpty();
--[ 2021.10.11.21.05.18.646.0 ]--
r 127         testString.enqueue("testuno");
r 128         assert testString.size()==1;
r 129         assert !testString.isEmpty();
r 130         testString.enqueue("testdos");
r 131         assert testString.size()==2;
r 132         assert !testString.isEmpty();
r 133         testString.enqueue("testtres");
r 134         assert testString.size()==3;
r 135         assert !testString.isEmpty();
--[ 2021.10.11.21.05.24.660.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.05.33.890.0 ]--
r 136         Iterator<String> iter = testString.iterator();
--[ 2021.10.11.21.05.36.293.0 ]--
r 137         StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.21.05.37.088.0 ]--
r 138         StdOut.println("iterate:" + iter.hasNext());
--[ 2021.10.11.21.05.37.894.0 ]--
r 139 //        testString.pop();
--[ 2021.10.11.21.05.38.728.0 ]--
r 140         StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.21.05.39.773.0 ]--
r 139         testString.pop();
--[ 2021.10.11.21.05.40.597.0 ]--
r 141 //        testString.pop();
--[ 2021.10.11.21.05.41.657.0 ]--
r 142         StdOut.println("iterate:" + iter.hasNext());
--[ 2021.10.11.21.05.42.518.0 ]--
r 141         testString.pop();
--[ 2021.10.11.21.05.43.304.0 ]--
r 143 //        StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.21.05.44.756.0 ]--
r 143         StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.21.05.46.713.0 ]--
r 139         testString.d();
--[ 2021.10.11.21.05.47.777.0 ]--
r 139         testString.dequeue();
--[ 2021.10.11.21.05.48.815.0 ]--
r 141         testString.podp();
--[ 2021.10.11.21.05.49.515.0 ]--
r 141         testString.d();
--[ 2021.10.11.21.05.50.909.0 ]--
r 141         testString.de();
--[ 2021.10.11.21.05.51.592.0 ]--
r 141         testString.dequeue();
--[ 2021.10.11.21.06.03.636.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.08.07.358.0 ]--
r 82                     throw new ConcurrentModificationException("modified o while iterating");
--[ 2021.10.11.21.08.07.375.0 ]--
r 82                     throw new ConcurrentModificationException("modified on while iterating");
--[ 2021.10.11.21.08.08.168.0 ]--
r 82                     throw new ConcurrentModificationException("modified one while iterating");
--[ 2021.10.11.21.08.08.559.0 ]--
r 82                     throw new ConcurrentModificationException("modified on while iterating");
--[ 2021.10.11.21.08.08.685.0 ]--
r 82                     throw new ConcurrentModificationException("modified o while iterating");
--[ 2021.10.11.21.08.08.803.0 ]--
r 82                     throw new ConcurrentModificationException("modified  while iterating");
--[ 2021.10.11.21.08.08.874.0 ]--
r 82                     throw new ConcurrentModificationException("modified q while iterating");
--[ 2021.10.11.21.08.08.989.0 ]--
r 82                     throw new ConcurrentModificationException("modified qu while iterating");
--[ 2021.10.11.21.08.09.423.0 ]--
r 82                     throw new ConcurrentModificationException("modified que while iterating");
--[ 2021.10.11.21.08.09.818.0 ]--
r 82                     throw new ConcurrentModificationException("modified queu while iterating");
--[ 2021.10.11.21.08.09.933.0 ]--
r 82                     throw new ConcurrentModificationException("modified queue while iterating");
--[ 2021.10.11.21.08.16.358.0 ]--
r 90                     throw new ConcurrentModificationException("modified queue while iterating");
--[ 2021.10.11.21.08.35.038.0 ]--
r 139 //        testString.dequeue();
--[ 2021.10.11.21.08.38.752.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.08.51.463.0 ]--
r 141         testString.e();
--[ 2021.10.11.21.08.51.656.0 ]--
r 141         testString.en();
--[ 2021.10.11.21.08.52.538.0 ]--
r 141         testString.enqueue();
--[ 2021.10.11.21.08.53.760.0 ]--
r 141         testString.enqueue()'';
--[ 2021.10.11.21.08.54.075.0 ]--
r 141         testString.enqueue()'j';
--[ 2021.10.11.21.08.54.549.0 ]--
r 141         testString.enqueue()'';
--[ 2021.10.11.21.08.54.785.0 ]--
r 141         testString.enqueue();
--[ 2021.10.11.21.08.56.258.0 ]--
r 141         testString.enqueue("");
--[ 2021.10.11.21.08.57.000.0 ]--
r 141         testString.enqueue("t");
--[ 2021.10.11.21.08.57.129.0 ]--
r 141         testString.enqueue("te");
--[ 2021.10.11.21.08.57.379.0 ]--
r 141         testString.enqueue("tea");
--[ 2021.10.11.21.08.57.791.0 ]--
r 141         testString.enqueue("te");
--[ 2021.10.11.21.08.57.825.0 ]--
r 141         testString.enqueue("tes");
--[ 2021.10.11.21.08.57.995.0 ]--
r 141         testString.enqueue("test");
--[ 2021.10.11.21.08.58.519.0 ]--
r 141         testString.enqueue("testq");
--[ 2021.10.11.21.08.58.988.0 ]--
r 141         testString.enqueue("test");
--[ 2021.10.11.21.08.59.334.0 ]--
r 141         testString.enqueue("testc");
--[ 2021.10.11.21.08.59.483.0 ]--
r 141         testString.enqueue("testcu");
--[ 2021.10.11.21.08.59.675.0 ]--
r 141         testString.enqueue("testcua");
--[ 2021.10.11.21.08.59.901.0 ]--
r 141         testString.enqueue("testcuat");
--[ 2021.10.11.21.09.00.067.0 ]--
r 141         testString.enqueue("testcuatr");
--[ 2021.10.11.21.09.00.095.0 ]--
r 141         testString.enqueue("testcuatro");
--[ 2021.10.11.21.09.04.944.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.09.09.863.0 ]--
r 141 //        testString.enqueue("testcuatro");
--[ 2021.10.11.21.09.12.978.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.09.30.930.0 ]--
:/src/Steque.java
r 143         testString.pop();
--[ 2021.10.11.21.09.32.075.0 ]--
r 143         testString.e();
--[ 2021.10.11.21.09.33.079.0 ]--
r 143         testString.enqueue();
--[ 2021.10.11.21.09.34.758.0 ]--
r 143         testString.enqueue("");
--[ 2021.10.11.21.09.35.010.0 ]--
r 143         testString.enqueue("t");
--[ 2021.10.11.21.09.35.158.0 ]--
r 143         testString.enqueue("te");
--[ 2021.10.11.21.09.35.493.0 ]--
r 143         testString.enqueue("tes");
--[ 2021.10.11.21.09.35.710.0 ]--
r 143         testString.enqueue("test");
--[ 2021.10.11.21.09.36.441.0 ]--
r 143         testString.enqueue("testc");
--[ 2021.10.11.21.09.36.612.0 ]--
r 143         testString.enqueue("testcu");
--[ 2021.10.11.21.09.36.741.0 ]--
r 143         testString.enqueue("testcua");
--[ 2021.10.11.21.09.36.924.0 ]--
r 143         testString.enqueue("testcuat");
--[ 2021.10.11.21.09.37.116.0 ]--
r 143         testString.enqueue("testcuatr");
--[ 2021.10.11.21.09.37.215.0 ]--
r 143         testString.enqueue("testcuatro");
--[ 2021.10.11.21.09.39.245.0 ]--
+ 144         
--[ 2021.10.11.21.09.39.409.0 ]--
r 144         testString.enqueue("testcuatro");
--[ 2021.10.11.21.09.44.361.0 ]--
r 144         testString.p("testcuatro");
--[ 2021.10.11.21.09.45.264.0 ]--
r 144         testString.pu("testcuatro");
--[ 2021.10.11.21.09.45.762.0 ]--
r 144         testString.push("testcuatro");
--[ 2021.10.11.21.09.50.127.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.10.00.359.0 ]--
r 146         StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.21.10.03.753.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.10.17.743.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.10.21.866.0 ]--
r 143 //        testString.enqueue("testcuatro");
--[ 2021.10.11.21.10.24.970.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.10.35.104.0 ]--
r 144 //        testString.push("testcuatro");
--[ 2021.10.11.21.10.38.277.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.10.45.846.0 ]--
r 146 //        StdOut.println("iterate:" + iter.next());
--[ 2021.10.11.21.10.51.512.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.11.01.390.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.21.20.43.130.0 ]--
:/src/MinimumStack.java
r 76                 return stack.peek().;
--[ 2021.10.11.21.20.44.209.0 ]--
r 76                 return stack.peek().p;
--[ 2021.10.11.21.20.44.924.0 ]--
r 76                 return stack.peek().=;
--[ 2021.10.11.21.20.45.150.0 ]--
r 76                 return stack.peek().;
--[ 2021.10.11.21.20.45.488.0 ]--
r 76                 return stack.peek();
--[ 2021.10.11.21.28.41.278.0 ]--
r 85     
--[ 2021.10.11.21.28.41.433.0 ]--
r 85         
--[ 2021.10.11.21.28.48.128.0 ]--
r 85         M
--[ 2021.10.11.21.28.49.224.0 ]--
r 85         MinimumStack
--[ 2021.10.11.21.28.50.168.0 ]--
r 85         MinimumStack<>
--[ 2021.10.11.21.28.51.835.0 ]--
r 85         MinimumStack<i>
--[ 2021.10.11.21.28.52.794.0 ]--
r 85         MinimumStack<>
--[ 2021.10.11.21.28.53.092.0 ]--
r 85         MinimumStack<s>
--[ 2021.10.11.21.28.55.209.0 ]--
r 85         MinimumStack<sh>
--[ 2021.10.11.21.28.55.549.0 ]--
r 85         MinimumStack<s>
--[ 2021.10.11.21.28.55.633.0 ]--
r 85         MinimumStack<st>
--[ 2021.10.11.21.28.56.426.0 ]--
r 85         MinimumStack<str>
--[ 2021.10.11.21.28.57.025.0 ]--
r 85         MinimumStack<stri>
--[ 2021.10.11.21.28.57.309.0 ]--
r 85         MinimumStack<str>
--[ 2021.10.11.21.28.57.435.0 ]--
r 85         MinimumStack<st>
--[ 2021.10.11.21.28.57.578.0 ]--
r 85         MinimumStack<s>
--[ 2021.10.11.21.28.57.738.0 ]--
r 85         MinimumStack<>
--[ 2021.10.11.21.28.58.043.0 ]--
r 85         MinimumStack<S>
--[ 2021.10.11.21.29.01.424.0 ]--
r 85         MinimumStack<>
--[ 2021.10.11.21.29.01.869.0 ]--
r 85         MinimumStack
--[ 2021.10.11.21.29.06.315.0 ]--
r 85         MinimumStack<S>
--[ 2021.10.11.21.29.07.713.0 ]--
r 85         MinimumStack<S
--[ 2021.10.11.21.29.07.874.0 ]--
r 85         MinimumStack<
--[ 2021.10.11.21.29.08.247.0 ]--
r 85         MinimumStack
--[ 2021.10.11.21.29.08.417.0 ]--
r 85         MinimumStac
--[ 2021.10.11.21.29.08.603.0 ]--
r 85         MinimumSta
--[ 2021.10.11.21.29.08.813.0 ]--
r 85         MinimumSt
--[ 2021.10.11.21.29.09.002.0 ]--
r 85         MinimumS
--[ 2021.10.11.21.29.09.219.0 ]--
r 85         Minimum
--[ 2021.10.11.21.29.09.383.0 ]--
r 85         Minimu
--[ 2021.10.11.21.29.09.580.0 ]--
r 85         Minim
--[ 2021.10.11.21.29.09.791.0 ]--
r 85         Mini
--[ 2021.10.11.21.29.10.014.0 ]--
r 85         Min
--[ 2021.10.11.21.29.10.226.0 ]--
r 85         Mi
--[ 2021.10.11.21.29.10.455.0 ]--
r 85         M
--[ 2021.10.11.21.29.10.682.0 ]--
r 85         
--[ 2021.10.11.21.45.08.778.0 ]--
r 85 
--[ 2021.10.11.21.59.45.858.0 ]--
r 10     private Node<Item> first;
--[ 2021.10.11.21.59.45.881.0 ]--
r 10     private Stack.Node<Item> first;
--[ 2021.10.11.21.59.49.143.0 ]--
r 10     private StackNode<Item> first;
--[ 2021.10.11.21.59.49.313.0 ]--
r 10     private StacNode<Item> first;
--[ 2021.10.11.21.59.49.421.0 ]--
r 10     private StaNode<Item> first;
--[ 2021.10.11.21.59.49.550.0 ]--
r 10     private StNode<Item> first;
--[ 2021.10.11.21.59.49.708.0 ]--
r 10     private SNode<Item> first;
--[ 2021.10.11.21.59.50.129.0 ]--
r 10     private Node<Item> first;
--[ 2021.10.11.22.00.09.802.0 ]--
+ 12     
--[ 2021.10.11.22.00.10.733.0 ]--
r 11     
--[ 2021.10.11.22.00.11.380.0 ]--
+ 11     private static class Node<Item> {
+ 12         private Item item;
+ 13         private Node<Item> next;
r 14     }
--[ 2021.10.11.22.00.11.399.0 ]--
r 13         private Stack.Node<Item> next;
--[ 2021.10.11.22.00.15.188.0 ]--
r 13         private StackNode<Item> next;
--[ 2021.10.11.22.00.15.314.0 ]--
r 13         private StacNode<Item> next;
--[ 2021.10.11.22.00.15.449.0 ]--
r 13         private StaNode<Item> next;
--[ 2021.10.11.22.00.15.566.0 ]--
r 13         private StNode<Item> next;
--[ 2021.10.11.22.00.15.752.0 ]--
r 13         private SNode<Item> next;
--[ 2021.10.11.22.00.16.009.0 ]--
r 13         private Node<Item> next;
--[ 2021.10.11.22.00.31.828.0 ]--
r 10     private Node<Item> first ;
--[ 2021.10.11.22.00.32.166.0 ]--
r 10     private Node<Item> first =;
--[ 2021.10.11.22.00.32.325.0 ]--
r 10     private Node<Item> first = ;
--[ 2021.10.11.22.00.32.771.0 ]--
r 10     private Node<Item> first = n;
--[ 2021.10.11.22.00.32.987.0 ]--
r 10     private Node<Item> first = nu;
--[ 2021.10.11.22.00.33.011.0 ]--
r 10     private Node<Item> first = nul;
--[ 2021.10.11.22.00.33.189.0 ]--
r 10     private Node<Item> first = null;
--[ 2021.10.11.22.00.57.341.0 ]--
+ 31         Node<Item> oldfirst = first;
+ 32         first = new Node<Item>();
+ 33         first.item = item;
+ 34         first.next = oldfirst;
r 35         N++;
--[ 2021.10.11.22.00.57.359.0 ]--
r 31         Stack.Node<Item> oldfirst = first;
--[ 2021.10.11.22.00.57.370.0 ]--
r 32         first = new Stack.Node<Item>();
--[ 2021.10.11.22.00.59.394.0 ]--
r 31         StackNode<Item> oldfirst = first;
--[ 2021.10.11.22.00.59.594.0 ]--
r 31         StacNode<Item> oldfirst = first;
--[ 2021.10.11.22.00.59.730.0 ]--
r 31         StaNode<Item> oldfirst = first;
--[ 2021.10.11.22.00.59.889.0 ]--
r 31         StNode<Item> oldfirst = first;
--[ 2021.10.11.22.01.00.068.0 ]--
r 31         SNode<Item> oldfirst = first;
--[ 2021.10.11.22.01.00.289.0 ]--
r 31         Node<Item> oldfirst = first;
--[ 2021.10.11.22.01.01.361.0 ]--
r 32         first = new StackNode<Item>();
--[ 2021.10.11.22.01.01.508.0 ]--
r 32         first = new StacNode<Item>();
--[ 2021.10.11.22.01.01.675.0 ]--
r 32         first = new StaNode<Item>();
--[ 2021.10.11.22.01.01.804.0 ]--
r 32         first = new StNode<Item>();
--[ 2021.10.11.22.01.01.958.0 ]--
r 32         first = new SNode<Item>();
--[ 2021.10.11.22.01.02.177.0 ]--
r 32         first = new Node<Item>();
--[ 2021.10.11.22.01.08.450.0 ]--
r 35         ++;
--[ 2021.10.11.22.01.08.632.0 ]--
r 35         s++;
--[ 2021.10.11.22.01.08.968.0 ]--
r 35         si++;
--[ 2021.10.11.22.01.09.071.0 ]--
r 35         siz++;
--[ 2021.10.11.22.01.09.296.0 ]--
r 35         size++;
--[ 2021.10.11.22.01.34.283.0 ]--
+ 44         if (isEmpty()) throw new NoSuchElementException("Stack underflow");
+ 45         Item item = first.item;        // save item to return
r 46         first = first.next;            // delete first node
r 47         N--;
r 48         return item; 
--[ 2021.10.11.22.01.34.302.0 ]--
r 48         return item;
--[ 2021.10.11.22.01.38.042.0 ]--
- 50
--[ 2021.10.11.22.01.41.030.0 ]--
r 49         
--[ 2021.10.11.22.01.42.359.0 ]--
+ 48         
--[ 2021.10.11.22.01.42.605.0 ]--
r 48         // TODO do something if minimum gets popped
--[ 2021.10.11.22.01.44.234.0 ]--
- 50
--[ 2021.10.11.22.01.47.318.0 ]--
r 47         --;
--[ 2021.10.11.22.01.47.921.0 ]--
r 47         s--;
--[ 2021.10.11.22.01.48.120.0 ]--
r 47         si--;
--[ 2021.10.11.22.01.49.057.0 ]--
r 47         siz--;
--[ 2021.10.11.22.01.49.256.0 ]--
r 47         size--;
--[ 2021.10.11.22.01.55.740.0 ]--
r 45         Item item = first.item;        
--[ 2021.10.11.22.01.56.101.0 ]--
r 45         Item item = first.item;       
--[ 2021.10.11.22.01.56.355.0 ]--
r 45         Item item = first.item;      
--[ 2021.10.11.22.01.56.534.0 ]--
r 45         Item item = first.item;     
--[ 2021.10.11.22.01.56.690.0 ]--
r 45         Item item = first.item;    
--[ 2021.10.11.22.01.56.857.0 ]--
r 45         Item item = first.item;   
--[ 2021.10.11.22.01.57.019.0 ]--
r 45         Item item = first.item;  
--[ 2021.10.11.22.01.57.175.0 ]--
r 45         Item item = first.item; 
--[ 2021.10.11.22.01.57.345.0 ]--
r 45         Item item = first.item;
--[ 2021.10.11.22.01.57.547.0 ]--
r 45         Item item = first.item
--[ 2021.10.11.22.01.58.506.0 ]--
r 45         Item item = first.item;
--[ 2021.10.11.22.02.00.952.0 ]--
r 46         first = first.next;
--[ 2021.10.11.22.03.24.559.0 ]--
r 15 
--[ 2021.10.11.22.04.14.888.0 ]--
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
- 68
r 68         return new Iterator<Item>() {return new ListIterator<Item>(first);
--[ 2021.10.11.22.04.14.904.0 ]--
r 68         return new Iterator<Item>() {return new Stack.ListIterator<Item>(first);
--[ 2021.10.11.22.04.19.614.0 ]--
- 68
r 68         return new Iterator<Item>() {return new Stack.ListIterator<Item>(first);}
--[ 2021.10.11.22.04.20.467.0 ]--
r 68         return new Iterator<Item>() {return new Stack.ListIterator<Item>(first); }
--[ 2021.10.11.22.04.25.564.0 ]--
r 68         return new Iterator<Item>() { return new Stack.ListIterator<Item>(first); }
--[ 2021.10.11.22.04.34.724.0 ]--
r 69     
--[ 2021.10.11.22.04.35.085.0 ]--
+ 69     
--[ 2021.10.11.22.04.35.105.0 ]--
r 70                 
--[ 2021.10.11.22.04.35.684.0 ]--
+ 70                 
--[ 2021.10.11.22.04.38.363.0 ]--
+ 69     
--[ 2021.10.11.22.04.38.412.0 ]--
r 70                 
--[ 2021.10.11.22.04.39.245.0 ]--
- 69
--[ 2021.10.11.22.04.43.748.0 ]--
- 69
--[ 2021.10.11.22.04.44.832.0 ]--
+ 69         
--[ 2021.10.11.22.04.44.865.0 ]--
r 69                 
--[ 2021.10.11.22.04.45.644.0 ]--
+ 69                 
--[ 2021.10.11.22.04.46.080.0 ]--
- 69
--[ 2021.10.11.22.04.46.432.0 ]--
- 69
--[ 2021.10.11.22.04.46.961.0 ]--
+ 69         
--[ 2021.10.11.22.04.46.993.0 ]--
r 69                 
--[ 2021.10.11.22.04.47.532.0 ]--
+ 69                 
--[ 2021.10.11.22.04.47.965.0 ]--
- 69
--[ 2021.10.11.22.04.49.322.0 ]--
+ 69                 // an iterator, doesn't implement remove() since it's optional
+ 70     private class ListIterator<Item> implements Iterator<Item> {
+ 71         private Node<Item> current;
+ 72 
+ 73         public ListIterator(Node<Item> first) {
+ 74             current = first;
+ 75         }
+ 76         public boolean hasNext()  { return current != null;                     }
+ 77         public void remove()      { throw new UnsupportedOperationException();  }
+ 78 
+ 79         public Item next() {
+ 80             if (!hasNext()) throw new NoSuchElementException();
+ 81             Item item = current.item;
+ 82             current = current.next; 
+ 83             return item;
+ 84         }
r 85     }
--[ 2021.10.11.22.04.49.341.0 ]--
r 71         private Stack.Node<Item> current;
--[ 2021.10.11.22.04.49.355.0 ]--
r 73         public ListIterator(Stack.Node<Item> first) {
--[ 2021.10.11.22.04.49.380.0 ]--
r 69         // an iterator, doesn't implement remove() since it's optional
r 70         private class ListIterator<Item> implements Iterator<Item> {
r 71             private Stack.Node<Item> current;
r 73             public ListIterator(Stack.Node<Item> first) {
r 74                 current = first;
r 75             }
r 76             public boolean hasNext()  { return current != null;                     }
r 77             public void remove()      { throw new UnsupportedOperationException();  }
r 79             public Item next() {
r 80                 if (!hasNext()) throw new NoSuchElementException();
r 81                 Item item = current.item;
r 82                 current = current.next;
r 83                 return item;
r 84             }
r 85         }
--[ 2021.10.11.22.04.58.848.0 ]--
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
- 69
r 69                 
--[ 2021.10.11.22.05.09.924.0 ]--
+ 68         return new ListIterator<Item>(first);
+ 69     }
+ 70 
+ 71     // an iterator, doesn't implement remove() since it's optional
+ 72     private class ListIterator<Item> implements Iterator<Item> {
+ 73         private Node<Item> current;
+ 74 
+ 75         public ListIterator(Node<Item> first) {
+ 76             current = first;
+ 77         }
+ 78         public boolean hasNext()  { return current != null;                     }
+ 79         public void remove()      { throw new UnsupportedOperationException();  }
+ 80 
+ 81         public Item next() {
+ 82             if (!hasNext()) throw new NoSuchElementException();
+ 83             Item item = current.item;
+ 84             current = current.next; 
+ 85             return item;
+ 86         }
r 87     }
--[ 2021.10.11.22.05.09.943.0 ]--
r 68         return new Stack.ListIterator<Item>(first);
--[ 2021.10.11.22.05.09.956.0 ]--
r 73         private Stack.Node<Item> current;
--[ 2021.10.11.22.05.09.969.0 ]--
r 75         public ListIterator(Stack.Node<Item> first) {
--[ 2021.10.11.22.05.09.988.0 ]--
r 84             current = current.next;
--[ 2021.10.11.22.05.34.985.0 ]--
r 89 
r 90 
--[ 2021.10.11.22.05.53.479.0 ]--
- 67
r 67     public Iterator<Item> iterator() {return new Stack.ListIterator<Item>(first);
--[ 2021.10.11.22.05.54.509.0 ]--
r 67     public Iterator<Item> iterator() { return new Stack.ListIterator<Item>(first);
--[ 2021.10.11.22.05.56.037.0 ]--
- 67
r 67     public Iterator<Item> iterator() { return new Stack.ListIterator<Item>(first);}
--[ 2021.10.11.22.05.57.113.0 ]--
r 67     public Iterator<Item> iterator() { return new Stack.ListIterator<Item>(first); }
--[ 2021.10.11.22.06.00.680.0 ]--
r 67     public Iterator<Item> iterator() { return new StackListIterator<Item>(first); }
--[ 2021.10.11.22.06.00.823.0 ]--
r 67     public Iterator<Item> iterator() { return new StacListIterator<Item>(first); }
--[ 2021.10.11.22.06.00.937.0 ]--
r 67     public Iterator<Item> iterator() { return new StaListIterator<Item>(first); }
--[ 2021.10.11.22.06.01.096.0 ]--
r 67     public Iterator<Item> iterator() { return new StListIterator<Item>(first); }
--[ 2021.10.11.22.06.01.267.0 ]--
r 67     public Iterator<Item> iterator() { return new SListIterator<Item>(first); }
--[ 2021.10.11.22.06.01.484.0 ]--
r 67     public Iterator<Item> iterator() { return new ListIterator<Item>(first); }
--[ 2021.10.11.22.06.03.207.0 ]--
r 71         private StackNode<Item> current;
--[ 2021.10.11.22.06.03.366.0 ]--
r 71         private StacNode<Item> current;
--[ 2021.10.11.22.06.03.512.0 ]--
r 71         private StaNode<Item> current;
--[ 2021.10.11.22.06.03.681.0 ]--
r 71         private StNode<Item> current;
--[ 2021.10.11.22.06.03.839.0 ]--
r 71         private SNode<Item> current;
--[ 2021.10.11.22.06.04.296.0 ]--
r 71         private Node<Item> current;
--[ 2021.10.11.22.06.05.187.0 ]--
r 73         public ListIterator(StackNode<Item> first) {
--[ 2021.10.11.22.06.05.354.0 ]--
r 73         public ListIterator(StacNode<Item> first) {
--[ 2021.10.11.22.06.05.521.0 ]--
r 73         public ListIterator(StaNode<Item> first) {
--[ 2021.10.11.22.06.05.654.0 ]--
r 73         public ListIterator(StNode<Item> first) {
--[ 2021.10.11.22.06.05.857.0 ]--
r 73         public ListIterator(SNode<Item> first) {
--[ 2021.10.11.22.06.06.192.0 ]--
r 73         public ListIterator(Node<Item> first) {
--[ 2021.10.11.22.06.19.673.0 ]--
r 86 
--[ 2021.10.11.22.06.44.225.0 ]--
r 77         public void remove()      {  }
--[ 2021.10.11.22.06.45.315.0 ]--
r 77         public void remove()      { }
--[ 2021.10.11.22.06.53.971.0 ]--
- 86
r 86     
--[ 2021.10.11.22.06.54.699.0 ]--
- 86
--[ 2021.10.11.22.08.38.293.0 ]--
r 76         public boolean hasNext()  { return current != null;                    }
--[ 2021.10.11.22.08.38.471.0 ]--
r 76         public boolean hasNext()  { return current != null;                   }
--[ 2021.10.11.22.08.38.603.0 ]--
r 76         public boolean hasNext()  { return current != null;                  }
--[ 2021.10.11.22.08.38.801.0 ]--
r 76         public boolean hasNext()  { return current != null;                 }
--[ 2021.10.11.22.08.38.956.0 ]--
r 76         public boolean hasNext()  { return current != null;                }
--[ 2021.10.11.22.08.39.102.0 ]--
r 76         public boolean hasNext()  { return current != null;               }
--[ 2021.10.11.22.08.39.256.0 ]--
r 76         public boolean hasNext()  { return current != null;              }
--[ 2021.10.11.22.08.39.432.0 ]--
r 76         public boolean hasNext()  { return current != null;             }
--[ 2021.10.11.22.08.39.577.0 ]--
r 76         public boolean hasNext()  { return current != null;            }
--[ 2021.10.11.22.08.39.741.0 ]--
r 76         public boolean hasNext()  { return current != null;           }
--[ 2021.10.11.22.08.39.903.0 ]--
r 76         public boolean hasNext()  { return current != null;          }
--[ 2021.10.11.22.08.40.055.0 ]--
r 76         public boolean hasNext()  { return current != null;         }
--[ 2021.10.11.22.08.40.215.0 ]--
r 76         public boolean hasNext()  { return current != null;        }
--[ 2021.10.11.22.08.40.377.0 ]--
r 76         public boolean hasNext()  { return current != null;       }
--[ 2021.10.11.22.08.40.542.0 ]--
r 76         public boolean hasNext()  { return current != null;      }
--[ 2021.10.11.22.08.40.699.0 ]--
r 76         public boolean hasNext()  { return current != null;     }
--[ 2021.10.11.22.08.40.847.0 ]--
r 76         public boolean hasNext()  { return current != null;    }
--[ 2021.10.11.22.08.41.082.0 ]--
r 76         public boolean hasNext()  { return current != null;   }
--[ 2021.10.11.22.08.41.318.0 ]--
r 76         public boolean hasNext()  { return current != null;  }
--[ 2021.10.11.22.08.41.532.0 ]--
r 76         public boolean hasNext()  { return current != null; }
--[ 2021.10.11.22.08.47.391.0 ]--
r 77         public void remove()     { }
--[ 2021.10.11.22.08.47.658.0 ]--
r 77         public void remove()    { }
--[ 2021.10.11.22.08.47.841.0 ]--
r 77         public void remove()   { }
--[ 2021.10.11.22.08.47.996.0 ]--
r 77         public void remove()  { }
--[ 2021.10.11.22.08.48.331.0 ]--
r 77         public void remove() { }
--[ 2021.10.11.22.08.51.480.0 ]--
r 76         public boolean hasNext() { return current != null; }
--[ 2021.10.11.22.08.51.896.0 ]--
r 76         public boolean hasNext(){ return current != null; }
--[ 2021.10.11.22.08.53.066.0 ]--
r 76         public boolean hasNext() { return current != null; }
--[ 2021.10.11.22.09.40.523.0 ]--
r 67     public Iterator<Item> iterator() { return new ListIterator<Item>(first) ; }
--[ 2021.10.11.22.09.41.106.0 ]--
r 67     public Iterator<Item> iterator() { return new ListIterator<Item>(first) {}; }
--[ 2021.10.11.22.09.41.537.0 ]--
+ 67     public Iterator<Item> iterator() { return new ListIterator<Item>(first) {
r 68     }; }
--[ 2021.10.11.22.09.41.562.0 ]--
+ 68         
--[ 2021.10.11.22.09.44.475.0 ]--
+ 69     }; 
r 70     }
--[ 2021.10.11.22.09.48.483.0 ]--
+ 67     public Iterator<Item> iterator() { 
r 68         return new ListIterator<Item>(first) {
--[ 2021.10.11.22.09.50.667.0 ]--
r 70         }; 
--[ 2021.10.11.22.09.57.241.0 ]--
r 68         return new LisIterator<Item>(first) {
--[ 2021.10.11.22.09.57.435.0 ]--
r 68         return new LiIterator<Item>(first) {
--[ 2021.10.11.22.09.57.585.0 ]--
r 68         return new LIterator<Item>(first) {
--[ 2021.10.11.22.09.57.775.0 ]--
r 68         return new Iterator<Item>(first) {
--[ 2021.10.11.22.10.31.447.0 ]--
r 69             
--[ 2021.10.11.22.10.37.886.0 ]--
r 69             @
--[ 2021.10.11.22.10.39.290.0 ]--
r 69             @O
--[ 2021.10.11.22.10.40.118.0 ]--
r 69             @Override
--[ 2021.10.11.22.10.41.936.0 ]--
+ 70             
--[ 2021.10.11.22.10.49.319.0 ]--
r 67     public Iterator<Item> iterator() {
r 71         };
--[ 2021.10.11.22.12.45.034.0 ]--
+ 69             @Override
+ 70             public boolean hasNext() {
+ 71                 if (frozenOpCount != opcount) {
+ 72                     throw new ConcurrentModificationException("modified stegue while iterating");
+ 73                 }
+ 74                 return p.next != null;
+ 75             }
+ 76 
+ 77             @Override
+ 78             public Item next() {
+ 79                 if (frozenOpCount != opcount) {
+ 80                     throw new ConcurrentModificationException("modified stegue while iterating");
+ 81                 }
+ 82                 Item tmp = p.next.item;
+ 83                 p = p.next;
+ 84                 return tmp;
+ 85             }
+ 86 
r 88             public void remove() {}
--[ 2021.10.11.22.12.57.063.0 ]--
r 74                 return current != null;
--[ 2021.10.11.22.13.03.800.0 ]--
+ 69             
--[ 2021.10.11.22.13.03.990.0 ]--
+ 69             
--[ 2021.10.11.22.13.04.713.0 ]--
r 69             private Node<Item> current;
--[ 2021.10.11.22.13.08.104.0 ]--
r 70 
--[ 2021.10.11.22.15.14.186.0 ]--
r 74                     throw new ConcurrentModificationException("modified s while iterating");
--[ 2021.10.11.22.15.14.421.0 ]--
r 74                     throw new ConcurrentModificationException("modified st while iterating");
--[ 2021.10.11.22.15.14.604.0 ]--
r 74                     throw new ConcurrentModificationException("modified sta while iterating");
--[ 2021.10.11.22.15.14.764.0 ]--
r 74                     throw new ConcurrentModificationException("modified stac while iterating");
--[ 2021.10.11.22.15.14.890.0 ]--
r 74                     throw new ConcurrentModificationException("modified stack while iterating");
--[ 2021.10.11.22.15.16.935.0 ]--
r 82                     throw new ConcurrentModificationException("modified s while iterating");
--[ 2021.10.11.22.15.17.236.0 ]--
r 82                     throw new ConcurrentModificationException("modified st while iterating");
--[ 2021.10.11.22.15.17.450.0 ]--
r 82                     throw new ConcurrentModificationException("modified sta while iterating");
--[ 2021.10.11.22.15.17.641.0 ]--
r 82                     throw new ConcurrentModificationException("modified stac while iterating");
--[ 2021.10.11.22.15.17.768.0 ]--
r 82                     throw new ConcurrentModificationException("modified stack while iterating");
--[ 2021.10.11.22.15.30.940.0 ]--
+ 84                 if (!hasNext()) throw new NoSuchElementException();
r 85             Item item = current.item;
r 86             current = current.next;
r 87             return item;
--[ 2021.10.11.22.15.30.959.0 ]--
r 85                 Item item = current.item;
r 86                 current = current.next;
r 87                 return item;
--[ 2021.10.11.22.15.36.118.0 ]--
- 84
--[ 2021.10.11.22.15.47.146.0 ]--
+ 69             
--[ 2021.10.11.22.15.47.394.0 ]--
r 69             int frozenOpCount = opcount;
--[ 2021.10.11.22.16.23.363.0 ]--
r 70             private Node<Item> current ;
--[ 2021.10.11.22.16.24.098.0 ]--
r 70             private Node<Item> current =;
--[ 2021.10.11.22.16.24.287.0 ]--
r 70             private Node<Item> current = ;
--[ 2021.10.11.22.16.24.361.0 ]--
r 70             private Node<Item> current = f;
--[ 2021.10.11.22.16.24.485.0 ]--
r 70             private Node<Item> current = fi;
--[ 2021.10.11.22.16.24.532.0 ]--
r 70             private Node<Item> current = fir;
--[ 2021.10.11.22.16.25.031.0 ]--
r 70             private Node<Item> current = first;
--[ 2021.10.11.22.16.28.417.0 ]--
r 68         return new Iterator<Item>() {
--[ 2021.10.11.22.17.21.456.0 ]--
- 94
- 94
- 94
- 94
- 94
- 94
- 94
- 94
- 94
- 94
- 95
- 95
- 95
- 95
- 95
- 95
- 95
--[ 2021.10.11.22.17.22.121.0 ]--
- 94
--[ 2021.10.11.22.18.34.464.0 ]--
- 11
- 11
- 11
r 11     
--[ 2021.10.11.22.18.35.453.0 ]--
+ 7     
--[ 2021.10.11.22.18.35.556.0 ]--
+ 7     
--[ 2021.10.11.22.18.36.609.0 ]--
+ 7     private static class Node<Item> {
+ 8         private Item item;
+ 9         private Node<Item> next;
r 10     }
--[ 2021.10.11.22.18.38.568.0 ]--
- 17
--[ 2021.10.11.22.18.40.169.0 ]--
r 11 
--[ 2021.10.11.22.20.47.163.0 ]--
r 16 
--[ 2021.10.11.22.20.49.357.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.22.21.03.196.0 ]--
r 62         f
--[ 2021.10.11.22.21.03.197.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P02_DataTypes/MinimumStack$Node.class

--[ 2021.10.11.22.21.03.371.0 ]--
r 62         fi
--[ 2021.10.11.22.21.03.926.0 ]--
r 62         f
--[ 2021.10.11.22.21.04.089.0 ]--
r 62         
--[ 2021.10.11.22.21.04.651.0 ]--
r 62         i
--[ 2021.10.11.22.21.04.768.0 ]--
r 62         if
--[ 2021.10.11.22.21.04.822.0 ]--
r 62         if 
--[ 2021.10.11.22.21.05.550.0 ]--
r 62         if ()
--[ 2021.10.11.22.21.08.635.0 ]--
r 62         if (t)
--[ 2021.10.11.22.21.08.697.0 ]--
r 62         if (th)
--[ 2021.10.11.22.21.09.385.0 ]--
r 62         if (this)
--[ 2021.10.11.22.21.09.562.0 ]--
r 62         if (this.)
--[ 2021.10.11.22.21.10.252.0 ]--
r 62         if (this.i)
--[ 2021.10.11.22.21.10.973.0 ]--
r 62         if (this.it)
--[ 2021.10.11.22.21.13.542.0 ]--
r 62         if (this.i)
--[ 2021.10.11.22.21.13.882.0 ]--
r 62         if (this.)
--[ 2021.10.11.22.21.14.103.0 ]--
r 62         if (this)
--[ 2021.10.11.22.21.14.187.0 ]--
r 62         if (thi)
--[ 2021.10.11.22.21.14.364.0 ]--
r 62         if (th)
--[ 2021.10.11.22.21.14.587.0 ]--
r 62         if (t)
--[ 2021.10.11.22.21.14.771.0 ]--
r 62         if ()
--[ 2021.10.11.22.21.15.805.0 ]--
r 62         if 
--[ 2021.10.11.22.21.16.148.0 ]--
r 62         if
--[ 2021.10.11.22.21.16.314.0 ]--
r 62         i
--[ 2021.10.11.22.21.16.470.0 ]--
r 62         
--[ 2021.10.11.22.21.16.796.0 ]--
- 62
--[ 2021.10.11.22.22.43.970.0 ]--
+ 10         
--[ 2021.10.11.22.22.44.683.0 ]--
r 10         p
--[ 2021.10.11.22.22.45.255.0 ]--
r 10         private
--[ 2021.10.11.22.22.45.267.0 ]--
r 10         private 
--[ 2021.10.11.22.22.45.894.0 ]--
r 10         private N
--[ 2021.10.11.22.22.46.015.0 ]--
r 10         private No
--[ 2021.10.11.22.22.46.815.0 ]--
r 10         private Node
--[ 2021.10.11.22.22.47.969.0 ]--
r 10         private Node<>
--[ 2021.10.11.22.22.48.225.0 ]--
r 10         private Node<I>
--[ 2021.10.11.22.22.48.880.0 ]--
r 10         private Node<Item>
--[ 2021.10.11.22.22.52.879.0 ]--
r 10         private Node<Item> 
--[ 2021.10.11.22.22.54.068.0 ]--
r 10         private Node<Item> m
--[ 2021.10.11.22.22.54.203.0 ]--
r 10         private Node<Item> mi
--[ 2021.10.11.22.22.54.272.0 ]--
r 10         private Node<Item> min
--[ 2021.10.11.22.22.55.063.0 ]--
r 10         private Node<Item> mini
--[ 2021.10.11.22.22.55.327.0 ]--
r 10         private Node<Item> minim
--[ 2021.10.11.22.22.55.510.0 ]--
r 10         private Node<Item> minimu
--[ 2021.10.11.22.22.55.745.0 ]--
r 10         private Node<Item> minimum
--[ 2021.10.11.22.22.56.294.0 ]--
r 10         private Node<Item> minimum;
--[ 2021.10.11.22.23.03.146.0 ]--
- 15
--[ 2021.10.11.22.23.20.978.0 ]--
r 37         if(compareTo(minimumItem.)==1) {
--[ 2021.10.11.22.23.21.610.0 ]--
r 37         if(compareTo(minimumItem.i)==1) {
--[ 2021.10.11.22.23.21.787.0 ]--
r 37         if(compareTo(minimumItem.it)==1) {
--[ 2021.10.11.22.23.22.620.0 ]--
r 37         if(compareTo(minimumItem.ite)==1) {
--[ 2021.10.11.22.23.22.734.0 ]--
r 37         if(compareTo(minimumItem.item)==1) {
--[ 2021.10.11.22.23.28.702.0 ]--
r 10         private Node<Item> minimumI;
--[ 2021.10.11.22.23.28.955.0 ]--
r 10         private Node<Item> minimumIt;
--[ 2021.10.11.22.23.29.098.0 ]--
r 10         private Node<Item> minimumIte;
--[ 2021.10.11.22.23.29.186.0 ]--
r 10         private Node<Item> minimumItem;
--[ 2021.10.11.22.23.33.107.0 ]--
r 38             minimumItem. = item;
--[ 2021.10.11.22.23.33.856.0 ]--
r 38             minimumItem.i = item;
--[ 2021.10.11.22.23.34.309.0 ]--
r 38             minimumItem.it = item;
--[ 2021.10.11.22.23.34.640.0 ]--
r 38             minimumItem.ite = item;
--[ 2021.10.11.22.23.34.889.0 ]--
r 38             minimumItem.item = item;
--[ 2021.10.11.22.23.58.675.0 ]--
+ 11         
--[ 2021.10.11.22.23.58.858.0 ]--
+ 11         public Node(Item item) {this.item = item;}
+ 12         public Node(Item item, Node<Item> next) {
+ 13             this.item = item;
+ 14             this.next = next;
r 15         }
--[ 2021.10.11.22.23.58.873.0 ]--
r 12         public Node(Item item, Steque.Node<Item> next) {
--[ 2021.10.11.22.24.00.829.0 ]--
r 8         private Item item ;
--[ 2021.10.11.22.24.00.904.0 ]--
r 8         private Item item =;
--[ 2021.10.11.22.24.01.021.0 ]--
r 8         private Item item = ;
--[ 2021.10.11.22.24.01.314.0 ]--
r 8         private Item item = n;
--[ 2021.10.11.22.24.01.478.0 ]--
r 8         private Item item = nu;
--[ 2021.10.11.22.24.01.609.0 ]--
r 8         private Item item = nul;
--[ 2021.10.11.22.24.01.734.0 ]--
r 8         private Item item = null;
--[ 2021.10.11.22.24.03.112.0 ]--
r 9         private Node<Item> next ;
--[ 2021.10.11.22.24.03.240.0 ]--
r 9         private Node<Item> next =;
--[ 2021.10.11.22.24.03.358.0 ]--
r 9         private Node<Item> next = ;
--[ 2021.10.11.22.24.03.756.0 ]--
r 9         private Node<Item> next = n;
--[ 2021.10.11.22.24.03.934.0 ]--
r 9         private Node<Item> next = nu;
--[ 2021.10.11.22.24.04.074.0 ]--
r 9         private Node<Item> next = nul;
--[ 2021.10.11.22.24.04.218.0 ]--
r 9         private Node<Item> next = null;
--[ 2021.10.11.22.24.05.540.0 ]--
r 10         private Node<Item> minimumItem ;
--[ 2021.10.11.22.24.05.727.0 ]--
r 10         private Node<Item> minimumItem =;
--[ 2021.10.11.22.24.05.879.0 ]--
r 10         private Node<Item> minimumItem = ;
--[ 2021.10.11.22.24.05.995.0 ]--
r 10         private Node<Item> minimumItem = n;
--[ 2021.10.11.22.24.06.191.0 ]--
r 10         private Node<Item> minimumItem = nu;
--[ 2021.10.11.22.24.06.329.0 ]--
r 10         private Node<Item> minimumItem = nul;
--[ 2021.10.11.22.24.06.464.0 ]--
r 10         private Node<Item> minimumItem = null;
--[ 2021.10.11.22.24.14.521.0 ]--
r 12         public Node(Item item, StequeNode<Item> next) {
--[ 2021.10.11.22.24.14.652.0 ]--
r 12         public Node(Item item, StequNode<Item> next) {
--[ 2021.10.11.22.24.14.806.0 ]--
r 12         public Node(Item item, SteqNode<Item> next) {
--[ 2021.10.11.22.24.14.945.0 ]--
r 12         public Node(Item item, SteNode<Item> next) {
--[ 2021.10.11.22.24.15.089.0 ]--
r 12         public Node(Item item, StNode<Item> next) {
--[ 2021.10.11.22.24.15.250.0 ]--
r 12         public Node(Item item, SNode<Item> next) {
--[ 2021.10.11.22.24.15.649.0 ]--
r 12         public Node(Item item, =Node<Item> next) {
--[ 2021.10.11.22.24.16.340.0 ]--
r 12         public Node(Item item, Node<Item> next) {
--[ 2021.10.11.22.24.18.287.0 ]--
+ 15             
--[ 2021.10.11.22.24.18.554.0 ]--
r 15             t
--[ 2021.10.11.22.24.19.048.0 ]--
r 15             th
--[ 2021.10.11.22.24.19.131.0 ]--
r 15             thi
--[ 2021.10.11.22.24.19.318.0 ]--
r 15             this
--[ 2021.10.11.22.24.19.755.0 ]--
r 15             this.
--[ 2021.10.11.22.24.19.915.0 ]--
r 15             this. 
--[ 2021.10.11.22.24.20.413.0 ]--
r 15             this.
--[ 2021.10.11.22.24.20.959.0 ]--
r 15             this.m
--[ 2021.10.11.22.24.21.122.0 ]--
r 15             this.mi
--[ 2021.10.11.22.24.21.645.0 ]--
r 15             this.minimumItem
--[ 2021.10.11.22.24.22.206.0 ]--
r 15             this.minimumItem 
--[ 2021.10.11.22.24.22.826.0 ]--
r 15             this.minimumItem =
--[ 2021.10.11.22.24.22.953.0 ]--
r 15             this.minimumItem = 
--[ 2021.10.11.22.24.23.300.0 ]--
r 15             this.minimumItem = m
--[ 2021.10.11.22.24.23.466.0 ]--
r 15             this.minimumItem = mi
--[ 2021.10.11.22.24.23.524.0 ]--
r 15             this.minimumItem = min
--[ 2021.10.11.22.24.24.497.0 ]--
r 15             this.minimumItem = next.minimumItem
--[ 2021.10.11.22.24.24.505.0 ]--
r 15             this.minimumItem = next;
--[ 2021.10.11.22.24.24.510.0 ]--
r 15             this.minimumItem = next.minimumItem
--[ 2021.10.11.22.24.24.524.0 ]--
r 15             this.minimumItem = next.minimumItem;
--[ 2021.10.11.22.24.28.106.0 ]--
r 15             this.minimumItem = nextminimumItem;
--[ 2021.10.11.22.24.28.243.0 ]--
r 15             this.minimumItem = nexminimumItem;
--[ 2021.10.11.22.24.28.382.0 ]--
r 15             this.minimumItem = neminimumItem;
--[ 2021.10.11.22.24.28.528.0 ]--
r 15             this.minimumItem = nminimumItem;
--[ 2021.10.11.22.24.28.663.0 ]--
r 15             this.minimumItem = minimumItem;
--[ 2021.10.11.22.24.32.518.0 ]--
r 12         public Node(Item item, Node<Item> next,) {
--[ 2021.10.11.22.24.32.649.0 ]--
r 12         public Node(Item item, Node<Item> next, ) {
--[ 2021.10.11.22.24.33.102.0 ]--
r 12         public Node(Item item, Node<Item> next, N) {
--[ 2021.10.11.22.24.33.960.0 ]--
r 12         public Node(Item item, Node<Item> next, Node) {
--[ 2021.10.11.22.24.35.093.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<>) {
--[ 2021.10.11.22.24.35.436.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<I>) {
--[ 2021.10.11.22.24.36.091.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<Item>) {
--[ 2021.10.11.22.24.36.884.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<Item> ) {
--[ 2021.10.11.22.24.37.196.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<Item> minimumItem) {
--[ 2021.10.11.22.25.19.202.0 ]--
r 39         first = new Node<Item>(i);
--[ 2021.10.11.22.25.19.249.0 ]--
r 39         first = new Node<Item>(it);
--[ 2021.10.11.22.25.19.737.0 ]--
r 39         first = new Node<Item>(item);
--[ 2021.10.11.22.25.21.400.0 ]--
r 39         first = new Node<Ite>(item);
--[ 2021.10.11.22.25.21.512.0 ]--
r 39         first = new Node<It>(item);
--[ 2021.10.11.22.25.21.651.0 ]--
r 39         first = new Node<I>(item);
--[ 2021.10.11.22.25.21.809.0 ]--
r 39         first = new Node<>(item);
--[ 2021.10.11.22.26.11.180.0 ]--
r 43         if(compareTo(m)==1) {
--[ 2021.10.11.22.26.14.484.0 ]--
r 43         if(compareTo(mi)==1) {
--[ 2021.10.11.22.26.16.829.0 ]--
r 43         if(compareTo(minimumItem.item)==1) {
--[ 2021.10.11.22.28.14.547.0 ]--
r 43         if(compareTo(f.item)==1) {
--[ 2021.10.11.22.28.14.674.0 ]--
r 43         if(compareTo(fi.item)==1) {
--[ 2021.10.11.22.28.15.626.0 ]--
r 43         if(compareTo(first.item)==1) {
--[ 2021.10.11.22.28.20.939.0 ]--
r 44             f.item = item;
--[ 2021.10.11.22.28.21.045.0 ]--
r 44             fi.item = item;
--[ 2021.10.11.22.28.21.686.0 ]--
r 44             first.item = item;
--[ 2021.10.11.22.29.00.356.0 ]--
r 40         
--[ 2021.10.11.22.29.00.784.0 ]--
- 40
--[ 2021.10.11.22.29.08.985.0 ]--
r 39         first = new Node<>(item,);
--[ 2021.10.11.22.29.09.246.0 ]--
r 39         first = new Node<>(item, );
--[ 2021.10.11.22.29.09.645.0 ]--
r 39         first = new Node<>(item, o);
--[ 2021.10.11.22.29.09.779.0 ]--
r 39         first = new Node<>(item, ol);
--[ 2021.10.11.22.29.09.847.0 ]--
r 39         first = new Node<>(item, old);
--[ 2021.10.11.22.29.10.366.0 ]--
r 39         first = new Node<>(item, oldfirst);
--[ 2021.10.11.22.29.13.698.0 ]--
- 40
--[ 2021.10.11.22.29.22.632.0 ]--
r 39         first = new Node<>(item, oldfirst,);
--[ 2021.10.11.22.29.22.835.0 ]--
r 39         first = new Node<>(item, oldfirst, );
--[ 2021.10.11.22.29.42.826.0 ]--
r 39         first = new Node<>(item, oldfirst, o);
--[ 2021.10.11.22.29.43.010.0 ]--
r 39         first = new Node<>(item, oldfirst, ol);
--[ 2021.10.11.22.29.43.548.0 ]--
r 39         first = new Node<>(item, oldfirst, oldfirst);
--[ 2021.10.11.22.29.43.700.0 ]--
r 39         first = new Node<>(item, oldfirst, oldfirst.);
--[ 2021.10.11.22.29.44.892.0 ]--
r 39         first = new Node<>(item, oldfirst, oldfirst.minimumItem);
--[ 2021.10.11.22.32.10.814.0 ]--
r 41         if(compareTo(firstitem)==1) {
--[ 2021.10.11.22.32.10.898.0 ]--
r 41         if(compareTo(firsitem)==1) {
--[ 2021.10.11.22.32.11.029.0 ]--
r 41         if(compareTo(firitem)==1) {
--[ 2021.10.11.22.32.11.167.0 ]--
r 41         if(compareTo(fiitem)==1) {
--[ 2021.10.11.22.32.11.305.0 ]--
r 41         if(compareTo(fitem)==1) {
--[ 2021.10.11.22.32.11.452.0 ]--
r 41         if(compareTo(item)==1) {
--[ 2021.10.11.22.32.17.025.0 ]--
r 42             first.ite = item;
--[ 2021.10.11.22.32.17.236.0 ]--
r 42             first.it = item;
--[ 2021.10.11.22.32.17.396.0 ]--
r 42             first.i = item;
--[ 2021.10.11.22.32.17.561.0 ]--
r 42             first. = item;
--[ 2021.10.11.22.32.18.633.0 ]--
r 42             first.m = item;
--[ 2021.10.11.22.32.19.311.0 ]--
r 42             first.minimumItem = item;
--[ 2021.10.11.22.32.31.809.0 ]--
r 42             first.minimumItem = f;
--[ 2021.10.11.22.32.31.898.0 ]--
r 42             first.minimumItem = fi;
--[ 2021.10.11.22.32.32.373.0 ]--
r 42             first.minimumItem = first;
--[ 2021.10.11.22.32.32.573.0 ]--
r 42             first.minimumItem = first.;
--[ 2021.10.11.22.32.33.191.0 ]--
r 42             first.minimumItem = first.i;
--[ 2021.10.11.22.32.33.723.0 ]--
r 42             first.minimumItem = first.item;
--[ 2021.10.11.22.32.34.397.0 ]--
r 42             first.minimumItem = first.ite;
--[ 2021.10.11.22.32.34.541.0 ]--
r 42             first.minimumItem = first.it;
--[ 2021.10.11.22.32.34.699.0 ]--
r 42             first.minimumItem = first.i;
--[ 2021.10.11.22.32.34.822.0 ]--
r 42             first.minimumItem = first.;
--[ 2021.10.11.22.32.35.375.0 ]--
r 42             first.minimumItem = first;
--[ 2021.10.11.22.32.37.701.0 ]--
r 42             first.minimumItem = firs;
--[ 2021.10.11.22.32.37.853.0 ]--
r 42             first.minimumItem = fir;
--[ 2021.10.11.22.32.38.031.0 ]--
r 42             first.minimumItem = fi;
--[ 2021.10.11.22.32.38.181.0 ]--
r 42             first.minimumItem = f;
--[ 2021.10.11.22.32.38.344.0 ]--
r 42             first.minimumItem = ;
--[ 2021.10.11.22.32.46.694.0 ]--
r 10         private I minimumItem = null;
--[ 2021.10.11.22.32.46.938.0 ]--
r 10         private It minimumItem = null;
--[ 2021.10.11.22.32.47.041.0 ]--
r 10         private Ite minimumItem = null;
--[ 2021.10.11.22.32.47.142.0 ]--
r 10         private Item minimumItem = null;
--[ 2021.10.11.22.32.54.088.0 ]--
r 12         public Node(Item item, Node<Item> next, Node<Item minimumItem) {
--[ 2021.10.11.22.32.55.098.0 ]--
r 12         public Node(Item item, Node<Item> next, NodeItem minimumItem) {
--[ 2021.10.11.22.32.55.257.0 ]--
r 12         public Node(Item item, Node<Item> next, NodItem minimumItem) {
--[ 2021.10.11.22.32.55.377.0 ]--
r 12         public Node(Item item, Node<Item> next, NoItem minimumItem) {
--[ 2021.10.11.22.32.55.528.0 ]--
r 12         public Node(Item item, Node<Item> next, NItem minimumItem) {
--[ 2021.10.11.22.32.55.686.0 ]--
r 12         public Node(Item item, Node<Item> next, Item minimumItem) {
--[ 2021.10.11.22.33.03.545.0 ]--
r 42             first.minimumItem = i;
--[ 2021.10.11.22.33.03.604.0 ]--
r 42             first.minimumItem = it;
--[ 2021.10.11.22.33.03.753.0 ]--
r 42             first.minimumItem = ite;
--[ 2021.10.11.22.33.03.846.0 ]--
r 42             first.minimumItem = item;
--[ 2021.10.11.22.33.16.172.0 ]--
r 53 
--[ 2021.10.11.22.33.16.609.0 ]--
- 53
--[ 2021.10.11.22.33.17.623.0 ]--
+ 53 
--[ 2021.10.11.22.33.18.039.0 ]--
r 53         // TODO do something if minimum gets popped
--[ 2021.10.11.22.33.59.688.0 ]--
r 62         return f;
--[ 2021.10.11.22.33.59.816.0 ]--
r 62         return fi;
--[ 2021.10.11.22.34.00.791.0 ]--
r 62         return first.minimumItem;
--[ 2021.10.11.22.34.00.798.0 ]--
r 62         return first;;
--[ 2021.10.11.22.34.00.803.0 ]--
r 62         return first.minimumItem;
--[ 2021.10.11.22.34.10.932.0 ]--
+ 66         
--[ 2021.10.11.22.34.43.690.0 ]--
r 66         i
--[ 2021.10.11.22.34.43.838.0 ]--
r 66         if
--[ 2021.10.11.22.34.43.869.0 ]--
r 66         if 
--[ 2021.10.11.22.34.45.360.0 ]--
r 66         if ()
--[ 2021.10.11.22.34.47.655.0 ]--
r 66         if (f)
--[ 2021.10.11.22.34.47.718.0 ]--
r 66         if (fi)
--[ 2021.10.11.22.34.48.510.0 ]--
r 66         if (first)
--[ 2021.10.11.22.34.48.804.0 ]--
r 66         if (first.)
--[ 2021.10.11.22.34.49.583.0 ]--
r 66         if (first.m)
--[ 2021.10.11.22.34.50.080.0 ]--
r 66         if (first.minimumItem)
--[ 2021.10.11.22.35.07.884.0 ]--
r 66         if (o.minimumItem)
--[ 2021.10.11.22.35.08.827.0 ]--
r 66         if (ol.minimumItem)
--[ 2021.10.11.22.35.09.665.0 ]--
r 66         if (old.minimumItem)
--[ 2021.10.11.22.35.10.451.0 ]--
r 66         if (ol.minimumItem)
--[ 2021.10.11.22.35.10.596.0 ]--
r 66         if (o.minimumItem)
--[ 2021.10.11.22.35.10.767.0 ]--
r 66         if (.minimumItem)
--[ 2021.10.11.22.35.25.037.0 ]--
r 66         if (f.minimumItem)
--[ 2021.10.11.22.35.25.100.0 ]--
r 66         if (fi.minimumItem)
--[ 2021.10.11.22.35.25.770.0 ]--
r 66         if (first.minimumItem)
--[ 2021.10.11.22.35.26.020.0 ]--
r 66         if (first..minimumItem)
--[ 2021.10.11.22.35.26.827.0 ]--
r 66         if (first.o.minimumItem)
--[ 2021.10.11.22.35.28.175.0 ]--
r 66         if (first.ol.minimumItem)
--[ 2021.10.11.22.35.30.330.0 ]--
r 66         if (first.)
--[ 2021.10.11.22.35.31.137.0 ]--
r 66         if (first.o)
--[ 2021.10.11.22.35.31.773.0 ]--
r 66         if (first.ol)
--[ 2021.10.11.22.35.32.327.0 ]--
r 66         if (first.o)
--[ 2021.10.11.22.35.32.447.0 ]--
r 66         if (first.)
--[ 2021.10.11.22.35.33.167.0 ]--
r 66         if (first.m)
--[ 2021.10.11.22.35.33.786.0 ]--
r 66         if (first.minimumItem)
--[ 2021.10.11.22.35.34.819.0 ]--
r 66         if (first.minimumItem )
--[ 2021.10.11.22.35.35.803.0 ]--
r 66         if (first.minimumItem >)
--[ 2021.10.11.22.35.36.158.0 ]--
r 66         if (first.minimumItem > )
--[ 2021.10.11.22.35.37.293.0 ]--
r 66         if (first.minimumItem > o)
--[ 2021.10.11.22.35.38.114.0 ]--
r 66         if (first.minimumItem > other)
--[ 2021.10.11.22.35.39.718.0 ]--
r 66         if (first.minimumItem > other) 
--[ 2021.10.11.22.35.40.150.0 ]--
r 66         if (first.minimumItem > other) {
--[ 2021.10.11.22.35.43.458.0 ]--
r 66         if (first.minimumItem  other) {
--[ 2021.10.11.22.35.44.101.0 ]--
r 66         if (first.minimumItem < other) {
--[ 2021.10.11.22.35.47.504.0 ]--
+ 68         
--[ 2021.10.11.22.35.48.273.0 ]--
- 68
--[ 2021.10.11.22.35.48.905.0 ]--
+ 68         
--[ 2021.10.11.22.35.49.653.0 ]--
r 68         }
--[ 2021.10.11.22.35.49.662.0 ]--
r 67             return 1;
--[ 2021.10.11.22.35.51.685.0 ]--
r 68         } 
--[ 2021.10.11.22.35.51.912.0 ]--
r 68         } e
--[ 2021.10.11.22.35.52.028.0 ]--
r 68         } el
--[ 2021.10.11.22.35.52.246.0 ]--
r 68         } els
--[ 2021.10.11.22.35.52.519.0 ]--
r 68         } else
--[ 2021.10.11.22.35.52.641.0 ]--
r 68         } else 
--[ 2021.10.11.22.35.52.944.0 ]--
r 68         } else i
--[ 2021.10.11.22.35.53.053.0 ]--
r 68         } else if
--[ 2021.10.11.22.35.53.307.0 ]--
r 68         } else if 
--[ 2021.10.11.22.35.53.550.0 ]--
r 68         } else if ()
--[ 2021.10.11.22.35.56.897.0 ]--
r 68         } else if () 
--[ 2021.10.11.22.35.57.210.0 ]--
r 68         } else if () {
--[ 2021.10.11.22.35.57.375.0 ]--
+ 69 
+ 70 }
--[ 2021.10.11.22.35.57.386.0 ]--
r 70         }
--[ 2021.10.11.22.35.57.415.0 ]--
r 69             
--[ 2021.10.11.22.35.58.040.0 ]--
r 69             r
--[ 2021.10.11.22.35.58.173.0 ]--
r 69             re
--[ 2021.10.11.22.35.58.318.0 ]--
r 69             reu
--[ 2021.10.11.22.35.58.387.0 ]--
r 69             reut
--[ 2021.10.11.22.35.58.874.0 ]--
r 69             reu
--[ 2021.10.11.22.35.59.001.0 ]--
r 69             re
--[ 2021.10.11.22.35.59.461.0 ]--
r 69             ret
--[ 2021.10.11.22.35.59.598.0 ]--
r 69             retu
--[ 2021.10.11.22.35.59.645.0 ]--
r 69             retur
--[ 2021.10.11.22.35.59.733.0 ]--
r 69             return
--[ 2021.10.11.22.36.00.631.0 ]--
r 69             return 
--[ 2021.10.11.22.36.02.952.0 ]--
+ 71         
--[ 2021.10.11.22.36.03.250.0 ]--
r 71         r
--[ 2021.10.11.22.36.03.358.0 ]--
r 71         re
--[ 2021.10.11.22.36.03.481.0 ]--
r 71         ret
--[ 2021.10.11.22.36.04.250.0 ]--
r 71         retru
--[ 2021.10.11.22.36.04.467.0 ]--
r 71         retr
--[ 2021.10.11.22.36.04.593.0 ]--
r 71         ret
--[ 2021.10.11.22.36.04.746.0 ]--
r 71         retu
--[ 2021.10.11.22.36.04.824.0 ]--
r 71         retur
--[ 2021.10.11.22.36.04.951.0 ]--
r 71         return
--[ 2021.10.11.22.36.05.044.0 ]--
r 71         return 
--[ 2021.10.11.22.36.05.603.0 ]--
r 71         return 1
--[ 2021.10.11.22.36.06.731.0 ]--
r 71         return 1;
--[ 2021.10.11.22.36.13.403.0 ]--
r 66         if (first.minimumItem  other) {
--[ 2021.10.11.22.36.13.981.0 ]--
r 66         if (first.minimumItem > other) {
--[ 2021.10.11.22.36.15.834.0 ]--
r 67             return -1;
--[ 2021.10.11.22.36.22.443.0 ]--
r 68         } else if (first.minimumItem > other) {
--[ 2021.10.11.22.36.25.265.0 ]--
r 68         } else if (first.minimumItem  other) {
--[ 2021.10.11.22.36.26.006.0 ]--
r 68         } else if (first.minimumItem = other) {
--[ 2021.10.11.22.36.26.125.0 ]--
r 68         } else if (first.minimumItem == other) {
--[ 2021.10.11.22.36.27.655.0 ]--
r 69             return 0
--[ 2021.10.11.22.36.27.855.0 ]--
r 69             return 0;
--[ 2021.10.11.22.37.03.271.0 ]--
r 66         if (first.minimumItem  other) {
--[ 2021.10.11.22.37.04.002.0 ]--
r 66         if (first.minimumItem < other) {
--[ 2021.10.11.22.42.10.810.0 ]--
r 41         if(fcompareTo(item)==1) {
--[ 2021.10.11.22.42.11.043.0 ]--
r 41         if(ficompareTo(item)==1) {
--[ 2021.10.11.22.42.15.495.0 ]--
r 41         if(fcompareTo(item)==1) {
--[ 2021.10.11.22.42.15.992.0 ]--
r 41         if(compareTo(item)==1) {
--[ 2021.10.11.22.42.16.217.0 ]--
r 41         if(ocompareTo(item)==1) {
--[ 2021.10.11.22.42.16.877.0 ]--
r 41         if(olcompareTo(item)==1) {
--[ 2021.10.11.22.42.17.386.0 ]--
r 41         if(oldfirstcompareTo(item)==1) {
--[ 2021.10.11.22.42.17.615.0 ]--
r 41         if(oldfirst.compareTo(item)==1) {
--[ 2021.10.11.22.42.51.382.0 ]--
- 65
- 65
- 65
- 65
- 65
- 65
- 65
- 65
--[ 2021.10.11.22.42.51.873.0 ]--
- 64
--[ 2021.10.11.22.43.00.652.0 ]--
r 41         if(oldfirst.(item)==1) {
--[ 2021.10.11.22.43.01.283.0 ]--
r 41         if(oldfirst.c(item)==1) {
--[ 2021.10.11.22.43.02.133.0 ]--
r 41         if(oldfirst.co(item)==1) {
--[ 2021.10.11.22.43.02.678.0 ]--
r 41         if(oldfirst.com(item)==1) {
--[ 2021.10.11.22.43.03.208.0 ]--
r 41         if(oldfirst.co(item)==1) {
--[ 2021.10.11.22.43.05.198.0 ]--
r 41         if(oldfirst.com(item)==1) {
--[ 2021.10.11.22.43.05.617.0 ]--
r 41         if(oldfirst.(item)==1) {
--[ 2021.10.11.22.43.06.139.0 ]--
r 41         if(oldfirst.compareTo(item)==1) {
--[ 2021.10.11.22.43.16.384.0 ]--
r 41         if(oldfirst..compareTo(item)==1) {
--[ 2021.10.11.22.43.16.659.0 ]--
r 41         if(oldfirst.i.compareTo(item)==1) {
--[ 2021.10.11.22.43.16.758.0 ]--
r 41         if(oldfirst.it.compareTo(item)==1) {
--[ 2021.10.11.22.43.17.305.0 ]--
r 41         if(oldfirst.item.compareTo(item)==1) {
--[ 2021.10.11.22.44.24.388.0 ]--
r 96     
--[ 2021.10.11.22.44.24.817.0 ]--
r 96         
--[ 2021.10.11.22.44.33.623.0 ]--
r 96         M
--[ 2021.10.11.22.44.34.619.0 ]--
r 96         MinimumStack
--[ 2021.10.11.22.44.35.559.0 ]--
r 96         MinimumStack<>
--[ 2021.10.11.22.44.37.441.0 ]--
r 96         MinimumStack<i>
--[ 2021.10.11.22.44.38.157.0 ]--
r 96         MinimumStack<>
--[ 2021.10.11.22.44.38.470.0 ]--
r 96         MinimumStack<I>
--[ 2021.10.11.22.44.38.908.0 ]--
r 96         MinimumStack<In>
--[ 2021.10.11.22.44.39.821.0 ]--
r 96         MinimumStack<Int>
--[ 2021.10.11.22.44.40.315.0 ]--
r 96         MinimumStack<Integer>
--[ 2021.10.11.22.44.41.256.0 ]--
r 96         MinimumStack<Integer> 
--[ 2021.10.11.22.44.42.028.0 ]--
r 96         MinimumStack<Integer> t
--[ 2021.10.11.22.44.42.266.0 ]--
r 96         MinimumStack<Integer> te
--[ 2021.10.11.22.44.42.958.0 ]--
r 96         MinimumStack<Integer> tes
--[ 2021.10.11.22.44.43.082.0 ]--
r 96         MinimumStack<Integer> test
--[ 2021.10.11.22.44.43.686.0 ]--
r 96         MinimumStack<Integer> testI
--[ 2021.10.11.22.44.43.854.0 ]--
r 96         MinimumStack<Integer> testIn
--[ 2021.10.11.22.44.43.936.0 ]--
r 96         MinimumStack<Integer> testInt
--[ 2021.10.11.22.44.44.241.0 ]--
r 96         MinimumStack<Integer> testInt 
--[ 2021.10.11.22.44.44.829.0 ]--
r 96         MinimumStack<Integer> testInt =
--[ 2021.10.11.22.44.44.900.0 ]--
r 96         MinimumStack<Integer> testInt = 
--[ 2021.10.11.22.44.45.134.0 ]--
r 96         MinimumStack<Integer> testInt = f
--[ 2021.10.11.22.44.45.630.0 ]--
r 96         MinimumStack<Integer> testInt = 
--[ 2021.10.11.22.44.48.972.0 ]--
r 96         MinimumStack<Integer> testInt =
--[ 2021.10.11.22.44.49.094.0 ]--
r 96         MinimumStack<Integer> testInt 
--[ 2021.10.11.22.44.49.273.0 ]--
r 96         MinimumStack<Integer> testInt
--[ 2021.10.11.22.44.49.891.0 ]--
r 96         MinimumStack<Integer> testInt;
--[ 2021.10.11.22.44.51.029.0 ]--
r 96         MinimumStack<Integer> testInt
--[ 2021.10.11.22.44.51.170.0 ]--
r 96         MinimumStack<Integer> testInt 
--[ 2021.10.11.22.44.51.681.0 ]--
r 96         MinimumStack<Integer> testInt =
--[ 2021.10.11.22.44.51.805.0 ]--
r 96         MinimumStack<Integer> testInt = 
--[ 2021.10.11.22.44.51.939.0 ]--
r 96         MinimumStack<Integer> testInt = n
--[ 2021.10.11.22.44.52.138.0 ]--
r 96         MinimumStack<Integer> testInt = ne
--[ 2021.10.11.22.44.52.686.0 ]--
r 96         MinimumStack<Integer> testInt = new
--[ 2021.10.11.22.44.52.697.0 ]--
r 96         MinimumStack<Integer> testInt = new 
--[ 2021.10.11.22.44.54.931.0 ]--
r 96         MinimumStack<Integer> testInt = new M
--[ 2021.10.11.22.44.56.078.0 ]--
r 96         MinimumStack<Integer> testInt = new MinimumStack
--[ 2021.10.11.22.44.56.090.0 ]--
r 96         MinimumStack<Integer> testInt = new MinimumStack<>
--[ 2021.10.11.22.44.56.095.0 ]--
r 96         MinimumStack<Integer> testInt = new MinimumStack<>()
--[ 2021.10.11.22.44.57.150.0 ]--
r 96         MinimumStack<Integer> testInt = new MinimumStack<>();
--[ 2021.10.11.22.44.58.671.0 ]--
+ 97         
--[ 2021.10.11.22.45.03.189.0 ]--
r 97         t
--[ 2021.10.11.22.45.03.827.0 ]--
r 97         testInt
--[ 2021.10.11.22.45.04.001.0 ]--
r 97         testInt.
--[ 2021.10.11.22.45.10.600.0 ]--
r 97         testInt
--[ 2021.10.11.22.45.10.745.0 ]--
r 97         testIn
--[ 2021.10.11.22.45.10.860.0 ]--
r 97         testI
--[ 2021.10.11.22.45.10.994.0 ]--
r 97         test
--[ 2021.10.11.22.45.11.137.0 ]--
r 97         tes
--[ 2021.10.11.22.45.11.269.0 ]--
r 97         te
--[ 2021.10.11.22.45.11.435.0 ]--
r 97         t
--[ 2021.10.11.22.45.11.562.0 ]--
r 97         
--[ 2021.10.11.22.45.14.305.0 ]--
r 97         t
--[ 2021.10.11.22.45.14.538.0 ]--
r 97         te
--[ 2021.10.11.22.45.15.048.0 ]--
r 97         testInt
--[ 2021.10.11.22.45.15.250.0 ]--
r 97         testInt.
--[ 2021.10.11.22.45.16.165.0 ]--
r 97         testInt.i
--[ 2021.10.11.22.45.16.480.0 ]--
r 97         testInt.is
--[ 2021.10.11.22.45.17.244.0 ]--
r 97         testInt.isEmpty
--[ 2021.10.11.22.45.17.251.0 ]--
r 97         testInt.isEmpty()
--[ 2021.10.11.22.45.36.968.0 ]--
r 97         atestInt.isEmpty()
--[ 2021.10.11.22.45.37.366.0 ]--
r 97         astestInt.isEmpty()
--[ 2021.10.11.22.45.37.523.0 ]--
r 97         asstestInt.isEmpty()
--[ 2021.10.11.22.45.37.937.0 ]--
r 97         asserttestInt.isEmpty()
--[ 2021.10.11.22.45.37.946.0 ]--
r 97         assert testInt.isEmpty()
--[ 2021.10.11.22.45.39.830.0 ]--
r 97         assert testInt.isEmpty();
--[ 2021.10.11.22.45.44.971.0 ]--
+ 98         
--[ 2021.10.11.22.45.45.095.0 ]--
r 98         a
--[ 2021.10.11.22.45.45.436.0 ]--
r 98         as
--[ 2021.10.11.22.45.45.595.0 ]--
r 98         ass
--[ 2021.10.11.22.45.45.937.0 ]--
r 98         assert
--[ 2021.10.11.22.45.45.947.0 ]--
r 98         assert 
--[ 2021.10.11.22.45.47.538.0 ]--
r 98         assert t
--[ 2021.10.11.22.45.48.240.0 ]--
r 98         assert testInt
--[ 2021.10.11.22.45.48.967.0 ]--
r 98         assert testInt.
--[ 2021.10.11.22.45.50.284.0 ]--
r 98         assert testInt.s
--[ 2021.10.11.22.45.52.032.0 ]--
r 98         assert testInt.size
--[ 2021.10.11.22.45.52.039.0 ]--
r 98         assert testInt.size()
--[ 2021.10.11.22.45.53.065.0 ]--
r 98         assert testInt.size()=
--[ 2021.10.11.22.45.53.153.0 ]--
r 98         assert testInt.size()==
--[ 2021.10.11.22.45.53.342.0 ]--
r 98         assert testInt.size()==0
--[ 2021.10.11.22.45.53.983.0 ]--
r 98         assert testInt.size()==0;
--[ 2021.10.11.22.45.54.340.0 ]--
+ 99         
--[ 2021.10.11.22.45.55.012.0 ]--
r 99         a
--[ 2021.10.11.22.45.55.441.0 ]--
r 99         
--[ 2021.10.11.22.45.55.618.0 ]--
r 99         t
--[ 2021.10.11.22.45.55.772.0 ]--
r 99         te
--[ 2021.10.11.22.45.56.930.0 ]--
r 99         testInt
--[ 2021.10.11.22.45.57.324.0 ]--
r 99         testInt.
--[ 2021.10.11.22.45.58.076.0 ]--
r 99         testInt.p
--[ 2021.10.11.22.45.58.868.0 ]--
r 99         testInt.pop
--[ 2021.10.11.22.45.58.875.0 ]--
r 99         testInt.pop()
--[ 2021.10.11.22.45.59.379.0 ]--
r 99         testInt.pop(
--[ 2021.10.11.22.45.59.504.0 ]--
r 99         testInt.pop
--[ 2021.10.11.22.45.59.637.0 ]--
r 99         testInt.po
--[ 2021.10.11.22.45.59.761.0 ]--
r 99         testInt.p
--[ 2021.10.11.22.45.59.944.0 ]--
r 99         testInt.pu
--[ 2021.10.11.22.46.00.033.0 ]--
r 99         testInt.pus
--[ 2021.10.11.22.46.00.674.0 ]--
r 99         testInt.push
--[ 2021.10.11.22.46.00.680.0 ]--
r 99         testInt.push()
--[ 2021.10.11.22.46.00.685.0 ]--
r 99         testInt.push();
--[ 2021.10.11.22.46.12.888.0 ]--
r 99         testInt.pus();
--[ 2021.10.11.22.46.13.017.0 ]--
r 99         testInt.pu();
--[ 2021.10.11.22.46.13.130.0 ]--
r 99         testInt.p();
--[ 2021.10.11.22.46.13.542.0 ]--
r 99         testInt.po();
--[ 2021.10.11.22.46.14.430.0 ]--
r 99         testInt.pop();
--[ 2021.10.11.22.46.19.920.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.22.46.49.198.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException(" underflow");
--[ 2021.10.11.22.46.50.506.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("p");
--[ 2021.10.11.22.46.50.648.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("po");
--[ 2021.10.11.22.46.50.726.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop");
--[ 2021.10.11.22.46.51.414.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop ");
--[ 2021.10.11.22.46.51.661.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop c");
--[ 2021.10.11.22.46.51.827.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop ca");
--[ 2021.10.11.22.46.51.962.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop cal");
--[ 2021.10.11.22.46.52.120.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop call");
--[ 2021.10.11.22.46.52.215.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop calle");
--[ 2021.10.11.22.46.52.348.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called");
--[ 2021.10.11.22.46.52.427.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called ");
--[ 2021.10.11.22.46.52.547.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called o");
--[ 2021.10.11.22.46.52.600.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called on");
--[ 2021.10.11.22.46.52.669.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called on ");
--[ 2021.10.11.22.46.52.889.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called on e");
--[ 2021.10.11.22.46.52.978.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called on em");
--[ 2021.10.11.22.46.53.124.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called on emp");
--[ 2021.10.11.22.46.53.268.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called on empt");
--[ 2021.10.11.22.46.53.438.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called on empty");
--[ 2021.10.11.22.46.53.666.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called on empty ");
--[ 2021.10.11.22.46.56.375.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called on empty s");
--[ 2021.10.11.22.46.56.577.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called on empty st");
--[ 2021.10.11.22.46.56.869.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called on empty sta");
--[ 2021.10.11.22.46.56.895.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called on empty stac");
--[ 2021.10.11.22.46.56.958.0 ]--
r 49         if (isEmpty()) throw new NoSuchElementException("pop called on empty stack");
--[ 2021.10.11.22.47.05.183.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.22.47.08.271.0 ]--
r 99 //        testInt.pop();
--[ 2021.10.11.22.47.09.997.0 ]--
+ 100 
--[ 2021.10.11.22.47.10.024.0 ]--
r 100         
--[ 2021.10.11.22.47.14.514.0 ]--
r 100         a
--[ 2021.10.11.22.47.15.309.0 ]--
r 100         assert
--[ 2021.10.11.22.47.15.317.0 ]--
r 100         assert 
--[ 2021.10.11.22.47.15.968.0 ]--
r 100         assert t
--[ 2021.10.11.22.47.16.681.0 ]--
r 100         assert testInt
--[ 2021.10.11.22.47.16.922.0 ]--
r 100         assert testInt.
--[ 2021.10.11.22.47.17.630.0 ]--
r 100         assert testInt.s
--[ 2021.10.11.22.47.18.248.0 ]--
r 100         assert testInt.size
--[ 2021.10.11.22.47.19.664.0 ]--
r 100         assert testInt.size()
--[ 2021.10.11.22.47.20.748.0 ]--
r 100         assert testInt.size() 
--[ 2021.10.11.22.47.21.104.0 ]--
r 100         assert testInt.size() =
--[ 2021.10.11.22.47.21.194.0 ]--
r 100         assert testInt.size() ==
--[ 2021.10.11.22.47.21.913.0 ]--
r 100         assert testInt.size() == 
--[ 2021.10.11.22.47.22.064.0 ]--
r 100         assert testInt.size() == 1
--[ 2021.10.11.22.47.22.965.0 ]--
r 100         assert testInt.size() == 1;
--[ 2021.10.11.22.47.23.163.0 ]--
+ 101         
--[ 2021.10.11.22.47.23.678.0 ]--
r 101         a
--[ 2021.10.11.22.47.24.346.0 ]--
r 101         assert
--[ 2021.10.11.22.47.24.357.0 ]--
r 101         assert 
--[ 2021.10.11.22.47.25.080.0 ]--
r 101         assert t
--[ 2021.10.11.22.47.25.685.0 ]--
r 101         assert 
--[ 2021.10.11.22.47.26.248.0 ]--
r 101         assert !
--[ 2021.10.11.22.47.26.508.0 ]--
r 101         assert !t
--[ 2021.10.11.22.47.28.280.0 ]--
r 101         assert !testInt.isEmpty
--[ 2021.10.11.22.47.28.296.0 ]--
r 101         assert !testInt;
--[ 2021.10.11.22.47.28.301.0 ]--
r 101         assert !testInt.isEmpty
--[ 2021.10.11.22.47.28.305.0 ]--
r 101         assert !testInt.isEmpty()
--[ 2021.10.11.22.47.28.869.0 ]--
r 101         assert !testInt.isEmpty();
--[ 2021.10.11.22.47.30.635.0 ]--
r 98         assert testInt.size()== 0;
--[ 2021.10.11.22.47.31.794.0 ]--
r 98         assert testInt.size() == 0;
--[ 2021.10.11.22.47.36.315.0 ]--
+ 102         
--[ 2021.10.11.22.47.38.951.0 ]--
r 102         t
--[ 2021.10.11.22.47.40.208.0 ]--
r 102         testInt
--[ 2021.10.11.22.47.41.231.0 ]--
r 102         testIn
--[ 2021.10.11.22.47.41.373.0 ]--
r 102         testI
--[ 2021.10.11.22.47.41.541.0 ]--
r 102         test
--[ 2021.10.11.22.47.41.666.0 ]--
r 102         tes
--[ 2021.10.11.22.47.41.799.0 ]--
r 102         te
--[ 2021.10.11.22.47.44.129.0 ]--
r 102         tes
--[ 2021.10.11.22.47.44.974.0 ]--
r 102         testInt
--[ 2021.10.11.22.47.45.542.0 ]--
r 102         testInt.
--[ 2021.10.11.22.47.47.716.0 ]--
r 102         testInt.p
--[ 2021.10.11.22.47.48.328.0 ]--
r 102         testInt.pu
--[ 2021.10.11.22.47.48.906.0 ]--
r 102         testInt.push
--[ 2021.10.11.22.47.48.911.0 ]--
r 102         testInt.push()
--[ 2021.10.11.22.47.48.915.0 ]--
r 102         testInt.push();
--[ 2021.10.11.22.47.52.381.0 ]--
r 102         testInt.push(5);
--[ 2021.10.11.22.47.56.335.0 ]--
r 102         
--[ 2021.10.11.22.47.57.163.0 ]--
+ 100         
--[ 2021.10.11.22.47.57.645.0 ]--
r 100         testInt.push(5);
--[ 2021.10.11.22.47.59.362.0 ]--
r 103         testInt.push(5);
--[ 2021.10.11.22.48.03.409.0 ]--
+ 103         
--[ 2021.10.11.22.48.04.918.0 ]--
r 103         t
--[ 2021.10.11.22.48.05.798.0 ]--
r 103         testInt
--[ 2021.10.11.22.48.05.980.0 ]--
r 103         testInt.
--[ 2021.10.11.22.48.06.611.0 ]--
r 103         testInt.m
--[ 2021.10.11.22.48.07.263.0 ]--
r 103         testInt.minimum
--[ 2021.10.11.22.48.07.267.0 ]--
r 103         testInt.minimum()
--[ 2021.10.11.22.48.08.089.0 ]--
r 103         testInt.minimum();
--[ 2021.10.11.22.48.13.989.0 ]--
r 103         StestInt.minimum();
--[ 2021.10.11.22.48.14.242.0 ]--
r 103         SttestInt.minimum();
--[ 2021.10.11.22.48.15.008.0 ]--
r 103         StdtestInt.minimum();
--[ 2021.10.11.22.48.15.794.0 ]--
r 103         StdOuttestInt.minimum();
--[ 2021.10.11.22.48.15.805.0 ]--
r 103         StdOut testInt.minimum();
--[ 2021.10.11.22.48.15.814.0 ]--
r 103         StdOuttestInt.minimum();
--[ 2021.10.11.22.48.16.620.0 ]--
r 103         StdOut.testInt.minimum();
--[ 2021.10.11.22.48.16.819.0 ]--
r 103         StdOut.ptestInt.minimum();
--[ 2021.10.11.22.48.17.697.0 ]--
r 103         StdOut.printlntestInt.minimum();
--[ 2021.10.11.22.48.17.702.0 ]--
r 103         StdOut.println()testInt.minimum();
--[ 2021.10.11.22.48.17.706.0 ]--
r 103         StdOut.println();testInt.minimum();
--[ 2021.10.11.22.48.22.177.0 ]--
r 103         StdOut.println();;
--[ 2021.10.11.22.48.22.824.0 ]--
r 103         StdOut.println();
--[ 2021.10.11.22.48.24.159.0 ]--
r 103         StdOut.println(testInt.minimum());
--[ 2021.10.11.22.49.30.000.0 ]--
r 104         testInt.push();
--[ 2021.10.11.22.49.30.439.0 ]--
r 104         testInt.push(4);
--[ 2021.10.11.22.49.35.188.0 ]--
+ 104         
--[ 2021.10.11.22.49.35.643.0 ]--
r 104         testInt.push(4);
--[ 2021.10.11.22.49.37.482.0 ]--
r 104         testInt.push();
--[ 2021.10.11.22.49.37.837.0 ]--
r 104         testInt.push(6);
--[ 2021.10.11.22.49.42.429.0 ]--
+ 105         
--[ 2021.10.11.22.49.42.945.0 ]--
r 105         StdOut.println(testInt.minimum());
--[ 2021.10.11.22.49.43.987.0 ]--
+ 107         
--[ 2021.10.11.22.49.44.181.0 ]--
r 107         StdOut.println(testInt.minimum());
--[ 2021.10.11.22.49.50.488.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.22.53.08.119.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.22.54.58.839.0 ]--
+ 38         
--[ 2021.10.11.22.54.59.569.0 ]--
r 38         i
--[ 2021.10.11.22.54.59.709.0 ]--
r 38         if
--[ 2021.10.11.22.54.59.764.0 ]--
r 38         if 
--[ 2021.10.11.22.55.00.472.0 ]--
r 38         if *
--[ 2021.10.11.22.55.00.915.0 ]--
r 38         if 
--[ 2021.10.11.22.55.01.460.0 ]--
r 38         if ()
--[ 2021.10.11.22.55.02.118.0 ]--
r 38         if (i)
--[ 2021.10.11.22.55.02.211.0 ]--
r 38         if (is)
--[ 2021.10.11.22.55.02.828.0 ]--
r 38         if (isEmpty)
--[ 2021.10.11.22.55.02.834.0 ]--
r 38         if (isEmpty())
--[ 2021.10.11.22.55.03.555.0 ]--
r 38         if (isEmpty()) 
--[ 2021.10.11.22.55.03.920.0 ]--
r 38         if (isEmpty()) {
--[ 2021.10.11.22.55.04.073.0 ]--
+ 39 
+ 40 }
--[ 2021.10.11.22.55.04.085.0 ]--
r 40         }
--[ 2021.10.11.22.55.04.113.0 ]--
r 39             
--[ 2021.10.11.22.55.22.327.0 ]--
+ 39             first = new Node<>(item, oldfirst, oldfirst.minimumItem);
r 40         size++;
--[ 2021.10.11.22.55.22.337.0 ]--
r 40             size++;
--[ 2021.10.11.22.55.35.089.0 ]--
r 39             first = new Node<>(item);
--[ 2021.10.11.22.55.37.089.0 ]--
r 41         } 
--[ 2021.10.11.22.55.37.196.0 ]--
r 41         } e
--[ 2021.10.11.22.55.37.324.0 ]--
r 41         } el
--[ 2021.10.11.22.55.37.509.0 ]--
r 41         } els
--[ 2021.10.11.22.55.37.853.0 ]--
r 41         } else
--[ 2021.10.11.22.55.37.870.0 ]--
r 41         } else 
--[ 2021.10.11.22.55.38.625.0 ]--
r 41         } else {
--[ 2021.10.11.22.55.41.906.0 ]--
+ 48         
--[ 2021.10.11.22.55.42.358.0 ]--
r 48         }
--[ 2021.10.11.22.55.42.371.0 ]--
r 42             Node<Item> oldfirst = first;
--[ 2021.10.11.22.55.42.374.0 ]--
r 43             first = new Node<>(item, oldfirst, oldfirst.minimumItem);
--[ 2021.10.11.22.55.42.376.0 ]--
r 44             size++;
--[ 2021.10.11.22.55.42.379.0 ]--
r 45             if(oldfirst.item.compareTo(item)==1) {
--[ 2021.10.11.22.55.42.382.0 ]--
r 45             if (oldfirst.item.compareTo(item)==1) {
--[ 2021.10.11.22.55.42.384.0 ]--
r 45             if (oldfirst.item.compareTo(item) ==1) {
--[ 2021.10.11.22.55.42.386.0 ]--
r 45             if (oldfirst.item.compareTo(item) == 1) {
--[ 2021.10.11.22.55.42.388.0 ]--
r 46                 first.minimumItem = item;
--[ 2021.10.11.22.55.42.390.0 ]--
r 47             }
--[ 2021.10.11.22.56.06.181.0 ]--
+ 40             
--[ 2021.10.11.22.56.08.588.0 ]--
r 40             f
--[ 2021.10.11.22.56.08.717.0 ]--
r 40             fi
--[ 2021.10.11.22.56.09.344.0 ]--
r 40             first
--[ 2021.10.11.22.56.09.518.0 ]--
r 40             first.
--[ 2021.10.11.22.56.09.866.0 ]--
r 40             first.m
--[ 2021.10.11.22.56.10.473.0 ]--
r 40             first.minimumItem
--[ 2021.10.11.22.56.11.223.0 ]--
r 40             first.minimumItem 
--[ 2021.10.11.22.56.11.414.0 ]--
r 40             first.minimumItem =
--[ 2021.10.11.22.56.12.350.0 ]--
r 40             first.minimumItem = 
--[ 2021.10.11.22.56.12.471.0 ]--
r 40             first.minimumItem = i
--[ 2021.10.11.22.56.12.586.0 ]--
r 40             first.minimumItem = it
--[ 2021.10.11.22.56.13.444.0 ]--
r 40             first.minimumItem = item
--[ 2021.10.11.22.56.13.730.0 ]--
r 40             first.minimumItem = item;
--[ 2021.10.11.22.56.44.073.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.22.57.19.898.0 ]--
+ 114         
--[ 2021.10.11.22.57.20.541.0 ]--
+ 114         testInt.push(4);
r 115         StdOut.println(testInt.minimum());
--[ 2021.10.11.22.57.21.524.0 ]--
+ 115         StdOut.println(testInt.minimum());testInt.push(4);
--[ 2021.10.11.22.57.22.753.0 ]--
- 115
--[ 2021.10.11.22.57.28.354.0 ]--
r 114         testInt.push();
--[ 2021.10.11.22.57.28.764.0 ]--
r 114         testInt.push(3);
--[ 2021.10.11.22.57.30.381.0 ]--
+ 116         
--[ 2021.10.11.22.57.31.685.0 ]--
+ 116         testInt.push(4);
r 117         StdOut.println(testInt.minimum());
--[ 2021.10.11.22.57.33.210.0 ]--
r 116         testInt.push();
--[ 2021.10.11.22.57.33.612.0 ]--
r 116         testInt.push(2);
--[ 2021.10.11.22.57.38.424.0 ]--
+ 118         
--[ 2021.10.11.22.57.39.724.0 ]--
r 118         t
--[ 2021.10.11.22.57.39.931.0 ]--
r 118         te
--[ 2021.10.11.22.57.40.449.0 ]--
r 118         testInt
--[ 2021.10.11.22.57.40.717.0 ]--
r 118         testInt.
--[ 2021.10.11.22.57.41.328.0 ]--
r 118         testInt.p
--[ 2021.10.11.22.57.42.585.0 ]--
r 118         testInt.pop
--[ 2021.10.11.22.57.42.592.0 ]--
r 118         testInt.pop()
--[ 2021.10.11.22.57.45.005.0 ]--
r 118         testInt.pop();
--[ 2021.10.11.22.57.48.738.0 ]--
+ 119         
--[ 2021.10.11.22.57.49.256.0 ]--
r 119         StdOut.println(testInt.minimum());
--[ 2021.10.11.22.58.04.021.0 ]--
+ 120         
--[ 2021.10.11.22.58.09.608.0 ]--
+ 120         testInt.pop();
r 121         StdOut.println(testInt.minimum());
--[ 2021.10.11.22.58.11.803.0 ]--
+ 122         
--[ 2021.10.11.22.58.11.971.0 ]--
+ 122         testInt.pop();
r 123         StdOut.println(testInt.minimum());
--[ 2021.10.11.22.58.18.845.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.22.58.53.997.0 ]--
+ 112         
--[ 2021.10.11.22.58.54.211.0 ]--
+ 112         assert testInt.size() == 1;
r 113         assert !testInt.isEmpty();
--[ 2021.10.11.22.58.56.201.0 ]--
+ 116         
--[ 2021.10.11.22.58.56.430.0 ]--
+ 116         assert testInt.size() == 1;
r 117         assert !testInt.isEmpty();
--[ 2021.10.11.22.58.58.025.0 ]--
+ 120         
--[ 2021.10.11.22.58.58.203.0 ]--
+ 120         assert testInt.size() == 1;
r 121         assert !testInt.isEmpty();
--[ 2021.10.11.22.59.01.245.0 ]--
+ 124         
--[ 2021.10.11.22.59.01.506.0 ]--
+ 124         assert testInt.size() == 1;
r 125         assert !testInt.isEmpty();
--[ 2021.10.11.22.59.05.925.0 ]--
r 112         assert testInt.size() == ;
--[ 2021.10.11.22.59.06.038.0 ]--
r 112         assert testInt.size() == 2;
--[ 2021.10.11.22.59.07.740.0 ]--
r 116         assert testInt.size() == ;
--[ 2021.10.11.22.59.07.943.0 ]--
r 116         assert testInt.size() == 3;
--[ 2021.10.11.22.59.09.359.0 ]--
r 120         assert testInt.size() == ;
--[ 2021.10.11.22.59.09.502.0 ]--
r 120         assert testInt.size() == 4;
--[ 2021.10.11.22.59.10.958.0 ]--
r 124         assert testInt.size() == ;
--[ 2021.10.11.22.59.11.044.0 ]--
r 124         assert testInt.size() == 5;
--[ 2021.10.11.22.59.14.061.0 ]--
+ 128         
--[ 2021.10.11.22.59.14.417.0 ]--
+ 128         assert testInt.size() == 1;
r 129         assert !testInt.isEmpty();
--[ 2021.10.11.22.59.16.804.0 ]--
+ 132         
--[ 2021.10.11.22.59.17.123.0 ]--
+ 132         assert testInt.size() == 1;
r 133         assert !testInt.isEmpty();
--[ 2021.10.11.22.59.18.682.0 ]--
+ 136         
--[ 2021.10.11.22.59.19.590.0 ]--
+ 136         assert testInt.size() == 1;
r 137         assert !testInt.isEmpty();
--[ 2021.10.11.22.59.22.650.0 ]--
r 128         assert testInt.size() == ;
--[ 2021.10.11.22.59.22.727.0 ]--
r 128         assert testInt.size() == 4;
--[ 2021.10.11.22.59.24.533.0 ]--
r 132         assert testInt.size() == ;
--[ 2021.10.11.22.59.24.762.0 ]--
r 132         assert testInt.size() == 3;
--[ 2021.10.11.22.59.26.106.0 ]--
r 136         assert testInt.size() == ;
--[ 2021.10.11.22.59.26.277.0 ]--
r 136         assert testInt.size() == 2;
--[ 2021.10.11.22.59.30.454.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.22.59.47.412.0 ]--
+ 126         
--[ 2021.10.11.22.59.47.583.0 ]--
+ 126         
--[ 2021.10.11.22.59.49.348.0 ]--
r 126         t
--[ 2021.10.11.22.59.50.023.0 ]--
r 126         testInt
--[ 2021.10.11.22.59.50.187.0 ]--
r 126         testInt.
--[ 2021.10.11.22.59.51.090.0 ]--
r 126         testInt
--[ 2021.10.11.22.59.51.426.0 ]--
r 126         testIn
--[ 2021.10.11.22.59.51.544.0 ]--
r 126         testI
--[ 2021.10.11.22.59.51.684.0 ]--
r 126         test
--[ 2021.10.11.22.59.51.817.0 ]--
r 126         tes
--[ 2021.10.11.22.59.51.979.0 ]--
r 126         te
--[ 2021.10.11.22.59.52.096.0 ]--
r 126         t
--[ 2021.10.11.22.59.52.266.0 ]--
r 126         
--[ 2021.10.11.22.59.52.391.0 ]--
r 126         t
--[ 2021.10.11.22.59.52.540.0 ]--
r 126         te
--[ 2021.10.11.22.59.53.087.0 ]--
r 126         testInt
--[ 2021.10.11.22.59.53.234.0 ]--
r 126         testInt.
--[ 2021.10.11.22.59.53.620.0 ]--
r 126         testInt.i
--[ 2021.10.11.22.59.54.226.0 ]--
r 126         testInt.it
--[ 2021.10.11.22.59.54.690.0 ]--
r 126         testInt.iterator
--[ 2021.10.11.22.59.54.699.0 ]--
r 126         testInt.iterator()
--[ 2021.10.11.22.59.55.501.0 ]--
r 126         testInt.iterator();
--[ 2021.10.11.23.00.13.462.0 ]--
r 126         I
--[ 2021.10.11.23.00.13.708.0 ]--
r 126         It
--[ 2021.10.11.23.00.14.218.0 ]--
r 126         Item
--[ 2021.10.11.23.00.14.594.0 ]--
r 126         Ite
--[ 2021.10.11.23.00.14.848.0 ]--
r 126         Itee
--[ 2021.10.11.23.00.15.151.0 ]--
r 126         Iteer
--[ 2021.10.11.23.00.15.323.0 ]--
r 126         Itee
--[ 2021.10.11.23.00.15.445.0 ]--
r 126         Ite
--[ 2021.10.11.23.00.15.519.0 ]--
r 126         Iter
--[ 2021.10.11.23.00.16.143.0 ]--
r 126         Iterator
--[ 2021.10.11.23.00.17.298.0 ]--
r 126         Iterator<>
--[ 2021.10.11.23.00.17.958.0 ]--
r 126         Iterator<I>
--[ 2021.10.11.23.00.18.195.0 ]--
r 126         Iterator<In>
--[ 2021.10.11.23.00.18.746.0 ]--
r 126         Iterator<Int>
--[ 2021.10.11.23.00.18.928.0 ]--
r 126         Iterator<Inte>
--[ 2021.10.11.23.00.19.278.0 ]--
r 126         Iterator<Integer>
--[ 2021.10.11.23.00.20.056.0 ]--
r 126         Iterator<Integer> 
--[ 2021.10.11.23.00.20.250.0 ]--
r 126         Iterator<Integer> i
--[ 2021.10.11.23.00.20.352.0 ]--
r 126         Iterator<Integer> in
--[ 2021.10.11.23.00.20.598.0 ]--
r 126         Iterator<Integer> int
--[ 2021.10.11.23.00.20.899.0 ]--
r 126         Iterator<Integer> in
--[ 2021.10.11.23.00.21.370.0 ]--
r 126         Iterator<Integer> i
--[ 2021.10.11.23.00.21.431.0 ]--
r 126         Iterator<Integer> it
--[ 2021.10.11.23.00.21.565.0 ]--
r 126         Iterator<Integer> ite
--[ 2021.10.11.23.00.21.613.0 ]--
r 126         Iterator<Integer> iter
--[ 2021.10.11.23.00.22.087.0 ]--
r 126         Iterator<Integer> iter 
--[ 2021.10.11.23.00.22.633.0 ]--
r 126         Iterator<Integer> iter =
--[ 2021.10.11.23.00.22.762.0 ]--
r 126         Iterator<Integer> iter = 
--[ 2021.10.11.23.00.22.889.0 ]--
r 126         Iterator<Integer> iter = n
--[ 2021.10.11.23.00.23.124.0 ]--
r 126         Iterator<Integer> iter = ne
--[ 2021.10.11.23.00.23.513.0 ]--
r 126         Iterator<Integer> iter = new
--[ 2021.10.11.23.00.23.531.0 ]--
r 126         Iterator<Integer> iter = new 
--[ 2021.10.11.23.00.26.348.0 ]--
r 126         Iterator<Integer> iter = new t
--[ 2021.10.11.23.00.26.678.0 ]--
r 126         Iterator<Integer> iter = new te
--[ 2021.10.11.23.00.27.702.0 ]--
r 126         Iterator<Integer> iter = new tes
--[ 2021.10.11.23.00.27.938.0 ]--
r 126         Iterator<Integer> iter = new test
--[ 2021.10.11.23.00.29.846.0 ]--
r 126         Iterator<Integer> iter = new tes
--[ 2021.10.11.23.00.30.102.0 ]--
r 126         Iterator<Integer> iter = new te
--[ 2021.10.11.23.00.30.841.0 ]--
r 126         Iterator<Integer> iter = new tes
--[ 2021.10.11.23.00.31.184.0 ]--
r 126         Iterator<Integer> iter = new tesrt
--[ 2021.10.11.23.00.31.717.0 ]--
r 126         Iterator<Integer> iter = new tesr
--[ 2021.10.11.23.00.31.846.0 ]--
r 126         Iterator<Integer> iter = new tes
--[ 2021.10.11.23.00.31.966.0 ]--
r 126         Iterator<Integer> iter = new te
--[ 2021.10.11.23.00.32.157.0 ]--
r 126         Iterator<Integer> iter = new t
--[ 2021.10.11.23.00.32.311.0 ]--
r 126         Iterator<Integer> iter = new 
--[ 2021.10.11.23.00.34.945.0 ]--
r 126         Iterator<Integer> iter = new t
--[ 2021.10.11.23.00.35.084.0 ]--
r 126         Iterator<Integer> iter = new te
--[ 2021.10.11.23.00.36.093.0 ]--
r 126         Iterator<Integer> iter = new t
--[ 2021.10.11.23.00.36.208.0 ]--
r 126         Iterator<Integer> iter = new 
--[ 2021.10.11.23.00.36.333.0 ]--
r 126         Iterator<Integer> iter = new
--[ 2021.10.11.23.00.36.473.0 ]--
r 126         Iterator<Integer> iter = ne
--[ 2021.10.11.23.00.36.601.0 ]--
r 126         Iterator<Integer> iter = n
--[ 2021.10.11.23.00.36.750.0 ]--
r 126         Iterator<Integer> iter = 
--[ 2021.10.11.23.00.36.835.0 ]--
r 126         Iterator<Integer> iter = t
--[ 2021.10.11.23.00.36.918.0 ]--
r 126         Iterator<Integer> iter = te
--[ 2021.10.11.23.00.37.707.0 ]--
r 126         Iterator<Integer> iter = testInt
--[ 2021.10.11.23.00.37.894.0 ]--
r 126         Iterator<Integer> iter = testInt.
--[ 2021.10.11.23.00.38.576.0 ]--
r 126         Iterator<Integer> iter = testInt.iterator
--[ 2021.10.11.23.00.38.584.0 ]--
r 126         Iterator<Integer> iter = testInt.iterator()
--[ 2021.10.11.23.00.39.067.0 ]--
r 126         Iterator<Integer> iter = testInt.iterator();
--[ 2021.10.11.23.00.42.715.0 ]--
r 127         i
--[ 2021.10.11.23.00.42.767.0 ]--
r 127         it
--[ 2021.10.11.23.00.43.473.0 ]--
r 127         iter
--[ 2021.10.11.23.00.43.650.0 ]--
r 127         iter.
--[ 2021.10.11.23.00.44.574.0 ]--
r 127         iter.hasNext
--[ 2021.10.11.23.00.44.582.0 ]--
r 127         iter.hasNext()
--[ 2021.10.11.23.00.47.278.0 ]--
r 127         Siter.hasNext()
--[ 2021.10.11.23.00.47.566.0 ]--
r 127         Stiter.hasNext()
--[ 2021.10.11.23.00.48.228.0 ]--
r 127         Stditer.hasNext()
--[ 2021.10.11.23.00.49.004.0 ]--
r 127         StdOutiter.hasNext()
--[ 2021.10.11.23.00.49.017.0 ]--
r 127         StdOut iter.hasNext()
--[ 2021.10.11.23.00.49.029.0 ]--
r 127         StdOutiter.hasNext()
--[ 2021.10.11.23.00.49.171.0 ]--
r 127         StdOut.iter.hasNext()
--[ 2021.10.11.23.00.49.479.0 ]--
r 127         StdOut.piter.hasNext()
--[ 2021.10.11.23.00.49.603.0 ]--
r 127         StdOut.priter.hasNext()
--[ 2021.10.11.23.00.50.073.0 ]--
r 127         StdOut.printlniter.hasNext()
--[ 2021.10.11.23.00.50.080.0 ]--
r 127         StdOut.println()iter.hasNext()
--[ 2021.10.11.23.00.50.086.0 ]--
r 127         StdOut.println();iter.hasNext()
--[ 2021.10.11.23.00.52.420.0 ]--
r 127         StdOut.println();
--[ 2021.10.11.23.00.54.782.0 ]--
r 127         StdOut.println(iter.hasNext());
--[ 2021.10.11.23.01.08.695.0 ]--
r 127         a
--[ 2021.10.11.23.01.08.961.0 ]--
r 127         as
--[ 2021.10.11.23.01.09.103.0 ]--
r 127         ass
--[ 2021.10.11.23.01.09.472.0 ]--
r 127         assert
--[ 2021.10.11.23.01.09.491.0 ]--
r 127         assert 
--[ 2021.10.11.23.01.12.593.0 ]--
r 127         assert iter.hasNext()
--[ 2021.10.11.23.01.13.931.0 ]--
r 127         assert iter.hasNext();
--[ 2021.10.11.23.01.23.812.0 ]--
- 126
--[ 2021.10.11.23.01.26.293.0 ]--
+ 103         
--[ 2021.10.11.23.01.26.628.0 ]--
+ 103                 Iterator<Integer> iter = testInt.iterator();
r 104 
--[ 2021.10.11.23.01.26.642.0 ]--
r 103         Iterator<Integer> iter = testInt.iterator();
--[ 2021.10.11.23.01.28.785.0 ]--
r 104     
--[ 2021.10.11.23.01.29.292.0 ]--
- 104
--[ 2021.10.11.23.01.30.945.0 ]--
+ 106         
--[ 2021.10.11.23.01.31.120.0 ]--
+ 106                 Iterator<Integer> iter = testInt.iterator();
r 107 
--[ 2021.10.11.23.01.31.137.0 ]--
r 106         Iterator<Integer> iter = testInt.iterator();
--[ 2021.10.11.23.01.31.955.0 ]--
- 107
--[ 2021.10.11.23.01.32.229.0 ]--
r 106         Iterator<Integer> iter = testInt.iterator()
--[ 2021.10.11.23.01.33.015.0 ]--
r 106         Iterator<Integer> iter = testInt.iterator();
--[ 2021.10.11.23.01.33.342.0 ]--
+ 107 
--[ 2021.10.11.23.01.33.720.0 ]--
- 106
r 106         
--[ 2021.10.11.23.01.38.435.0 ]--
r 106         assert iter.hasNext();
--[ 2021.10.11.23.01.42.020.0 ]--
r 106         assert !iter.hasNext();
--[ 2021.10.11.23.01.43.028.0 ]--
+ 107         
--[ 2021.10.11.23.01.43.520.0 ]--
r 107         a
--[ 2021.10.11.23.01.44.133.0 ]--
r 107         
--[ 2021.10.11.23.01.44.778.0 ]--
r 107         i
--[ 2021.10.11.23.01.44.866.0 ]--
r 107         it
--[ 2021.10.11.23.01.45.493.0 ]--
r 107         iter
--[ 2021.10.11.23.01.45.615.0 ]--
r 107         iter.
--[ 2021.10.11.23.01.46.183.0 ]--
r 107         iter.n
--[ 2021.10.11.23.01.46.723.0 ]--
r 107         iter.next
--[ 2021.10.11.23.01.46.729.0 ]--
r 107         iter.next()
--[ 2021.10.11.23.01.47.445.0 ]--
r 107         iter.next();
--[ 2021.10.11.23.01.52.358.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.02.10.212.0 ]--
r 107 //        iter.next();
--[ 2021.10.11.23.02.13.950.0 ]--
+ 113         
--[ 2021.10.11.23.02.14.524.0 ]--
r 113         i
--[ 2021.10.11.23.02.14.761.0 ]--
r 113         it
--[ 2021.10.11.23.02.15.222.0 ]--
r 113         iter
--[ 2021.10.11.23.02.15.379.0 ]--
r 113         iter.
--[ 2021.10.11.23.02.17.948.0 ]--
r 113         iter.hasNext
--[ 2021.10.11.23.02.17.955.0 ]--
r 113         iter.hasNext()
--[ 2021.10.11.23.02.18.524.0 ]--
+ 114         
--[ 2021.10.11.23.02.18.546.0 ]--
r 114                 
--[ 2021.10.11.23.02.20.003.0 ]--
- 114
--[ 2021.10.11.23.02.20.743.0 ]--
r 113         iter.hasNext();
--[ 2021.10.11.23.02.21.042.0 ]--
+ 114         
--[ 2021.10.11.23.02.21.380.0 ]--
r 114         i
--[ 2021.10.11.23.02.21.529.0 ]--
r 114         it
--[ 2021.10.11.23.02.21.917.0 ]--
r 114         iter
--[ 2021.10.11.23.02.22.070.0 ]--
r 114         iter.
--[ 2021.10.11.23.02.22.393.0 ]--
r 114         iter.n
--[ 2021.10.11.23.02.22.546.0 ]--
r 114         iter.ne
--[ 2021.10.11.23.02.22.986.0 ]--
r 114         iter.next
--[ 2021.10.11.23.02.22.993.0 ]--
r 114         iter.next()
--[ 2021.10.11.23.02.24.199.0 ]--
r 114         iter.next();
--[ 2021.10.11.23.02.28.705.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.02.32.928.0 ]--
r 113 //        iter.hasNext();
--[ 2021.10.11.23.02.36.503.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.02.42.418.0 ]--
r 114 //        iter.next();
--[ 2021.10.11.23.02.46.383.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.03.16.837.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.03.30.101.0 ]--
+ 106         
--[ 2021.10.11.23.03.30.379.0 ]--
r 106         a
--[ 2021.10.11.23.03.31.775.0 ]--
r 106         
--[ 2021.10.11.23.03.32.969.0 ]--
r 106         t
--[ 2021.10.11.23.03.33.108.0 ]--
r 106         te
--[ 2021.10.11.23.03.33.529.0 ]--
r 106         testInt
--[ 2021.10.11.23.03.33.701.0 ]--
r 106         testInt.
--[ 2021.10.11.23.03.33.949.0 ]--
r 106         testInt.m
--[ 2021.10.11.23.03.34.571.0 ]--
r 106         testInt.minimum
--[ 2021.10.11.23.03.34.579.0 ]--
r 106         testInt.minimum()
--[ 2021.10.11.23.03.35.500.0 ]--
r 106         testInt.minimum();
--[ 2021.10.11.23.03.39.812.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.03.42.263.0 ]--
r 106 //        testInt.minimum();
--[ 2021.10.11.23.03.53.573.0 ]--
- 59
--[ 2021.10.11.23.15.19.261.0 ]--
:/src/Steque.java
r 126     
--[ 2021.10.11.23.15.19.888.0 ]--
r 126         
--[ 2021.10.11.23.15.20.375.0 ]--
+ 126         testString.push("pushThis");
+ 127         assert testString.size()==2;
r 128         assert !testString.isEmpty();
--[ 2021.10.11.23.15.22.276.0 ]--
+ 129         
--[ 2021.10.11.23.15.22.376.0 ]--
+ 129         testString.push("pushThis");
+ 130         assert testString.size()==2;
r 131         assert !testString.isEmpty();
--[ 2021.10.11.23.15.24.051.0 ]--
r 127         assert testString.size()==;
--[ 2021.10.11.23.15.24.477.0 ]--
r 127         assert testString.size()==1;
--[ 2021.10.11.23.15.26.360.0 ]--
r 126         testString.push("push1This");
--[ 2021.10.11.23.15.28.447.0 ]--
r 129         testString.push("push3This");
--[ 2021.10.11.23.15.28.897.0 ]--
r 129         testString.push("pushThis");
--[ 2021.10.11.23.15.29.112.0 ]--
r 129         testString.push("push2This");
--[ 2021.10.11.23.15.35.495.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.15.53.451.0 ]--
+ 132         
--[ 2021.10.11.23.15.53.699.0 ]--
r 132         testString.pop();
--[ 2021.10.11.23.15.53.999.0 ]--
+ 133         
--[ 2021.10.11.23.15.54.150.0 ]--
r 133         testString.pop();
--[ 2021.10.11.23.15.57.779.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.16.13.253.0 ]--
+ 132         poppedString = testString.pop();
+ 133         StdOut.println(poppedString);
r 134         poppedString = testString.pop();
r 135         StdOut.println(poppedString);
--[ 2021.10.11.23.16.16.554.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.20.39.586.0 ]--
:/src/MinimumStack.java
+ 132         
--[ 2021.10.11.23.20.44.149.0 ]--
r 132         StdOut.println(testInt.minimum());
--[ 2021.10.11.23.20.47.345.0 ]--
r 132         StdOut.println(i);
--[ 2021.10.11.23.20.47.526.0 ]--
r 132         StdOut.println(it);
--[ 2021.10.11.23.20.47.610.0 ]--
r 132         StdOut.println(ite);
--[ 2021.10.11.23.20.48.175.0 ]--
r 132         StdOut.println(iter);
--[ 2021.10.11.23.20.49.335.0 ]--
r 132         StdOut.println(iter.);
--[ 2021.10.11.23.20.49.976.0 ]--
r 132         StdOut.println(iter.N);
--[ 2021.10.11.23.20.50.970.0 ]--
r 132         StdOut.println(iter.);
--[ 2021.10.11.23.20.51.099.0 ]--
r 132         StdOut.println(iter.n);
--[ 2021.10.11.23.20.52.039.0 ]--
r 132         StdOut.println(iter.next);
--[ 2021.10.11.23.20.52.044.0 ]--
r 132         StdOut.println(iter.next());
--[ 2021.10.11.23.20.54.645.0 ]--
+ 133         
--[ 2021.10.11.23.20.54.844.0 ]--
r 133         StdOut.println(iter.next());
--[ 2021.10.11.23.20.55.396.0 ]--
+ 134         
--[ 2021.10.11.23.20.55.643.0 ]--
r 134         StdOut.println(iter.next());
--[ 2021.10.11.23.20.56.207.0 ]--
+ 135         
--[ 2021.10.11.23.20.56.370.0 ]--
r 135         StdOut.println(iter.next());
--[ 2021.10.11.23.21.00.030.0 ]--
r 135         StdOut.println(+iter.next());
--[ 2021.10.11.23.21.00.215.0 ]--
r 135         StdOut.println(+ iter.next());
--[ 2021.10.11.23.21.01.687.0 ]--
r 135         StdOut.println("+ iter.next());
--[ 2021.10.11.23.21.02.015.0 ]--
r 135         StdOut.println(""+ iter.next());
--[ 2021.10.11.23.21.02.388.0 ]--
r 135         StdOut.println("" + iter.next());
--[ 2021.10.11.23.21.03.821.0 ]--
r 135         StdOut.println("i" + iter.next());
--[ 2021.10.11.23.21.03.851.0 ]--
r 135         StdOut.println("it" + iter.next());
--[ 2021.10.11.23.21.03.979.0 ]--
r 135         StdOut.println("ite" + iter.next());
--[ 2021.10.11.23.21.04.028.0 ]--
r 135         StdOut.println("iter" + iter.next());
--[ 2021.10.11.23.21.04.148.0 ]--
r 135         StdOut.println("iter " + iter.next());
--[ 2021.10.11.23.21.10.280.0 ]--
r 134         StdOut.println("iter " + iter.next());
--[ 2021.10.11.23.21.11.581.0 ]--
r 133         StdOut.println("iter " + iter.next());
--[ 2021.10.11.23.21.12.938.0 ]--
r 132         StdOut.println("iter " + iter.next());
--[ 2021.10.11.23.21.19.893.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.21.39.303.0 ]--
+ 131         
--[ 2021.10.11.23.21.39.503.0 ]--
+ 131                 Iterator<Integer> iter = testInt.iterator();
r 132 
--[ 2021.10.11.23.21.39.541.0 ]--
r 131         Iterator<Integer> iter = testInt.iterator();
--[ 2021.10.11.23.21.40.566.0 ]--
- 132
--[ 2021.10.11.23.21.44.431.0 ]--
r 131         Iterator<Integer> iter2 = testInt.iterator();
--[ 2021.10.11.23.21.46.827.0 ]--
r 132         assert iter2.hasNext();
--[ 2021.10.11.23.21.50.414.0 ]--
r 133         StdOut.println("iter " + iter2.next());
--[ 2021.10.11.23.21.51.157.0 ]--
r 134         StdOut.println("iter " + iter2.next());
--[ 2021.10.11.23.21.51.935.0 ]--
r 135         StdOut.println("iter " + iter2.next());
--[ 2021.10.11.23.21.52.803.0 ]--
r 136         StdOut.println("iter " + iter2.next());
--[ 2021.10.11.23.21.56.175.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.29.42.772.0 ]--
r 136         StdOut.println("iter " + iter2 .next());
--[ 2021.10.11.23.29.44.916.0 ]--
r 136         StdOut.println("iter " + iter2.next());
--[ 2021.10.11.23.29.46.147.0 ]--
r 136         StdOut.println("iter " + iter2 .next());
--[ 2021.10.11.23.29.46.792.0 ]--
r 136         StdOut.println("iter " + iter2.next());
--[ 2021.10.11.23.35.29.208.0 ]--
:/src/OnePointerQueue.java
r 142         StdOut.println("iterate:" + iter.hasNText());
--[ 2021.10.11.23.35.29.316.0 ]--
r 142         StdOut.println("iterate:" + iter.hasNThext());
--[ 2021.10.11.23.35.30.898.0 ]--
r 142         StdOut.println("iterate:" + iter.hasNText());
--[ 2021.10.11.23.35.31.010.0 ]--
r 142         StdOut.println("iterate:" + iter.hasNext());
--[ 2021.10.11.23.53.56.215.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.54.00.827.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.54.05.683.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.11.23.58.30.744.0 ]--
DisposeComponent
--[ 2021.10.19.10.06.24.575.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.10.19.10.06.24.636.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$1.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/MinimumStack$1.class
/out/production/P02_DataTypes/OnePointerQueue.class
/out/production/P02_DataTypes/MinimumStack$Node.class
/out/production/P02_DataTypes/OnePointerQueue$1.class
/out/production/P02_DataTypes/OnePointerQueue$Node.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/runConfigurations.xml
/.cos265
/.DS_Store
/readme.html
/P02_DataTypes.iml
/P02_DataTypes.zip

--[ 2021.10.19.10.06.24.637.0 ]--
InitFile: /.DS_Store
   Bud1           	                                                           alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                             . i d e alg1Scomp      *�    . i d e amoDDblob      �Q��A    . i d e amodDblob      �Q��A    . i d e aph1Scomp      �     . l o glg1Scomp      t�    . l o gmoDDblob     ��Q��A    . l o gmodDblob     ��Q��A    . l o gph1Scomp      �     o u tlg1Scomp     X�    o u tmoDDblob      �Q��A    o u tmodDblob      �Q��A    o u tph1Scomp     �     s r clg1Scomp     Pt    s r cmoDDblob      �Q��A    s r cmodDblob      �Q��A    s r cph1Scomp     �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.10.19.10.06.24.638.0 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> last = null;
    public OnePointerQueue() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return size() == 0;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {
        opcount++;
        if (isEmpty()) {
            last = new Node<>(item);
        } else if (size() == 1) {
            last.next = new Node<>(item);
            Node<Item> tmp = new Node<>(last.item, last.next);
            last = last.next;
            last.next = tmp;
        } else {
            Node<Item> tmp = new Node<>(last.item, last.next);
            last.next = new Node<>(item);
            last = last.next;
            last.next = tmp.next;
        }
        size++;
    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) {
            throw new NoSuchElementException("dequeue called on empty queue\n");
        } else if (size()==1) {
            size--;
            return last.item;
        } else if (size()==2) {
            Node<Item> tmp = new Node<>(last.item, last.next);
            last.next = null;
            size--;
            return tmp.next.item;
        } else {
            Node<Item> tmp = new Node<>(last.item, last.next);
            last.next = last.next.next;
            size--;
            return tmp.next.item;
        }
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            Node<Item> p = last;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified queue while iterating");
                }
                return p.next != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified queue while iterating");
                }
                Item tmp = p.next.item;
                p = p.next;
                return tmp;
            }

            @Override
            public void remove() {}
        };
    }

    // perform unit testing here
    public static void main(String[] args) {
        OnePointerQueue<String> testString = new OnePointerQueue<>();
        assert testString.size()==0;
        assert testString.isEmpty();
        testString.enqueue("itemuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.enqueue("itemdos");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("itemtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        String dequeuedString = testString.dequeue();
        StdOut.println(dequeuedString);
        dequeuedString = testString.dequeue();
        StdOut.println(dequeuedString);
        dequeuedString = testString.dequeue();
        StdOut.println(dequeuedString);
        assert testString.size()==0;
        assert testString.isEmpty();
//
//        // fails
//        dequeuedString = testString.dequeue();
        testString.enqueue("testuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.enqueue("testdos");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("testtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        Iterator<String> iter = testString.iterator();
        StdOut.println("iterate:" + iter.next());
        StdOut.println("iterate:" + iter.hasNext());
//        testString.dequeue();
        StdOut.println("iterate:" + iter.next());
//        testString.enqueue("testcuatro");
        StdOut.println("iterate:" + iter.hasNext());
        StdOut.println("iterate:" + iter.next());
    }
}

--[ 2021.10.19.10.06.24.638.1 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            last.next = new Node<>(item);
            last = last.next;
        }
        size++;
    }

    // pushes item to top of steque
    public void push(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            Node<Item> tmp = new Node<>(item);
            tmp.next = first;
            first = tmp;
        }
        size++;
    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) {
            throw new NoSuchElementException("pop called on empty steque\n");
        }
        Item tmp = first.item;
        first = first.next;
        size--;
        return tmp;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            Node<Item> p = first;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                return p.next != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                Item tmp = p.next.item;
                p = p.next;
                return tmp;
            }

            @Override
            public void remove() {}
        };
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {
        Steque<String> testString = new Steque<>();
        assert testString.size()==0;
        assert testString.isEmpty();
        testString.enqueue("itemuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.push("pushThis");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("itemtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        String poppedString = testString.pop();
        StdOut.println(poppedString);
        poppedString = testString.pop();
        StdOut.println(poppedString);
        poppedString = testString.pop();
        StdOut.println(poppedString);
        assert testString.size()==0;
        assert testString.isEmpty();
        testString.push("push1This");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.push("push2This");
        assert testString.size()==2;
        assert !testString.isEmpty();
        poppedString = testString.pop();
        StdOut.println(poppedString);
        poppedString = testString.pop();
        StdOut.println(poppedString);
        // fails
//        poppedString = testString.pop();
        testString.enqueue("testuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.enqueue("testdos");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("testtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        Iterator<String> iter = testString.iterator();
        StdOut.println("iterate:" + iter.next());
        StdOut.println("iterate:" + iter.hasNext());
//        testString.pop();
        StdOut.println("iterate:" + iter.next());
//        testString.enqueue("testcuatro");
//        testString.push("testcuatro");
        StdOut.println("iterate:" + iter.hasNext());
//        StdOut.println("iterate:" + iter.next());
    }
}

--[ 2021.10.19.10.06.24.639.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {

    private static class Node<Item> {
        private Item item = null;
        private Node<Item> next = null;
        private Item minimumItem = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next, Item minimumItem) {
            this.item = item;
            this.next = next;
            this.minimumItem = minimumItem;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> first = null;

    public MinimumStack() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return size()==0;
    }

    // push item onto stack
    public void push(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            first.minimumItem = item;
            size++;
        } else {
            Node<Item> oldfirst = first;
            first = new Node<>(item, oldfirst, oldfirst.minimumItem);
            size++;
            if (oldfirst.item.compareTo(item) == 1) {
                first.minimumItem = item;
            }
        }
    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) throw new NoSuchElementException("pop called on empty stack");
        Item item = first.item;
        first = first.next;
        size--;
        return item;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        if (isEmpty()) {
            throw new NoSuchElementException("minimum called on empty stack\n");
        }
        return first.minimumItem;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            private Node<Item> current = first;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stack while iterating");
                }
                return current != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stack while iterating");
                }
                Item item = current.item;
                current = current.next;
                return item;
            }

            @Override
            public void remove() {}
        };
    }

    public static void main(String[] args) {
        MinimumStack<Integer> testInt = new MinimumStack<>();
        Iterator<Integer> iter = testInt.iterator();
        assert testInt.isEmpty();
        assert testInt.size() == 0;
//        testInt.minimum();
        assert !iter.hasNext();
//        iter.next();
//        testInt.pop();
        testInt.push(5);
        assert testInt.size() == 1;
        assert !testInt.isEmpty();
        StdOut.println(testInt.minimum());
//        iter.hasNext();
//        iter.next();
        testInt.push(6);
        StdOut.println(testInt.minimum());
        assert testInt.size() == 2;
        assert !testInt.isEmpty();
        testInt.push(4);
        StdOut.println(testInt.minimum());
        assert testInt.size() == 3;
        assert !testInt.isEmpty();
        testInt.push(3);
        StdOut.println(testInt.minimum());
        assert testInt.size() == 4;
        assert !testInt.isEmpty();
        testInt.push(2);
        StdOut.println(testInt.minimum());
        assert testInt.size() == 5;
        assert !testInt.isEmpty();
        Iterator<Integer> iter2 = testInt.iterator();
        assert iter2.hasNext();
        StdOut.println("iter " + iter2.next());
        StdOut.println("iter " + iter2.next());
        StdOut.println("iter " + iter2.next());
        StdOut.println("iter " + iter2.next());
        testInt.pop();
        StdOut.println(testInt.minimum());
        assert testInt.size() == 4;
        assert !testInt.isEmpty();
        testInt.pop();
        StdOut.println(testInt.minimum());
        assert testInt.size() == 3;
        assert !testInt.isEmpty();
        testInt.pop();
        StdOut.println(testInt.minimum());
        assert testInt.size() == 2;
        assert !testInt.isEmpty();
    }
}

--[ 2021.10.19.10.06.24.640.0 ]--
InitFile: /.cos265


--[ 2021.10.19.10.06.24.640.1 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.19.10.06.58.427.0 ]--
DisposeComponent
--[ 2021.10.19.10.31.49.295.0 ]--
NewLogger: P02_DataTypes
Version: 1.5
--[ 2021.10.19.10.31.49.296.0 ]--
InitTree:
/out/production/P02_DataTypes/algs4.jar
/out/production/P02_DataTypes/stdlib.jar
/out/production/P02_DataTypes/Steque.class
/out/production/P02_DataTypes/Steque$1.class
/out/production/P02_DataTypes/Steque$Node.class
/out/production/P02_DataTypes/MinimumStack.class
/out/production/P02_DataTypes/MinimumStack$1.class
/out/production/P02_DataTypes/OnePointerQueue.class
/out/production/P02_DataTypes/MinimumStack$Node.class
/out/production/P02_DataTypes/OnePointerQueue$1.class
/out/production/P02_DataTypes/OnePointerQueue$Node.class
/src/algs4.jar
/src/stdlib.jar
/src/Steque.java
/src/MinimumStack.java
/src/OnePointerQueue.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/runConfigurations.xml
/.cos265
/.DS_Store
/readme.html
/P02_DataTypes.iml
/P02_DataTypes.zip

--[ 2021.10.19.10.31.49.297.0 ]--
InitFile: /.DS_Store
   Bud1           	                                                           alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                             . i d e alg1Scomp      *�    . i d e amoDDblob      �Q��A    . i d e amodDblob      �Q��A    . i d e aph1Scomp      �     . l o glg1Scomp      t�    . l o gmoDDblob     ��Q��A    . l o gmodDblob     ��Q��A    . l o gph1Scomp      �     o u tlg1Scomp     X�    o u tmoDDblob      �Q��A    o u tmodDblob      �Q��A    o u tph1Scomp     �     s r clg1Scomp     Pt    s r cmoDDblob      �Q��A    s r cmodDblob      �Q��A    s r cph1Scomp     �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.10.19.10.31.49.297.1 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> last = null;
    public OnePointerQueue() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return size() == 0;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {
        opcount++;
        if (isEmpty()) {
            last = new Node<>(item);
        } else if (size() == 1) {
            last.next = new Node<>(item);
            Node<Item> tmp = new Node<>(last.item, last.next);
            last = last.next;
            last.next = tmp;
        } else {
            Node<Item> tmp = new Node<>(last.item, last.next);
            last.next = new Node<>(item);
            last = last.next;
            last.next = tmp.next;
        }
        size++;
    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) {
            throw new NoSuchElementException("dequeue called on empty queue\n");
        } else if (size()==1) {
            size--;
            return last.item;
        } else if (size()==2) {
            Node<Item> tmp = new Node<>(last.item, last.next);
            last.next = null;
            size--;
            return tmp.next.item;
        } else {
            Node<Item> tmp = new Node<>(last.item, last.next);
            last.next = last.next.next;
            size--;
            return tmp.next.item;
        }
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            Node<Item> p = last;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified queue while iterating");
                }
                return p.next != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified queue while iterating");
                }
                Item tmp = p.next.item;
                p = p.next;
                return tmp;
            }

            @Override
            public void remove() {}
        };
    }

    // perform unit testing here
    public static void main(String[] args) {
        OnePointerQueue<String> testString = new OnePointerQueue<>();
        assert testString.size()==0;
        assert testString.isEmpty();
        testString.enqueue("itemuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.enqueue("itemdos");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("itemtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        String dequeuedString = testString.dequeue();
        StdOut.println(dequeuedString);
        dequeuedString = testString.dequeue();
        StdOut.println(dequeuedString);
        dequeuedString = testString.dequeue();
        StdOut.println(dequeuedString);
        assert testString.size()==0;
        assert testString.isEmpty();
//
//        // fails
//        dequeuedString = testString.dequeue();
        testString.enqueue("testuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.enqueue("testdos");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("testtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        Iterator<String> iter = testString.iterator();
        StdOut.println("iterate:" + iter.next());
        StdOut.println("iterate:" + iter.hasNext());
//        testString.dequeue();
        StdOut.println("iterate:" + iter.next());
//        testString.enqueue("testcuatro");
        StdOut.println("iterate:" + iter.hasNext());
        StdOut.println("iterate:" + iter.next());
    }
}

--[ 2021.10.19.10.31.49.297.2 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            last.next = new Node<>(item);
            last = last.next;
        }
        size++;
    }

    // pushes item to top of steque
    public void push(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            Node<Item> tmp = new Node<>(item);
            tmp.next = first;
            first = tmp;
        }
        size++;
    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) {
            throw new NoSuchElementException("pop called on empty steque\n");
        }
        Item tmp = first.item;
        first = first.next;
        size--;
        return tmp;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            Node<Item> p = first;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                return p.next != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                Item tmp = p.next.item;
                p = p.next;
                return tmp;
            }

            @Override
            public void remove() {}
        };
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {
        Steque<String> testString = new Steque<>();
        assert testString.size()==0;
        assert testString.isEmpty();
        testString.enqueue("itemuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.push("pushThis");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("itemtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        String poppedString = testString.pop();
        StdOut.println(poppedString);
        poppedString = testString.pop();
        StdOut.println(poppedString);
        poppedString = testString.pop();
        StdOut.println(poppedString);
        assert testString.size()==0;
        assert testString.isEmpty();
        testString.push("push1This");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.push("push2This");
        assert testString.size()==2;
        assert !testString.isEmpty();
        poppedString = testString.pop();
        StdOut.println(poppedString);
        poppedString = testString.pop();
        StdOut.println(poppedString);
        // fails
//        poppedString = testString.pop();
        testString.enqueue("testuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.enqueue("testdos");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("testtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        Iterator<String> iter = testString.iterator();
        StdOut.println("iterate:" + iter.next());
        StdOut.println("iterate:" + iter.hasNext());
//        testString.pop();
        StdOut.println("iterate:" + iter.next());
//        testString.enqueue("testcuatro");
//        testString.push("testcuatro");
        StdOut.println("iterate:" + iter.hasNext());
//        StdOut.println("iterate:" + iter.next());
    }
}

--[ 2021.10.19.10.31.49.298.0 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {

    private static class Node<Item> {
        private Item item = null;
        private Node<Item> next = null;
        private Item minimumItem = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next, Item minimumItem) {
            this.item = item;
            this.next = next;
            this.minimumItem = minimumItem;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> first = null;

    public MinimumStack() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return size()==0;
    }

    // push item onto stack
    public void push(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            first.minimumItem = item;
            size++;
        } else {
            Node<Item> oldfirst = first;
            first = new Node<>(item, oldfirst, oldfirst.minimumItem);
            size++;
            if (oldfirst.item.compareTo(item) == 1) {
                first.minimumItem = item;
            }
        }
    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) throw new NoSuchElementException("pop called on empty stack");
        Item item = first.item;
        first = first.next;
        size--;
        return item;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        if (isEmpty()) {
            throw new NoSuchElementException("minimum called on empty stack\n");
        }
        return first.minimumItem;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            private Node<Item> current = first;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stack while iterating");
                }
                return current != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stack while iterating");
                }
                Item item = current.item;
                current = current.next;
                return item;
            }

            @Override
            public void remove() {}
        };
    }

    public static void main(String[] args) {
        MinimumStack<Integer> testInt = new MinimumStack<>();
        Iterator<Integer> iter = testInt.iterator();
        assert testInt.isEmpty();
        assert testInt.size() == 0;
//        testInt.minimum();
        assert !iter.hasNext();
//        iter.next();
//        testInt.pop();
        testInt.push(5);
        assert testInt.size() == 1;
        assert !testInt.isEmpty();
        StdOut.println(testInt.minimum());
//        iter.hasNext();
//        iter.next();
        testInt.push(6);
        StdOut.println(testInt.minimum());
        assert testInt.size() == 2;
        assert !testInt.isEmpty();
        testInt.push(4);
        StdOut.println(testInt.minimum());
        assert testInt.size() == 3;
        assert !testInt.isEmpty();
        testInt.push(3);
        StdOut.println(testInt.minimum());
        assert testInt.size() == 4;
        assert !testInt.isEmpty();
        testInt.push(2);
        StdOut.println(testInt.minimum());
        assert testInt.size() == 5;
        assert !testInt.isEmpty();
        Iterator<Integer> iter2 = testInt.iterator();
        assert iter2.hasNext();
        StdOut.println("iter " + iter2.next());
        StdOut.println("iter " + iter2.next());
        StdOut.println("iter " + iter2.next());
        StdOut.println("iter " + iter2.next());
        testInt.pop();
        StdOut.println(testInt.minimum());
        assert testInt.size() == 4;
        assert !testInt.isEmpty();
        testInt.pop();
        StdOut.println(testInt.minimum());
        assert testInt.size() == 3;
        assert !testInt.isEmpty();
        testInt.pop();
        StdOut.println(testInt.minimum());
        assert testInt.size() == 2;
        assert !testInt.isEmpty();
    }
}

--[ 2021.10.19.10.31.49.298.1 ]--
InitFile: /.cos265


--[ 2021.10.19.10.31.49.298.2 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.19.10.31.54.740.0 ]--
UpdateTree (AD): 33 0
+ /out/production/P02_DataTypes/algs4.jar
+ /out/production/P02_DataTypes/stdlib.jar
+ /out/production/P02_DataTypes/Steque.class
+ /out/production/P02_DataTypes/Steque$1.class
+ /out/production/P02_DataTypes/Steque$Node.class
+ /out/production/P02_DataTypes/MinimumStack.class
+ /out/production/P02_DataTypes/MinimumStack$1.class
+ /out/production/P02_DataTypes/OnePointerQueue.class
+ /out/production/P02_DataTypes/MinimumStack$Node.class
+ /out/production/P02_DataTypes/OnePointerQueue$1.class
+ /out/production/P02_DataTypes/OnePointerQueue$Node.class
+ /src/algs4.jar
+ /src/stdlib.jar
+ /src/Steque.java
+ /src/MinimumStack.java
+ /src/OnePointerQueue.java
+ /.log/history.log
+ /.idea/copyright/profiles_settings.xml
+ /.idea/libraries/algs4.xml
+ /.idea/libraries/stdlib.xml
+ /.idea/vcs.xml
+ /.idea/misc.xml
+ /.idea/.gitignore
+ /.idea/modules.xml
+ /.idea/compiler.xml
+ /.idea/workspace.xml
+ /.idea/uiDesigner.xml
+ /.idea/runConfigurations.xml
+ /.cos265
+ /.DS_Store
+ /readme.html
+ /P02_DataTypes.iml
+ /P02_DataTypes.zip

--[ 2021.10.19.10.31.54.740.1 ]--
InitFile: /src/Steque.java
import org.w3c.dom.traversal.NodeIterator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            last.next = new Node<>(item);
            last = last.next;
        }
        size++;
    }

    // pushes item to top of steque
    public void push(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            Node<Item> tmp = new Node<>(item);
            tmp.next = first;
            first = tmp;
        }
        size++;
    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) {
            throw new NoSuchElementException("pop called on empty steque\n");
        }
        Item tmp = first.item;
        first = first.next;
        size--;
        return tmp;
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            Node<Item> p = first;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                return p.next != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                Item tmp = p.next.item;
                p = p.next;
                return tmp;
            }

            @Override
            public void remove() {}
        };
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {
        Steque<String> testString = new Steque<>();
        assert testString.size()==0;
        assert testString.isEmpty();
        testString.enqueue("itemuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.push("pushThis");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("itemtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        String poppedString = testString.pop();
        StdOut.println(poppedString);
        poppedString = testString.pop();
        StdOut.println(poppedString);
        poppedString = testString.pop();
        StdOut.println(poppedString);
        assert testString.size()==0;
        assert testString.isEmpty();
        testString.push("push1This");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.push("push2This");
        assert testString.size()==2;
        assert !testString.isEmpty();
        poppedString = testString.pop();
        StdOut.println(poppedString);
        poppedString = testString.pop();
        StdOut.println(poppedString);
        // fails
//        poppedString = testString.pop();
        testString.enqueue("testuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.enqueue("testdos");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("testtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        Iterator<String> iter = testString.iterator();
        StdOut.println("iterate:" + iter.next());
        StdOut.println("iterate:" + iter.hasNext());
//        testString.pop();
        StdOut.println("iterate:" + iter.next());
//        testString.enqueue("testcuatro");
//        testString.push("testcuatro");
        StdOut.println("iterate:" + iter.hasNext());
//        StdOut.println("iterate:" + iter.next());
    }
}

--[ 2021.10.19.10.31.54.740.2 ]--
InitFile: /src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {

    private static class Node<Item> {
        private Item item = null;
        private Node<Item> next = null;
        private Item minimumItem = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next, Item minimumItem) {
            this.item = item;
            this.next = next;
            this.minimumItem = minimumItem;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> first = null;

    public MinimumStack() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return size()==0;
    }

    // push item onto stack
    public void push(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            first.minimumItem = item;
            size++;
        } else {
            Node<Item> oldfirst = first;
            first = new Node<>(item, oldfirst, oldfirst.minimumItem);
            size++;
            if (oldfirst.item.compareTo(item) == 1) {
                first.minimumItem = item;
            }
        }
    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) throw new NoSuchElementException("pop called on empty stack");
        Item item = first.item;
        first = first.next;
        size--;
        return item;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        if (isEmpty()) {
            throw new NoSuchElementException("minimum called on empty stack\n");
        }
        return first.minimumItem;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            private Node<Item> current = first;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stack while iterating");
                }
                return current != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stack while iterating");
                }
                Item item = current.item;
                current = current.next;
                return item;
            }

            @Override
            public void remove() {}
        };
    }

    public static void main(String[] args) {
        MinimumStack<Integer> testInt = new MinimumStack<>();
        Iterator<Integer> iter = testInt.iterator();
        assert testInt.isEmpty();
        assert testInt.size() == 0;
//        testInt.minimum();
        assert !iter.hasNext();
//        iter.next();
//        testInt.pop();
        testInt.push(5);
        assert testInt.size() == 1;
        assert !testInt.isEmpty();
        StdOut.println(testInt.minimum());
//        iter.hasNext();
//        iter.next();
        testInt.push(6);
        StdOut.println(testInt.minimum());
        assert testInt.size() == 2;
        assert !testInt.isEmpty();
        testInt.push(4);
        StdOut.println(testInt.minimum());
        assert testInt.size() == 3;
        assert !testInt.isEmpty();
        testInt.push(3);
        StdOut.println(testInt.minimum());
        assert testInt.size() == 4;
        assert !testInt.isEmpty();
        testInt.push(2);
        StdOut.println(testInt.minimum());
        assert testInt.size() == 5;
        assert !testInt.isEmpty();
        Iterator<Integer> iter2 = testInt.iterator();
        assert iter2.hasNext();
        StdOut.println("iter " + iter2.next());
        StdOut.println("iter " + iter2.next());
        StdOut.println("iter " + iter2.next());
        StdOut.println("iter " + iter2.next());
        testInt.pop();
        StdOut.println(testInt.minimum());
        assert testInt.size() == 4;
        assert !testInt.isEmpty();
        testInt.pop();
        StdOut.println(testInt.minimum());
        assert testInt.size() == 3;
        assert !testInt.isEmpty();
        testInt.pop();
        StdOut.println(testInt.minimum());
        assert testInt.size() == 2;
        assert !testInt.isEmpty();
    }
}

--[ 2021.10.19.10.31.54.740.3 ]--
InitFile: /src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> last = null;
    public OnePointerQueue() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return size() == 0;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {
        opcount++;
        if (isEmpty()) {
            last = new Node<>(item);
        } else if (size() == 1) {
            last.next = new Node<>(item);
            Node<Item> tmp = new Node<>(last.item, last.next);
            last = last.next;
            last.next = tmp;
        } else {
            Node<Item> tmp = new Node<>(last.item, last.next);
            last.next = new Node<>(item);
            last = last.next;
            last.next = tmp.next;
        }
        size++;
    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) {
            throw new NoSuchElementException("dequeue called on empty queue\n");
        } else if (size()==1) {
            size--;
            return last.item;
        } else if (size()==2) {
            Node<Item> tmp = new Node<>(last.item, last.next);
            last.next = null;
            size--;
            return tmp.next.item;
        } else {
            Node<Item> tmp = new Node<>(last.item, last.next);
            last.next = last.next.next;
            size--;
            return tmp.next.item;
        }
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            Node<Item> p = last;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified queue while iterating");
                }
                return p.next != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified queue while iterating");
                }
                Item tmp = p.next.item;
                p = p.next;
                return tmp;
            }

            @Override
            public void remove() {}
        };
    }

    // perform unit testing here
    public static void main(String[] args) {
        OnePointerQueue<String> testString = new OnePointerQueue<>();
        assert testString.size()==0;
        assert testString.isEmpty();
        testString.enqueue("itemuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.enqueue("itemdos");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("itemtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        String dequeuedString = testString.dequeue();
        StdOut.println(dequeuedString);
        dequeuedString = testString.dequeue();
        StdOut.println(dequeuedString);
        dequeuedString = testString.dequeue();
        StdOut.println(dequeuedString);
        assert testString.size()==0;
        assert testString.isEmpty();
//
//        // fails
//        dequeuedString = testString.dequeue();
        testString.enqueue("testuno");
        assert testString.size()==1;
        assert !testString.isEmpty();
        testString.enqueue("testdos");
        assert testString.size()==2;
        assert !testString.isEmpty();
        testString.enqueue("testtres");
        assert testString.size()==3;
        assert !testString.isEmpty();
        Iterator<String> iter = testString.iterator();
        StdOut.println("iterate:" + iter.next());
        StdOut.println("iterate:" + iter.hasNext());
//        testString.dequeue();
        StdOut.println("iterate:" + iter.next());
//        testString.enqueue("testcuatro");
        StdOut.println("iterate:" + iter.hasNext());
        StdOut.println("iterate:" + iter.next());
    }
}

--[ 2021.10.19.10.31.54.740.4 ]--
InitFile: /.cos265


--[ 2021.10.19.10.31.54.741.0 ]--
InitFile: /.DS_Store
   Bud1           	                                                           alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                             . i d e alg1Scomp      *�    . i d e amoDDblob      �Q��A    . i d e amodDblob      �Q��A    . i d e aph1Scomp      �     . l o glg1Scomp      t�    . l o gmoDDblob     ��Q��A    . l o gmodDblob     ��Q��A    . l o gph1Scomp      �     o u tlg1Scomp     X�    o u tmoDDblob      �Q��A    o u tmodDblob      �Q��A    o u tph1Scomp     �     s r clg1Scomp     Pt    s r cmoDDblob      �Q��A    s r cmodDblob      �Q��A    s r cph1Scomp     �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.10.19.10.31.54.741.1 ]--
InitFile: /P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.19.10.32.27.172.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.10.32.36.393.0 ]--
DisposeComponent
--[ 2021.10.19.12.02.25.220.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.06.03.839.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.06.25.650.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.07.56.323.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.08.03.930.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.08.28.566.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.08.47.040.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.11.19.706.0 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@6f13f32a
--[ 2021.10.19.12.11.29.171.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.11.36.494.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.15.57.663.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.16.26.260.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.16.36.486.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.34.22.829.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.34.53.757.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.35.15.210.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.36.03.755.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.40.05.969.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.12.43.53.792.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.14.05.23.273.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.14.08.04.611.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.19.14.09.16.904.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2021.10.20.08.58.57.019.0 ]--
DisposeComponent
