--[ 2021.09.02.13.31.14.763.0 ]--
NewLogger: Documents
Version: 1.5
--[ 2021.09.02.13.33.41.014.0 ]--
NewLogger: Documents
Version: 1.5
--[ 2021.09.02.13.35.16.398.0 ]--
NewLogger: Documents
Version: 1.5
--[ 2021.09.02.13.36.48.644.0 ]--
NewLogger: Documents
Version: 1.5
--[ 2021.09.17.08.05.32.231.0 ]--
NewLogger: Documents
Version: 1.5
--[ 2021.10.11.10.38.46.142.0 ]--
NewLogger: COS-265
Version: 1.5
--[ 2021.10.11.10.38.46.155.0 ]--
InitTree:
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/refs/remotes/origin/master
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/refs/remotes/origin/master
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/pre-merge-commit.sample
/.git/hooks/push-to-checkout.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/0e/5dbd3867edb7fe1822fdd5f7ecd1e612344282
/.git/objects/0e/bc5b2192f993430212cefc5b35a8aaff69a57c
/.git/objects/18/9e8b84cbda4f523acd9e0c331290fc4f8bbe73
/.git/objects/1d/7b2d8c3c9517efdb62c81f044fe72c70c80c00
/.git/objects/21/2d25ea506e35b64f5702dbf5f7cc0a5932c2d5
/.git/objects/24/16c8f88ef4befe6797b1f99f066372f5e7c515
/.git/objects/26/4dd6797890ea92eb74e065658d99c22fe6aa06
/.git/objects/2b/a37ea1b23be0bd37f2fa07546ff0255dab65d6
/.git/objects/30/f8b46318d9d06746b8bf28978bb90f759d21b8
/.git/objects/37/e94ee1e8ed972db3c36296e1fd6a3577365060
/.git/objects/3b/3ea0bd84a3c52f63aa049b1ef2370e1c34831a
/.git/objects/40/124fc26cf23115c03ed81aa5308bbe5754495a
/.git/objects/51/1024c2a4a6002715b1404bfbf1c666305822ce
/.git/objects/53/30239aaab3711e5fef19e93ab968e961cba2c1
/.git/objects/59/0d7d267679e6b47f75769840442c995f736ee7
/.git/objects/5d/e2f82d1f56f5ed3f840d0ea486015a7ce17898
/.git/objects/61/103aae2d703b0d5b05bf1d28aa36ab2846d2b7
/.git/objects/67/0a3a17d5c73ea733636d5d3d285733b84b0ee5
/.git/objects/6a/39baeeca83ee03b1aeb01b9aeaa71d6b37141d
/.git/objects/6a/f24eaba6763e9adddf6642922739c7c88da356
/.git/objects/6c/0b8635858dc7ad44b93df54b762707ce49eefc
/.git/objects/8a/ad8c4d85f7e2664fd55f05798738ffbff8b75b
/.git/objects/91/000b7cc3f1984e15c319aa05448eba91ac17cd
/.git/objects/95/bb6b12932687ae17cc8c91c8ce53a245751e92
/.git/objects/a2/372a53d09a723e2dde00cbf010701119606b5e
/.git/objects/a5/b6997424046f7839181fa5dc7038aa0e7e12ac
/.git/objects/a9/65fa7efce6042576fe01f03b28f61561792fe5
/.git/objects/af/9472287d7b55d5e52ea05d68866678dda8e339
/.git/objects/b7/9155f8662cbc002d46a6255ffb140a02f08684
/.git/objects/cc/1e6db909ae7ccb1c0c3971f82f155eb7b96ee4
/.git/objects/d4/54d11e5067749467c7adaee5f074521289152f
/.git/objects/e0/83dd2fc7692ae3cc3cd46e3ee0ee8d00a89e63
/.git/objects/e4/b19bde2b048a8eeece3ba8949cf93061e96968
/.git/objects/ea/491f566a82b957df84c18f82b6762208d060fa
/.git/objects/f0/6f78795d108a4e2e1dfc5a6017d674f4b1f41f
/.git/objects/f4/21fef3824ed5c8c36f1d47b6f098bbd5a742a8
/.git/objects/pack/pack-7490b8e603753d831269f1ccda016df7a9f1584f.idx
/.git/objects/pack/pack-7490b8e603753d831269f1ccda016df7a9f1584f.pack
/.git/HEAD
/.git/index
/.git/config
/.git/.DS_Store
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/packed-refs
/.log/history.log
/.idea/libraries/src.xml
/.idea/libraries/src1.xml
/.idea/libraries/src2.xml
/.idea/libraries/src3.xml
/.idea/libraries/COS_265.xml
/.idea/libraries/P01_Hex.xml
/.idea/libraries/P01_Hex1.xml
/.idea/libraries/P00_JavaIntro.xml
/.idea/libraries/P02_DataTypes.xml
/.idea/libraries/P00_JavaIntro1.xml
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/COS-265.iml
/.idea/modules.xml
/.idea/workspace.xml
/.idea/runConfigurations.xml
/P01_Hex/out/production/P01_Hex/.donotlog
/P01_Hex/out/production/P01_Hex/algs4.jar
/P01_Hex/out/production/P01_Hex/stdlib.jar
/P01_Hex/out/production/P01_Hex/HexBoard.class
/P01_Hex/out/production/P01_Hex/input-1-p1.txt
/P01_Hex/out/production/P01_Hex/input-1-p2.txt
/P01_Hex/out/production/P01_Hex/input-3-p1.txt
/P01_Hex/out/production/P01_Hex/input-3-p2.txt
/P01_Hex/out/production/P01_Hex/input-7-p2.txt
/P01_Hex/out/production/P01_Hex/input-11-p2.txt
/P01_Hex/out/production/P01_Hex/input-17-p1.txt
/P01_Hex/out/production/P01_Hex/input-random-5.txt
/P01_Hex/out/production/P01_Hex/HexBoardStats.class
/P01_Hex/out/production/P01_Hex/input-random-13.txt
/P01_Hex/out/production/P01_Hex/input-random-49.txt
/P01_Hex/out/production/P01_Hex/input-random-99.txt
/P01_Hex/out/production/P01_Hex/input-random-199.txt
/P01_Hex/out/production/P01_Hex/input-1-nowinners.txt
/P01_Hex/out/production/P01_Hex/input-zigzag-5-p1.txt
/P01_Hex/out/production/P01_Hex/input-zigzag-5-p2.txt
/P01_Hex/out/production/P01_Hex/input-zigzag-13-p1.txt
/P01_Hex/out/production/P01_Hex/input-zigzag-17-p2.txt
/P01_Hex/out/production/P01_Hex/input-zigzag-31-p2.txt
/P01_Hex/out/production/P01_Hex/HexBoardVisualizer.class
/P01_Hex/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/P01_Hex/src/algs4.jar
/P01_Hex/src/stdlib.jar
/P01_Hex/src/HexBoard.java
/P01_Hex/src/HexBoardStats.java
/P01_Hex/src/HexBoardVisualizer.java
/P01_Hex/src/InteractiveHexBoardVisualizer.java
/P01_Hex/.log/history.log
/P01_Hex/.idea/copyright/profiles_settings.xml
/P01_Hex/.idea/libraries/src.xml
/P01_Hex/.idea/libraries/algs4.xml
/P01_Hex/.idea/libraries/stdlib.xml
/P01_Hex/.idea/.name
/P01_Hex/.idea/misc.xml
/P01_Hex/.idea/.gitignore
/P01_Hex/.idea/modules.xml
/P01_Hex/.idea/compiler.xml
/P01_Hex/.idea/uiDesigner.xml
/P01_Hex/tests/.donotlog
/P01_Hex/tests/input-1-p1.txt
/P01_Hex/tests/input-1-p2.txt
/P01_Hex/tests/input-3-p1.txt
/P01_Hex/tests/input-3-p2.txt
/P01_Hex/tests/input-7-p2.txt
/P01_Hex/tests/input-11-p2.txt
/P01_Hex/tests/input-17-p1.txt
/P01_Hex/tests/input-random-5.txt
/P01_Hex/tests/input-random-13.txt
/P01_Hex/tests/input-random-49.txt
/P01_Hex/tests/input-random-99.txt
/P01_Hex/tests/input-random-199.txt
/P01_Hex/tests/input-1-nowinners.txt
/P01_Hex/tests/input-zigzag-5-p1.txt
/P01_Hex/tests/input-zigzag-5-p2.txt
/P01_Hex/tests/input-zigzag-13-p1.txt
/P01_Hex/tests/input-zigzag-17-p2.txt
/P01_Hex/tests/input-zigzag-31-p2.txt
/P01_Hex/.cos265
/P01_Hex/.DS_Store
/P01_Hex/P01_Hex.iml
/P01_Hex/P01_Hex.zip
/P01_Hex/readme.html
/P03_Sorting/src/algs4.jar
/P03_Sorting/src/stdlib.jar
/P03_Sorting/src/Bubble.java
/P03_Sorting/src/EdgeCases.java
/P03_Sorting/src/MedianOfN.java
/P03_Sorting/src/LinkedList.java
/P03_Sorting/src/DoublingTest.java
/P03_Sorting/src/QuickSortMedian.java
/P03_Sorting/src/QuickSortMedian3.java
/P03_Sorting/src/QuickSortMedian5.java
/P03_Sorting/.idea/copyright/profiles_settings.xml
/P03_Sorting/.idea/libraries/algs4.xml
/P03_Sorting/.idea/libraries/stdlib.xml
/P03_Sorting/.idea/vcs.xml
/P03_Sorting/.idea/misc.xml
/P03_Sorting/.idea/.gitignore
/P03_Sorting/.idea/modules.xml
/P03_Sorting/.idea/compiler.xml
/P03_Sorting/.idea/uiDesigner.xml
/P03_Sorting/.cos265
/P03_Sorting/readme.html
/P03_Sorting/P03_Sorting.iml
/P00_JavaIntro/out/production/P00_JavaIntro/.donotlog
/P00_JavaIntro/out/production/P00_JavaIntro/algs4.jar
/P00_JavaIntro/out/production/P00_JavaIntro/tinyT.txt
/P00_JavaIntro/out/production/P00_JavaIntro/tinyW.txt
/P00_JavaIntro/out/production/P00_JavaIntro/largeT.txt
/P00_JavaIntro/out/production/P00_JavaIntro/largeW.txt
/P00_JavaIntro/out/production/P00_JavaIntro/stdlib.jar
/P00_JavaIntro/out/production/P00_JavaIntro/HelloWorld.class
/P00_JavaIntro/out/production/P00_JavaIntro/BinarySearch.class
/P00_JavaIntro/out/production/P00_JavaIntro/BruteForceSearch.class
/P00_JavaIntro/src/algs4.jar
/P00_JavaIntro/src/stdlib.jar
/P00_JavaIntro/src/HelloWorld.java
/P00_JavaIntro/src/BinarySearch.java
/P00_JavaIntro/src/BruteForceSearch.java
/P00_JavaIntro/.log/history.log
/P00_JavaIntro/.idea/copyright/profiles_settings.xml
/P00_JavaIntro/.idea/libraries/algs4.xml
/P00_JavaIntro/.idea/libraries/stdlib.xml
/P00_JavaIntro/.idea/vcs.xml
/P00_JavaIntro/.idea/misc.xml
/P00_JavaIntro/.idea/.gitignore
/P00_JavaIntro/.idea/modules.xml
/P00_JavaIntro/.idea/compiler.xml
/P00_JavaIntro/.idea/uiDesigner.xml
/P00_JavaIntro/.idea/runConfigurations.xml
/P00_JavaIntro/tests/.donotlog
/P00_JavaIntro/tests/tinyT.txt
/P00_JavaIntro/tests/tinyW.txt
/P00_JavaIntro/tests/largeT.txt
/P00_JavaIntro/tests/largeW.txt
/P00_JavaIntro/.cos265
/P00_JavaIntro/.DS_Store
/P00_JavaIntro/readme.html
/P00_JavaIntro/P00_JavaIntro.iml
/P00_JavaIntro/P00_JavaIntro.zip
/P02_DataTypes/out/production/P02_DataTypes/algs4.jar
/P02_DataTypes/out/production/P02_DataTypes/stdlib.jar
/P02_DataTypes/out/production/P02_DataTypes/Steque.class
/P02_DataTypes/out/production/P02_DataTypes/Steque$1.class
/P02_DataTypes/out/production/P02_DataTypes/Steque$Node.class
/P02_DataTypes/out/production/P02_DataTypes/MinimumStack.class
/P02_DataTypes/out/production/P02_DataTypes/OnePointerQueue.class
/P02_DataTypes/src/algs4.jar
/P02_DataTypes/src/stdlib.jar
/P02_DataTypes/src/Steque.java
/P02_DataTypes/src/MinimumStack.java
/P02_DataTypes/src/OnePointerQueue.java
/P02_DataTypes/.log/history.log
/P02_DataTypes/.idea/copyright/profiles_settings.xml
/P02_DataTypes/.idea/libraries/algs4.xml
/P02_DataTypes/.idea/libraries/stdlib.xml
/P02_DataTypes/.idea/vcs.xml
/P02_DataTypes/.idea/misc.xml
/P02_DataTypes/.idea/.gitignore
/P02_DataTypes/.idea/modules.xml
/P02_DataTypes/.idea/compiler.xml
/P02_DataTypes/.idea/workspace.xml
/P02_DataTypes/.idea/uiDesigner.xml
/P02_DataTypes/.idea/runConfigurations.xml
/P02_DataTypes/.cos265
/P02_DataTypes/.DS_Store
/P02_DataTypes/readme.html
/P02_DataTypes/P02_DataTypes.iml
/.DS_Store
/P01_Hex.zip
/P03_Sorting.zip
/CSELogHistory.jar
/P00_JavaIntro.zip
/P02_DataTypes.zip

--[ 2021.10.11.10.38.46.156.0 ]--
InitFile: /P03_Sorting/src/QuickSortMedian5.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian5 extends QuickSortMedian {

    public static class MedianOf5 extends MedianOfN {
        public MedianOf5() {
            // tell QuickSortMedian.MedianOfN we will find the median of 5 items
            super(5);
        }

        /***********************************************************
         * Determines which index in parameter indices points to
         * the median value in parameter a
         * @param a the array containing values
         * @param indices the array containing indices into a
         * @return the index of median value
         ***********************************************************/
        public int median(Comparable[] a, int[] indices) {
            // get values at specified indices
            int i0 = indices[0];
            int i1 = indices[1];
            int i2 = indices[2];
            int i3 = indices[3];
            int i4 = indices[4];
            Comparable a0 = a[i0];
            Comparable a1 = a[i1];
            Comparable a2 = a[i2];
            Comparable a3 = a[i3];
            Comparable a4 = a[i4];

            // find median in a0,a1,a2,a3,a4, and return respective index
            // if a0 is median, return i0
            // if a1 is median, return i1
            // etc.

            return i0;
        }
    }

    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/
    public static void sort(Comparable[] a) {
        MedianOf5 median = new MedianOf5();
        QuickSortMedian.sort(a, median);
    }


    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = {0.0};
        QuickSortMedian5.sort(a);
    }
}

--[ 2021.10.11.10.38.46.156.1 ]--
InitFile: /P02_DataTypes/src/MinimumStack.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MinimumStack<Item extends Comparable> implements Iterable<Item> {
    public MinimumStack() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // push item onto stack
    public void push(Item item) {

    }

    // pop and return the top item
    public Item pop() throws NoSuchElementException {
        return null;
    }

    // returns the minimum item in constant time
    public Item minimum() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    public static void main(String[] args) {

    }
}

--[ 2021.10.11.10.38.46.157.0 ]--
InitFile: /P01_Hex/.DS_Store
   Bud1           
                                                           alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             . i d e alg1Scomp      +�    . i d e amoDDblob      �Q��A    . i d e amodDblob      �Q��A    . i d e aph1Scomp      �     . l o glg1Scomp     	:�    . l o gmoDDblob     ��Q��A    . l o gmodDblob     ��Q��A    . l o gph1Scomp     	@     o u tlg1Scomp     m�    o u tmoDDblob      �Q��A    o u tmodDblob      �Q��A    o u tph1Scomp     p     s r clg1Scomp     ��    s r cmoDDblob     ��Q��A    s r cmodDblob     ��Q��A    s r cph1Scomp     �     t e s t slg1Scomp     �    t e s t smoDDblob      �Q��A    t e s t smodDblob      �Q��A    t e s t sph1Scomp     �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.10.11.10.38.46.157.1 ]--
InitFile: /P00_JavaIntro/.cos265


--[ 2021.10.11.10.38.46.157.2 ]--
InitFile: /P03_Sorting/.cos265


--[ 2021.10.11.10.38.46.158.0 ]--
InitFile: /P03_Sorting/src/DoublingTest.java
public class DoublingTest {
    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = { 0.0 };

        Selection.sort(a);  // selection sort
        Insertion.sort(a);  // insertion sort
        Shell.sort(a);      // Shellsort
    }
}

--[ 2021.10.11.10.38.46.158.1 ]--
InitFile: /P00_JavaIntro/src/HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        StdOut.println("Hello, World!");
    }
}

--[ 2021.10.11.10.38.46.158.2 ]--
InitFile: /P02_DataTypes/.cos265


--[ 2021.10.11.10.38.46.159.0 ]--
InitFile: /P00_JavaIntro/.DS_Store
   Bud1           
                                                           alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             . i d e alg1Scomp      2#    . i d e amoDDblob      �Q��A    . i d e amodDblob      �Q��A    . i d e aph1Scomp      �     . l o glg1Scomp     ��    . l o gmoDDblob      �Q��A    . l o gmodDblob      �Q��A    . l o gph1Scomp     �     o u tlg1Scomp    �k�    o u tmoDDblob      �Q��A    o u tmodDblob      �Q��A    o u tph1Scomp    ��     s r clg1Scomp     MB    s r cmoDDblob      �Q��A    s r cmodDblob      �Q��A    s r cph1Scomp     �     t e s t slg1Scomp    ��    t e s t smoDDblob     ��Q��A    t e s t smodDblob     ��Q��A    t e s t sph1Scomp    �@                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.10.11.10.38.46.159.1 ]--
InitFile: /P00_JavaIntro/P00_JavaIntro.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.11.10.38.46.160.0 ]--
InitFile: /P03_Sorting/src/EdgeCases.java
public class EdgeCases {
    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = { 0.0 };

        Bubble.sort(a);     // bubble sort
        Selection.sort(a);  // selection sort
        Insertion.sort(a);  // insertion sort
        Shell.sort(a);      // Shellsort
        Quick.sort(a);      // quicksort
    }
}

--[ 2021.10.11.10.38.46.160.1 ]--
InitFile: /P03_Sorting/src/QuickSortMedian.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian {

    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/

    public static void sort(Comparable[] a, MedianOfN median) {
        sort(a, median, 0, a.length - 1);
    }

    // quicksort the subarray from a[lo] to a[hi]
    private static void sort(Comparable[] a, MedianOfN median, int lo, int hi) {
        if(hi <= lo) return;
        int j = partition(a, median, lo, hi);   // partition data into parts, returning pivot index
        sort(a, median, lo, j-1);   // recursively sort lower part
        sort(a, median, j+1, hi);   // recursively sort higher part
    }

    // partition the subarray a[lo..hi] so that a[lo..j-1] <= a[j] <= a[j+1..hi]
    // and return the index j.  note: v = a[j]
    private static int partition(Comparable[] a, MedianOfN median, int lo, int hi) {
        int i = lo;
        int j = hi + 1;

        int k = median.median(a, lo, hi);   // determine position of a pivot
        exch(a, lo, k);                     // move pivot to lo position
        Comparable v = a[lo];               // v is pivot value

        while(true) {

            // find item on lo to swap
            while(less(a[++i], v))
                if(i == hi) break;

            // find item on hi to swap
            while(less(v, a[--j]))
                if(j == lo) break;      // redundant since a[lo] acts as sentinel

            // check if pointers cross
            if(i >= j) break;

            exch(a, i, j);
        }

        // put partitioning item v at a[j]
        exch(a, lo, j);

        // now, a[lo .. j-1] <= a[j] <= a[j+1 .. hi]
        return j;
    }


    /***********************************************************************
     *  Helper sorting functions
     ***********************************************************************/

    // is v < w ?
    private static boolean less(Comparable v, Comparable w) {
        return (v.compareTo(w) < 0);
    }

    // exchange a[i] and a[j]
    private static void exch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }


    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {

    }
}

--[ 2021.10.11.10.38.46.161.0 ]--
InitFile: /P03_Sorting/src/QuickSortMedian3.java
/**
 * The following code is *mostly* a copy of Quick class (quick sort) from algs4.jar
 */

public class QuickSortMedian3 extends QuickSortMedian {

    public static class MedianOf3 extends MedianOfN {
        public MedianOf3() {
            // tell QuickSortMedian.MedianOfN we will find the median of 3 items
            super(3);
        }

        /***********************************************************
         * Determines which index in parameter indices points to
         * the median value in parameter a
         * @param a the array containing values
         * @param indices the array containing indices into a
         * @return the index of median value
         ***********************************************************/
        public int median(Comparable[] a, int[] indices) {
            // get values at specified indices
            int i0 = indices[0];
            int i1 = indices[1];
            int i2 = indices[2];
            Comparable a0 = a[i0];
            Comparable a1 = a[i1];
            Comparable a2 = a[i2];

            // find median in a0,a1,a2, and return respective index
            // if a0 is median, return i0
            // if a1 is median, return i1
            // if a2 is median, return i2

            return i0;
        }
    }


    /***********************************************************************
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     ***********************************************************************/
    public static void sort(Comparable[] a) {
        MedianOf3 median = new MedianOf3();
        sort(a, median);
    }

    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = {0.0};
        QuickSortMedian3.sort(a);
    }
}

--[ 2021.10.11.10.38.46.161.1 ]--
InitFile: /P02_DataTypes/.DS_Store
   Bud1           	                                                           alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                             . i d e alg1Scomp      *�    . i d e amoDDblob      �Q��A    . i d e amodDblob      �Q��A    . i d e aph1Scomp      �     . l o glg1Scomp      t�    . l o gmoDDblob     ��Q��A    . l o gmodDblob     ��Q��A    . l o gph1Scomp      �     o u tlg1Scomp     X�    o u tmoDDblob      �Q��A    o u tmodDblob      �Q��A    o u tph1Scomp     �     s r clg1Scomp     Pt    s r cmoDDblob      �Q��A    s r cmodDblob      �Q��A    s r cph1Scomp     �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.10.11.10.38.46.162.0 ]--
InitFile: /.DS_Store
   Bud1           
                                                          lg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               . g i tlg1Scomp    �:@    . g i tmoDDblob      �Q��A    . g i tmodDblob      �Q��A    . g i tph1Scomp    Ѐ     P 0 0 _ J a v a I n t r olg1Scomp    ���    P 0 0 _ J a v a I n t r omoDDblob     ��Q��A    P 0 0 _ J a v a I n t r omodDblob     ��Q��A    P 0 0 _ J a v a I n t r oph1Scomp    �`     P 0 1 _ H e xlg1Scomp     @�    P 0 1 _ H e xmoDDblob     ��Q��A    P 0 1 _ H e xmodDblob     ��Q��A    P 0 1 _ H e xph1Scomp     Cp     P 0 2 _ D a t a T y p e slg1Scomp     i�    P 0 2 _ D a t a T y p e smoDDblob     ��Q��A    P 0 2 _ D a t a T y p e smodDblob     ��Q��A    P 0 2 _ D a t a T y p e sph1Scomp     `                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--[ 2021.10.11.10.38.46.162.1 ]--
InitFile: /P03_Sorting/src/MedianOfN.java
public abstract class MedianOfN {
    private int N;
    private int[] indices;

    public MedianOfN(int N) {
        this.N = N;
        indices = new int[N];
    }

    public abstract int median(Comparable[] a, int[] indices);

    public int median(Comparable[] a, int lo, int hi) {
        // if hi and lo are "close enough", simply return lo
        if(hi - lo + 1 < N) return lo;
        // choose N random indices in [lo, hi]
        for(int i = 0; i < N; i++) indices[i] = StdRandom.uniform(lo, hi + 1);
        return median(a, indices);
    }
}

--[ 2021.10.11.10.38.46.163.0 ]--
InitFile: /P01_Hex/.cos265


--[ 2021.10.11.10.38.46.163.1 ]--
InitFile: /P00_JavaIntro/src/BinarySearch.java
import java.util.Arrays;

public class BinarySearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        int low = 0;
        int high = a.length-1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(key < a[mid]) high = mid - 1;
            else if(key > a[mid]) low = mid + 1;
            else return mid;
        }

        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();

        In in1 = new In(args[0]);
        int[] whitelist = in1.readAllInts();
        In in2 = new In(args[1]);
        int[] checklist = in2.readAllInts();
        Arrays.sort(whitelist);

        for(int i=0; i<checklist.length; i++){
            if(rank(checklist[i], whitelist) == -1) {
                System.out.print(checklist[i]);
                System.out.print(" ");
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.10.11.10.38.46.164.0 ]--
InitFile: /P02_DataTypes/src/Steque.java
import org.w3c.dom.traversal.NodeIterator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Steque<Item> implements Iterable<Item> {
    // singly-linked list
    private static class Node<Item> {
        Item item = null;
        Node<Item> next = null;
        public Node(Item item) {this.item = item;}
        public Node(Item item, Node<Item> next) {
            this.item = item;
            this.next = next;
        }
    }

    private int opcount = 0;
    private int size = 0;
    private Node<Item> first = null;
    private Node<Item> last = null;

    public Steque() { }

    // returns the number of items stored
    public int size() {
        return size;
    }

    // returns true iff steque is empty
    public boolean isEmpty() {
        return size==0;
    }

    // enqueues item to bottom of steque
    public void enqueue(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            last.next = new Node<>(item);
            last = last.next;
        }
        size++;
    }

    // pushes item to top of steque
    public void push(Item item) {
        opcount++;
        if (isEmpty()) {
            first = new Node<>(item);
            last = first;
        } else {
            Node<Item> tmp = new Node<>(item);
            tmp.next = first;
            first = tmp;
        }
        size++;
    }

    // pops and returns top item
    public Item pop() throws NoSuchElementException {
        opcount++;
        if (isEmpty()) {
            throw new NoSuchElementException("pop called on empty steque\n");
        } else {
            Item tmp = first.item;
            first = first.next;
            size++;
            return tmp;
        }
    }

    // returns new Iterator<Item> that iterates over items in steque
    @Override
    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            int frozenOpCount = opcount;
            Node<Item> p = first;

            @Override
            public boolean hasNext() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                return p.next != null;
            }

            @Override
            public Item next() {
                if (frozenOpCount != opcount) {
                    throw new ConcurrentModificationException("modified stegue while iterating");
                }
                return p.next.item;
            }

            @Override
            public void remove() {}
        };
    }

    // perform unit testing here
    public static void main(String[] args) throws NoSuchElementException {
        Steque<String> testString = new Steque<>();
        assert testString.size()==0;
        assert testString.isEmpty();
    }
}

--[ 2021.10.11.10.38.46.164.1 ]--
InitFile: /P00_JavaIntro/src/BruteForceSearch.java
import java.util.Arrays;

public class BruteForceSearch {
    public static int rank(int key, int[] a) {
        // returns the index position of key in a if it exists
        // else, returns -1
        for(int i=0; i<a.length; i++) {
            if(key==a[i]) return i;
        }
        return -1;
    }

    public static void main(String[] args) {
        // read ints from args[0] and store in whitelist
        // read ints from args[1] and store in checklist
        // print each int that is in checklist but is not in whitelist
        Stopwatch runtime = new Stopwatch();
        In in = new In(args[0]);
        int[] whitelist = in.readAllInts();

        In test = new In(args[1]);
        int[] checklist = test.readAllInts();

        for(int i=0; i<checklist.length; i++) {
            if(rank(checklist[i], whitelist) == -1) {
                StdOut.println(checklist[i]);
            }
        }

        StdOut.println("elapsed time: " + runtime.elapsedTime());
    }
}

--[ 2021.10.11.10.38.46.165.0 ]--
InitFile: /P03_Sorting/P03_Sorting.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.11.10.38.46.165.1 ]--
InitFile: /P02_DataTypes/P02_DataTypes.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.11.10.38.46.166.0 ]--
InitFile: /P03_Sorting/src/LinkedList.java
import java.util.Iterator;

public class LinkedList<Item extends Comparable<Item>> implements Iterable<Item> {
    private Node first = null;
    private int count = 0;

    private class Node {
        final Item item;    // cannot change item once it is set in constructor
        Node next;          // can change next, though

        public Node(Item i, Node n) {
            item = i;
            next = n;
        }
    }

    public LinkedList() { }

    public LinkedList(Item[] fromList) {
        for(Item item : fromList) insert(item);
    }

    public void insert(Item item) {
        first = new Node(item, first);
        count++;
    }

    public Item remove() {
        Item item = first.item;
        first = first.next;
        count--;
        return item;
    }

    public boolean isEmpty() { return count == 0; }

    public Iterator<Item> iterator() {
        return new Iterator<Item>() {
            Node current = first;

            @Override
            public boolean hasNext() {
                return current != null;
            }

            @Override
            public Item next() {
                Item item = current.item;
                current = current.next;
                return item;
            }
        };
    }

    /***********************************************************************
     * Rearranges the linked list in ascending order, using the natural order
     * and mergesort.
     ***********************************************************************/
    
    public void sort() {
    }

    /***********************************************************************
     *  main() function
     *  Place all of your unit tests here
     *  Hint: created additional functions to help organize your tests
     ***********************************************************************/

    public static void main(String[] args) {
        Double[] a = {0.0};
        LinkedList<Double> linkedlist = new LinkedList<>(a);
        linkedlist.sort();
    }
}

--[ 2021.10.11.10.38.46.167.0 ]--
InitFile: /P01_Hex/src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2021.10.11.10.38.46.167.1 ]--
InitFile: /P01_Hex/src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2021.10.11.10.38.46.168.0 ]--
InitFile: /P02_DataTypes/src/OnePointerQueue.java
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OnePointerQueue<Item> implements Iterable<Item> {
    public OnePointerQueue() {

    }

    // returns the number of items stored
    public int size() {
        return 0;
    }

    // returns true iff empty
    public boolean isEmpty() {
        return true;
    }

    // enqueue item to "back"
    public void enqueue(Item item) {

    }

    // dequeue item from "front"
    public Item dequeue() throws NoSuchElementException {
        return null;
    }

    // returns new Iterator<Item> that iterates over items
    @Override
    public Iterator<Item> iterator() {
        return null;
    }

    // perform unit testing here
    public static void main(String[] args) {

    }
}

--[ 2021.10.11.10.38.46.168.1 ]--
InitFile: /P03_Sorting/src/Bubble.java
public class Bubble {

    public static void sort(Comparable[] a) {
        boolean sorted = false;
        while(!sorted) {
            sorted = true;
            for(int i = 0; i < a.length - 1; i++)
                if(less(a[i + 1], a[i])) {
                    sorted = false;
                    exch(a, i, i + 1);
                }
        }
    }

    /***********************************************************************
     *  Helper sorting functions
     ***********************************************************************/

    // is v < w ?
    private static boolean less(Comparable v, Comparable w) {
        return (v.compareTo(w) < 0);
    }

    // exchange a[i] and a[j]
    private static void exch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }

    /***********************************************************************
     *  main() function is used to experimentally verify bubble sort works
     *  - generate a Double array
     *  - fill array with random values
     *  - sort
     *  - assert that each value is smaller than or equal to next value
     ***********************************************************************/

    public static void main(String[] args) {
        int N = 1000;
        Double[] a = new Double[N];
        for(int i = 0; i < N; i++) a[i] = StdRandom.uniform();
        Bubble.sort(a);
        for(int i = 0; i < N-1; i++) assert a[i] <= a[i+1];
    }
}

--[ 2021.10.11.10.38.46.168.2 ]--
InitFile: /P01_Hex/src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    private int[] board;
    private WeightedQuickUnionUF uf1;
    private WeightedQuickUnionUF uf2;
    private WeightedQuickUnionUF uf3;
    private int N;

    public HexBoard(int N) {
        if (N <= 0) {throw new java.lang.IllegalArgumentException("N cannot be <= 0");}
        board = new int[N*N+4];
        board[N*N+0] = 1;
        board[N*N+1] = 2;
        board[N*N+2] = 1;
        board[N*N+3] = 2;
        uf1 = new WeightedQuickUnionUF(N*N+4);
        uf2 = new WeightedQuickUnionUF(N*N+4);
        uf3 = new WeightedQuickUnionUF(N*N+4);
        this.N = N;
    }

    public int getPlayer(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return this.board[toIndex(row,col)];
    }
    
    public boolean isSet(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.board[toIndex(row, col)] == 0) { return false; }
        return true;
    }

    public boolean isOnWinningPath(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if ((uf2.connected(N*N+0, toIndex(row, col)) && uf3.connected(N*N+2, toIndex(row, col))) || (uf2.connected(N*N+1, toIndex(row, col)) && uf3.connected(N*N+3, toIndex(row, col)))) { return true; }
        return false;
    }

    public void setTile(int row, int col, int player) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        if (this.isSet(row,col)) { throw new java.lang.IllegalArgumentException("Tile is already set"); }
        this.board[toIndex(row,col)] = player;
        if (isValidHex(row+1,col) && this.board[toIndex(row+1,col)] == player) {
            uf1.union(toIndex(row,col), toIndex(row+1,col));
            uf2.union(toIndex(row,col), toIndex(row+1,col));
            uf3.union(toIndex(row,col), toIndex(row+1,col));
        }
        if (isValidHex(row-1,col) && this.board[toIndex(row-1,col)] == player) {
            uf1.union(toIndex(row,col), toIndex(row-1,col));
            uf2.union(toIndex(row,col), toIndex(row-1,col));
            uf3.union(toIndex(row,col), toIndex(row-1,col));
        }
        if (isValidHex(row,col+1) && this.board[toIndex(row,col+1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row,col+1));
            uf2.union(toIndex(row,col), toIndex(row,col+1));
            uf3.union(toIndex(row,col), toIndex(row,col+1));
        }
        if (isValidHex(row,col-1) && this.board[toIndex(row,col-1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row,col-1));
            uf2.union(toIndex(row,col), toIndex(row,col-1));
            uf3.union(toIndex(row,col), toIndex(row,col-1));
        }
        if (isValidHex(row+1,col-1) && this.board[toIndex(row+1,col-1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row+1,col-1));
            uf2.union(toIndex(row,col), toIndex(row+1,col-1));
            uf3.union(toIndex(row,col), toIndex(row+1,col-1));
        }
        if (isValidHex(row-1,col+1) && this.board[toIndex(row-1,col+1)] == player) {
            uf1.union(toIndex(row,col), toIndex(row-1,col+1));
            uf2.union(toIndex(row,col), toIndex(row-1,col+1));
            uf3.union(toIndex(row,col), toIndex(row-1,col+1));
        }
        if (player == 1) {
            if (col == 0) {
                uf1.union(toIndex(row, col),N*N+0);
                uf2.union(toIndex(row, col),N*N+0);
            } else if (col == N-1) {
                uf1.union(toIndex(row, col), N*N+2);
                uf3.union(toIndex(row, col), N*N+2);
            }
        } else if (player == 2) {
            if (row == 0) {
                uf1.union(toIndex(row, col), N*N+3);
                uf3.union(toIndex(row, col), N*N+3);
            } else if (row == N-1) {
                uf1.union(toIndex(row, col), N*N+1);
                uf2.union(toIndex(row, col), N*N+1);
            }
        }
    }

    public boolean hasPlayer1Won() {
        if (!uf1.connected(N*N+0, N*N+2)) { return false; }
        return true;
    }

    public boolean hasPlayer2Won() {
        if (!uf1.connected(N*N+1, N*N+3)) { return false; }
        return true;
    }

    public int numberOfUnsetTiles() {
        int count = 0;
        for (int row=0; row<N; row++) {
            for (int col=0; col<N; col++) {
                if (!this.isSet(row, col)) {count++;}
            }
        }
        return count;
    }

    private int toIndex(int row, int col) {
        if (!isValidHex(row, col)) { throw new java.lang.IndexOutOfBoundsException("row or col is out of range"); }
        return (row * N) + col;
    }

    private boolean isValidHex(int row, int col) {
        if (row < 0 || row >= N || col < 0 || col >= N) { return false; }
        return true;
    }
}

--[ 2021.10.11.10.38.46.169.0 ]--
InitFile: /P01_Hex/P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2021.10.11.10.38.46.169.1 ]--
InitFile: /P01_Hex/src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    private int N0 = -1;
    private int N1 = -1;
    private int T = -1;
    private double prob[];
    public HexBoardStats(int N0, int N1, int T) {
        if (N0 <= 0 || N1 < N0 || T <= 0) { throw new java.lang.IllegalArgumentException("Illegal Argument(s)"); }
        this.N0 = N0;
        this.N1 = N1;
        this.T = T;
        this.prob = new double[N1-N0+1];
        for (int i=N0; i<=N1; i++) {
            Stopwatch runtime = new Stopwatch();
            for (int j=0; j<T; j++) {
                prob[i-N0] += playAGame(i) == 1 ? 1:0;
            }
            prob[i-N0] = prob[i-N0]/T;
            StdOut.println("elapsed time for " + i + ": " + runtime.elapsedTime());
        }
    }

    public int getN0() { return this.N0; }

    public int getN1() { return this.N1; }

    public int getT() { return this.T; }

    public double getP1WinProbabilityEstimate(int n) {
        if (n < N0 || n > N1) { throw new java.lang.IndexOutOfBoundsException(""); }
        return this.prob[n-N0];
    }

    public double getP2WinProbabilityEstimate(int n) {
        return 1.0 - getP1WinProbabilityEstimate(n);
    }

    private static int playAGame(int N) {
        HexBoard board = new HexBoard(N);
        int player = 1;
        while(!board.hasPlayer1Won() && !board.hasPlayer2Won()) {
            int row = StdRandom.uniform(N);
            int col = StdRandom.uniform(N);
            if (board.isSet(row, col)) { continue; }
            board.setTile(row, col, player);
            player = player == 1 ? 2:1;
        }
        return board.hasPlayer1Won() ? 1:0;
    }

    private void printReport() {
        StdOut.println("T = " + T);
        for (int N=N0; N<=N1; N++) {
            StdOut.print("N = " + N + " ");
            StdOut.print("P1 = " + getP1WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP1WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.print("P2 = " + getP2WinProbabilityEstimate(N) + " ");
            StdOut.print("(" + getP2WinProbabilityEstimate(N)*T + ")" + " ");
            StdOut.println("");
        }
    }

    public static void main(String[] args) {
        int N0 = Integer.parseInt(args[0]);
        int N1 = Integer.parseInt(args[1]);
        int T = Integer.parseInt(args[2]);
        HexBoardStats hbs = new HexBoardStats(2,15,100000);
        hbs.printReport();
    }
}

--[ 2021.10.11.10.38.49.735.0 ]--
UpdateTree (AD): 11 0
+ /.git/objects/11/109dae0189bda7fdb8dfa002b20490f9568e57
+ /.git/objects/42/63bddd2f27353bea5719df5101dc8306b39a45
+ /.git/objects/46/fe262da0f586ba916cefcacceca7514086cd3f
+ /.git/objects/63/0f8196d62b09f5ff74b4f20eee46528348b601
+ /.git/objects/64/852a6be7f470b431c72c488257653f173c889b
+ /.git/objects/66/51e49f9fc921348c3a3dc7142d068063162c47
+ /.git/objects/94/c95bc9c02ecea6892f8edb27fbe161530f00d9
+ /.git/objects/b5/591a34b7b0d1729c18144a9fd4b3919fbdf4ef
+ /.git/objects/d6/ebd4805981b8400db3e3291c74a743fef9a824
+ /.git/objects/f0/c8f772fcecbe8045a4c7f7bc600c1b251b9994
+ /.idea/Documents.iml

--[ 2021.10.11.10.38.55.368.0 ]--
DisposeComponent
